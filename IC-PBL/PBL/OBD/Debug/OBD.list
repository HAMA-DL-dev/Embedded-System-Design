
OBD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e58c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800e720  0800e720  0001e720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebc0  0800ebc0  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebc0  0800ebc0  0001ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebc8  0800ebc8  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebc8  0800ebc8  0001ebc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebcc  0800ebcc  0001ebcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800ebd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  20000260  0800ee30  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ea4  0800ee30  00020ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cef0  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e1e  00000000  00000000  0003d180  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  00040fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  00042418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000254d3  00000000  00000000  000436f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001410d  00000000  00000000  00068bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cea23  00000000  00000000  0007ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b6f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  0014b770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e704 	.word	0x0800e704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	0800e704 	.word	0x0800e704

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000faa:	2300      	movs	r3, #0
 8000fac:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 8000fae:	2300      	movs	r3, #0
 8000fb0:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8001002:	2308      	movs	r3, #8
 8001004:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 800100a:	2300      	movs	r3, #0
 800100c:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800100e:	f000 fa0f 	bl	8001430 <MCP2515_Initialize>
 8001012:	4603      	mov	r3, r0
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <CANSPI_Initialize+0x9a>
    return false;
 800101e:	2300      	movs	r3, #0
 8001020:	e05e      	b.n	80010e0 <CANSPI_Initialize+0x158>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8001022:	f000 fa27 	bl	8001474 <MCP2515_SetConfigMode>
 8001026:	4603      	mov	r3, r0
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <CANSPI_Initialize+0xae>
    return false;
 8001032:	2300      	movs	r3, #0
 8001034:	e054      	b.n	80010e0 <CANSPI_Initialize+0x158>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	461a      	mov	r2, r3
 800103a:	2123      	movs	r1, #35	; 0x23
 800103c:	2020      	movs	r0, #32
 800103e:	f000 fac3 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8001042:	463b      	mov	r3, r7
 8001044:	461a      	mov	r2, r3
 8001046:	2127      	movs	r1, #39	; 0x27
 8001048:	2024      	movs	r0, #36	; 0x24
 800104a:	f000 fabd 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	461a      	mov	r2, r3
 8001054:	2103      	movs	r1, #3
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fab6 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	461a      	mov	r2, r3
 8001062:	2107      	movs	r1, #7
 8001064:	2004      	movs	r0, #4
 8001066:	f000 faaf 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	461a      	mov	r2, r3
 8001070:	210b      	movs	r1, #11
 8001072:	2008      	movs	r0, #8
 8001074:	f000 faa8 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	461a      	mov	r2, r3
 800107e:	2113      	movs	r1, #19
 8001080:	2010      	movs	r0, #16
 8001082:	f000 faa1 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	461a      	mov	r2, r3
 800108c:	2117      	movs	r1, #23
 800108e:	2014      	movs	r0, #20
 8001090:	f000 fa9a 	bl	80015c8 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	461a      	mov	r2, r3
 800109a:	211b      	movs	r1, #27
 800109c:	2018      	movs	r0, #24
 800109e:	f000 fa93 	bl	80015c8 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80010a2:	2104      	movs	r1, #4
 80010a4:	2060      	movs	r0, #96	; 0x60
 80010a6:	f000 fa69 	bl	800157c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80010aa:	2101      	movs	r1, #1
 80010ac:	2070      	movs	r0, #112	; 0x70
 80010ae:	f000 fa65 	bl	800157c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq								1000 0001 CNF3 0x81->0x80
  * 16tq = 2us = 500kbps
  */
  //8tq 4us	tq=0.5us
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x41);
 80010b2:	2141      	movs	r1, #65	; 0x41
 80010b4:	202a      	movs	r0, #42	; 0x2a
 80010b6:	f000 fa61 	bl	800157c <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xF1);
 80010ba:	21f1      	movs	r1, #241	; 0xf1
 80010bc:	2029      	movs	r0, #41	; 0x29
 80010be:	f000 fa5d 	bl	800157c <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x85);
 80010c2:	2185      	movs	r1, #133	; 0x85
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f000 fa59 	bl	800157c <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80010ca:	f000 f9f1 	bl	80014b0 <MCP2515_SetNormalMode>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <CANSPI_Initialize+0x156>
    return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <CANSPI_Initialize+0x158>
  
  return true;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 80010f4:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <CANSPI_Transmit+0xe8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <CANSPI_Transmit+0xe8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8001100:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <CANSPI_Transmit+0xe8>)
 8001102:	2200      	movs	r2, #0
 8001104:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <CANSPI_Transmit+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800110c:	f000 fad0 	bl	80016b0 <MCP2515_ReadStatus>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <CANSPI_Transmit+0xec>)
 8001116:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <CANSPI_Transmit+0xec>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d115      	bne.n	8001152 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6858      	ldr	r0, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <CANSPI_Transmit+0xe8>)
 8001130:	4619      	mov	r1, r3
 8001132:	f000 f928 	bl	8001386 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7a1a      	ldrb	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3309      	adds	r3, #9
 800113e:	4924      	ldr	r1, [pc, #144]	; (80011d0 <CANSPI_Transmit+0xe8>)
 8001140:	2040      	movs	r0, #64	; 0x40
 8001142:	f000 fa6d 	bl	8001620 <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8001146:	2081      	movs	r0, #129	; 0x81
 8001148:	f000 fa96 	bl	8001678 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e038      	b.n	80011c4 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <CANSPI_Transmit+0xec>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d115      	bne.n	800118c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6858      	ldr	r0, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <CANSPI_Transmit+0xe8>)
 800116a:	4619      	mov	r1, r3
 800116c:	f000 f90b 	bl	8001386 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7a1a      	ldrb	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3309      	adds	r3, #9
 8001178:	4915      	ldr	r1, [pc, #84]	; (80011d0 <CANSPI_Transmit+0xe8>)
 800117a:	2042      	movs	r0, #66	; 0x42
 800117c:	f000 fa50 	bl	8001620 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8001180:	2082      	movs	r0, #130	; 0x82
 8001182:	f000 fa79 	bl	8001678 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e01b      	b.n	80011c4 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <CANSPI_Transmit+0xec>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d114      	bne.n	80011c4 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6858      	ldr	r0, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <CANSPI_Transmit+0xe8>)
 80011a4:	4619      	mov	r1, r3
 80011a6:	f000 f8ee 	bl	8001386 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7a1a      	ldrb	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3309      	adds	r3, #9
 80011b2:	4907      	ldr	r1, [pc, #28]	; (80011d0 <CANSPI_Transmit+0xe8>)
 80011b4:	2044      	movs	r0, #68	; 0x44
 80011b6:	f000 fa33 	bl	8001620 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 80011ba:	2084      	movs	r0, #132	; 0x84
 80011bc:	f000 fa5c 	bl	8001678 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000298 	.word	0x20000298
 80011d4:	20000294 	.word	0x20000294

080011d8 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80011e4:	f000 fa82 	bl	80016ec <MCP2515_GetRxStatus>
 80011e8:	4603      	mov	r3, r0
 80011ea:	733b      	strb	r3, [r7, #12]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d066      	beq.n	80012c6 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80011f8:	7b3b      	ldrb	r3, [r7, #12]
 80011fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b40      	cmp	r3, #64	; 0x40
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2da      	uxtb	r2, r3
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2bc0      	cmp	r3, #192	; 0xc0
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	220d      	movs	r2, #13
 800122a:	4619      	mov	r1, r3
 800122c:	2090      	movs	r0, #144	; 0x90
 800122e:	f000 f981 	bl	8001534 <MCP2515_ReadRxSequence>
 8001232:	e00c      	b.n	800124e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001234:	7b3b      	ldrb	r3, [r7, #12]
 8001236:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b80      	cmp	r3, #128	; 0x80
 800123e:	d106      	bne.n	800124e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	220d      	movs	r2, #13
 8001246:	4619      	mov	r1, r3
 8001248:	2094      	movs	r0, #148	; 0x94
 800124a:	f000 f973 	bl	8001534 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	f003 0318 	and.w	r3, r3, #24
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b10      	cmp	r3, #16
 8001258:	d10c      	bne.n	8001274 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001260:	7cb8      	ldrb	r0, [r7, #18]
 8001262:	7cf9      	ldrb	r1, [r7, #19]
 8001264:	7c3a      	ldrb	r2, [r7, #16]
 8001266:	7c7b      	ldrb	r3, [r7, #17]
 8001268:	f000 f832 	bl	80012d0 <convertReg2ExtendedCANid>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	e00b      	b.n	800128c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800127a:	7c3b      	ldrb	r3, [r7, #16]
 800127c:	7c7a      	ldrb	r2, [r7, #17]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f863 	bl	800134c <convertReg2StandardCANid>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800128c:	7d3a      	ldrb	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001292:	7d7a      	ldrb	r2, [r7, #21]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001298:	7dba      	ldrb	r2, [r7, #22]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800129e:	7dfa      	ldrb	r2, [r7, #23]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80012a4:	7e3a      	ldrb	r2, [r7, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80012aa:	7e7a      	ldrb	r2, [r7, #25]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80012b0:	7eba      	ldrb	r2, [r7, #26]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80012bc:	7f3a      	ldrb	r2, [r7, #28]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	4603      	mov	r3, r0
 80012e4:	71bb      	strb	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	717b      	strb	r3, [r7, #5]
 80012ea:	4613      	mov	r3, r2
 80012ec:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80012f6:	793b      	ldrb	r3, [r7, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80012fe:	793b      	ldrb	r3, [r7, #4]
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4413      	add	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4413      	add	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001340:	697b      	ldr	r3, [r7, #20]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bc90      	pop	{r4, r7}
 800134a:	4770      	bx	lr

0800134c <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	460a      	mov	r2, r1
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	4613      	mov	r3, r2
 800135a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001366:	79bb      	ldrb	r3, [r7, #6]
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	460b      	mov	r3, r1
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d12e      	bne.n	80013fc <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f023 031f 	bic.w	r3, r3, #31
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	4413      	add	r3, r2
 80013d8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	3308      	adds	r3, #8
 80013de:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	f023 0314 	bic.w	r3, r3, #20
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80013fa:	e013      	b.n	8001424 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <MCP2515_Initialize>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);
#define false 0
#define true 1
/* MCP2515 초기화 */
_Bool MCP2515_Initialize(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <MCP2515_Initialize+0x3c>)
 800143e:	f001 ff51 	bl	80032e4 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8001442:	230a      	movs	r3, #10
 8001444:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001446:	480a      	ldr	r0, [pc, #40]	; (8001470 <MCP2515_Initialize+0x40>)
 8001448:	f005 fc11 	bl	8006c6e <HAL_SPI_GetState>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <MCP2515_Initialize+0x26>
      return true;
 8001452:	2301      	movs	r3, #1
 8001454:	e006      	b.n	8001464 <MCP2515_Initialize+0x34>
    
    loop--;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	3b01      	subs	r3, #1
 800145a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f1      	bne.n	8001446 <MCP2515_Initialize+0x16>
      
  return false;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40020400 	.word	0x40020400
 8001470:	2000029c 	.word	0x2000029c

08001474 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	200f      	movs	r0, #15
 800147e:	f000 f87d 	bl	800157c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8001482:	230a      	movs	r3, #10
 8001484:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001486:	200e      	movs	r0, #14
 8001488:	f000 f830 	bl	80014ec <MCP2515_ReadByte>
 800148c:	4603      	mov	r3, r0
 800148e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001492:	2b80      	cmp	r3, #128	; 0x80
 8001494:	d101      	bne.n	800149a <MCP2515_SetConfigMode+0x26>
      return true;
 8001496:	2301      	movs	r3, #1
 8001498:	e006      	b.n	80014a8 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	3b01      	subs	r3, #1
 800149e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1ef      	bne.n	8001486 <MCP2515_SetConfigMode+0x12>
  
  return false;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80014b6:	2100      	movs	r1, #0
 80014b8:	200f      	movs	r0, #15
 80014ba:	f000 f85f 	bl	800157c <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80014be:	230a      	movs	r3, #10
 80014c0:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80014c2:	200e      	movs	r0, #14
 80014c4:	f000 f812 	bl	80014ec <MCP2515_ReadByte>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <MCP2515_SetNormalMode+0x26>
      return true;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e006      	b.n	80014e4 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	3b01      	subs	r3, #1
 80014da:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ef      	bne.n	80014c2 <MCP2515_SetNormalMode+0x12>
  
  return false;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MCP2515_ReadByte+0x44>)
 80014fe:	f001 fef1 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8001502:	2003      	movs	r0, #3
 8001504:	f000 f910 	bl	8001728 <SPI_Tx>
  SPI_Tx(address);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f90c 	bl	8001728 <SPI_Tx>
  retVal = SPI_Rx();
 8001510:	f000 f930 	bl	8001774 <SPI_Rx>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 8001518:	2201      	movs	r2, #1
 800151a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <MCP2515_ReadByte+0x44>)
 8001520:	f001 fee0 	bl	80032e4 <HAL_GPIO_WritePin>
  
  return retVal;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020400 	.word	0x40020400

08001534 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154a:	480b      	ldr	r0, [pc, #44]	; (8001578 <MCP2515_ReadRxSequence+0x44>)
 800154c:	f001 feca 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f8e8 	bl	8001728 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	4619      	mov	r1, r3
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f000 f919 	bl	8001794 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <MCP2515_ReadRxSequence+0x44>)
 800156a:	f001 febb 	bl	80032e4 <HAL_GPIO_WritePin>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40020400 	.word	0x40020400

0800157c <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	460a      	mov	r2, r1
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	4613      	mov	r3, r2
 800158a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <MCP2515_WriteByte+0x48>)
 8001594:	f001 fea6 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001598:	2002      	movs	r0, #2
 800159a:	f000 f8c5 	bl	8001728 <SPI_Tx>
  SPI_Tx(address);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f8c1 	bl	8001728 <SPI_Tx>
  SPI_Tx(data);  
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f8bd 	bl	8001728 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MCP2515_WriteByte+0x48>)
 80015b6:	f001 fe95 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020400 	.word	0x40020400

080015c8 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	603a      	str	r2, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	460b      	mov	r3, r1
 80015d6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <MCP2515_WriteByteSequence+0x54>)
 80015e0:	f001 fe80 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80015e4:	2002      	movs	r0, #2
 80015e6:	f000 f89f 	bl	8001728 <SPI_Tx>
  SPI_Tx(startAddress);
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 f89b 	bl	8001728 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f000 f8a3 	bl	800174c <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <MCP2515_WriteByteSequence+0x54>)
 800160e:	f001 fe69 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40020400 	.word	0x40020400

08001620 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	4613      	mov	r3, r2
 8001630:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <MCP2515_LoadTxSequence+0x54>)
 800163a:	f001 fe53 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f871 	bl	8001728 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8001646:	2104      	movs	r1, #4
 8001648:	68b8      	ldr	r0, [r7, #8]
 800164a:	f000 f87f 	bl	800174c <SPI_TxBuffer>
  SPI_Tx(dlc);
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f869 	bl	8001728 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f876 	bl	800174c <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <MCP2515_LoadTxSequence+0x54>)
 8001668:	f001 fe3c 	bl	80032e4 <HAL_GPIO_WritePin>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40020400 	.word	0x40020400

08001678 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <MCP2515_RequestToSend+0x34>)
 800168a:	f001 fe2b 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f849 	bl	8001728 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <MCP2515_RequestToSend+0x34>)
 800169e:	f001 fe21 	bl	80032e4 <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020400 	.word	0x40020400

080016b0 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016bc:	480a      	ldr	r0, [pc, #40]	; (80016e8 <MCP2515_ReadStatus+0x38>)
 80016be:	f001 fe11 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 80016c2:	20a0      	movs	r0, #160	; 0xa0
 80016c4:	f000 f830 	bl	8001728 <SPI_Tx>
  retVal = SPI_Rx();
 80016c8:	f000 f854 	bl	8001774 <SPI_Rx>
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MCP2515_ReadStatus+0x38>)
 80016d8:	f001 fe04 	bl	80032e4 <HAL_GPIO_WritePin>
  
  return retVal;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40020400 	.word	0x40020400

080016ec <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	480a      	ldr	r0, [pc, #40]	; (8001724 <MCP2515_GetRxStatus+0x38>)
 80016fa:	f001 fdf3 	bl	80032e4 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80016fe:	20b0      	movs	r0, #176	; 0xb0
 8001700:	f000 f812 	bl	8001728 <SPI_Tx>
  retVal = SPI_Rx();
 8001704:	f000 f836 	bl	8001774 <SPI_Rx>
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <MCP2515_GetRxStatus+0x38>)
 8001714:	f001 fde6 	bl	80032e4 <HAL_GPIO_WritePin>
  
  return retVal;
 8001718:	79fb      	ldrb	r3, [r7, #7]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020400 	.word	0x40020400

08001728 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8001732:	1df9      	adds	r1, r7, #7
 8001734:	230a      	movs	r3, #10
 8001736:	2201      	movs	r2, #1
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <SPI_Tx+0x20>)
 800173a:	f004 feb9 	bl	80064b0 <HAL_SPI_Transmit>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000029c 	.word	0x2000029c

0800174c <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	b29a      	uxth	r2, r3
 800175c:	230a      	movs	r3, #10
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <SPI_TxBuffer+0x24>)
 8001762:	f004 fea5 	bl	80064b0 <HAL_SPI_Transmit>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000029c 	.word	0x2000029c

08001774 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800177a:	1df9      	adds	r1, r7, #7
 800177c:	230a      	movs	r3, #10
 800177e:	2201      	movs	r2, #1
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <SPI_Rx+0x1c>)
 8001782:	f004 ffc9 	bl	8006718 <HAL_SPI_Receive>
  return retVal;
 8001786:	79fb      	ldrb	r3, [r7, #7]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000029c 	.word	0x2000029c

08001794 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	230a      	movs	r3, #10
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <SPI_RxBuffer+0x24>)
 80017aa:	f004 ffb5 	bl	8006718 <HAL_SPI_Receive>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000029c 	.word	0x2000029c

080017bc <PrintString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PrintString(uint8_t * string)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen((char *)string), 0xffff);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fd03 	bl	80001d0 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <PrintString+0x28>)
 80017d6:	f005 fbb6 	bl	8006f46 <HAL_UART_Transmit>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000764 	.word	0x20000764

080017e8 <CANopen>:

char str[100]="\r\nAccess CAN\r\n";

void CANopen(void){
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
	txMessage.frame.id=0x80;//0x81
 80017ee:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <CANopen+0x1b8>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	605a      	str	r2, [r3, #4]
	txMessage.frame.idType=0x00;
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <CANopen+0x1b8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	txMessage.frame.dlc=8;
 80017fa:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <CANopen+0x1b8>)
 80017fc:	2208      	movs	r2, #8
 80017fe:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0=0x00;
 8001800:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <CANopen+0x1b8>)
 8001802:	2200      	movs	r2, #0
 8001804:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1=0x00;
 8001806:	4b66      	ldr	r3, [pc, #408]	; (80019a0 <CANopen+0x1b8>)
 8001808:	2200      	movs	r2, #0
 800180a:	729a      	strb	r2, [r3, #10]
	txMessage.frame.data2=0x00;
 800180c:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <CANopen+0x1b8>)
 800180e:	2200      	movs	r2, #0
 8001810:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3=0x00;
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <CANopen+0x1b8>)
 8001814:	2200      	movs	r2, #0
 8001816:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4=0x00;
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <CANopen+0x1b8>)
 800181a:	2200      	movs	r2, #0
 800181c:	735a      	strb	r2, [r3, #13]
	txMessage.frame.data5=0x00;
 800181e:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <CANopen+0x1b8>)
 8001820:	2200      	movs	r2, #0
 8001822:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6=0x00;
 8001824:	4b5e      	ldr	r3, [pc, #376]	; (80019a0 <CANopen+0x1b8>)
 8001826:	2200      	movs	r2, #0
 8001828:	73da      	strb	r2, [r3, #15]
	txMessage.frame.data7=0x00;
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <CANopen+0x1b8>)
 800182c:	2200      	movs	r2, #0
 800182e:	741a      	strb	r2, [r3, #16]
	CANSPI_Transmit(&txMessage);
 8001830:	485b      	ldr	r0, [pc, #364]	; (80019a0 <CANopen+0x1b8>)
 8001832:	f7ff fc59 	bl	80010e8 <CANSPI_Transmit>
	HAL_Delay(50);
 8001836:	2032      	movs	r0, #50	; 0x32
 8001838:	f001 fa86 	bl	8002d48 <HAL_Delay>

	if(CANSPI_Receive(&rxMessage))
 800183c:	4859      	ldr	r0, [pc, #356]	; (80019a4 <CANopen+0x1bc>)
 800183e:	f7ff fccb 	bl	80011d8 <CANSPI_Receive>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a1 	beq.w	800198c <CANopen+0x1a4>
	{
		uint16_t RPM_1= ((uint16_t)rxMessage.frame.data1 << 8) | rxMessage.frame.data0;
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <CANopen+0x1bc>)
 800184c:	7a9b      	ldrb	r3, [r3, #10]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <CANopen+0x1bc>)
 8001854:	7a5b      	ldrb	r3, [r3, #9]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21b      	sxth	r3, r3
 800185c:	80fb      	strh	r3, [r7, #6]
		uint16_t RPM_2= ((uint16_t)rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <CANopen+0x1bc>)
 8001860:	7b1b      	ldrb	r3, [r3, #12]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <CANopen+0x1bc>)
 8001868:	7adb      	ldrb	r3, [r3, #11]
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21b      	sxth	r3, r3
 8001870:	80bb      	strh	r3, [r7, #4]
		RPM=	((uint32_t)RPM_2 << 16) | RPM_1;
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4313      	orrs	r3, r2
 800187a:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <CANopen+0x1c0>)
 800187c:	6013      	str	r3, [r2, #0]

		// if(torque_buff!=0)PrintString("torque is not zero!\r\n");
		// TX torque doesn't work
		torque= ((uint16_t)rxMessage.frame.data7 << 8) | rxMessage.frame.data6;
 800187e:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <CANopen+0x1bc>)
 8001880:	7c1b      	ldrb	r3, [r3, #16]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <CANopen+0x1bc>)
 8001886:	7bd2      	ldrb	r2, [r2, #15]
 8001888:	4313      	orrs	r3, r2
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	4b46      	ldr	r3, [pc, #280]	; (80019ac <CANopen+0x1c4>)
 8001894:	edc3 7a00 	vstr	s15, [r3]
		temp= ((uint16_t)rxMessage.frame.data5 << 8) | rxMessage.frame.data4;
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <CANopen+0x1bc>)
 800189a:	7b9b      	ldrb	r3, [r3, #14]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	4a41      	ldr	r2, [pc, #260]	; (80019a4 <CANopen+0x1bc>)
 80018a0:	7b52      	ldrb	r2, [r2, #13]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ac:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <CANopen+0x1c8>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
		//   	uint16_t torque_buff= ((uint16_t)rxMessage.frame.data5 << 8) | rxMessage.frame.data4;
		//		uint16_t temp_buff= ((uint16_t)rxMessage.frame.data1 << 8) | rxMessage.frame.data0;

		sprintf(Rbuff,"RPM: %ld\r\n",RPM);
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <CANopen+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	493e      	ldr	r1, [pc, #248]	; (80019b4 <CANopen+0x1cc>)
 80018ba:	483f      	ldr	r0, [pc, #252]	; (80019b8 <CANopen+0x1d0>)
 80018bc:	f00a f8d4 	bl	800ba68 <siprintf>
		sprintf(Tbuff,"Torque: %.2f \r\n",(float)torque*0.1);
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <CANopen+0x1c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe3f 	bl	8000548 <__aeabi_f2d>
 80018ca:	a333      	add	r3, pc, #204	; (adr r3, 8001998 <CANopen+0x1b0>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fe92 	bl	80005f8 <__aeabi_dmul>
 80018d4:	4603      	mov	r3, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	4937      	ldr	r1, [pc, #220]	; (80019bc <CANopen+0x1d4>)
 80018de:	4838      	ldr	r0, [pc, #224]	; (80019c0 <CANopen+0x1d8>)
 80018e0:	f00a f8c2 	bl	800ba68 <siprintf>
		sprintf(TempBuff,"Temp:%.2f \r\n",temp);
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <CANopen+0x1c8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe2d 	bl	8000548 <__aeabi_f2d>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	461a      	mov	r2, r3
 80018f4:	4623      	mov	r3, r4
 80018f6:	4933      	ldr	r1, [pc, #204]	; (80019c4 <CANopen+0x1dc>)
 80018f8:	4833      	ldr	r0, [pc, #204]	; (80019c8 <CANopen+0x1e0>)
 80018fa:	f00a f8b5 	bl	800ba68 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)Rbuff, sizeof(Rbuff), 100);
 80018fe:	2364      	movs	r3, #100	; 0x64
 8001900:	2264      	movs	r2, #100	; 0x64
 8001902:	492d      	ldr	r1, [pc, #180]	; (80019b8 <CANopen+0x1d0>)
 8001904:	4831      	ldr	r0, [pc, #196]	; (80019cc <CANopen+0x1e4>)
 8001906:	f005 fb1e 	bl	8006f46 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)TempBuff, sizeof(TempBuff), 100);
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001910:	492d      	ldr	r1, [pc, #180]	; (80019c8 <CANopen+0x1e0>)
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <CANopen+0x1e4>)
 8001914:	f005 fb17 	bl	8006f46 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)Tbuff, sizeof(Tbuff), 100);
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191e:	4928      	ldr	r1, [pc, #160]	; (80019c0 <CANopen+0x1d8>)
 8001920:	482a      	ldr	r0, [pc, #168]	; (80019cc <CANopen+0x1e4>)
 8001922:	f005 fb10 	bl	8006f46 <HAL_UART_Transmit>

		if(RPM>=1000){
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <CANopen+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800192e:	d306      	bcc.n	800193e <CANopen+0x156>
			HAL_UART_Transmit(&huart2, (uint8_t*)"RPM : warning\r\n", sizeof("RPM : warning\r\n"), 100);
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	2210      	movs	r2, #16
 8001934:	4926      	ldr	r1, [pc, #152]	; (80019d0 <CANopen+0x1e8>)
 8001936:	4825      	ldr	r0, [pc, #148]	; (80019cc <CANopen+0x1e4>)
 8001938:	f005 fb05 	bl	8006f46 <HAL_UART_Transmit>
 800193c:	e005      	b.n	800194a <CANopen+0x162>
		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t*)"RPM : normal\r\n", sizeof("RPM : normal\r\n"), 100);
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	220f      	movs	r2, #15
 8001942:	4924      	ldr	r1, [pc, #144]	; (80019d4 <CANopen+0x1ec>)
 8001944:	4821      	ldr	r0, [pc, #132]	; (80019cc <CANopen+0x1e4>)
 8001946:	f005 fafe 	bl	8006f46 <HAL_UART_Transmit>
		}

		if(temp>=80){
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <CANopen+0x1c8>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80019d8 <CANopen+0x1f0>
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	db06      	blt.n	800196c <CANopen+0x184>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Temperature : over-heat\r\n", sizeof("Temperature : over-heat\r\n"), 100);
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	221a      	movs	r2, #26
 8001962:	491e      	ldr	r1, [pc, #120]	; (80019dc <CANopen+0x1f4>)
 8001964:	4819      	ldr	r0, [pc, #100]	; (80019cc <CANopen+0x1e4>)
 8001966:	f005 faee 	bl	8006f46 <HAL_UART_Transmit>
 800196a:	e005      	b.n	8001978 <CANopen+0x190>
		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Temperature : normal\r\n", sizeof("Temperature : normal\r\n"), 100);
 800196c:	2364      	movs	r3, #100	; 0x64
 800196e:	2217      	movs	r2, #23
 8001970:	491b      	ldr	r1, [pc, #108]	; (80019e0 <CANopen+0x1f8>)
 8001972:	4816      	ldr	r0, [pc, #88]	; (80019cc <CANopen+0x1e4>)
 8001974:	f005 fae7 	bl	8006f46 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), 100);
 8001978:	2364      	movs	r3, #100	; 0x64
 800197a:	2202      	movs	r2, #2
 800197c:	4919      	ldr	r1, [pc, #100]	; (80019e4 <CANopen+0x1fc>)
 800197e:	4813      	ldr	r0, [pc, #76]	; (80019cc <CANopen+0x1e4>)
 8001980:	f005 fae1 	bl	8006f46 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001988:	f001 f9de 	bl	8002d48 <HAL_Delay>
	}
//	else{
//		HAL_UART_Transmit(&huart2, (uint8_t*)"No CAN connection\r\n", sizeof("No CAN connection\r\n"), 100);
//	}
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	f3af 8000 	nop.w
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3fb99999 	.word	0x3fb99999
 80019a0:	200004f8 	.word	0x200004f8
 80019a4:	200007a4 	.word	0x200007a4
 80019a8:	200004f4 	.word	0x200004f4
 80019ac:	200004f0 	.word	0x200004f0
 80019b0:	200004ec 	.word	0x200004ec
 80019b4:	0800e720 	.word	0x0800e720
 80019b8:	20000334 	.word	0x20000334
 80019bc:	0800e72c 	.word	0x0800e72c
 80019c0:	2000060c 	.word	0x2000060c
 80019c4:	0800e73c 	.word	0x0800e73c
 80019c8:	2000050c 	.word	0x2000050c
 80019cc:	20000764 	.word	0x20000764
 80019d0:	0800e74c 	.word	0x0800e74c
 80019d4:	0800e75c 	.word	0x0800e75c
 80019d8:	42a00000 	.word	0x42a00000
 80019dc:	0800e76c 	.word	0x0800e76c
 80019e0:	0800e788 	.word	0x0800e788
 80019e4:	0800e7a0 	.word	0x0800e7a0

080019e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019ec:	f001 f93a 	bl	8002c64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019f0:	f000 f820 	bl	8001a34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019f4:	f000 f9be 	bl	8001d74 <MX_GPIO_Init>
	MX_I2C1_Init();
 80019f8:	f000 f89e 	bl	8001b38 <MX_I2C1_Init>
	MX_I2S3_Init();
 80019fc:	f000 f8ca 	bl	8001b94 <MX_I2S3_Init>
	MX_SPI1_Init();
 8001a00:	f000 f8f8 	bl	8001bf4 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8001a04:	f008 fdea 	bl	800a5dc <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 8001a08:	f000 f960 	bl	8001ccc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001a0c:	f000 f988 	bl	8001d20 <MX_USART3_UART_Init>
	MX_SPI2_Init();
 8001a10:	f000 f926 	bl	8001c60 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	CANSPI_Initialize();
 8001a14:	f7ff fab8 	bl	8000f88 <CANSPI_Initialize>
	PrintString(str);
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <main+0x48>)
 8001a1a:	f7ff fecf 	bl	80017bc <PrintString>
	WifiSetup();
 8001a1e:	f000 fe21 	bl	8002664 <WifiSetup>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001a22:	f008 fe01 	bl	800a628 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		CANopen();				// functional programming! it works well
 8001a26:	f7ff fedf 	bl	80017e8 <CANopen>
		WifiUbidots();
 8001a2a:	f000 ffc7 	bl	80029bc <WifiUbidots>
		MX_USB_HOST_Process();
 8001a2e:	e7f8      	b.n	8001a22 <main+0x3a>
 8001a30:	20000000 	.word	0x20000000

08001a34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b098      	sub	sp, #96	; 0x60
 8001a38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a3e:	2230      	movs	r2, #48	; 0x30
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f009 f90c 	bl	800ac60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <SystemClock_Config+0xfc>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <SystemClock_Config+0xfc>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <SystemClock_Config+0xfc>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <SystemClock_Config+0x100>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <SystemClock_Config+0x100>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <SystemClock_Config+0x100>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ab6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001aba:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f003 feed 	bl	80058a8 <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001ad4:	f000 fa60 	bl	8001f98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad8:	230f      	movs	r3, #15
 8001ada:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2105      	movs	r1, #5
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 f946 	bl	8005d88 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8001b02:	f000 fa49 	bl	8001f98 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b06:	2301      	movs	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 fb28 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8001b22:	f000 fa39 	bl	8001f98 <Error_Handler>
	}
}
 8001b26:	bf00      	nop
 8001b28:	3760      	adds	r7, #96	; 0x60
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000

08001b38 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_I2C1_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b44:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_I2C1_Init+0x58>)
 8001b46:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <MX_I2C1_Init+0x50>)
 8001b76:	f003 f8bf 	bl	8004cf8 <HAL_I2C_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001b80:	f000 fa0a 	bl	8001f98 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000398 	.word	0x20000398
 8001b8c:	40005400 	.word	0x40005400
 8001b90:	000186a0 	.word	0x000186a0

08001b94 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <MX_I2S3_Init+0x58>)
 8001b9c:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <MX_I2S3_Init+0x5c>)
 8001bbe:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_I2S3_Init+0x54>)
 8001bd4:	f003 f9c8 	bl	8004f68 <HAL_I2S_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 8001bde:	f000 f9db 	bl	8001f98 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200007b8 	.word	0x200007b8
 8001bec:	40003c00 	.word	0x40003c00
 8001bf0:	00017700 	.word	0x00017700

08001bf4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <MX_SPI1_Init+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c04:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_SPI1_Init+0x64>)
 8001c46:	f004 fbcf 	bl	80063e8 <HAL_SPI_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001c50:	f000 f9a2 	bl	8001f98 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000070c 	.word	0x2000070c
 8001c5c:	40013000 	.word	0x40013000

08001c60 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <MX_SPI2_Init+0x68>)
 8001c68:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c6a:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c70:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c90:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001cac:	220a      	movs	r2, #10
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_SPI2_Init+0x64>)
 8001cb2:	f004 fb99 	bl	80063e8 <HAL_SPI_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8001cbc:	f000 f96c 	bl	8001f98 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000029c 	.word	0x2000029c
 8001cc8:	40003800 	.word	0x40003800

08001ccc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <MX_USART2_UART_Init+0x50>)
 8001cd4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_USART2_UART_Init+0x4c>)
 8001d04:	f005 f8d2 	bl	8006eac <HAL_UART_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001d0e:	f000 f943 	bl	8001f98 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000764 	.word	0x20000764
 8001d1c:	40004400 	.word	0x40004400

08001d20 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <MX_USART3_UART_Init+0x50>)
 8001d28:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d30:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USART3_UART_Init+0x4c>)
 8001d58:	f005 f8a8 	bl	8006eac <HAL_UART_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001d62:	f000 f919 	bl	8001f98 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002f4 	.word	0x200002f4
 8001d70:	40004800 	.word	0x40004800

08001d74 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	4b7b      	ldr	r3, [pc, #492]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a7a      	ldr	r2, [pc, #488]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001d94:	f043 0310 	orr.w	r3, r3, #16
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b78      	ldr	r3, [pc, #480]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0310 	and.w	r3, r3, #16
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	4b74      	ldr	r3, [pc, #464]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a73      	ldr	r2, [pc, #460]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b71      	ldr	r3, [pc, #452]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b66      	ldr	r3, [pc, #408]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a65      	ldr	r2, [pc, #404]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a5e      	ldr	r2, [pc, #376]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a57      	ldr	r2, [pc, #348]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <MX_GPIO_Init+0x208>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2108      	movs	r1, #8
 8001e36:	4852      	ldr	r0, [pc, #328]	; (8001f80 <MX_GPIO_Init+0x20c>)
 8001e38:	f001 fa54 	bl	80032e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4850      	ldr	r0, [pc, #320]	; (8001f84 <MX_GPIO_Init+0x210>)
 8001e42:	f001 fa4f 	bl	80032e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4c:	484e      	ldr	r0, [pc, #312]	; (8001f88 <MX_GPIO_Init+0x214>)
 8001e4e:	f001 fa49 	bl	80032e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001e52:	2200      	movs	r2, #0
 8001e54:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e58:	484c      	ldr	r0, [pc, #304]	; (8001f8c <MX_GPIO_Init+0x218>)
 8001e5a:	f001 fa43 	bl	80032e4 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001e5e:	2308      	movs	r3, #8
 8001e60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4842      	ldr	r0, [pc, #264]	; (8001f80 <MX_GPIO_Init+0x20c>)
 8001e76:	f001 f89b 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	483c      	ldr	r0, [pc, #240]	; (8001f84 <MX_GPIO_Init+0x210>)
 8001e92:	f001 f88d 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e96:	2308      	movs	r3, #8
 8001e98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4834      	ldr	r0, [pc, #208]	; (8001f84 <MX_GPIO_Init+0x210>)
 8001eb2:	f001 f87d 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001eba:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <MX_GPIO_Init+0x21c>)
 8001ebc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4832      	ldr	r0, [pc, #200]	; (8001f94 <MX_GPIO_Init+0x220>)
 8001eca:	f001 f871 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4829      	ldr	r0, [pc, #164]	; (8001f88 <MX_GPIO_Init+0x214>)
 8001ee2:	f001 f865 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef8:	2305      	movs	r3, #5
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4821      	ldr	r0, [pc, #132]	; (8001f88 <MX_GPIO_Init+0x214>)
 8001f04:	f001 f854 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_CS_Pin */
	GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4819      	ldr	r0, [pc, #100]	; (8001f88 <MX_GPIO_Init+0x214>)
 8001f22:	f001 f845 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f26:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001f2a:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4813      	ldr	r0, [pc, #76]	; (8001f8c <MX_GPIO_Init+0x218>)
 8001f40:	f001 f836 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001f44:	2320      	movs	r3, #32
 8001f46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	480d      	ldr	r0, [pc, #52]	; (8001f8c <MX_GPIO_Init+0x218>)
 8001f58:	f001 f82a 	bl	8002fb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_GPIO_Init+0x21c>)
 8001f62:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_GPIO_Init+0x20c>)
 8001f70:	f001 f81e 	bl	8002fb0 <HAL_GPIO_Init>

}
 8001f74:	bf00      	nop
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	10120000 	.word	0x10120000
 8001f94:	40020000 	.word	0x40020000

08001f98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fe6:	2007      	movs	r0, #7
 8001fe8:	f000 ffa0 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_I2C_MspInit+0x84>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12c      	bne.n	8002074 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_I2C_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_I2C_MspInit+0x88>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_I2C_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002036:	f44f 7310 	mov.w	r3, #576	; 0x240
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203c:	2312      	movs	r3, #18
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002040:	2301      	movs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002048:	2304      	movs	r3, #4
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <HAL_I2C_MspInit+0x8c>)
 8002054:	f000 ffac 	bl	8002fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_I2C_MspInit+0x88>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_I2C_MspInit+0x88>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_I2C_MspInit+0x88>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	; 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40005400 	.word	0x40005400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_I2S_MspInit+0xc0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d14a      	bne.n	8002140 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a26      	ldr	r2, [pc, #152]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_I2S_MspInit+0xc4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80020fe:	2310      	movs	r3, #16
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800210e:	2306      	movs	r3, #6
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <HAL_I2S_MspInit+0xc8>)
 800211a:	f000 ff49 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800211e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002130:	2306      	movs	r3, #6
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4806      	ldr	r0, [pc, #24]	; (8002154 <HAL_I2S_MspInit+0xcc>)
 800213c:	f000 ff38 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40003c00 	.word	0x40003c00
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000
 8002154:	40020800 	.word	0x40020800

08002158 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08c      	sub	sp, #48	; 0x30
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a41      	ldr	r2, [pc, #260]	; (800227c <HAL_SPI_MspInit+0x124>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12c      	bne.n	80021d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_SPI_MspInit+0x128>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <HAL_SPI_MspInit+0x128>)
 8002184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_SPI_MspInit+0x128>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_SPI_MspInit+0x128>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a38      	ldr	r2, [pc, #224]	; (8002280 <HAL_SPI_MspInit+0x128>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_SPI_MspInit+0x128>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80021b2:	23e0      	movs	r3, #224	; 0xe0
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c2:	2305      	movs	r3, #5
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	482d      	ldr	r0, [pc, #180]	; (8002284 <HAL_SPI_MspInit+0x12c>)
 80021ce:	f000 feef 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021d2:	e04f      	b.n	8002274 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_SPI_MspInit+0x130>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d14a      	bne.n	8002274 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_SPI_MspInit+0x128>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_SPI_MspInit+0x128>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_SPI_MspInit+0x128>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_SPI_MspInit+0x128>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_SPI_MspInit+0x128>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_SPI_MspInit+0x128>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_SPI_MspInit+0x128>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_SPI_MspInit+0x128>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_SPI_MspInit+0x128>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002232:	2304      	movs	r3, #4
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002242:	2305      	movs	r3, #5
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	480f      	ldr	r0, [pc, #60]	; (800228c <HAL_SPI_MspInit+0x134>)
 800224e:	f000 feaf 	bl	8002fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002252:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002264:	2305      	movs	r3, #5
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4808      	ldr	r0, [pc, #32]	; (8002290 <HAL_SPI_MspInit+0x138>)
 8002270:	f000 fe9e 	bl	8002fb0 <HAL_GPIO_Init>
}
 8002274:	bf00      	nop
 8002276:	3730      	adds	r7, #48	; 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40013000 	.word	0x40013000
 8002280:	40023800 	.word	0x40023800
 8002284:	40020000 	.word	0x40020000
 8002288:	40003800 	.word	0x40003800
 800228c:	40020800 	.word	0x40020800
 8002290:	40020400 	.word	0x40020400

08002294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_UART_MspInit+0x128>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12c      	bne.n	8002310 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a40      	ldr	r2, [pc, #256]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	4b3a      	ldr	r3, [pc, #232]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a39      	ldr	r2, [pc, #228]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022ee:	230c      	movs	r3, #12
 80022f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022fe:	2307      	movs	r3, #7
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	482e      	ldr	r0, [pc, #184]	; (80023c4 <HAL_UART_MspInit+0x130>)
 800230a:	f000 fe51 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800230e:	e050      	b.n	80023b2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <HAL_UART_MspInit+0x134>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d14b      	bne.n	80023b2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_UART_MspInit+0x12c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800236e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002380:	2307      	movs	r3, #7
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <HAL_UART_MspInit+0x138>)
 800238c:	f000 fe10 	bl	8002fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023a2:	2307      	movs	r3, #7
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4808      	ldr	r0, [pc, #32]	; (80023d0 <HAL_UART_MspInit+0x13c>)
 80023ae:	f000 fdff 	bl	8002fb0 <HAL_GPIO_Init>
}
 80023b2:	bf00      	nop
 80023b4:	3730      	adds	r7, #48	; 0x30
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40004400 	.word	0x40004400
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40004800 	.word	0x40004800
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020c00 	.word	0x40020c00

080023d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <HardFault_Handler+0x4>

080023e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <MemManage_Handler+0x4>

080023ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <BusFault_Handler+0x4>

080023f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <UsageFault_Handler+0x4>

080023fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002428:	f000 fc6e 	bl	8002d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <OTG_FS_IRQHandler+0x10>)
 8002436:	f001 f9fd 	bl	8003834 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000bdc 	.word	0x20000bdc

08002444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002474:	f008 fbba 	bl	800abec <__errno>
 8002478:	4602      	mov	r2, r0
 800247a:	230c      	movs	r3, #12
 800247c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20020000 	.word	0x20020000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	2000027c 	.word	0x2000027c
 80024ac:	20000ea8 	.word	0x20000ea8

080024b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <SystemInit+0x28>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <SystemInit+0x28>)
 80024bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <SystemInit+0x28>)
 80024c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ca:	609a      	str	r2, [r3, #8]
#endif
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <my_itoa>:

#define UBIDOTS_TOKEN   "BBFF-WeWEmnH1dQ1qd8Dtbk2DzKCCIaXiKQ"
#define UBIDOTS_DEVICE  "STM32F407"

void my_itoa(uint32_t val, uint8_t* str, uint8_t len)	// integer to array
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 1; i <= len; i++)
 80024ea:	2301      	movs	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
 80024ee:	e01c      	b.n	800252a <my_itoa+0x4e>
	{
		str[len - i] = (uint8_t)((val % 10UL) + '0');
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	4b16      	ldr	r3, [pc, #88]	; (800254c <my_itoa+0x70>)
 80024f4:	fba3 2301 	umull	r2, r3, r3, r1
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	1aca      	subs	r2, r1, r3
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	79f9      	ldrb	r1, [r7, #7]
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	1acb      	subs	r3, r1, r3
 800250c:	4619      	mov	r1, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	440b      	add	r3, r1
 8002512:	3230      	adds	r2, #48	; 0x30
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
		val /= 10;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a0c      	ldr	r2, [pc, #48]	; (800254c <my_itoa+0x70>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	08db      	lsrs	r3, r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
	for (i = 1; i <= len; i++)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	3301      	adds	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
 800252a:	7dfa      	ldrb	r2, [r7, #23]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	429a      	cmp	r2, r3
 8002530:	d9de      	bls.n	80024f0 <my_itoa+0x14>
	}
	str[i - 1] = '\0';
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	3b01      	subs	r3, #1
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	cccccccd 	.word	0xcccccccd

08002550 <FloatToString>:
void FloatToString(uint8_t *str, float f, char size, char after_point) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	ed87 0a02 	vstr	s0, [r7, #8]
 800255c:	460b      	mov	r3, r1
 800255e:	71fb      	strb	r3, [r7, #7]
 8002560:	4613      	mov	r3, r2
 8002562:	71bb      	strb	r3, [r7, #6]
	int count;
	uint8_t* curr;
	int value;
	
	size++; /* to include NULL */
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	3301      	adds	r3, #1
 8002568:	71fb      	strb	r3, [r7, #7]
	value = (int)f;
 800256a:	edd7 7a02 	vldr	s15, [r7, #8]
 800256e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002572:	ee17 3a90 	vmov	r3, s15
 8002576:	617b      	str	r3, [r7, #20]
	my_itoa(value, str, size-after_point-2);
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3b02      	subs	r3, #2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	f7ff ffa7 	bl	80024dc <my_itoa>
	count = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
	curr = str;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 8002596:	e005      	b.n	80025a4 <FloatToString+0x54>
		++count;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
		++curr;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	3301      	adds	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f5      	bne.n	8002598 <FloatToString+0x48>
	}
 
	if (count + 1 >= size) {
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	db06      	blt.n	80025c4 <FloatToString+0x74>
		str[size - 1] = 0;
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4413      	add	r3, r2
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
		return;	
 80025c2:	e04b      	b.n	800265c <FloatToString+0x10c>
	}
 	
	str[count++] = '.';
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	61fa      	str	r2, [r7, #28]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	222e      	movs	r2, #46	; 0x2e
 80025d2:	701a      	strb	r2, [r3, #0]
	++curr;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
	f = f - (float)value;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80025e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ec:	edc7 7a02 	vstr	s15, [r7, #8]
 	
	while (count + 1 < size) {
 80025f0:	e00a      	b.n	8002608 <FloatToString+0xb8>
		f *= 10;
 80025f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025fe:	edc7 7a02 	vstr	s15, [r7, #8]
		++count;	
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
	while (count + 1 < size) {
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	429a      	cmp	r2, r3
 8002610:	dbef      	blt.n	80025f2 <FloatToString+0xa2>
	}
 	
	value = (int)f;
 8002612:	edd7 7a02 	vldr	s15, [r7, #8]
 8002616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261a:	ee17 3a90 	vmov	r3, s15
 800261e:	617b      	str	r3, [r7, #20]
	my_itoa(value, curr, after_point);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	79ba      	ldrb	r2, [r7, #6]
 8002624:	69b9      	ldr	r1, [r7, #24]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff58 	bl	80024dc <my_itoa>
	str[size - 1] = 0;
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	3b01      	subs	r3, #1
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
	
	count = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 800263c:	e007      	b.n	800264e <FloatToString+0xfe>
	{
		*(str + count) = ' ';
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	2220      	movs	r2, #32
 8002646:	701a      	strb	r2, [r3, #0]
		count++;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3301      	adds	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b30      	cmp	r3, #48	; 0x30
 8002658:	d0f1      	beq.n	800263e <FloatToString+0xee>
	}
	return;
 800265a:	bf00      	nop
}
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <WifiSetup>:
 
void WifiSetup(void)
{
 8002664:	b5b0      	push	{r4, r5, r7, lr}
 8002666:	b0e6      	sub	sp, #408	; 0x198
 8002668:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002670:	e00a      	b.n	8002688 <WifiSetup+0x24>
 8002672:	463a      	mov	r2, r7
 8002674:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002678:	4413      	add	r3, r2
 800267a:	2220      	movs	r2, #32
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002682:	3301      	adds	r3, #1
 8002684:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002688:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800268c:	2bc7      	cmp	r3, #199	; 0xc7
 800268e:	ddf0      	ble.n	8002672 <WifiSetup+0xe>
	strcpy((char *)string, "AT+CWMODE=3");
 8002690:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002694:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <WifiSetup+0x15c>)
 8002696:	ca07      	ldmia	r2, {r0, r1, r2}
 8002698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 800269c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fd95 	bl	80001d0 <strlen>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 80026ac:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80026b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026b4:	4413      	add	r3, r2
 80026b6:	220d      	movs	r2, #13
 80026b8:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 80026ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026be:	3301      	adds	r3, #1
 80026c0:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80026c4:	4413      	add	r3, r2
 80026c6:	220a      	movs	r2, #10
 80026c8:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 80026cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026d0:	3302      	adds	r3, #2
 80026d2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80026d6:	4413      	add	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 80026de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3302      	adds	r3, #2
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80026ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f0:	4834      	ldr	r0, [pc, #208]	; (80027c4 <WifiSetup+0x160>)
 80026f2:	f004 fc28 	bl	8006f46 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 1000);
 80026f6:	4639      	mov	r1, r7
 80026f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026fc:	2264      	movs	r2, #100	; 0x64
 80026fe:	4831      	ldr	r0, [pc, #196]	; (80027c4 <WifiSetup+0x160>)
 8002700:	f004 fcba 	bl	8007078 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 8002704:	4639      	mov	r1, r7
 8002706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800270a:	2264      	movs	r2, #100	; 0x64
 800270c:	482e      	ldr	r0, [pc, #184]	; (80027c8 <WifiSetup+0x164>)
 800270e:	f004 fc1a 	bl	8006f46 <HAL_UART_Transmit>
	string[0] = 0x0D;
 8002712:	230d      	movs	r3, #13
 8002714:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8002718:	230a      	movs	r3, #10
 800271a:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 800271e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002726:	2202      	movs	r2, #2
 8002728:	4827      	ldr	r0, [pc, #156]	; (80027c8 <WifiSetup+0x164>)
 800272a:	f004 fc0c 	bl	8006f46 <HAL_UART_Transmit>
	
	strcpy((char *)string, (char *)"AT+CWJAP=\"FOURTOR\",""");
 800272e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002732:	4a26      	ldr	r2, [pc, #152]	; (80027cc <WifiSetup+0x168>)
 8002734:	461c      	mov	r4, r3
 8002736:	4615      	mov	r5, r2
 8002738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	6023      	str	r3, [r4, #0]
//	strcpy((char *)string, (char *)"AT+CWJAP=\"iPhone (3)\",\"gkdus713\"");
	length = strlen((char *)string);
 8002740:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fd43 	bl	80001d0 <strlen>
 800274a:	4603      	mov	r3, r0
 800274c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8002750:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002754:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002758:	4413      	add	r3, r2
 800275a:	220d      	movs	r2, #13
 800275c:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 800275e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002762:	3301      	adds	r3, #1
 8002764:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8002768:	4413      	add	r3, r2
 800276a:	220a      	movs	r2, #10
 800276c:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 8002770:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002774:	3302      	adds	r3, #2
 8002776:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800277a:	4413      	add	r3, r2
 800277c:	2200      	movs	r2, #0
 800277e:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 8002782:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002786:	b29b      	uxth	r3, r3
 8002788:	3302      	adds	r3, #2
 800278a:	b29a      	uxth	r2, r3
 800278c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002794:	480b      	ldr	r0, [pc, #44]	; (80027c4 <WifiSetup+0x160>)
 8002796:	f004 fbd6 	bl	8006f46 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000);
 800279a:	4639      	mov	r1, r7
 800279c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80027a0:	2264      	movs	r2, #100	; 0x64
 80027a2:	4808      	ldr	r0, [pc, #32]	; (80027c4 <WifiSetup+0x160>)
 80027a4:	f004 fc68 	bl	8007078 <HAL_UART_Receive>
//	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
	string[0] = 0x0D;
 80027a8:	230d      	movs	r3, #13
 80027aa:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 80027ae:	230a      	movs	r3, #10
 80027b0:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
//	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
}
 80027b4:	bf00      	nop
 80027b6:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bdb0      	pop	{r4, r5, r7, pc}
 80027be:	bf00      	nop
 80027c0:	0800e7a4 	.word	0x0800e7a4
 80027c4:	200002f4 	.word	0x200002f4
 80027c8:	20000764 	.word	0x20000764
 80027cc:	0800e7b0 	.word	0x0800e7b0

080027d0 <OpenUbidots>:
void OpenUbidots(void)
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b0e8      	sub	sp, #416	; 0x1a0
 80027d4:	af00      	add	r7, sp, #0
	int length;
	int ret;
	
	do
	{
		for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027dc:	e00a      	b.n	80027f4 <OpenUbidots+0x24>
 80027de:	1d3a      	adds	r2, r7, #4
 80027e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80027e4:	4413      	add	r3, r2
 80027e6:	2220      	movs	r2, #32
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80027ee:	3301      	adds	r3, #1
 80027f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027f4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80027f8:	2bc7      	cmp	r3, #199	; 0xc7
 80027fa:	ddf0      	ble.n	80027de <OpenUbidots+0xe>
		strcpy((char *)string, (char *)"AT+CIPSTART=\"TCP\",\"things.ubidots.com\",80");
 80027fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002800:	4a32      	ldr	r2, [pc, #200]	; (80028cc <OpenUbidots+0xfc>)
 8002802:	461c      	mov	r4, r3
 8002804:	4615      	mov	r5, r2
 8002806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002812:	c403      	stmia	r4!, {r0, r1}
 8002814:	8022      	strh	r2, [r4, #0]
		length = strlen((char *)string);
 8002816:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fcd8 	bl	80001d0 <strlen>
 8002820:	4603      	mov	r3, r0
 8002822:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		string[length] = 0x0D;
 8002826:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800282a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800282e:	4413      	add	r3, r2
 8002830:	220d      	movs	r2, #13
 8002832:	701a      	strb	r2, [r3, #0]
		string[length + 1] = 0x0A;
 8002834:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002838:	3301      	adds	r3, #1
 800283a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800283e:	4413      	add	r3, r2
 8002840:	220a      	movs	r2, #10
 8002842:	f803 2cd4 	strb.w	r2, [r3, #-212]
		string[length + 2] = 0;
 8002846:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800284a:	3302      	adds	r3, #2
 800284c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002850:	4413      	add	r3, r2
 8002852:	2200      	movs	r2, #0
 8002854:	f803 2cd4 	strb.w	r2, [r3, #-212]
		HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8002858:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800285c:	b29b      	uxth	r3, r3
 800285e:	3302      	adds	r3, #2
 8002860:	b29a      	uxth	r2, r3
 8002862:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286a:	4819      	ldr	r0, [pc, #100]	; (80028d0 <OpenUbidots+0x100>)
 800286c:	f004 fb6b 	bl	8006f46 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 8002870:	1d39      	adds	r1, r7, #4
 8002872:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002876:	2264      	movs	r2, #100	; 0x64
 8002878:	4815      	ldr	r0, [pc, #84]	; (80028d0 <OpenUbidots+0x100>)
 800287a:	f004 fbfd 	bl	8007078 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 800287e:	1d39      	adds	r1, r7, #4
 8002880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002884:	2264      	movs	r2, #100	; 0x64
 8002886:	4813      	ldr	r0, [pc, #76]	; (80028d4 <OpenUbidots+0x104>)
 8002888:	f004 fb5d 	bl	8006f46 <HAL_UART_Transmit>
		string[0] = 0x0D;
 800288c:	230d      	movs	r3, #13
 800288e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		string[1] = 0x0A;
 8002892:	230a      	movs	r3, #10
 8002894:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8002898:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800289c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a0:	2202      	movs	r2, #2
 80028a2:	480c      	ldr	r0, [pc, #48]	; (80028d4 <OpenUbidots+0x104>)
 80028a4:	f004 fb4f 	bl	8006f46 <HAL_UART_Transmit>
		ret = (int)strstr((char *)buffer, (char *)"CONNECT");
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	490b      	ldr	r1, [pc, #44]	; (80028d8 <OpenUbidots+0x108>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f009 f8fb 	bl	800baa8 <strstr>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	} while (ret == 0);
 80028b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d08a      	beq.n	80027d6 <OpenUbidots+0x6>
}
 80028c0:	bf00      	nop
 80028c2:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	0800e7c4 	.word	0x0800e7c4
 80028d0:	200002f4 	.word	0x200002f4
 80028d4:	20000764 	.word	0x20000764
 80028d8:	0800e7f0 	.word	0x0800e7f0

080028dc <CloseUbidots>:
void CloseUbidots(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0e6      	sub	sp, #408	; 0x198
 80028e0:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80028e8:	e00a      	b.n	8002900 <CloseUbidots+0x24>
 80028ea:	463a      	mov	r2, r7
 80028ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028f0:	4413      	add	r3, r2
 80028f2:	2220      	movs	r2, #32
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002900:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002904:	2bc7      	cmp	r3, #199	; 0xc7
 8002906:	ddf0      	ble.n	80028ea <CloseUbidots+0xe>
	strcpy((char *)string, (char *)"AT+CIPCLOSE");
 8002908:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800290c:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <CloseUbidots+0xd4>)
 800290e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002910:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 8002914:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fc59 	bl	80001d0 <strlen>
 800291e:	4603      	mov	r3, r0
 8002920:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8002924:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002928:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800292c:	4413      	add	r3, r2
 800292e:	220d      	movs	r2, #13
 8002930:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 8002932:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002936:	3301      	adds	r3, #1
 8002938:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800293c:	4413      	add	r3, r2
 800293e:	220a      	movs	r2, #10
 8002940:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 8002944:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002948:	3302      	adds	r3, #2
 800294a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800294e:	4413      	add	r3, r2
 8002950:	2200      	movs	r2, #0
 8002952:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 8002956:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800295a:	b29b      	uxth	r3, r3
 800295c:	3302      	adds	r3, #2
 800295e:	b29a      	uxth	r2, r3
 8002960:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002968:	4812      	ldr	r0, [pc, #72]	; (80029b4 <CloseUbidots+0xd8>)
 800296a:	f004 faec 	bl	8006f46 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 800296e:	4639      	mov	r1, r7
 8002970:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002974:	2264      	movs	r2, #100	; 0x64
 8002976:	480f      	ldr	r0, [pc, #60]	; (80029b4 <CloseUbidots+0xd8>)
 8002978:	f004 fb7e 	bl	8007078 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 800297c:	4639      	mov	r1, r7
 800297e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002982:	2264      	movs	r2, #100	; 0x64
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <CloseUbidots+0xdc>)
 8002986:	f004 fade 	bl	8006f46 <HAL_UART_Transmit>
	string[0] = 0x0D;
 800298a:	230d      	movs	r3, #13
 800298c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8002990:	230a      	movs	r3, #10
 8002992:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8002996:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800299a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800299e:	2202      	movs	r2, #2
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <CloseUbidots+0xdc>)
 80029a2:	f004 fad0 	bl	8006f46 <HAL_UART_Transmit>
}
 80029a6:	bf00      	nop
 80029a8:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	0800e7f8 	.word	0x0800e7f8
 80029b4:	200002f4 	.word	0x200002f4
 80029b8:	20000764 	.word	0x20000764

080029bc <WifiUbidots>:
// uint32_t rpm,uint16_t torque,uint16_t temperature
void WifiUbidots(void)
{
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	f6ad 3d28 	subw	sp, sp, #2856	; 0xb28
 80029c2:	af02      	add	r7, sp, #8
	int length;
	int ret;
	
	for (;;)
	{
		OpenUbidots();
 80029c4:	f7ff ff04 	bl	80027d0 <OpenUbidots>
		do
		{
			CANopen();
 80029c8:	f7fe ff0e 	bl	80017e8 <CANopen>
			FloatToString(rpm_string, RPM, sizeof(rpm_string), 1);
 80029cc:	4b85      	ldr	r3, [pc, #532]	; (8002be4 <WifiUbidots+0x228>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80029dc:	2201      	movs	r2, #1
 80029de:	2164      	movs	r1, #100	; 0x64
 80029e0:	eeb0 0a67 	vmov.f32	s0, s15
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fdb3 	bl	8002550 <FloatToString>
			FloatToString(torque_string, torque, sizeof(rpm_string), 1);
 80029ea:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <WifiUbidots+0x22c>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80029f4:	2201      	movs	r2, #1
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	eeb0 0a67 	vmov.f32	s0, s15
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fda7 	bl	8002550 <FloatToString>
			FloatToString(temp_string, temp, sizeof(rpm_string), 1);
 8002a02:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <WifiUbidots+0x230>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2164      	movs	r1, #100	; 0x64
 8002a10:	eeb0 0a67 	vmov.f32	s0, s15
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fd9b 	bl	8002550 <FloatToString>
//			sprintf(message, "{\"RPM\": %ld,\"torque\": %.2f,\"temperature\": %.2f}",RPM,torque,temp);
			sprintf(message, "{\"RPM\": %ld,\"torque\": %.2f}",RPM,torque);
 8002a1a:	4b72      	ldr	r3, [pc, #456]	; (8002be4 <WifiUbidots+0x228>)
 8002a1c:	681d      	ldr	r5, [r3, #0]
 8002a1e:	4b72      	ldr	r3, [pc, #456]	; (8002be8 <WifiUbidots+0x22c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fd90 	bl	8000548 <__aeabi_f2d>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	4638      	mov	r0, r7
 8002a2e:	e9cd 3400 	strd	r3, r4, [sp]
 8002a32:	462a      	mov	r2, r5
 8002a34:	496e      	ldr	r1, [pc, #440]	; (8002bf0 <WifiUbidots+0x234>)
 8002a36:	f009 f817 	bl	800ba68 <siprintf>
			// rpm_string,torque_string,temp_string
			// rpm,torque,temperature
			HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 0xFFFF);
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fbc7 	bl	80001d0 <strlen>
 8002a42:	4603      	mov	r3, r0
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	4639      	mov	r1, r7
 8002a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4c:	4869      	ldr	r0, [pc, #420]	; (8002bf4 <WifiUbidots+0x238>)
 8002a4e:	f004 fa7a 	bl	8006f46 <HAL_UART_Transmit>
			sprintf(sendBuffer, "POST /api/v1.6/devices/%s/?token=%s HTTP/1.1\r\nHost: things.ubidots.com\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s", UBIDOTS_DEVICE, UBIDOTS_TOKEN, (int)strlen(message), message); 
 8002a52:	463b      	mov	r3, r7
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fbbb 	bl	80001d0 <strlen>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f507 70ba 	add.w	r0, r7, #372	; 0x174
 8002a62:	463b      	mov	r3, r7
 8002a64:	9301      	str	r3, [sp, #4]
 8002a66:	9200      	str	r2, [sp, #0]
 8002a68:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <WifiUbidots+0x23c>)
 8002a6a:	4a64      	ldr	r2, [pc, #400]	; (8002bfc <WifiUbidots+0x240>)
 8002a6c:	4964      	ldr	r1, [pc, #400]	; (8002c00 <WifiUbidots+0x244>)
 8002a6e:	f008 fffb 	bl	800ba68 <siprintf>
			sendBufferLength = strlen((char *)sendBuffer);
 8002a72:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fbaa 	bl	80001d0 <strlen>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 3b17 	strb.w	r3, [r7, #2839]	; 0xb17
			for (int i = 0; i < 50; i++)buffer[i] = ' ';
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8002a88:	e00b      	b.n	8002aa2 <WifiUbidots+0xe6>
 8002a8a:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8002a8e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002a92:	4413      	add	r3, r2
 8002a94:	2220      	movs	r2, #32
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8002aa2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002aa6:	2b31      	cmp	r3, #49	; 0x31
 8002aa8:	ddef      	ble.n	8002a8a <WifiUbidots+0xce>
			my_itoa(sendBufferLength, sendBufferLengthString, 3);
 8002aaa:	f897 3b17 	ldrb.w	r3, [r7, #2839]	; 0xb17
 8002aae:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fd11 	bl	80024dc <my_itoa>
			sprintf((char *)string, "AT+CIPSEND=%s", sendBufferLengthString);
 8002aba:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8002abe:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8002ac2:	4950      	ldr	r1, [pc, #320]	; (8002c04 <WifiUbidots+0x248>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f008 ffcf 	bl	800ba68 <siprintf>
			length = strlen((char *)string);
 8002aca:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fb7e 	bl	80001d0 <strlen>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f8c7 3b10 	str.w	r3, [r7, #2832]	; 0xb10
			string[length] = 0x0D;
 8002ada:	f607 2244 	addw	r2, r7, #2628	; 0xa44
 8002ade:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8002ae2:	4413      	add	r3, r2
 8002ae4:	220d      	movs	r2, #13
 8002ae6:	701a      	strb	r2, [r3, #0]
			string[length + 1] = 0x0A;
 8002ae8:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8002aec:	3301      	adds	r3, #1
 8002aee:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002af2:	4413      	add	r3, r2
 8002af4:	220a      	movs	r2, #10
 8002af6:	f803 2cdc 	strb.w	r2, [r3, #-220]
			string[length + 2] = 0;
 8002afa:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8002afe:	3302      	adds	r3, #2
 8002b00:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002b04:	4413      	add	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	f803 2cdc 	strb.w	r2, [r3, #-220]
			HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8002b0c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3302      	adds	r3, #2
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 8002b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1e:	483a      	ldr	r0, [pc, #232]	; (8002c08 <WifiUbidots+0x24c>)
 8002b20:	f004 fa11 	bl	8006f46 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 24, 4000);	
 8002b24:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8002b28:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002b2c:	2218      	movs	r2, #24
 8002b2e:	4836      	ldr	r0, [pc, #216]	; (8002c08 <WifiUbidots+0x24c>)
 8002b30:	f004 faa2 	bl	8007078 <HAL_UART_Receive>
		
			for (int i = 0; i < 2000; i++)buffer[i] = ' ';
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 8002b3a:	e00b      	b.n	8002b54 <WifiUbidots+0x198>
 8002b3c:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8002b40:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8002b44:	4413      	add	r3, r2
 8002b46:	2220      	movs	r2, #32
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 8002b54:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8002b58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b5c:	dbee      	blt.n	8002b3c <WifiUbidots+0x180>
			HAL_Delay(1);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f000 f8f2 	bl	8002d48 <HAL_Delay>
			HAL_UART_Transmit(&huart3, (uint8_t *)(sendBuffer), sendBufferLength, 0xFFFF);
 8002b64:	f897 3b17 	ldrb.w	r3, [r7, #2839]	; 0xb17
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 8002b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b72:	4825      	ldr	r0, [pc, #148]	; (8002c08 <WifiUbidots+0x24c>)
 8002b74:	f004 f9e7 	bl	8006f46 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 500, 4000);
 8002b78:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8002b7c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002b80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b84:	4820      	ldr	r0, [pc, #128]	; (8002c08 <WifiUbidots+0x24c>)
 8002b86:	f004 fa77 	bl	8007078 <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 500, 0xFFFF);
 8002b8a:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8002b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b96:	4817      	ldr	r0, [pc, #92]	; (8002bf4 <WifiUbidots+0x238>)
 8002b98:	f004 f9d5 	bl	8006f46 <HAL_UART_Transmit>
			string[0] = 0x0D;
 8002b9c:	230d      	movs	r3, #13
 8002b9e:	f887 3a44 	strb.w	r3, [r7, #2628]	; 0xa44
			string[1] = 0x0A;
 8002ba2:	230a      	movs	r3, #10
 8002ba4:	f887 3a45 	strb.w	r3, [r7, #2629]	; 0xa45
			HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8002ba8:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 8002bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	4810      	ldr	r0, [pc, #64]	; (8002bf4 <WifiUbidots+0x238>)
 8002bb4:	f004 f9c7 	bl	8006f46 <HAL_UART_Transmit>
			ret = (int)strstr((char *)buffer, (char *)"ERROR");
 8002bb8:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8002bbc:	4913      	ldr	r1, [pc, #76]	; (8002c0c <WifiUbidots+0x250>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f008 ff72 	bl	800baa8 <strstr>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f8c7 3b0c 	str.w	r3, [r7, #2828]	; 0xb0c
			/* wait for a while to slow down */    
			HAL_Delay(20000);
 8002bca:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002bce:	f000 f8bb 	bl	8002d48 <HAL_Delay>
		} while (ret == 0);
 8002bd2:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f43f aef6 	beq.w	80029c8 <WifiUbidots+0xc>
		CloseUbidots();
 8002bdc:	f7ff fe7e 	bl	80028dc <CloseUbidots>
		OpenUbidots();
 8002be0:	e6f0      	b.n	80029c4 <WifiUbidots+0x8>
 8002be2:	bf00      	nop
 8002be4:	200004f4 	.word	0x200004f4
 8002be8:	200004f0 	.word	0x200004f0
 8002bec:	200004ec 	.word	0x200004ec
 8002bf0:	0800e804 	.word	0x0800e804
 8002bf4:	20000764 	.word	0x20000764
 8002bf8:	0800e820 	.word	0x0800e820
 8002bfc:	0800e844 	.word	0x0800e844
 8002c00:	0800e850 	.word	0x0800e850
 8002c04:	0800e8d4 	.word	0x0800e8d4
 8002c08:	200002f4 	.word	0x200002f4
 8002c0c:	0800e8e4 	.word	0x0800e8e4

08002c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c16:	e003      	b.n	8002c20 <LoopCopyDataInit>

08002c18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c1e:	3104      	adds	r1, #4

08002c20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c20:	480b      	ldr	r0, [pc, #44]	; (8002c50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c28:	d3f6      	bcc.n	8002c18 <CopyDataInit>
  ldr  r2, =_sbss
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c2c:	e002      	b.n	8002c34 <LoopFillZerobss>

08002c2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c30:	f842 3b04 	str.w	r3, [r2], #4

08002c34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c38:	d3f9      	bcc.n	8002c2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c3a:	f7ff fc39 	bl	80024b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c3e:	f007 ffdb 	bl	800abf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c42:	f7fe fed1 	bl	80019e8 <main>
  bx  lr    
 8002c46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c4c:	0800ebd0 	.word	0x0800ebd0
  ldr  r0, =_sdata
 8002c50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c54:	20000260 	.word	0x20000260
  ldr  r2, =_sbss
 8002c58:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 8002c5c:	20000ea4 	.word	0x20000ea4

08002c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c60:	e7fe      	b.n	8002c60 <ADC_IRQHandler>
	...

08002c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <HAL_Init+0x40>)
 8002c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_Init+0x40>)
 8002c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_Init+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_Init+0x40>)
 8002c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f000 f94d 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f000 f808 	bl	8002ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c98:	f7ff f986 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00

08002ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <HAL_InitTick+0x54>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x58>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f965 	bl	8002f96 <HAL_SYSTICK_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00e      	b.n	8002cf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d80a      	bhi.n	8002cf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f000 f92d 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <HAL_InitTick+0x5c>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000064 	.word	0x20000064
 8002d00:	2000006c 	.word	0x2000006c
 8002d04:	20000068 	.word	0x20000068

08002d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x20>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_IncTick+0x24>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_IncTick+0x24>)
 8002d1a:	6013      	str	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	2000006c 	.word	0x2000006c
 8002d2c:	20000800 	.word	0x20000800

08002d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_GetTick+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000800 	.word	0x20000800

08002d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff ffee 	bl	8002d30 <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d005      	beq.n	8002d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_Delay+0x40>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6e:	bf00      	nop
 8002d70:	f7ff ffde 	bl	8002d30 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d8f7      	bhi.n	8002d70 <HAL_Delay+0x28>
  {
  }
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2000006c 	.word	0x2000006c

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <__NVIC_EnableIRQ+0x38>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff29 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff3e 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff31 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e16b      	b.n	80032a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	f040 815a 	bne.w	800329e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d00b      	beq.n	800300a <HAL_GPIO_Init+0x5a>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d007      	beq.n	800300a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ffe:	2b11      	cmp	r3, #17
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b12      	cmp	r3, #18
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0xfc>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b12      	cmp	r3, #18
 80030aa:	d123      	bne.n	80030f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	08da      	lsrs	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3208      	adds	r2, #8
 80030b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	08da      	lsrs	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3208      	adds	r2, #8
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	2203      	movs	r2, #3
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0203 	and.w	r2, r3, #3
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80b4 	beq.w	800329e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_GPIO_Init+0x308>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <HAL_GPIO_Init+0x308>)
 8003140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_GPIO_Init+0x308>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003152:	4a5a      	ldr	r2, [pc, #360]	; (80032bc <HAL_GPIO_Init+0x30c>)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	220f      	movs	r2, #15
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a51      	ldr	r2, [pc, #324]	; (80032c0 <HAL_GPIO_Init+0x310>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02b      	beq.n	80031d6 <HAL_GPIO_Init+0x226>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_GPIO_Init+0x314>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d025      	beq.n	80031d2 <HAL_GPIO_Init+0x222>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4f      	ldr	r2, [pc, #316]	; (80032c8 <HAL_GPIO_Init+0x318>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01f      	beq.n	80031ce <HAL_GPIO_Init+0x21e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4e      	ldr	r2, [pc, #312]	; (80032cc <HAL_GPIO_Init+0x31c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d019      	beq.n	80031ca <HAL_GPIO_Init+0x21a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a4d      	ldr	r2, [pc, #308]	; (80032d0 <HAL_GPIO_Init+0x320>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_GPIO_Init+0x216>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <HAL_GPIO_Init+0x324>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00d      	beq.n	80031c2 <HAL_GPIO_Init+0x212>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <HAL_GPIO_Init+0x328>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <HAL_GPIO_Init+0x20e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4a      	ldr	r2, [pc, #296]	; (80032dc <HAL_GPIO_Init+0x32c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_GPIO_Init+0x20a>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e00e      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031ba:	2308      	movs	r3, #8
 80031bc:	e00c      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031be:	2306      	movs	r3, #6
 80031c0:	e00a      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031c2:	2305      	movs	r3, #5
 80031c4:	e008      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031c6:	2304      	movs	r3, #4
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031ca:	2303      	movs	r3, #3
 80031cc:	e004      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e002      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_GPIO_Init+0x228>
 80031d6:	2300      	movs	r3, #0
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	f002 0203 	and.w	r2, r2, #3
 80031de:	0092      	lsls	r2, r2, #2
 80031e0:	4093      	lsls	r3, r2
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031e8:	4934      	ldr	r1, [pc, #208]	; (80032bc <HAL_GPIO_Init+0x30c>)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	3302      	adds	r3, #2
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f6:	4b3a      	ldr	r3, [pc, #232]	; (80032e0 <HAL_GPIO_Init+0x330>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <HAL_GPIO_Init+0x330>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003220:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_GPIO_Init+0x330>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_GPIO_Init+0x330>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <HAL_GPIO_Init+0x330>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	43db      	mvns	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4013      	ands	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326e:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <HAL_GPIO_Init+0x330>)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_GPIO_Init+0x330>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003298:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_GPIO_Init+0x330>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3301      	adds	r3, #1
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	f67f ae90 	bls.w	8002fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032ac:	bf00      	nop
 80032ae:	3724      	adds	r7, #36	; 0x24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40020400 	.word	0x40020400
 80032c8:	40020800 	.word	0x40020800
 80032cc:	40020c00 	.word	0x40020c00
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40021400 	.word	0x40021400
 80032d8:	40021800 	.word	0x40021800
 80032dc:	40021c00 	.word	0x40021c00
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003318:	b08f      	sub	sp, #60	; 0x3c
 800331a:	af0a      	add	r7, sp, #40	; 0x28
 800331c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e054      	b.n	80033d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f007 f9a8 	bl	800a698 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2203      	movs	r2, #3
 800334c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f004 fb64 	bl	8007a34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	687e      	ldr	r6, [r7, #4]
 8003374:	466d      	mov	r5, sp
 8003376:	f106 0410 	add.w	r4, r6, #16
 800337a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003386:	e885 0003 	stmia.w	r5, {r0, r1}
 800338a:	1d33      	adds	r3, r6, #4
 800338c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f004 fade 	bl	8007950 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fb5b 	bl	8007a56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	687e      	ldr	r6, [r7, #4]
 80033a8:	466d      	mov	r5, sp
 80033aa:	f106 0410 	add.w	r4, r6, #16
 80033ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80033be:	1d33      	adds	r3, r6, #4
 80033c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c2:	6838      	ldr	r0, [r7, #0]
 80033c4:	f004 fc6e 	bl	8007ca4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80033da:	b590      	push	{r4, r7, lr}
 80033dc:	b089      	sub	sp, #36	; 0x24
 80033de:	af04      	add	r7, sp, #16
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	70fb      	strb	r3, [r7, #3]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70bb      	strb	r3, [r7, #2]
 80033f0:	4613      	mov	r3, r2
 80033f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_HCD_HC_Init+0x28>
 80033fe:	2302      	movs	r3, #2
 8003400:	e07f      	b.n	8003502 <HAL_HCD_HC_Init+0x128>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	333d      	adds	r3, #61	; 0x3d
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3338      	adds	r3, #56	; 0x38
 800342e:	787a      	ldrb	r2, [r7, #1]
 8003430:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	3340      	adds	r3, #64	; 0x40
 8003442:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003444:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	3339      	adds	r3, #57	; 0x39
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	333f      	adds	r3, #63	; 0x3f
 800346a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800346e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	78bb      	ldrb	r3, [r7, #2]
 8003474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003478:	b2d8      	uxtb	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	333a      	adds	r3, #58	; 0x3a
 8003488:	4602      	mov	r2, r0
 800348a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800348c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da0a      	bge.n	80034aa <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	333b      	adds	r3, #59	; 0x3b
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e009      	b.n	80034be <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	333b      	adds	r3, #59	; 0x3b
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	333c      	adds	r3, #60	; 0x3c
 80034ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034d2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	787c      	ldrb	r4, [r7, #1]
 80034da:	78ba      	ldrb	r2, [r7, #2]
 80034dc:	78f9      	ldrb	r1, [r7, #3]
 80034de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4623      	mov	r3, r4
 80034f0:	f004 fd5a 	bl	8007fa8 <USB_HC_Init>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}

0800350a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_HCD_HC_Halt+0x1e>
 8003524:	2302      	movs	r3, #2
 8003526:	e00f      	b.n	8003548 <HAL_HCD_HC_Halt+0x3e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f004 ff96 	bl	800846a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	70fb      	strb	r3, [r7, #3]
 8003562:	460b      	mov	r3, r1
 8003564:	70bb      	strb	r3, [r7, #2]
 8003566:	4613      	mov	r3, r2
 8003568:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	333b      	adds	r3, #59	; 0x3b
 800357a:	78ba      	ldrb	r2, [r7, #2]
 800357c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	333f      	adds	r3, #63	; 0x3f
 800358e:	787a      	ldrb	r2, [r7, #1]
 8003590:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003592:	7c3b      	ldrb	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d114      	bne.n	80035c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	440b      	add	r3, r1
 80035a6:	3342      	adds	r3, #66	; 0x42
 80035a8:	2203      	movs	r2, #3
 80035aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	333d      	adds	r3, #61	; 0x3d
 80035bc:	7f3a      	ldrb	r2, [r7, #28]
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e009      	b.n	80035d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	3342      	adds	r3, #66	; 0x42
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80035d6:	787b      	ldrb	r3, [r7, #1]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	f200 80d6 	bhi.w	800378a <HAL_HCD_HC_SubmitRequest+0x23a>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003775 	.word	0x08003775
 80035ec:	08003661 	.word	0x08003661
 80035f0:	080036eb 	.word	0x080036eb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80035f4:	7c3b      	ldrb	r3, [r7, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f040 80c9 	bne.w	800378e <HAL_HCD_HC_SubmitRequest+0x23e>
 80035fc:	78bb      	ldrb	r3, [r7, #2]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 80c5 	bne.w	800378e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003604:	8b3b      	ldrh	r3, [r7, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	3351      	adds	r3, #81	; 0x51
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	3351      	adds	r3, #81	; 0x51
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	3342      	adds	r3, #66	; 0x42
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003648:	e0a1      	b.n	800378e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	3342      	adds	r3, #66	; 0x42
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
      break;
 800365e:	e096      	b.n	800378e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003660:	78bb      	ldrb	r3, [r7, #2]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d120      	bne.n	80036a8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	440b      	add	r3, r1
 8003674:	3351      	adds	r3, #81	; 0x51
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	440b      	add	r3, r1
 800368a:	3342      	adds	r3, #66	; 0x42
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003690:	e07e      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	3342      	adds	r3, #66	; 0x42
 80036a2:	2202      	movs	r2, #2
 80036a4:	701a      	strb	r2, [r3, #0]
      break;
 80036a6:	e073      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3350      	adds	r3, #80	; 0x50
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	3342      	adds	r3, #66	; 0x42
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
      break;
 80036d2:	e05d      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	3342      	adds	r3, #66	; 0x42
 80036e4:	2202      	movs	r2, #2
 80036e6:	701a      	strb	r2, [r3, #0]
      break;
 80036e8:	e052      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80036ea:	78bb      	ldrb	r3, [r7, #2]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d120      	bne.n	8003732 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	3351      	adds	r3, #81	; 0x51
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	440b      	add	r3, r1
 8003714:	3342      	adds	r3, #66	; 0x42
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800371a:	e039      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	3342      	adds	r3, #66	; 0x42
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
      break;
 8003730:	e02e      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	440b      	add	r3, r1
 8003740:	3350      	adds	r3, #80	; 0x50
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10a      	bne.n	800375e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	440b      	add	r3, r1
 8003756:	3342      	adds	r3, #66	; 0x42
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
      break;
 800375c:	e018      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	3342      	adds	r3, #66	; 0x42
 800376e:	2202      	movs	r2, #2
 8003770:	701a      	strb	r2, [r3, #0]
      break;
 8003772:	e00d      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	440b      	add	r3, r1
 8003782:	3342      	adds	r3, #66	; 0x42
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
      break;
 8003788:	e002      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800378e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	3344      	adds	r3, #68	; 0x44
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	8b39      	ldrh	r1, [r7, #24]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4403      	add	r3, r0
 80037b4:	3348      	adds	r3, #72	; 0x48
 80037b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	335c      	adds	r3, #92	; 0x5c
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	; 0x4c
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	3339      	adds	r3, #57	; 0x39
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	335d      	adds	r3, #93	; 0x5d
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	3338      	adds	r3, #56	; 0x38
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	18d1      	adds	r1, r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	f004 fcca 	bl	80081bc <USB_HC_StartXfer>
 8003828:	4603      	mov	r3, r0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop

08003834 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f004 f9e7 	bl	8007c1e <USB_GetMode>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	f040 80ef 	bne.w	8003a36 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f004 f9cb 	bl	8007bf8 <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80e5 	beq.w	8003a34 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 f9c2 	bl	8007bf8 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387e:	d104      	bne.n	800388a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003888:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f004 f9b2 	bl	8007bf8 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389e:	d104      	bne.n	80038aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 f9a2 	bl	8007bf8 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038be:	d104      	bne.n	80038ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80038c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 f992 	bl	8007bf8 <USB_ReadInterrupts>
 80038d4:	4603      	mov	r3, r0
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d103      	bne.n	80038e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2202      	movs	r2, #2
 80038e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f004 f984 	bl	8007bf8 <USB_ReadInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fa:	d115      	bne.n	8003928 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003904:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d108      	bne.n	8003928 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f006 ff3c 	bl	800a794 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f004 fa7a 	bl	8007e1c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f004 f963 	bl	8007bf8 <USB_ReadInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d102      	bne.n	8003944 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f001 f966 	bl	8004c10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f004 f955 	bl	8007bf8 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d106      	bne.n	8003966 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f006 feff 	bl	800a75c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2208      	movs	r2, #8
 8003964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f004 f944 	bl	8007bf8 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800397a:	d138      	bne.n	80039ee <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f004 fd61 	bl	8008448 <USB_HC_ReadInterrupt>
 8003986:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	e025      	b.n	80039da <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d018      	beq.n	80039d4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b8:	d106      	bne.n	80039c8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8cf 	bl	8003b64 <HCD_HC_IN_IRQHandler>
 80039c6:	e005      	b.n	80039d4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fcfd 	bl	80043ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3301      	adds	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3d4      	bcc.n	800398e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 f900 	bl	8007bf8 <USB_ReadInterrupts>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d101      	bne.n	8003a06 <HAL_HCD_IRQHandler+0x1d2>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_HCD_IRQHandler+0x1d4>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d014      	beq.n	8003a36 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0210 	bic.w	r2, r2, #16
 8003a1a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f001 f84b 	bl	8004ab8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0210 	orr.w	r2, r2, #16
 8003a30:	619a      	str	r2, [r3, #24]
 8003a32:	e000      	b.n	8003a36 <HAL_HCD_IRQHandler+0x202>
      return;
 8003a34:	bf00      	nop
    }
  }
}
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_HCD_Start+0x16>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e013      	b.n	8003a7a <HAL_HCD_Start+0x3e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 ffd7 	bl	8007a12 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 fa3a 	bl	8007ee4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_HCD_Stop+0x16>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e00d      	b.n	8003ab4 <HAL_HCD_Stop+0x32>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f004 fe1b 	bl	80086e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f004 f9e1 	bl	8007e90 <USB_ResetPort>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	440b      	add	r3, r1
 8003af2:	335c      	adds	r3, #92	; 0x5c
 8003af4:	781b      	ldrb	r3, [r3, #0]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	440b      	add	r3, r1
 8003b1c:	334c      	adds	r3, #76	; 0x4c
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 fa23 	bl	8007f84 <USB_GetCurrentFrame>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 f9fe 	bl	8007f56 <USB_GetHostSpeed>
 8003b5a:	4603      	mov	r3, r0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d119      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	60d3      	str	r3, [r2, #12]
 8003bc6:	e0ce      	b.n	8003d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d12c      	bne.n	8003c3a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	335d      	adds	r3, #93	; 0x5d
 8003c04:	2207      	movs	r2, #7
 8003c06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 fc19 	bl	800846a <USB_HC_Halt>
 8003c38:	e095      	b.n	8003d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d109      	bne.n	8003c64 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2320      	movs	r3, #32
 8003c60:	6093      	str	r3, [r2, #8]
 8003c62:	e080      	b.n	8003d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d134      	bne.n	8003ce4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	335d      	adds	r3, #93	; 0x5d
 8003caa:	2205      	movs	r2, #5
 8003cac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	015a      	lsls	r2, r3, #5
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2308      	movs	r3, #8
 8003cd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 fbc4 	bl	800846a <USB_HC_Halt>
 8003ce2:	e040      	b.n	8003d66 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d134      	bne.n	8003d66 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fb9f 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	335d      	adds	r3, #93	; 0x5d
 8003d4e:	2208      	movs	r2, #8
 8003d50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d64:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7c:	d122      	bne.n	8003dc4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d98:	f043 0302 	orr.w	r3, r3, #2
 8003d9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f004 fb5e 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dc0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003dc2:	e300      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	f040 80fd 	bne.w	8003fd6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01b      	beq.n	8003e1c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3348      	adds	r3, #72	; 0x48
 8003df4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	0159      	lsls	r1, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	440b      	add	r3, r1
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003e08:	1ad1      	subs	r1, r2, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4403      	add	r3, r0
 8003e18:	334c      	adds	r3, #76	; 0x4c
 8003e1a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	335d      	adds	r3, #93	; 0x5d
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3358      	adds	r3, #88	; 0x58
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e50:	461a      	mov	r2, r3
 8003e52:	2301      	movs	r3, #1
 8003e54:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	333f      	adds	r3, #63	; 0x3f
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	333f      	adds	r3, #63	; 0x3f
 8003e7c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d121      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e9c:	f043 0302 	orr.w	r3, r3, #2
 8003ea0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 fadc 	bl	800846a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	e070      	b.n	8003fa8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	333f      	adds	r3, #63	; 0x3f
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d12a      	bne.n	8003f32 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003efa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	335c      	adds	r3, #92	; 0x5c
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	b2d8      	uxtb	r0, r3
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	335c      	adds	r3, #92	; 0x5c
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4601      	mov	r1, r0
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f006 fc40 	bl	800a7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f30:	e03a      	b.n	8003fa8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	440b      	add	r3, r1
 8003f40:	333f      	adds	r3, #63	; 0x3f
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d12f      	bne.n	8003fa8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	440b      	add	r3, r1
 8003f56:	335c      	adds	r3, #92	; 0x5c
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	440b      	add	r3, r1
 8003f6a:	3350      	adds	r3, #80	; 0x50
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	f083 0301 	eor.w	r3, r3, #1
 8003f72:	b2d8      	uxtb	r0, r3
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	440b      	add	r3, r1
 8003f82:	3350      	adds	r3, #80	; 0x50
 8003f84:	4602      	mov	r2, r0
 8003f86:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	b2d8      	uxtb	r0, r3
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	440b      	add	r3, r1
 8003f9a:	335c      	adds	r3, #92	; 0x5c
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f006 fc04 	bl	800a7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3350      	adds	r3, #80	; 0x50
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f083 0301 	eor.w	r3, r3, #1
 8003fbe:	b2d8      	uxtb	r0, r3
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	440b      	add	r3, r1
 8003fce:	3350      	adds	r3, #80	; 0x50
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	701a      	strb	r2, [r3, #0]
}
 8003fd4:	e1f7      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f040 811a 	bne.w	8004222 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	0151      	lsls	r1, r2, #5
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	440a      	add	r2, r1
 8004004:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004008:	f023 0302 	bic.w	r3, r3, #2
 800400c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	440b      	add	r3, r1
 800401c:	335d      	adds	r3, #93	; 0x5d
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d10a      	bne.n	800403a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	440b      	add	r3, r1
 8004032:	335c      	adds	r3, #92	; 0x5c
 8004034:	2201      	movs	r2, #1
 8004036:	701a      	strb	r2, [r3, #0]
 8004038:	e0d9      	b.n	80041ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	440b      	add	r3, r1
 8004048:	335d      	adds	r3, #93	; 0x5d
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b05      	cmp	r3, #5
 800404e:	d10a      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	440b      	add	r3, r1
 800405e:	335c      	adds	r3, #92	; 0x5c
 8004060:	2205      	movs	r2, #5
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e0c3      	b.n	80041ee <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	335d      	adds	r3, #93	; 0x5d
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b06      	cmp	r3, #6
 800407a:	d00a      	beq.n	8004092 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	335d      	adds	r3, #93	; 0x5d
 800408c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800408e:	2b08      	cmp	r3, #8
 8004090:	d156      	bne.n	8004140 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	3358      	adds	r3, #88	; 0x58
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4403      	add	r3, r0
 80040b4:	3358      	adds	r3, #88	; 0x58
 80040b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	440b      	add	r3, r1
 80040c6:	3358      	adds	r3, #88	; 0x58
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d914      	bls.n	80040f8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	440b      	add	r3, r1
 80040dc:	3358      	adds	r3, #88	; 0x58
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	440b      	add	r3, r1
 80040f0:	335c      	adds	r3, #92	; 0x5c
 80040f2:	2204      	movs	r2, #4
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e009      	b.n	800410c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	440b      	add	r3, r1
 8004106:	335c      	adds	r3, #92	; 0x5c
 8004108:	2202      	movs	r2, #2
 800410a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004122:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800412a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e056      	b.n	80041ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	335d      	adds	r3, #93	; 0x5d
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d123      	bne.n	800419e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	335c      	adds	r3, #92	; 0x5c
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4413      	add	r3, r2
 8004172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004180:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004188:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4413      	add	r3, r2
 8004192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e027      	b.n	80041ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	440b      	add	r3, r1
 80041ac:	335d      	adds	r3, #93	; 0x5d
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b07      	cmp	r3, #7
 80041b2:	d11c      	bne.n	80041ee <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	440b      	add	r3, r1
 80041c2:	3358      	adds	r3, #88	; 0x58
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4403      	add	r3, r0
 80041d6:	3358      	adds	r3, #88	; 0x58
 80041d8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	335c      	adds	r3, #92	; 0x5c
 80041ea:	2204      	movs	r2, #4
 80041ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fa:	461a      	mov	r2, r3
 80041fc:	2302      	movs	r3, #2
 80041fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	b2d8      	uxtb	r0, r3
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	4601      	mov	r1, r0
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f006 fac8 	bl	800a7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004220:	e0d1      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b80      	cmp	r3, #128	; 0x80
 8004236:	d13e      	bne.n	80042b6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	440a      	add	r2, r1
 800424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	3358      	adds	r3, #88	; 0x58
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4403      	add	r3, r0
 800427a:	3358      	adds	r3, #88	; 0x58
 800427c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	440b      	add	r3, r1
 800428c:	335d      	adds	r3, #93	; 0x5d
 800428e:	2206      	movs	r2, #6
 8004290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f004 f8e4 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	461a      	mov	r2, r3
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	6093      	str	r3, [r2, #8]
}
 80042b4:	e087      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d17c      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	333f      	adds	r3, #63	; 0x3f
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d122      	bne.n	8004328 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	3358      	adds	r3, #88	; 0x58
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	440a      	add	r2, r1
 800430c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f004 f8a2 	bl	800846a <USB_HC_Halt>
 8004326:	e045      	b.n	80043b4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	440b      	add	r3, r1
 8004336:	333f      	adds	r3, #63	; 0x3f
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	333f      	adds	r3, #63	; 0x3f
 800434e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004350:	2b02      	cmp	r3, #2
 8004352:	d12f      	bne.n	80043b4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	3358      	adds	r3, #88	; 0x58
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d121      	bne.n	80043b4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	440b      	add	r3, r1
 800437e:	335d      	adds	r3, #93	; 0x5d
 8004380:	2203      	movs	r2, #3
 8004382:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	440a      	add	r2, r1
 800439a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f004 f85b 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c0:	461a      	mov	r2, r3
 80043c2:	2310      	movs	r3, #16
 80043c4:	6093      	str	r3, [r2, #8]
}
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d119      	bne.n	8004432 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	2304      	movs	r3, #4
 800440e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	440a      	add	r2, r1
 8004426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004430:	e33e      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b20      	cmp	r3, #32
 8004446:	d141      	bne.n	80044cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004454:	461a      	mov	r2, r3
 8004456:	2320      	movs	r3, #32
 8004458:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	440b      	add	r3, r1
 8004468:	333d      	adds	r3, #61	; 0x3d
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b01      	cmp	r3, #1
 800446e:	f040 831f 	bne.w	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	440b      	add	r3, r1
 8004480:	333d      	adds	r3, #61	; 0x3d
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	440b      	add	r3, r1
 8004494:	335c      	adds	r3, #92	; 0x5c
 8004496:	2202      	movs	r2, #2
 8004498:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044b4:	f043 0302 	orr.w	r3, r3, #2
 80044b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f003 ffd0 	bl	800846a <USB_HC_Halt>
}
 80044ca:	e2f1      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d13f      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	440b      	add	r3, r1
 80044f0:	335d      	adds	r3, #93	; 0x5d
 80044f2:	2204      	movs	r2, #4
 80044f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	333d      	adds	r3, #61	; 0x3d
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	440b      	add	r3, r1
 8004518:	3358      	adds	r3, #88	; 0x58
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	440a      	add	r2, r1
 8004534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f003 ff8e 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	461a      	mov	r2, r3
 800455c:	2340      	movs	r3, #64	; 0x40
 800455e:	6093      	str	r3, [r2, #8]
}
 8004560:	e2a6      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4413      	add	r3, r2
 800456a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004578:	d122      	bne.n	80045c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	440a      	add	r2, r1
 8004590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 ff60 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045bc:	6093      	str	r3, [r2, #8]
}
 80045be:	e277      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d135      	bne.n	8004642 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	3358      	adds	r3, #88	; 0x58
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	0151      	lsls	r1, r2, #5
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	440a      	add	r2, r1
 8004600:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f003 ff28 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	461a      	mov	r2, r3
 8004628:	2301      	movs	r3, #1
 800462a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	440b      	add	r3, r1
 800463a:	335d      	adds	r3, #93	; 0x5d
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
}
 8004640:	e236      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d12b      	bne.n	80046b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004664:	461a      	mov	r2, r3
 8004666:	2308      	movs	r3, #8
 8004668:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	0151      	lsls	r1, r2, #5
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	440a      	add	r2, r1
 8004680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f003 fee8 	bl	800846a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	440b      	add	r3, r1
 80046a8:	335d      	adds	r3, #93	; 0x5d
 80046aa:	2205      	movs	r2, #5
 80046ac:	701a      	strb	r2, [r3, #0]
}
 80046ae:	e1ff      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d155      	bne.n	8004772 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	3358      	adds	r3, #88	; 0x58
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	335d      	adds	r3, #93	; 0x5d
 80046ea:	2203      	movs	r2, #3
 80046ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	440b      	add	r3, r1
 80046fc:	333d      	adds	r3, #61	; 0x3d
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d114      	bne.n	800472e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	440b      	add	r3, r1
 8004712:	333c      	adds	r3, #60	; 0x3c
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	333d      	adds	r3, #61	; 0x3d
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	440a      	add	r2, r1
 8004744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004748:	f043 0302 	orr.w	r3, r3, #2
 800474c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f003 fe86 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	2310      	movs	r3, #16
 800476e:	6093      	str	r3, [r2, #8]
}
 8004770:	e19e      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	2b80      	cmp	r3, #128	; 0x80
 8004786:	d12b      	bne.n	80047e0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	440a      	add	r2, r1
 800479e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a2:	f043 0302 	orr.w	r3, r3, #2
 80047a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f003 fe59 	bl	800846a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	335d      	adds	r3, #93	; 0x5d
 80047c8:	2206      	movs	r2, #6
 80047ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	461a      	mov	r2, r3
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	6093      	str	r3, [r2, #8]
}
 80047de:	e167      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f6:	d135      	bne.n	8004864 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	440a      	add	r2, r1
 800480e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004812:	f043 0302 	orr.w	r3, r3, #2
 8004816:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f003 fe21 	bl	800846a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	461a      	mov	r2, r3
 8004836:	2310      	movs	r3, #16
 8004838:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4413      	add	r3, r2
 8004842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004846:	461a      	mov	r2, r3
 8004848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	440b      	add	r3, r1
 800485c:	335d      	adds	r3, #93	; 0x5d
 800485e:	2208      	movs	r2, #8
 8004860:	701a      	strb	r2, [r3, #0]
}
 8004862:	e125      	b.n	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	f040 811a 	bne.w	8004ab0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4413      	add	r3, r2
 8004884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	440a      	add	r2, r1
 8004892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004896:	f023 0302 	bic.w	r3, r3, #2
 800489a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	440b      	add	r3, r1
 80048aa:	335d      	adds	r3, #93	; 0x5d
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d137      	bne.n	8004922 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	440b      	add	r3, r1
 80048c0:	335c      	adds	r3, #92	; 0x5c
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	333f      	adds	r3, #63	; 0x3f
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d00b      	beq.n	80048f4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	333f      	adds	r3, #63	; 0x3f
 80048ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	f040 80c5 	bne.w	8004a7e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	3351      	adds	r3, #81	; 0x51
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2d8      	uxtb	r0, r3
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	440b      	add	r3, r1
 800491a:	3351      	adds	r3, #81	; 0x51
 800491c:	4602      	mov	r2, r0
 800491e:	701a      	strb	r2, [r3, #0]
 8004920:	e0ad      	b.n	8004a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	335d      	adds	r3, #93	; 0x5d
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d10a      	bne.n	800494e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	440b      	add	r3, r1
 8004946:	335c      	adds	r3, #92	; 0x5c
 8004948:	2202      	movs	r2, #2
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e097      	b.n	8004a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	440b      	add	r3, r1
 800495c:	335d      	adds	r3, #93	; 0x5d
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d10a      	bne.n	800497a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	440b      	add	r3, r1
 8004972:	335c      	adds	r3, #92	; 0x5c
 8004974:	2202      	movs	r2, #2
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e081      	b.n	8004a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	440b      	add	r3, r1
 8004988:	335d      	adds	r3, #93	; 0x5d
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10a      	bne.n	80049a6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	440b      	add	r3, r1
 800499e:	335c      	adds	r3, #92	; 0x5c
 80049a0:	2205      	movs	r2, #5
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e06b      	b.n	8004a7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	440b      	add	r3, r1
 80049b4:	335d      	adds	r3, #93	; 0x5d
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b06      	cmp	r3, #6
 80049ba:	d00a      	beq.n	80049d2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	440b      	add	r3, r1
 80049ca:	335d      	adds	r3, #93	; 0x5d
 80049cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d155      	bne.n	8004a7e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3358      	adds	r3, #88	; 0x58
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	1c59      	adds	r1, r3, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4403      	add	r3, r0
 80049f4:	3358      	adds	r3, #88	; 0x58
 80049f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	3358      	adds	r3, #88	; 0x58
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d914      	bls.n	8004a38 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3358      	adds	r3, #88	; 0x58
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	440b      	add	r3, r1
 8004a30:	335c      	adds	r3, #92	; 0x5c
 8004a32:	2204      	movs	r2, #4
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e009      	b.n	8004a4c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	440b      	add	r3, r1
 8004a46:	335c      	adds	r3, #92	; 0x5c
 8004a48:	2202      	movs	r2, #2
 8004a4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	b2d8      	uxtb	r0, r3
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	440b      	add	r3, r1
 8004aa2:	335c      	adds	r3, #92	; 0x5c
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f005 fe80 	bl	800a7b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ab0:	bf00      	nop
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	0c5b      	lsrs	r3, r3, #17
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d003      	beq.n	8004afc <HCD_RXQLVL_IRQHandler+0x44>
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	f000 8082 	beq.w	8004bfe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004afa:	e083      	b.n	8004c04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d07f      	beq.n	8004c02 <HCD_RXQLVL_IRQHandler+0x14a>
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	3344      	adds	r3, #68	; 0x44
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d074      	beq.n	8004c02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	440b      	add	r3, r1
 8004b2a:	3344      	adds	r3, #68	; 0x44
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	b292      	uxth	r2, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	f003 f837 	bl	8007ba6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	440b      	add	r3, r1
 8004b46:	3344      	adds	r3, #68	; 0x44
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	18d1      	adds	r1, r2, r3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4403      	add	r3, r0
 8004b5c:	3344      	adds	r3, #68	; 0x44
 8004b5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	334c      	adds	r3, #76	; 0x4c
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	18d1      	adds	r1, r2, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4403      	add	r3, r0
 8004b84:	334c      	adds	r3, #76	; 0x4c
 8004b86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HCD_RXQLVL_IRQHandler+0x154>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d031      	beq.n	8004c02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bbc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3350      	adds	r3, #80	; 0x50
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f083 0301 	eor.w	r3, r3, #1
 8004be6:	b2d8      	uxtb	r0, r3
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3350      	adds	r3, #80	; 0x50
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	701a      	strb	r2, [r3, #0]
      break;
 8004bfc:	e001      	b.n	8004c02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004bfe:	bf00      	nop
 8004c00:	e000      	b.n	8004c04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004c02:	bf00      	nop
  }
}
 8004c04:	bf00      	nop
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	1ff80000 	.word	0x1ff80000

08004c10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d10b      	bne.n	8004c60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f005 fd90 	bl	800a778 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d132      	bne.n	8004cd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 0308 	orr.w	r3, r3, #8
 8004c70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d126      	bne.n	8004cca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d113      	bne.n	8004cac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c8e:	d106      	bne.n	8004c9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2102      	movs	r1, #2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 f8c0 	bl	8007e1c <USB_InitFSLSPClkSel>
 8004c9c:	e011      	b.n	8004cc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f003 f8b9 	bl	8007e1c <USB_InitFSLSPClkSel>
 8004caa:	e00a      	b.n	8004cc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004cc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fd82 	bl	800a7cc <HAL_HCD_PortEnabled_Callback>
 8004cc8:	e002      	b.n	8004cd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f005 fd8c 	bl	800a7e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d103      	bne.n	8004ce2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	6013      	str	r3, [r2, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e11f      	b.n	8004f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7fd f96a 	bl	8001ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f001 f9de 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8004d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4a7b      	ldr	r2, [pc, #492]	; (8004f54 <HAL_I2C_Init+0x25c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d807      	bhi.n	8004d7c <HAL_I2C_Init+0x84>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	; (8004f58 <HAL_I2C_Init+0x260>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	bf94      	ite	ls
 8004d74:	2301      	movls	r3, #1
 8004d76:	2300      	movhi	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	e006      	b.n	8004d8a <HAL_I2C_Init+0x92>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a77      	ldr	r2, [pc, #476]	; (8004f5c <HAL_I2C_Init+0x264>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	bf94      	ite	ls
 8004d84:	2301      	movls	r3, #1
 8004d86:	2300      	movhi	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0db      	b.n	8004f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a72      	ldr	r2, [pc, #456]	; (8004f60 <HAL_I2C_Init+0x268>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	0c9b      	lsrs	r3, r3, #18
 8004d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4a64      	ldr	r2, [pc, #400]	; (8004f54 <HAL_I2C_Init+0x25c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d802      	bhi.n	8004dcc <HAL_I2C_Init+0xd4>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	e009      	b.n	8004de0 <HAL_I2C_Init+0xe8>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	4a63      	ldr	r2, [pc, #396]	; (8004f64 <HAL_I2C_Init+0x26c>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	099b      	lsrs	r3, r3, #6
 8004dde:	3301      	adds	r3, #1
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4956      	ldr	r1, [pc, #344]	; (8004f54 <HAL_I2C_Init+0x25c>)
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	d80d      	bhi.n	8004e1c <HAL_I2C_Init+0x124>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1e59      	subs	r1, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	bf38      	it	cc
 8004e18:	2304      	movcc	r3, #4
 8004e1a:	e04f      	b.n	8004ebc <HAL_I2C_Init+0x1c4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d111      	bne.n	8004e48 <HAL_I2C_Init+0x150>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	440b      	add	r3, r1
 8004e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e012      	b.n	8004e6e <HAL_I2C_Init+0x176>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1e58      	subs	r0, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	0099      	lsls	r1, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf0c      	ite	eq
 8004e68:	2301      	moveq	r3, #1
 8004e6a:	2300      	movne	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Init+0x17e>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e022      	b.n	8004ebc <HAL_I2C_Init+0x1c4>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10e      	bne.n	8004e9c <HAL_I2C_Init+0x1a4>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1e58      	subs	r0, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	440b      	add	r3, r1
 8004e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e90:	3301      	adds	r3, #1
 8004e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	e00f      	b.n	8004ebc <HAL_I2C_Init+0x1c4>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1e58      	subs	r0, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	0099      	lsls	r1, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	6809      	ldr	r1, [r1, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69da      	ldr	r2, [r3, #28]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6911      	ldr	r1, [r2, #16]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68d2      	ldr	r2, [r2, #12]
 8004ef6:	4311      	orrs	r1, r2
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	000186a0 	.word	0x000186a0
 8004f58:	001e847f 	.word	0x001e847f
 8004f5c:	003d08ff 	.word	0x003d08ff
 8004f60:	431bde83 	.word	0x431bde83
 8004f64:	10624dd3 	.word	0x10624dd3

08004f68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e128      	b.n	80051cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a90      	ldr	r2, [pc, #576]	; (80051d4 <HAL_I2S_Init+0x26c>)
 8004f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fd f877 	bl	8002088 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004fb0:	f023 030f 	bic.w	r3, r3, #15
 8004fb4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d060      	beq.n	8005088 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004fce:	2310      	movs	r3, #16
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e001      	b.n	8004fd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d802      	bhi.n	8004fe6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	f001 f9a2 	bl	8006330 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fec:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff6:	d125      	bne.n	8005044 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	fbb2 f2f3 	udiv	r2, r2, r3
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	3305      	adds	r3, #5
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e01f      	b.n	8005062 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	fbb2 f2f3 	udiv	r2, r2, r3
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	fbb2 f3f3 	udiv	r3, r2, r3
 800503e:	3305      	adds	r3, #5
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e00e      	b.n	8005062 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	fbb2 f2f3 	udiv	r2, r2, r3
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	3305      	adds	r3, #5
 8005060:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4a5c      	ldr	r2, [pc, #368]	; (80051d8 <HAL_I2S_Init+0x270>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	08db      	lsrs	r3, r3, #3
 800506c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e003      	b.n	8005090 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005088:	2302      	movs	r3, #2
 800508a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d902      	bls.n	800509c <HAL_I2S_Init+0x134>
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2bff      	cmp	r3, #255	; 0xff
 800509a:	d907      	bls.n	80050ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f043 0210 	orr.w	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e08f      	b.n	80051cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	ea42 0103 	orr.w	r1, r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	430a      	orrs	r2, r1
 80050be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80050ca:	f023 030f 	bic.w	r3, r3, #15
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6851      	ldr	r1, [r2, #4]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6892      	ldr	r2, [r2, #8]
 80050d6:	4311      	orrs	r1, r2
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	68d2      	ldr	r2, [r2, #12]
 80050dc:	4311      	orrs	r1, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6992      	ldr	r2, [r2, #24]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d161      	bne.n	80051bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a38      	ldr	r2, [pc, #224]	; (80051dc <HAL_I2S_Init+0x274>)
 80050fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <HAL_I2S_Init+0x278>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_I2S_Init+0x1a4>
 8005108:	4b36      	ldr	r3, [pc, #216]	; (80051e4 <HAL_I2S_Init+0x27c>)
 800510a:	e001      	b.n	8005110 <HAL_I2S_Init+0x1a8>
 800510c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	4932      	ldr	r1, [pc, #200]	; (80051e0 <HAL_I2S_Init+0x278>)
 8005118:	428a      	cmp	r2, r1
 800511a:	d101      	bne.n	8005120 <HAL_I2S_Init+0x1b8>
 800511c:	4a31      	ldr	r2, [pc, #196]	; (80051e4 <HAL_I2S_Init+0x27c>)
 800511e:	e001      	b.n	8005124 <HAL_I2S_Init+0x1bc>
 8005120:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005124:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005128:	f023 030f 	bic.w	r3, r3, #15
 800512c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <HAL_I2S_Init+0x278>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_I2S_Init+0x1d4>
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <HAL_I2S_Init+0x27c>)
 800513a:	e001      	b.n	8005140 <HAL_I2S_Init+0x1d8>
 800513c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005140:	2202      	movs	r2, #2
 8005142:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <HAL_I2S_Init+0x278>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_I2S_Init+0x1ea>
 800514e:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <HAL_I2S_Init+0x27c>)
 8005150:	e001      	b.n	8005156 <HAL_I2S_Init+0x1ee>
 8005152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005162:	d003      	beq.n	800516c <HAL_I2S_Init+0x204>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d103      	bne.n	8005174 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800516c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	e001      	b.n	8005178 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005174:	2300      	movs	r3, #0
 8005176:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	b299      	uxth	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800518e:	4303      	orrs	r3, r0
 8005190:	b29b      	uxth	r3, r3
 8005192:	430b      	orrs	r3, r1
 8005194:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005196:	4313      	orrs	r3, r2
 8005198:	b29a      	uxth	r2, r3
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	4313      	orrs	r3, r2
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <HAL_I2S_Init+0x278>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_I2S_Init+0x24c>
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_I2S_Init+0x27c>)
 80051b2:	e001      	b.n	80051b8 <HAL_I2S_Init+0x250>
 80051b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b8:	897a      	ldrh	r2, [r7, #10]
 80051ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	080052df 	.word	0x080052df
 80051d8:	cccccccd 	.word	0xcccccccd
 80051dc:	080053f5 	.word	0x080053f5
 80051e0:	40003800 	.word	0x40003800
 80051e4:	40003400 	.word	0x40003400

080051e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	1c9a      	adds	r2, r3, #2
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005268:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ffb8 	bl	80051e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	b292      	uxth	r2, r2
 8005294:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	1c9a      	adds	r2, r3, #2
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10e      	bne.n	80052d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff ff93 	bl	80051fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d13a      	bne.n	8005370 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d109      	bne.n	8005318 <I2S_IRQHandler+0x3a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b40      	cmp	r3, #64	; 0x40
 8005310:	d102      	bne.n	8005318 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff ffb4 	bl	8005280 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d126      	bne.n	8005370 <I2S_IRQHandler+0x92>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b20      	cmp	r3, #32
 800532e:	d11f      	bne.n	8005370 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800533e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	f043 0202 	orr.w	r2, r3, #2
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ff50 	bl	8005210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b03      	cmp	r3, #3
 800537a:	d136      	bne.n	80053ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d109      	bne.n	800539a <I2S_IRQHandler+0xbc>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d102      	bne.n	800539a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7ff ff45 	bl	8005224 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d122      	bne.n	80053ea <I2S_IRQHandler+0x10c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b20      	cmp	r3, #32
 80053b0:	d11b      	bne.n	80053ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	f043 0204 	orr.w	r2, r3, #4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff13 	bl	8005210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4aa2      	ldr	r2, [pc, #648]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d101      	bne.n	8005412 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800540e:	4ba2      	ldr	r3, [pc, #648]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005410:	e001      	b.n	8005416 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a9b      	ldr	r2, [pc, #620]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d101      	bne.n	8005430 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800542c:	4b9a      	ldr	r3, [pc, #616]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800542e:	e001      	b.n	8005434 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005430:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005440:	d004      	beq.n	800544c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8099 	bne.w	800557e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d107      	bne.n	8005466 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f925 	bl	80056b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d107      	bne.n	8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f9c8 	bl	8005810 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d13a      	bne.n	8005500 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d035      	beq.n	8005500 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a7e      	ldr	r2, [pc, #504]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d101      	bne.n	80054a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800549e:	4b7e      	ldr	r3, [pc, #504]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054a0:	e001      	b.n	80054a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80054a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4979      	ldr	r1, [pc, #484]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054ae:	428b      	cmp	r3, r1
 80054b0:	d101      	bne.n	80054b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80054b2:	4b79      	ldr	r3, [pc, #484]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054b4:	e001      	b.n	80054ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80054b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f043 0202 	orr.w	r2, r3, #2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fe88 	bl	8005210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b08      	cmp	r3, #8
 8005508:	f040 80be 	bne.w	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80b8 	beq.w	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005526:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a59      	ldr	r2, [pc, #356]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d101      	bne.n	8005536 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005532:	4b59      	ldr	r3, [pc, #356]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005534:	e001      	b.n	800553a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4954      	ldr	r1, [pc, #336]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005542:	428b      	cmp	r3, r1
 8005544:	d101      	bne.n	800554a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005546:	4b54      	ldr	r3, [pc, #336]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005548:	e001      	b.n	800554e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800554a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800554e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005552:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005554:	2300      	movs	r3, #0
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fe4a 	bl	8005210 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800557c:	e084      	b.n	8005688 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b02      	cmp	r3, #2
 8005586:	d107      	bne.n	8005598 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8be 	bl	8005714 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f8fd 	bl	80057ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d12f      	bne.n	800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02a      	beq.n	800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80055e0:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055e2:	e001      	b.n	80055e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80055e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4929      	ldr	r1, [pc, #164]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055f0:	428b      	cmp	r3, r1
 80055f2:	d101      	bne.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80055f4:	4b28      	ldr	r3, [pc, #160]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055f6:	e001      	b.n	80055fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80055f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005600:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	f043 0202 	orr.w	r2, r3, #2
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff fdfa 	bl	8005210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d131      	bne.n	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02c      	beq.n	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a17      	ldr	r2, [pc, #92]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d101      	bne.n	800563e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800563c:	e001      	b.n	8005642 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800563e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4912      	ldr	r1, [pc, #72]	; (8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800564a:	428b      	cmp	r3, r1
 800564c:	d101      	bne.n	8005652 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005650:	e001      	b.n	8005656 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005656:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800565a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800566a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	f043 0204 	orr.w	r2, r3, #4
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fdc5 	bl	8005210 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005686:	e000      	b.n	800568a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005688:	bf00      	nop
}
 800568a:	bf00      	nop
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40003800 	.word	0x40003800
 8005698:	40003400 	.word	0x40003400

0800569c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	1c99      	adds	r1, r3, #2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6251      	str	r1, [r2, #36]	; 0x24
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d113      	bne.n	800570a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ffc9 	bl	800569c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	1c99      	adds	r1, r3, #2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6251      	str	r1, [r2, #36]	; 0x24
 8005726:	8819      	ldrh	r1, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <I2SEx_TxISR_I2SExt+0x90>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <I2SEx_TxISR_I2SExt+0x22>
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <I2SEx_TxISR_I2SExt+0x94>)
 8005734:	e001      	b.n	800573a <I2SEx_TxISR_I2SExt+0x26>
 8005736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800573a:	460a      	mov	r2, r1
 800573c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d121      	bne.n	800579a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <I2SEx_TxISR_I2SExt+0x90>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <I2SEx_TxISR_I2SExt+0x50>
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <I2SEx_TxISR_I2SExt+0x94>)
 8005762:	e001      	b.n	8005768 <I2SEx_TxISR_I2SExt+0x54>
 8005764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	490d      	ldr	r1, [pc, #52]	; (80057a4 <I2SEx_TxISR_I2SExt+0x90>)
 8005770:	428b      	cmp	r3, r1
 8005772:	d101      	bne.n	8005778 <I2SEx_TxISR_I2SExt+0x64>
 8005774:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <I2SEx_TxISR_I2SExt+0x94>)
 8005776:	e001      	b.n	800577c <I2SEx_TxISR_I2SExt+0x68>
 8005778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800577c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005780:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff ff81 	bl	800569c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40003800 	.word	0x40003800
 80057a8:	40003400 	.word	0x40003400

080057ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68d8      	ldr	r0, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	1c99      	adds	r1, r3, #2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80057c4:	b282      	uxth	r2, r0
 80057c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d113      	bne.n	8005808 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ff4a 	bl	800569c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <I2SEx_RxISR_I2SExt+0x90>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <I2SEx_RxISR_I2SExt+0x16>
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <I2SEx_RxISR_I2SExt+0x94>)
 8005824:	e001      	b.n	800582a <I2SEx_RxISR_I2SExt+0x1a>
 8005826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800582a:	68d8      	ldr	r0, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	1c99      	adds	r1, r3, #2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005836:	b282      	uxth	r2, r0
 8005838:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d121      	bne.n	8005896 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <I2SEx_RxISR_I2SExt+0x90>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <I2SEx_RxISR_I2SExt+0x50>
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <I2SEx_RxISR_I2SExt+0x94>)
 800585e:	e001      	b.n	8005864 <I2SEx_RxISR_I2SExt+0x54>
 8005860:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	490d      	ldr	r1, [pc, #52]	; (80058a0 <I2SEx_RxISR_I2SExt+0x90>)
 800586c:	428b      	cmp	r3, r1
 800586e:	d101      	bne.n	8005874 <I2SEx_RxISR_I2SExt+0x64>
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <I2SEx_RxISR_I2SExt+0x94>)
 8005872:	e001      	b.n	8005878 <I2SEx_RxISR_I2SExt+0x68>
 8005874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005878:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800587c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff ff03 	bl	800569c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40003800 	.word	0x40003800
 80058a4:	40003400 	.word	0x40003400

080058a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e25b      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d075      	beq.n	80059b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058c6:	4ba3      	ldr	r3, [pc, #652]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d00c      	beq.n	80058ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d2:	4ba0      	ldr	r3, [pc, #640]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d112      	bne.n	8005904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058de:	4b9d      	ldr	r3, [pc, #628]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ea:	d10b      	bne.n	8005904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058ec:	4b99      	ldr	r3, [pc, #612]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d05b      	beq.n	80059b0 <HAL_RCC_OscConfig+0x108>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d157      	bne.n	80059b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e236      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d106      	bne.n	800591c <HAL_RCC_OscConfig+0x74>
 800590e:	4b91      	ldr	r3, [pc, #580]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a90      	ldr	r2, [pc, #576]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e01d      	b.n	8005958 <HAL_RCC_OscConfig+0xb0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005924:	d10c      	bne.n	8005940 <HAL_RCC_OscConfig+0x98>
 8005926:	4b8b      	ldr	r3, [pc, #556]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a8a      	ldr	r2, [pc, #552]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 800592c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a87      	ldr	r2, [pc, #540]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	e00b      	b.n	8005958 <HAL_RCC_OscConfig+0xb0>
 8005940:	4b84      	ldr	r3, [pc, #528]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a83      	ldr	r2, [pc, #524]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fd f9e6 	bl	8002d30 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005968:	f7fd f9e2 	bl	8002d30 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e1fb      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597a:	4b76      	ldr	r3, [pc, #472]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0xc0>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005988:	f7fd f9d2 	bl	8002d30 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005990:	f7fd f9ce 	bl	8002d30 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b64      	cmp	r3, #100	; 0x64
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e1e7      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a2:	4b6c      	ldr	r3, [pc, #432]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0xe8>
 80059ae:	e000      	b.n	80059b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d063      	beq.n	8005a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059be:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ca:	4b62      	ldr	r3, [pc, #392]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d11c      	bne.n	8005a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d6:	4b5f      	ldr	r3, [pc, #380]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d116      	bne.n	8005a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e2:	4b5c      	ldr	r3, [pc, #368]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_RCC_OscConfig+0x152>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e1bb      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fa:	4b56      	ldr	r3, [pc, #344]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	4952      	ldr	r1, [pc, #328]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a0e:	e03a      	b.n	8005a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d020      	beq.n	8005a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a18:	4b4f      	ldr	r3, [pc, #316]	; (8005b58 <HAL_RCC_OscConfig+0x2b0>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fd f987 	bl	8002d30 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a26:	f7fd f983 	bl	8002d30 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e19c      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a38:	4b46      	ldr	r3, [pc, #280]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0f0      	beq.n	8005a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a44:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4940      	ldr	r1, [pc, #256]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]
 8005a58:	e015      	b.n	8005a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a5a:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCC_OscConfig+0x2b0>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7fd f966 	bl	8002d30 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a68:	f7fd f962 	bl	8002d30 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e17b      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7a:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d030      	beq.n	8005af4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a9a:	4b30      	ldr	r3, [pc, #192]	; (8005b5c <HAL_RCC_OscConfig+0x2b4>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fd f946 	bl	8002d30 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa8:	f7fd f942 	bl	8002d30 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e15b      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x200>
 8005ac6:	e015      	b.n	8005af4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac8:	4b24      	ldr	r3, [pc, #144]	; (8005b5c <HAL_RCC_OscConfig+0x2b4>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ace:	f7fd f92f 	bl	8002d30 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad6:	f7fd f92b 	bl	8002d30 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e144      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1f0      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80a0 	beq.w	8005c42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b06:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10f      	bne.n	8005b32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b20:	6413      	str	r3, [r2, #64]	; 0x40
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	60bb      	str	r3, [r7, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_RCC_OscConfig+0x2b8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d121      	bne.n	8005b82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b3e:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <HAL_RCC_OscConfig+0x2b8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a07      	ldr	r2, [pc, #28]	; (8005b60 <HAL_RCC_OscConfig+0x2b8>)
 8005b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b4a:	f7fd f8f1 	bl	8002d30 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b50:	e011      	b.n	8005b76 <HAL_RCC_OscConfig+0x2ce>
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470000 	.word	0x42470000
 8005b5c:	42470e80 	.word	0x42470e80
 8005b60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b64:	f7fd f8e4 	bl	8002d30 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0fd      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b76:	4b81      	ldr	r3, [pc, #516]	; (8005d7c <HAL_RCC_OscConfig+0x4d4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d106      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2f0>
 8005b8a:	4b7d      	ldr	r3, [pc, #500]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	4a7c      	ldr	r2, [pc, #496]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6713      	str	r3, [r2, #112]	; 0x70
 8005b96:	e01c      	b.n	8005bd2 <HAL_RCC_OscConfig+0x32a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d10c      	bne.n	8005bba <HAL_RCC_OscConfig+0x312>
 8005ba0:	4b77      	ldr	r3, [pc, #476]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a76      	ldr	r2, [pc, #472]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bac:	4b74      	ldr	r3, [pc, #464]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	4a73      	ldr	r2, [pc, #460]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb8:	e00b      	b.n	8005bd2 <HAL_RCC_OscConfig+0x32a>
 8005bba:	4b71      	ldr	r3, [pc, #452]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	4a70      	ldr	r2, [pc, #448]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc6:	4b6e      	ldr	r3, [pc, #440]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a6d      	ldr	r2, [pc, #436]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bcc:	f023 0304 	bic.w	r3, r3, #4
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d015      	beq.n	8005c06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bda:	f7fd f8a9 	bl	8002d30 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005be0:	e00a      	b.n	8005bf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005be2:	f7fd f8a5 	bl	8002d30 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0bc      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf8:	4b61      	ldr	r3, [pc, #388]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0ee      	beq.n	8005be2 <HAL_RCC_OscConfig+0x33a>
 8005c04:	e014      	b.n	8005c30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c06:	f7fd f893 	bl	8002d30 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c0c:	e00a      	b.n	8005c24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c0e:	f7fd f88f 	bl	8002d30 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e0a6      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c24:	4b56      	ldr	r3, [pc, #344]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ee      	bne.n	8005c0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d105      	bne.n	8005c42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c36:	4b52      	ldr	r3, [pc, #328]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	4a51      	ldr	r2, [pc, #324]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8092 	beq.w	8005d70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c4c:	4b4c      	ldr	r3, [pc, #304]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d05c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d141      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c60:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <HAL_RCC_OscConfig+0x4dc>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c66:	f7fd f863 	bl	8002d30 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c6e:	f7fd f85f 	bl	8002d30 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e078      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c80:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f0      	bne.n	8005c6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	019b      	lsls	r3, r3, #6
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	061b      	lsls	r3, r3, #24
 8005cb0:	4933      	ldr	r1, [pc, #204]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb6:	4b33      	ldr	r3, [pc, #204]	; (8005d84 <HAL_RCC_OscConfig+0x4dc>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbc:	f7fd f838 	bl	8002d30 <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cc4:	f7fd f834 	bl	8002d30 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e04d      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd6:	4b2a      	ldr	r3, [pc, #168]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x41c>
 8005ce2:	e045      	b.n	8005d70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce4:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <HAL_RCC_OscConfig+0x4dc>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cea:	f7fd f821 	bl	8002d30 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf2:	f7fd f81d 	bl	8002d30 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e036      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d04:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f0      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x44a>
 8005d10:	e02e      	b.n	8005d70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e029      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <HAL_RCC_OscConfig+0x4d8>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d11c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d115      	bne.n	8005d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d46:	4013      	ands	r3, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10d      	bne.n	8005d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d106      	bne.n	8005d6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	40023800 	.word	0x40023800
 8005d84:	42470060 	.word	0x42470060

08005d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0cc      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d90c      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005daa:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0b8      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d020      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ddc:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	4a58      	ldr	r2, [pc, #352]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df4:	4b53      	ldr	r3, [pc, #332]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e00:	4b50      	ldr	r3, [pc, #320]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	494d      	ldr	r1, [pc, #308]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d044      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d119      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e07f      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d003      	beq.n	8005e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	4b3f      	ldr	r3, [pc, #252]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e06f      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e067      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e66:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f023 0203 	bic.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	4934      	ldr	r1, [pc, #208]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e78:	f7fc ff5a 	bl	8002d30 <HAL_GetTick>
 8005e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e7e:	e00a      	b.n	8005e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e80:	f7fc ff56 	bl	8002d30 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e04f      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	4b2b      	ldr	r3, [pc, #172]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 020c 	and.w	r2, r3, #12
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d1eb      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea8:	4b25      	ldr	r3, [pc, #148]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d20c      	bcs.n	8005ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb6:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <HAL_RCC_ClockConfig+0x1b8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e032      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4916      	ldr	r1, [pc, #88]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	490e      	ldr	r1, [pc, #56]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f0e:	f000 f821 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8005f12:	4601      	mov	r1, r0
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x1c0>)
 8005f20:	5cd3      	ldrb	r3, [r2, r3]
 8005f22:	fa21 f303 	lsr.w	r3, r1, r3
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <HAL_RCC_ClockConfig+0x1c4>)
 8005f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_ClockConfig+0x1c8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fc feba 	bl	8002ca8 <HAL_InitTick>

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40023c00 	.word	0x40023c00
 8005f44:	40023800 	.word	0x40023800
 8005f48:	0800e8f0 	.word	0x0800e8f0
 8005f4c:	20000064 	.word	0x20000064
 8005f50:	20000068 	.word	0x20000068

08005f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	2300      	movs	r3, #0
 8005f64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f6a:	4b63      	ldr	r3, [pc, #396]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d007      	beq.n	8005f86 <HAL_RCC_GetSysClockFreq+0x32>
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	d008      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0x38>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 80b4 	bne.w	80060e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f80:	4b5e      	ldr	r3, [pc, #376]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005f82:	60bb      	str	r3, [r7, #8]
       break;
 8005f84:	e0b3      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f86:	4b5e      	ldr	r3, [pc, #376]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005f88:	60bb      	str	r3, [r7, #8]
      break;
 8005f8a:	e0b0      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f8c:	4b5a      	ldr	r3, [pc, #360]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f96:	4b58      	ldr	r3, [pc, #352]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d04a      	beq.n	8006038 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa2:	4b55      	ldr	r3, [pc, #340]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	f04f 0400 	mov.w	r4, #0
 8005fac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	ea03 0501 	and.w	r5, r3, r1
 8005fb8:	ea04 0602 	and.w	r6, r4, r2
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4632      	mov	r2, r6
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	f04f 0400 	mov.w	r4, #0
 8005fc8:	0154      	lsls	r4, r2, #5
 8005fca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005fce:	014b      	lsls	r3, r1, #5
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	1b49      	subs	r1, r1, r5
 8005fd6:	eb62 0206 	sbc.w	r2, r2, r6
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	f04f 0400 	mov.w	r4, #0
 8005fe2:	0194      	lsls	r4, r2, #6
 8005fe4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005fe8:	018b      	lsls	r3, r1, #6
 8005fea:	1a5b      	subs	r3, r3, r1
 8005fec:	eb64 0402 	sbc.w	r4, r4, r2
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	00e2      	lsls	r2, r4, #3
 8005ffa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ffe:	00d9      	lsls	r1, r3, #3
 8006000:	460b      	mov	r3, r1
 8006002:	4614      	mov	r4, r2
 8006004:	195b      	adds	r3, r3, r5
 8006006:	eb44 0406 	adc.w	r4, r4, r6
 800600a:	f04f 0100 	mov.w	r1, #0
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	0262      	lsls	r2, r4, #9
 8006014:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006018:	0259      	lsls	r1, r3, #9
 800601a:	460b      	mov	r3, r1
 800601c:	4614      	mov	r4, r2
 800601e:	4618      	mov	r0, r3
 8006020:	4621      	mov	r1, r4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f04f 0400 	mov.w	r4, #0
 8006028:	461a      	mov	r2, r3
 800602a:	4623      	mov	r3, r4
 800602c:	f7fa fe2c 	bl	8000c88 <__aeabi_uldivmod>
 8006030:	4603      	mov	r3, r0
 8006032:	460c      	mov	r4, r1
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e049      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006038:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	099b      	lsrs	r3, r3, #6
 800603e:	f04f 0400 	mov.w	r4, #0
 8006042:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	ea03 0501 	and.w	r5, r3, r1
 800604e:	ea04 0602 	and.w	r6, r4, r2
 8006052:	4629      	mov	r1, r5
 8006054:	4632      	mov	r2, r6
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	f04f 0400 	mov.w	r4, #0
 800605e:	0154      	lsls	r4, r2, #5
 8006060:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006064:	014b      	lsls	r3, r1, #5
 8006066:	4619      	mov	r1, r3
 8006068:	4622      	mov	r2, r4
 800606a:	1b49      	subs	r1, r1, r5
 800606c:	eb62 0206 	sbc.w	r2, r2, r6
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	f04f 0400 	mov.w	r4, #0
 8006078:	0194      	lsls	r4, r2, #6
 800607a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800607e:	018b      	lsls	r3, r1, #6
 8006080:	1a5b      	subs	r3, r3, r1
 8006082:	eb64 0402 	sbc.w	r4, r4, r2
 8006086:	f04f 0100 	mov.w	r1, #0
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	00e2      	lsls	r2, r4, #3
 8006090:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006094:	00d9      	lsls	r1, r3, #3
 8006096:	460b      	mov	r3, r1
 8006098:	4614      	mov	r4, r2
 800609a:	195b      	adds	r3, r3, r5
 800609c:	eb44 0406 	adc.w	r4, r4, r6
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	02a2      	lsls	r2, r4, #10
 80060aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060ae:	0299      	lsls	r1, r3, #10
 80060b0:	460b      	mov	r3, r1
 80060b2:	4614      	mov	r4, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	4621      	mov	r1, r4
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f04f 0400 	mov.w	r4, #0
 80060be:	461a      	mov	r2, r3
 80060c0:	4623      	mov	r3, r4
 80060c2:	f7fa fde1 	bl	8000c88 <__aeabi_uldivmod>
 80060c6:	4603      	mov	r3, r0
 80060c8:	460c      	mov	r4, r1
 80060ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060cc:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	3301      	adds	r3, #1
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	60bb      	str	r3, [r7, #8]
      break;
 80060e6:	e002      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80060ea:	60bb      	str	r3, [r7, #8]
      break;
 80060ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ee:	68bb      	ldr	r3, [r7, #8]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f8:	40023800 	.word	0x40023800
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	007a1200 	.word	0x007a1200

08006104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006108:	4b03      	ldr	r3, [pc, #12]	; (8006118 <HAL_RCC_GetHCLKFreq+0x14>)
 800610a:	681b      	ldr	r3, [r3, #0]
}
 800610c:	4618      	mov	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	20000064 	.word	0x20000064

0800611c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006120:	f7ff fff0 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 8006124:	4601      	mov	r1, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	0a9b      	lsrs	r3, r3, #10
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4a03      	ldr	r2, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006132:	5cd3      	ldrb	r3, [r2, r3]
 8006134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40023800 	.word	0x40023800
 8006140:	0800e900 	.word	0x0800e900

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006148:	f7ff ffdc 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 800614c:	4601      	mov	r1, r0
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0b5b      	lsrs	r3, r3, #13
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4a03      	ldr	r2, [pc, #12]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800615a:	5cd3      	ldrb	r3, [r2, r3]
 800615c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40023800 	.word	0x40023800
 8006168:	0800e900 	.word	0x0800e900

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006190:	2b00      	cmp	r3, #0
 8006192:	d035      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006194:	4b62      	ldr	r3, [pc, #392]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800619a:	f7fc fdc9 	bl	8002d30 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061a2:	f7fc fdc5 	bl	8002d30 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e0b0      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b4:	4b5b      	ldr	r3, [pc, #364]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f0      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	019a      	lsls	r2, r3, #6
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	071b      	lsls	r3, r3, #28
 80061cc:	4955      	ldr	r1, [pc, #340]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061d4:	4b52      	ldr	r3, [pc, #328]	; (8006320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061da:	f7fc fda9 	bl	8002d30 <HAL_GetTick>
 80061de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061e2:	f7fc fda5 	bl	8002d30 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e090      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f4:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8083 	beq.w	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	4b44      	ldr	r3, [pc, #272]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	4a43      	ldr	r2, [pc, #268]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621c:	6413      	str	r3, [r2, #64]	; 0x40
 800621e:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800622a:	4b3f      	ldr	r3, [pc, #252]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3e      	ldr	r2, [pc, #248]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006234:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006236:	f7fc fd7b 	bl	8002d30 <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800623c:	e008      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800623e:	f7fc fd77 	bl	8002d30 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e062      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006250:	4b35      	ldr	r3, [pc, #212]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f0      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800625c:	4b31      	ldr	r3, [pc, #196]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006264:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	d028      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800627a:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006282:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800628a:	4b28      	ldr	r3, [pc, #160]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006290:	4a24      	ldr	r2, [pc, #144]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006296:	4b23      	ldr	r3, [pc, #140]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d114      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062a2:	f7fc fd45 	bl	8002d30 <HAL_GetTick>
 80062a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a8:	e00a      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062aa:	f7fc fd41 	bl	8002d30 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e02a      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c0:	4b18      	ldr	r3, [pc, #96]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0ee      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d8:	d10d      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ee:	490d      	ldr	r1, [pc, #52]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	608b      	str	r3, [r1, #8]
 80062f4:	e005      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006300:	6093      	str	r3, [r2, #8]
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630e:	4905      	ldr	r1, [pc, #20]	; (8006324 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006310:	4313      	orrs	r3, r2
 8006312:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	42470068 	.word	0x42470068
 8006324:	40023800 	.word	0x40023800
 8006328:	40007000 	.word	0x40007000
 800632c:	42470e40 	.word	0x42470e40

08006330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d13d      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800634e:	4b22      	ldr	r3, [pc, #136]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006356:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800635e:	2b01      	cmp	r3, #1
 8006360:	d12f      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006362:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006364:	617b      	str	r3, [r7, #20]
          break;
 8006366:	e02f      	b.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006368:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006374:	d108      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006376:	4b18      	ldr	r3, [pc, #96]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800637e:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006380:	fbb2 f3f3 	udiv	r3, r2, r3
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	e007      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006390:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006392:	fbb2 f3f3 	udiv	r3, r2, r3
 8006396:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006398:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800639a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800639e:	099b      	lsrs	r3, r3, #6
 80063a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80063ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b2:	0f1b      	lsrs	r3, r3, #28
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	617b      	str	r3, [r7, #20]
          break;
 80063c0:	e002      	b.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
          break;
 80063c6:	bf00      	nop
        }
      }
      break;
 80063c8:	bf00      	nop
    }
  }
  return frequency;
 80063ca:	697b      	ldr	r3, [r7, #20]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40023800 	.word	0x40023800
 80063dc:	00bb8000 	.word	0x00bb8000
 80063e0:	007a1200 	.word	0x007a1200
 80063e4:	00f42400 	.word	0x00f42400

080063e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e056      	b.n	80064a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7fb fe9f 	bl	8002158 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006430:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	431a      	orrs	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	ea42 0103 	orr.w	r1, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	0c1b      	lsrs	r3, r3, #16
 8006478:	f003 0104 	and.w	r1, r3, #4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69da      	ldr	r2, [r3, #28]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_SPI_Transmit+0x22>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e11e      	b.n	8006710 <HAL_SPI_Transmit+0x260>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064da:	f7fc fc29 	bl	8002d30 <HAL_GetTick>
 80064de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
 80064f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064f4:	e103      	b.n	80066fe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_SPI_Transmit+0x52>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006506:	e0fa      	b.n	80066fe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2203      	movs	r2, #3
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d107      	bne.n	8006560 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800655e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d007      	beq.n	800657e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006586:	d14b      	bne.n	8006620 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Transmit+0xe6>
 8006590:	8afb      	ldrh	r3, [r7, #22]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d13e      	bne.n	8006614 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065ba:	e02b      	b.n	8006614 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d112      	bne.n	80065f0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80065ee:	e011      	b.n	8006614 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f0:	f7fc fb9e 	bl	8002d30 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d803      	bhi.n	8006608 <HAL_SPI_Transmit+0x158>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d102      	bne.n	800660e <HAL_SPI_Transmit+0x15e>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d102      	bne.n	8006614 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006612:	e074      	b.n	80066fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1ce      	bne.n	80065bc <HAL_SPI_Transmit+0x10c>
 800661e:	e04c      	b.n	80066ba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_SPI_Transmit+0x17e>
 8006628:	8afb      	ldrh	r3, [r7, #22]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d140      	bne.n	80066b0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	7812      	ldrb	r2, [r2, #0]
 800663a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006654:	e02c      	b.n	80066b0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d113      	bne.n	800668c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	86da      	strh	r2, [r3, #54]	; 0x36
 800668a:	e011      	b.n	80066b0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800668c:	f7fc fb50 	bl	8002d30 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d803      	bhi.n	80066a4 <HAL_SPI_Transmit+0x1f4>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d102      	bne.n	80066aa <HAL_SPI_Transmit+0x1fa>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066ae:	e026      	b.n	80066fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1cd      	bne.n	8006656 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fbb2 	bl	8006e28 <SPI_EndRxTxTransaction>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10a      	bne.n	80066ee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e000      	b.n	80066fe <HAL_SPI_Transmit+0x24e>
  }

error:
 80066fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800670e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006734:	d112      	bne.n	800675c <HAL_SPI_Receive+0x44>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10e      	bne.n	800675c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2204      	movs	r2, #4
 8006742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f8e9 	bl	800692a <HAL_SPI_TransmitReceive>
 8006758:	4603      	mov	r3, r0
 800675a:	e0e2      	b.n	8006922 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <HAL_SPI_Receive+0x52>
 8006766:	2302      	movs	r3, #2
 8006768:	e0db      	b.n	8006922 <HAL_SPI_Receive+0x20a>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006772:	f7fc fadd 	bl	8002d30 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b01      	cmp	r3, #1
 8006782:	d002      	beq.n	800678a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006784:	2302      	movs	r3, #2
 8006786:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006788:	e0c2      	b.n	8006910 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_SPI_Receive+0x7e>
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800679a:	e0b9      	b.n	8006910 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2204      	movs	r2, #4
 80067a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	88fa      	ldrh	r2, [r7, #6]
 80067ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e2:	d107      	bne.n	80067f4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d007      	beq.n	8006812 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006810:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d162      	bne.n	80068e0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800681a:	e02e      	b.n	800687a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b01      	cmp	r3, #1
 8006828:	d115      	bne.n	8006856 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f103 020c 	add.w	r2, r3, #12
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	7812      	ldrb	r2, [r2, #0]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800684a:	b29b      	uxth	r3, r3
 800684c:	3b01      	subs	r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006854:	e011      	b.n	800687a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006856:	f7fc fa6b 	bl	8002d30 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d803      	bhi.n	800686e <HAL_SPI_Receive+0x156>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d102      	bne.n	8006874 <HAL_SPI_Receive+0x15c>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006878:	e04a      	b.n	8006910 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1cb      	bne.n	800681c <HAL_SPI_Receive+0x104>
 8006884:	e031      	b.n	80068ea <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d113      	bne.n	80068bc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	b292      	uxth	r2, r2
 80068a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068ba:	e011      	b.n	80068e0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068bc:	f7fc fa38 	bl	8002d30 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d803      	bhi.n	80068d4 <HAL_SPI_Receive+0x1bc>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d102      	bne.n	80068da <HAL_SPI_Receive+0x1c2>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068de:	e017      	b.n	8006910 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1cd      	bne.n	8006886 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 fa35 	bl	8006d5e <SPI_EndRxTransaction>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
 800690c:	e000      	b.n	8006910 <HAL_SPI_Receive+0x1f8>
  }

error :
 800690e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b08c      	sub	sp, #48	; 0x30
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006938:	2301      	movs	r3, #1
 800693a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x26>
 800694c:	2302      	movs	r3, #2
 800694e:	e18a      	b.n	8006c66 <HAL_SPI_TransmitReceive+0x33c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006958:	f7fc f9ea 	bl	8002d30 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800696e:	887b      	ldrh	r3, [r7, #2]
 8006970:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006976:	2b01      	cmp	r3, #1
 8006978:	d00f      	beq.n	800699a <HAL_SPI_TransmitReceive+0x70>
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006980:	d107      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x68>
 800698a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800698e:	2b04      	cmp	r3, #4
 8006990:	d003      	beq.n	800699a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006992:	2302      	movs	r3, #2
 8006994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006998:	e15b      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x82>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_TransmitReceive+0x82>
 80069a6:	887b      	ldrh	r3, [r7, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069b2:	e14e      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d003      	beq.n	80069c8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2205      	movs	r2, #5
 80069c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	887a      	ldrh	r2, [r7, #2]
 80069d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	887a      	ldrh	r2, [r7, #2]
 80069de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	887a      	ldrh	r2, [r7, #2]
 80069ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	887a      	ldrh	r2, [r7, #2]
 80069f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d007      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a24:	d178      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_SPI_TransmitReceive+0x10a>
 8006a2e:	8b7b      	ldrh	r3, [r7, #26]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d166      	bne.n	8006b02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	881a      	ldrh	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	1c9a      	adds	r2, r3, #2
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a58:	e053      	b.n	8006b02 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d11b      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x176>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d016      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x176>
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d113      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	1c9a      	adds	r2, r3, #2
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d119      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x1b8>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d014      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	b292      	uxth	r2, r2
 8006ac4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	1c9a      	adds	r2, r3, #2
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ae2:	f7fc f925 	bl	8002d30 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d807      	bhi.n	8006b02 <HAL_SPI_TransmitReceive+0x1d8>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d003      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b00:	e0a7      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1a6      	bne.n	8006a5a <HAL_SPI_TransmitReceive+0x130>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1a1      	bne.n	8006a5a <HAL_SPI_TransmitReceive+0x130>
 8006b16:	e07c      	b.n	8006c12 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_SPI_TransmitReceive+0x1fc>
 8006b20:	8b7b      	ldrh	r3, [r7, #26]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d16b      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b4c:	e057      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d11c      	bne.n	8006b96 <HAL_SPI_TransmitReceive+0x26c>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <HAL_SPI_TransmitReceive+0x26c>
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d114      	bne.n	8006b96 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	7812      	ldrb	r2, [r2, #0]
 8006b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d119      	bne.n	8006bd8 <HAL_SPI_TransmitReceive+0x2ae>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d014      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bd8:	f7fc f8aa 	bl	8002d30 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d803      	bhi.n	8006bf0 <HAL_SPI_TransmitReceive+0x2c6>
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d102      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x2cc>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bfc:	e029      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1a2      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x224>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d19d      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f906 	bl	8006e28 <SPI_EndRxTxTransaction>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c2e:	e010      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	e000      	b.n	8006c52 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3730      	adds	r7, #48	; 0x30
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7c:	b2db      	uxtb	r3, r3
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c9a:	e04c      	b.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d048      	beq.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006ca4:	f7fc f844 	bl	8002d30 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d902      	bls.n	8006cba <SPI_WaitFlagStateUntilTimeout+0x30>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d13d      	bne.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd2:	d111      	bne.n	8006cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cdc:	d004      	beq.n	8006ce8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce6:	d107      	bne.n	8006cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d00:	d10f      	bne.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e00f      	b.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	bf0c      	ite	eq
 8006d46:	2301      	moveq	r3, #1
 8006d48:	2300      	movne	r3, #0
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d1a3      	bne.n	8006c9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af02      	add	r7, sp, #8
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d72:	d111      	bne.n	8006d98 <SPI_EndRxTransaction+0x3a>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7c:	d004      	beq.n	8006d88 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d86:	d107      	bne.n	8006d98 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d96:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006da0:	d12a      	bne.n	8006df8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006daa:	d012      	beq.n	8006dd2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	2180      	movs	r1, #128	; 0x80
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff ff67 	bl	8006c8a <SPI_WaitFlagStateUntilTimeout>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02d      	beq.n	8006e1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f043 0220 	orr.w	r2, r3, #32
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e026      	b.n	8006e20 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2101      	movs	r1, #1
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ff54 	bl	8006c8a <SPI_WaitFlagStateUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01a      	beq.n	8006e1e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e013      	b.n	8006e20 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2101      	movs	r1, #1
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff41 	bl	8006c8a <SPI_WaitFlagStateUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	f043 0220 	orr.w	r2, r3, #32
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e000      	b.n	8006e20 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e34:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <SPI_EndRxTxTransaction+0x7c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <SPI_EndRxTxTransaction+0x80>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0d5b      	lsrs	r3, r3, #21
 8006e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d112      	bne.n	8006e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ff13 	bl	8006c8a <SPI_WaitFlagStateUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e00f      	b.n	8006e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d0f2      	beq.n	8006e7a <SPI_EndRxTxTransaction+0x52>
 8006e94:	e000      	b.n	8006e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e96:	bf00      	nop
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000064 	.word	0x20000064
 8006ea8:	165e9f81 	.word	0x165e9f81

08006eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e03f      	b.n	8006f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fb f9de 	bl	8002294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2224      	movs	r2, #36	; 0x24
 8006edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f9b1 	bl	8007258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b088      	sub	sp, #32
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 8083 	bne.w	800706e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Transmit+0x2e>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e07b      	b.n	8007070 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Transmit+0x40>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e074      	b.n	8007070 <HAL_UART_Transmit+0x12a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2221      	movs	r2, #33	; 0x21
 8006f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006f9c:	f7fb fec8 	bl	8002d30 <HAL_GetTick>
 8006fa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006fb6:	e042      	b.n	800703e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fce:	d122      	bne.n	8007016 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f8f2 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e042      	b.n	8007070 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ffc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	3302      	adds	r3, #2
 800700a:	60bb      	str	r3, [r7, #8]
 800700c:	e017      	b.n	800703e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	3301      	adds	r3, #1
 8007012:	60bb      	str	r3, [r7, #8]
 8007014:	e013      	b.n	800703e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f8cf 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e01f      	b.n	8007070 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	60ba      	str	r2, [r7, #8]
 8007036:	781a      	ldrb	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1b7      	bne.n	8006fb8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2200      	movs	r2, #0
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f8b6 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e006      	b.n	8007070 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	e000      	b.n	8007070 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800706e:	2302      	movs	r3, #2
  }
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b20      	cmp	r3, #32
 8007096:	f040 8090 	bne.w	80071ba <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_UART_Receive+0x2e>
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e088      	b.n	80071bc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_UART_Receive+0x40>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e081      	b.n	80071bc <HAL_UART_Receive+0x144>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2222      	movs	r2, #34	; 0x22
 80070ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80070ce:	f7fb fe2f 	bl	8002d30 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	88fa      	ldrh	r2, [r7, #6]
 80070de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80070e8:	e05c      	b.n	80071a4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007100:	d12b      	bne.n	800715a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2200      	movs	r2, #0
 800710a:	2120      	movs	r1, #32
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f859 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e04f      	b.n	80071bc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10c      	bne.n	8007142 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	b29a      	uxth	r2, r3
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	3302      	adds	r3, #2
 800713e:	60bb      	str	r3, [r7, #8]
 8007140:	e030      	b.n	80071a4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	b29b      	uxth	r3, r3
 800714a:	b2db      	uxtb	r3, r3
 800714c:	b29a      	uxth	r2, r3
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3301      	adds	r3, #1
 8007156:	60bb      	str	r3, [r7, #8]
 8007158:	e024      	b.n	80071a4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2200      	movs	r2, #0
 8007162:	2120      	movs	r1, #32
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f82d 	bl	80071c4 <UART_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e023      	b.n	80071bc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d108      	bne.n	800718e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6859      	ldr	r1, [r3, #4]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	60ba      	str	r2, [r7, #8]
 8007188:	b2ca      	uxtb	r2, r1
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	e00a      	b.n	80071a4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	1c59      	adds	r1, r3, #1
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d19d      	bne.n	80070ea <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e000      	b.n	80071bc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
  }
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071d4:	e02c      	b.n	8007230 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d028      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d007      	beq.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071e4:	f7fb fda4 	bl	8002d30 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d21d      	bcs.n	8007230 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007202:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695a      	ldr	r2, [r3, #20]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e00f      	b.n	8007250 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	429a      	cmp	r2, r3
 800724c:	d0c3      	beq.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800729a:	f023 030c 	bic.w	r3, r3, #12
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	430b      	orrs	r3, r1
 80072a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c6:	f040 818b 	bne.w	80075e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4ac1      	ldr	r2, [pc, #772]	; (80075d4 <UART_SetConfig+0x37c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d005      	beq.n	80072e0 <UART_SetConfig+0x88>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4abf      	ldr	r2, [pc, #764]	; (80075d8 <UART_SetConfig+0x380>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f040 80bd 	bne.w	800745a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7fe ff30 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 80072e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	461d      	mov	r5, r3
 80072ea:	f04f 0600 	mov.w	r6, #0
 80072ee:	46a8      	mov	r8, r5
 80072f0:	46b1      	mov	r9, r6
 80072f2:	eb18 0308 	adds.w	r3, r8, r8
 80072f6:	eb49 0409 	adc.w	r4, r9, r9
 80072fa:	4698      	mov	r8, r3
 80072fc:	46a1      	mov	r9, r4
 80072fe:	eb18 0805 	adds.w	r8, r8, r5
 8007302:	eb49 0906 	adc.w	r9, r9, r6
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007312:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007316:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800731a:	4688      	mov	r8, r1
 800731c:	4691      	mov	r9, r2
 800731e:	eb18 0005 	adds.w	r0, r8, r5
 8007322:	eb49 0106 	adc.w	r1, r9, r6
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	461d      	mov	r5, r3
 800732c:	f04f 0600 	mov.w	r6, #0
 8007330:	196b      	adds	r3, r5, r5
 8007332:	eb46 0406 	adc.w	r4, r6, r6
 8007336:	461a      	mov	r2, r3
 8007338:	4623      	mov	r3, r4
 800733a:	f7f9 fca5 	bl	8000c88 <__aeabi_uldivmod>
 800733e:	4603      	mov	r3, r0
 8007340:	460c      	mov	r4, r1
 8007342:	461a      	mov	r2, r3
 8007344:	4ba5      	ldr	r3, [pc, #660]	; (80075dc <UART_SetConfig+0x384>)
 8007346:	fba3 2302 	umull	r2, r3, r3, r2
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	461d      	mov	r5, r3
 8007354:	f04f 0600 	mov.w	r6, #0
 8007358:	46a9      	mov	r9, r5
 800735a:	46b2      	mov	sl, r6
 800735c:	eb19 0309 	adds.w	r3, r9, r9
 8007360:	eb4a 040a 	adc.w	r4, sl, sl
 8007364:	4699      	mov	r9, r3
 8007366:	46a2      	mov	sl, r4
 8007368:	eb19 0905 	adds.w	r9, r9, r5
 800736c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800737c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007380:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007384:	4689      	mov	r9, r1
 8007386:	4692      	mov	sl, r2
 8007388:	eb19 0005 	adds.w	r0, r9, r5
 800738c:	eb4a 0106 	adc.w	r1, sl, r6
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	461d      	mov	r5, r3
 8007396:	f04f 0600 	mov.w	r6, #0
 800739a:	196b      	adds	r3, r5, r5
 800739c:	eb46 0406 	adc.w	r4, r6, r6
 80073a0:	461a      	mov	r2, r3
 80073a2:	4623      	mov	r3, r4
 80073a4:	f7f9 fc70 	bl	8000c88 <__aeabi_uldivmod>
 80073a8:	4603      	mov	r3, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	461a      	mov	r2, r3
 80073ae:	4b8b      	ldr	r3, [pc, #556]	; (80075dc <UART_SetConfig+0x384>)
 80073b0:	fba3 1302 	umull	r1, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	2164      	movs	r1, #100	; 0x64
 80073b8:	fb01 f303 	mul.w	r3, r1, r3
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	3332      	adds	r3, #50	; 0x32
 80073c2:	4a86      	ldr	r2, [pc, #536]	; (80075dc <UART_SetConfig+0x384>)
 80073c4:	fba2 2303 	umull	r2, r3, r2, r3
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073d0:	4498      	add	r8, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	461d      	mov	r5, r3
 80073d6:	f04f 0600 	mov.w	r6, #0
 80073da:	46a9      	mov	r9, r5
 80073dc:	46b2      	mov	sl, r6
 80073de:	eb19 0309 	adds.w	r3, r9, r9
 80073e2:	eb4a 040a 	adc.w	r4, sl, sl
 80073e6:	4699      	mov	r9, r3
 80073e8:	46a2      	mov	sl, r4
 80073ea:	eb19 0905 	adds.w	r9, r9, r5
 80073ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80073f2:	f04f 0100 	mov.w	r1, #0
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007406:	4689      	mov	r9, r1
 8007408:	4692      	mov	sl, r2
 800740a:	eb19 0005 	adds.w	r0, r9, r5
 800740e:	eb4a 0106 	adc.w	r1, sl, r6
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	461d      	mov	r5, r3
 8007418:	f04f 0600 	mov.w	r6, #0
 800741c:	196b      	adds	r3, r5, r5
 800741e:	eb46 0406 	adc.w	r4, r6, r6
 8007422:	461a      	mov	r2, r3
 8007424:	4623      	mov	r3, r4
 8007426:	f7f9 fc2f 	bl	8000c88 <__aeabi_uldivmod>
 800742a:	4603      	mov	r3, r0
 800742c:	460c      	mov	r4, r1
 800742e:	461a      	mov	r2, r3
 8007430:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <UART_SetConfig+0x384>)
 8007432:	fba3 1302 	umull	r1, r3, r3, r2
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	2164      	movs	r1, #100	; 0x64
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	3332      	adds	r3, #50	; 0x32
 8007444:	4a65      	ldr	r2, [pc, #404]	; (80075dc <UART_SetConfig+0x384>)
 8007446:	fba2 2303 	umull	r2, r3, r2, r3
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	f003 0207 	and.w	r2, r3, #7
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4442      	add	r2, r8
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	e26f      	b.n	800793a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800745a:	f7fe fe5f 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 800745e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	461d      	mov	r5, r3
 8007464:	f04f 0600 	mov.w	r6, #0
 8007468:	46a8      	mov	r8, r5
 800746a:	46b1      	mov	r9, r6
 800746c:	eb18 0308 	adds.w	r3, r8, r8
 8007470:	eb49 0409 	adc.w	r4, r9, r9
 8007474:	4698      	mov	r8, r3
 8007476:	46a1      	mov	r9, r4
 8007478:	eb18 0805 	adds.w	r8, r8, r5
 800747c:	eb49 0906 	adc.w	r9, r9, r6
 8007480:	f04f 0100 	mov.w	r1, #0
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800748c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007490:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007494:	4688      	mov	r8, r1
 8007496:	4691      	mov	r9, r2
 8007498:	eb18 0005 	adds.w	r0, r8, r5
 800749c:	eb49 0106 	adc.w	r1, r9, r6
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	461d      	mov	r5, r3
 80074a6:	f04f 0600 	mov.w	r6, #0
 80074aa:	196b      	adds	r3, r5, r5
 80074ac:	eb46 0406 	adc.w	r4, r6, r6
 80074b0:	461a      	mov	r2, r3
 80074b2:	4623      	mov	r3, r4
 80074b4:	f7f9 fbe8 	bl	8000c88 <__aeabi_uldivmod>
 80074b8:	4603      	mov	r3, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	461a      	mov	r2, r3
 80074be:	4b47      	ldr	r3, [pc, #284]	; (80075dc <UART_SetConfig+0x384>)
 80074c0:	fba3 2302 	umull	r2, r3, r3, r2
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	461d      	mov	r5, r3
 80074ce:	f04f 0600 	mov.w	r6, #0
 80074d2:	46a9      	mov	r9, r5
 80074d4:	46b2      	mov	sl, r6
 80074d6:	eb19 0309 	adds.w	r3, r9, r9
 80074da:	eb4a 040a 	adc.w	r4, sl, sl
 80074de:	4699      	mov	r9, r3
 80074e0:	46a2      	mov	sl, r4
 80074e2:	eb19 0905 	adds.w	r9, r9, r5
 80074e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80074ea:	f04f 0100 	mov.w	r1, #0
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074fe:	4689      	mov	r9, r1
 8007500:	4692      	mov	sl, r2
 8007502:	eb19 0005 	adds.w	r0, r9, r5
 8007506:	eb4a 0106 	adc.w	r1, sl, r6
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	461d      	mov	r5, r3
 8007510:	f04f 0600 	mov.w	r6, #0
 8007514:	196b      	adds	r3, r5, r5
 8007516:	eb46 0406 	adc.w	r4, r6, r6
 800751a:	461a      	mov	r2, r3
 800751c:	4623      	mov	r3, r4
 800751e:	f7f9 fbb3 	bl	8000c88 <__aeabi_uldivmod>
 8007522:	4603      	mov	r3, r0
 8007524:	460c      	mov	r4, r1
 8007526:	461a      	mov	r2, r3
 8007528:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <UART_SetConfig+0x384>)
 800752a:	fba3 1302 	umull	r1, r3, r3, r2
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	2164      	movs	r1, #100	; 0x64
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	3332      	adds	r3, #50	; 0x32
 800753c:	4a27      	ldr	r2, [pc, #156]	; (80075dc <UART_SetConfig+0x384>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800754a:	4498      	add	r8, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	461d      	mov	r5, r3
 8007550:	f04f 0600 	mov.w	r6, #0
 8007554:	46a9      	mov	r9, r5
 8007556:	46b2      	mov	sl, r6
 8007558:	eb19 0309 	adds.w	r3, r9, r9
 800755c:	eb4a 040a 	adc.w	r4, sl, sl
 8007560:	4699      	mov	r9, r3
 8007562:	46a2      	mov	sl, r4
 8007564:	eb19 0905 	adds.w	r9, r9, r5
 8007568:	eb4a 0a06 	adc.w	sl, sl, r6
 800756c:	f04f 0100 	mov.w	r1, #0
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800757c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007580:	4689      	mov	r9, r1
 8007582:	4692      	mov	sl, r2
 8007584:	eb19 0005 	adds.w	r0, r9, r5
 8007588:	eb4a 0106 	adc.w	r1, sl, r6
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	461d      	mov	r5, r3
 8007592:	f04f 0600 	mov.w	r6, #0
 8007596:	196b      	adds	r3, r5, r5
 8007598:	eb46 0406 	adc.w	r4, r6, r6
 800759c:	461a      	mov	r2, r3
 800759e:	4623      	mov	r3, r4
 80075a0:	f7f9 fb72 	bl	8000c88 <__aeabi_uldivmod>
 80075a4:	4603      	mov	r3, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <UART_SetConfig+0x384>)
 80075ac:	fba3 1302 	umull	r1, r3, r3, r2
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	2164      	movs	r1, #100	; 0x64
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	3332      	adds	r3, #50	; 0x32
 80075be:	4a07      	ldr	r2, [pc, #28]	; (80075dc <UART_SetConfig+0x384>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f003 0207 	and.w	r2, r3, #7
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4442      	add	r2, r8
 80075d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80075d2:	e1b2      	b.n	800793a <UART_SetConfig+0x6e2>
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40011400 	.word	0x40011400
 80075dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4ad7      	ldr	r2, [pc, #860]	; (8007944 <UART_SetConfig+0x6ec>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d005      	beq.n	80075f6 <UART_SetConfig+0x39e>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4ad6      	ldr	r2, [pc, #856]	; (8007948 <UART_SetConfig+0x6f0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	f040 80d1 	bne.w	8007798 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80075f6:	f7fe fda5 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 80075fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	469a      	mov	sl, r3
 8007600:	f04f 0b00 	mov.w	fp, #0
 8007604:	46d0      	mov	r8, sl
 8007606:	46d9      	mov	r9, fp
 8007608:	eb18 0308 	adds.w	r3, r8, r8
 800760c:	eb49 0409 	adc.w	r4, r9, r9
 8007610:	4698      	mov	r8, r3
 8007612:	46a1      	mov	r9, r4
 8007614:	eb18 080a 	adds.w	r8, r8, sl
 8007618:	eb49 090b 	adc.w	r9, r9, fp
 800761c:	f04f 0100 	mov.w	r1, #0
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007628:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800762c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007630:	4688      	mov	r8, r1
 8007632:	4691      	mov	r9, r2
 8007634:	eb1a 0508 	adds.w	r5, sl, r8
 8007638:	eb4b 0609 	adc.w	r6, fp, r9
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4619      	mov	r1, r3
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	f04f 0400 	mov.w	r4, #0
 800764e:	0094      	lsls	r4, r2, #2
 8007650:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007654:	008b      	lsls	r3, r1, #2
 8007656:	461a      	mov	r2, r3
 8007658:	4623      	mov	r3, r4
 800765a:	4628      	mov	r0, r5
 800765c:	4631      	mov	r1, r6
 800765e:	f7f9 fb13 	bl	8000c88 <__aeabi_uldivmod>
 8007662:	4603      	mov	r3, r0
 8007664:	460c      	mov	r4, r1
 8007666:	461a      	mov	r2, r3
 8007668:	4bb8      	ldr	r3, [pc, #736]	; (800794c <UART_SetConfig+0x6f4>)
 800766a:	fba3 2302 	umull	r2, r3, r3, r2
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	469b      	mov	fp, r3
 8007678:	f04f 0c00 	mov.w	ip, #0
 800767c:	46d9      	mov	r9, fp
 800767e:	46e2      	mov	sl, ip
 8007680:	eb19 0309 	adds.w	r3, r9, r9
 8007684:	eb4a 040a 	adc.w	r4, sl, sl
 8007688:	4699      	mov	r9, r3
 800768a:	46a2      	mov	sl, r4
 800768c:	eb19 090b 	adds.w	r9, r9, fp
 8007690:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076a8:	4689      	mov	r9, r1
 80076aa:	4692      	mov	sl, r2
 80076ac:	eb1b 0509 	adds.w	r5, fp, r9
 80076b0:	eb4c 060a 	adc.w	r6, ip, sl
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	0094      	lsls	r4, r2, #2
 80076c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076cc:	008b      	lsls	r3, r1, #2
 80076ce:	461a      	mov	r2, r3
 80076d0:	4623      	mov	r3, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	4631      	mov	r1, r6
 80076d6:	f7f9 fad7 	bl	8000c88 <__aeabi_uldivmod>
 80076da:	4603      	mov	r3, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	461a      	mov	r2, r3
 80076e0:	4b9a      	ldr	r3, [pc, #616]	; (800794c <UART_SetConfig+0x6f4>)
 80076e2:	fba3 1302 	umull	r1, r3, r3, r2
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	2164      	movs	r1, #100	; 0x64
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	3332      	adds	r3, #50	; 0x32
 80076f4:	4a95      	ldr	r2, [pc, #596]	; (800794c <UART_SetConfig+0x6f4>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007700:	4498      	add	r8, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	469b      	mov	fp, r3
 8007706:	f04f 0c00 	mov.w	ip, #0
 800770a:	46d9      	mov	r9, fp
 800770c:	46e2      	mov	sl, ip
 800770e:	eb19 0309 	adds.w	r3, r9, r9
 8007712:	eb4a 040a 	adc.w	r4, sl, sl
 8007716:	4699      	mov	r9, r3
 8007718:	46a2      	mov	sl, r4
 800771a:	eb19 090b 	adds.w	r9, r9, fp
 800771e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007732:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007736:	4689      	mov	r9, r1
 8007738:	4692      	mov	sl, r2
 800773a:	eb1b 0509 	adds.w	r5, fp, r9
 800773e:	eb4c 060a 	adc.w	r6, ip, sl
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4619      	mov	r1, r3
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	0094      	lsls	r4, r2, #2
 8007756:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800775a:	008b      	lsls	r3, r1, #2
 800775c:	461a      	mov	r2, r3
 800775e:	4623      	mov	r3, r4
 8007760:	4628      	mov	r0, r5
 8007762:	4631      	mov	r1, r6
 8007764:	f7f9 fa90 	bl	8000c88 <__aeabi_uldivmod>
 8007768:	4603      	mov	r3, r0
 800776a:	460c      	mov	r4, r1
 800776c:	461a      	mov	r2, r3
 800776e:	4b77      	ldr	r3, [pc, #476]	; (800794c <UART_SetConfig+0x6f4>)
 8007770:	fba3 1302 	umull	r1, r3, r3, r2
 8007774:	095b      	lsrs	r3, r3, #5
 8007776:	2164      	movs	r1, #100	; 0x64
 8007778:	fb01 f303 	mul.w	r3, r1, r3
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	3332      	adds	r3, #50	; 0x32
 8007782:	4a72      	ldr	r2, [pc, #456]	; (800794c <UART_SetConfig+0x6f4>)
 8007784:	fba2 2303 	umull	r2, r3, r2, r3
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	f003 020f 	and.w	r2, r3, #15
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4442      	add	r2, r8
 8007794:	609a      	str	r2, [r3, #8]
 8007796:	e0d0      	b.n	800793a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fe fcc0 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 800779c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	469a      	mov	sl, r3
 80077a2:	f04f 0b00 	mov.w	fp, #0
 80077a6:	46d0      	mov	r8, sl
 80077a8:	46d9      	mov	r9, fp
 80077aa:	eb18 0308 	adds.w	r3, r8, r8
 80077ae:	eb49 0409 	adc.w	r4, r9, r9
 80077b2:	4698      	mov	r8, r3
 80077b4:	46a1      	mov	r9, r4
 80077b6:	eb18 080a 	adds.w	r8, r8, sl
 80077ba:	eb49 090b 	adc.w	r9, r9, fp
 80077be:	f04f 0100 	mov.w	r1, #0
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077d2:	4688      	mov	r8, r1
 80077d4:	4691      	mov	r9, r2
 80077d6:	eb1a 0508 	adds.w	r5, sl, r8
 80077da:	eb4b 0609 	adc.w	r6, fp, r9
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4619      	mov	r1, r3
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	f04f 0400 	mov.w	r4, #0
 80077f0:	0094      	lsls	r4, r2, #2
 80077f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077f6:	008b      	lsls	r3, r1, #2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	4631      	mov	r1, r6
 8007800:	f7f9 fa42 	bl	8000c88 <__aeabi_uldivmod>
 8007804:	4603      	mov	r3, r0
 8007806:	460c      	mov	r4, r1
 8007808:	461a      	mov	r2, r3
 800780a:	4b50      	ldr	r3, [pc, #320]	; (800794c <UART_SetConfig+0x6f4>)
 800780c:	fba3 2302 	umull	r2, r3, r3, r2
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	469b      	mov	fp, r3
 800781a:	f04f 0c00 	mov.w	ip, #0
 800781e:	46d9      	mov	r9, fp
 8007820:	46e2      	mov	sl, ip
 8007822:	eb19 0309 	adds.w	r3, r9, r9
 8007826:	eb4a 040a 	adc.w	r4, sl, sl
 800782a:	4699      	mov	r9, r3
 800782c:	46a2      	mov	sl, r4
 800782e:	eb19 090b 	adds.w	r9, r9, fp
 8007832:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007836:	f04f 0100 	mov.w	r1, #0
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800784a:	4689      	mov	r9, r1
 800784c:	4692      	mov	sl, r2
 800784e:	eb1b 0509 	adds.w	r5, fp, r9
 8007852:	eb4c 060a 	adc.w	r6, ip, sl
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	4619      	mov	r1, r3
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	f04f 0400 	mov.w	r4, #0
 8007868:	0094      	lsls	r4, r2, #2
 800786a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800786e:	008b      	lsls	r3, r1, #2
 8007870:	461a      	mov	r2, r3
 8007872:	4623      	mov	r3, r4
 8007874:	4628      	mov	r0, r5
 8007876:	4631      	mov	r1, r6
 8007878:	f7f9 fa06 	bl	8000c88 <__aeabi_uldivmod>
 800787c:	4603      	mov	r3, r0
 800787e:	460c      	mov	r4, r1
 8007880:	461a      	mov	r2, r3
 8007882:	4b32      	ldr	r3, [pc, #200]	; (800794c <UART_SetConfig+0x6f4>)
 8007884:	fba3 1302 	umull	r1, r3, r3, r2
 8007888:	095b      	lsrs	r3, r3, #5
 800788a:	2164      	movs	r1, #100	; 0x64
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	3332      	adds	r3, #50	; 0x32
 8007896:	4a2d      	ldr	r2, [pc, #180]	; (800794c <UART_SetConfig+0x6f4>)
 8007898:	fba2 2303 	umull	r2, r3, r2, r3
 800789c:	095b      	lsrs	r3, r3, #5
 800789e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078a2:	4498      	add	r8, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	469b      	mov	fp, r3
 80078a8:	f04f 0c00 	mov.w	ip, #0
 80078ac:	46d9      	mov	r9, fp
 80078ae:	46e2      	mov	sl, ip
 80078b0:	eb19 0309 	adds.w	r3, r9, r9
 80078b4:	eb4a 040a 	adc.w	r4, sl, sl
 80078b8:	4699      	mov	r9, r3
 80078ba:	46a2      	mov	sl, r4
 80078bc:	eb19 090b 	adds.w	r9, r9, fp
 80078c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078c4:	f04f 0100 	mov.w	r1, #0
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078d8:	4689      	mov	r9, r1
 80078da:	4692      	mov	sl, r2
 80078dc:	eb1b 0509 	adds.w	r5, fp, r9
 80078e0:	eb4c 060a 	adc.w	r6, ip, sl
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4619      	mov	r1, r3
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	f04f 0400 	mov.w	r4, #0
 80078f6:	0094      	lsls	r4, r2, #2
 80078f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078fc:	008b      	lsls	r3, r1, #2
 80078fe:	461a      	mov	r2, r3
 8007900:	4623      	mov	r3, r4
 8007902:	4628      	mov	r0, r5
 8007904:	4631      	mov	r1, r6
 8007906:	f7f9 f9bf 	bl	8000c88 <__aeabi_uldivmod>
 800790a:	4603      	mov	r3, r0
 800790c:	460c      	mov	r4, r1
 800790e:	461a      	mov	r2, r3
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <UART_SetConfig+0x6f4>)
 8007912:	fba3 1302 	umull	r1, r3, r3, r2
 8007916:	095b      	lsrs	r3, r3, #5
 8007918:	2164      	movs	r1, #100	; 0x64
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	3332      	adds	r3, #50	; 0x32
 8007924:	4a09      	ldr	r2, [pc, #36]	; (800794c <UART_SetConfig+0x6f4>)
 8007926:	fba2 2303 	umull	r2, r3, r2, r3
 800792a:	095b      	lsrs	r3, r3, #5
 800792c:	f003 020f 	and.w	r2, r3, #15
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4442      	add	r2, r8
 8007936:	609a      	str	r2, [r3, #8]
}
 8007938:	e7ff      	b.n	800793a <UART_SetConfig+0x6e2>
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007944:	40011000 	.word	0x40011000
 8007948:	40011400 	.word	0x40011400
 800794c:	51eb851f 	.word	0x51eb851f

08007950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007950:	b084      	sub	sp, #16
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	f107 001c 	add.w	r0, r7, #28
 800795e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	2b01      	cmp	r3, #1
 8007966:	d122      	bne.n	80079ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800797c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007992:	2b01      	cmp	r3, #1
 8007994:	d105      	bne.n	80079a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f94a 	bl	8007c3c <USB_CoreReset>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	e01a      	b.n	80079e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f93e 	bl	8007c3c <USB_CoreReset>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
 80079d6:	e005      	b.n	80079e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d10b      	bne.n	8007a02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f043 0206 	orr.w	r2, r3, #6
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f043 0220 	orr.w	r2, r3, #32
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a0e:	b004      	add	sp, #16
 8007a10:	4770      	bx	lr

08007a12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f043 0201 	orr.w	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f023 0201 	bic.w	r2, r3, #1
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d106      	bne.n	8007a82 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]
 8007a80:	e00b      	b.n	8007a9a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]
 8007a94:	e001      	b.n	8007a9a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e003      	b.n	8007aa2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007a9a:	2032      	movs	r0, #50	; 0x32
 8007a9c:	f7fb f954 	bl	8002d48 <HAL_Delay>

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	019b      	lsls	r3, r3, #6
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <USB_FlushTxFifo+0x48>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d901      	bls.n	8007ad8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e006      	b.n	8007ae6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d0f0      	beq.n	8007ac6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	00030d40 	.word	0x00030d40

08007af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2210      	movs	r2, #16
 8007b08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <USB_FlushRxFifo+0x40>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d901      	bls.n	8007b1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e006      	b.n	8007b2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d0f0      	beq.n	8007b0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	00030d40 	.word	0x00030d40

08007b3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	; 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4611      	mov	r1, r2
 8007b48:	461a      	mov	r2, r3
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	71fb      	strb	r3, [r7, #7]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d11a      	bne.n	8007b98 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b62:	88bb      	ldrh	r3, [r7, #4]
 8007b64:	3303      	adds	r3, #3
 8007b66:	089b      	lsrs	r3, r3, #2
 8007b68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
 8007b6e:	e00f      	b.n	8007b90 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	031a      	lsls	r2, r3, #12
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	3304      	adds	r3, #4
 8007b88:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d3eb      	bcc.n	8007b70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3724      	adds	r7, #36	; 0x24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b089      	sub	sp, #36	; 0x24
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	3303      	adds	r3, #3
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	e00b      	b.n	8007be2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3ef      	bcc.n	8007bca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007bea:	69fb      	ldr	r3, [r7, #28]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3724      	adds	r7, #36	; 0x24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <USB_CoreReset+0x64>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d901      	bls.n	8007c5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e01b      	b.n	8007c92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	daf2      	bge.n	8007c48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f043 0201 	orr.w	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <USB_CoreReset+0x64>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d901      	bls.n	8007c84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e006      	b.n	8007c92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d0f0      	beq.n	8007c72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	00030d40 	.word	0x00030d40

08007ca4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	f107 001c 	add.w	r0, r7, #28
 8007cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d018      	beq.n	8007d28 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d10a      	bne.n	8007d12 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d0a:	f043 0304 	orr.w	r3, r3, #4
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	e014      	b.n	8007d3c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d20:	f023 0304 	bic.w	r3, r3, #4
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e009      	b.n	8007d3c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d36:	f023 0304 	bic.w	r3, r3, #4
 8007d3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007d3c:	2110      	movs	r1, #16
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7ff feb4 	bl	8007aac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fed7 	bl	8007af8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
 8007d4e:	e015      	b.n	8007d7c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d70:	461a      	mov	r2, r3
 8007d72:	2300      	movs	r3, #0
 8007d74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d3e5      	bcc.n	8007d50 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007d84:	2101      	movs	r1, #1
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8ac 	bl	8007ee4 <USB_DriveVbus>

  HAL_Delay(200U);
 8007d8c:	20c8      	movs	r0, #200	; 0xc8
 8007d8e:	f7fa ffdb 	bl	8002d48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <USB_HostInit+0x164>)
 8007db8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a13      	ldr	r2, [pc, #76]	; (8007e0c <USB_HostInit+0x168>)
 8007dbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007dc2:	e009      	b.n	8007dd8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2280      	movs	r2, #128	; 0x80
 8007dc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a10      	ldr	r2, [pc, #64]	; (8007e10 <USB_HostInit+0x16c>)
 8007dce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <USB_HostInit+0x170>)
 8007dd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d105      	bne.n	8007dea <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	f043 0210 	orr.w	r2, r3, #16
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <USB_HostInit+0x174>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e02:	b004      	add	sp, #16
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	01000200 	.word	0x01000200
 8007e0c:	00e00300 	.word	0x00e00300
 8007e10:	00600080 	.word	0x00600080
 8007e14:	004000e0 	.word	0x004000e0
 8007e18:	a3200008 	.word	0xa3200008

08007e1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e54:	4313      	orrs	r3, r2
 8007e56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d107      	bne.n	8007e6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e64:	461a      	mov	r2, r3
 8007e66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e6a:	6053      	str	r3, [r2, #4]
 8007e6c:	e009      	b.n	8007e82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d106      	bne.n	8007e82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007e80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007eb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ebe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ec0:	2064      	movs	r0, #100	; 0x64
 8007ec2:	f7fa ff41 	bl	8002d48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ed4:	200a      	movs	r0, #10
 8007ed6:	f7fa ff37 	bl	8002d48 <HAL_Delay>

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d109      	bne.n	8007f28 <USB_DriveVbus+0x44>
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d106      	bne.n	8007f28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f32:	d109      	bne.n	8007f48 <USB_DriveVbus+0x64>
 8007f34:	78fb      	ldrb	r3, [r7, #3]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b085      	sub	sp, #20
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	0c5b      	lsrs	r3, r3, #17
 8007f74:	f003 0303 	and.w	r3, r3, #3
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	b29b      	uxth	r3, r3
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	70fb      	strb	r3, [r7, #3]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70bb      	strb	r3, [r7, #2]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fdc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007fde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d87e      	bhi.n	80080e4 <USB_HC_Init+0x13c>
 8007fe6:	a201      	add	r2, pc, #4	; (adr r2, 8007fec <USB_HC_Init+0x44>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	080080a7 	.word	0x080080a7
 8007ff4:	08007ffd 	.word	0x08007ffd
 8007ff8:	08008069 	.word	0x08008069
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008008:	461a      	mov	r2, r3
 800800a:	f240 439d 	movw	r3, #1181	; 0x49d
 800800e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008010:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	da10      	bge.n	800803a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008036:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008038:	e057      	b.n	80080ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d051      	beq.n	80080ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	440a      	add	r2, r1
 800805c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008060:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008064:	60d3      	str	r3, [r2, #12]
      break;
 8008066:	e040      	b.n	80080ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4413      	add	r3, r2
 8008070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008074:	461a      	mov	r2, r3
 8008076:	f240 639d 	movw	r3, #1693	; 0x69d
 800807a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800807c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008080:	2b00      	cmp	r3, #0
 8008082:	da34      	bge.n	80080ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4413      	add	r3, r2
 800808c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	440a      	add	r2, r1
 800809a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800809e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080a4:	e023      	b.n	80080ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b2:	461a      	mov	r2, r3
 80080b4:	f240 2325 	movw	r3, #549	; 0x225
 80080b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da17      	bge.n	80080f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80080e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80080e2:	e006      	b.n	80080f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
      break;
 80080e8:	e004      	b.n	80080f4 <USB_HC_Init+0x14c>
      break;
 80080ea:	bf00      	nop
 80080ec:	e002      	b.n	80080f4 <USB_HC_Init+0x14c>
      break;
 80080ee:	bf00      	nop
 80080f0:	e000      	b.n	80080f4 <USB_HC_Init+0x14c>
      break;
 80080f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080fa:	699a      	ldr	r2, [r3, #24]
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	2101      	movs	r1, #1
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800810e:	4313      	orrs	r3, r2
 8008110:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800811e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008122:	2b00      	cmp	r3, #0
 8008124:	da03      	bge.n	800812e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812a:	613b      	str	r3, [r7, #16]
 800812c:	e001      	b.n	8008132 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008132:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d103      	bne.n	8008142 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800813a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e001      	b.n	8008146 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008146:	787b      	ldrb	r3, [r7, #1]
 8008148:	059b      	lsls	r3, r3, #22
 800814a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800814e:	78bb      	ldrb	r3, [r7, #2]
 8008150:	02db      	lsls	r3, r3, #11
 8008152:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008156:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008158:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800815c:	049b      	lsls	r3, r3, #18
 800815e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008162:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008166:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800816a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	0159      	lsls	r1, r3, #5
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	440b      	add	r3, r1
 8008178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008182:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008188:	2b03      	cmp	r3, #3
 800818a:	d10f      	bne.n	80081ac <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4413      	add	r3, r2
 8008194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	0151      	lsls	r1, r2, #5
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	440a      	add	r2, r1
 80081a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081aa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop

080081bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	; 0x30
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80081d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d028      	beq.n	8008238 <USB_HC_StartXfer+0x7c>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	791b      	ldrb	r3, [r3, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d124      	bne.n	8008238 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10b      	bne.n	800820c <USB_HC_StartXfer+0x50>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	795b      	ldrb	r3, [r3, #5]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d107      	bne.n	800820c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	4619      	mov	r1, r3
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 fa30 	bl	8008668 <USB_DoPing>
      return HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	e114      	b.n	8008436 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d112      	bne.n	8008238 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	0151      	lsls	r1, r2, #5
 8008224:	6a3a      	ldr	r2, [r7, #32]
 8008226:	440a      	add	r2, r1
 8008228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800822c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008230:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d018      	beq.n	8008272 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	8912      	ldrh	r2, [r2, #8]
 8008248:	4413      	add	r3, r2
 800824a:	3b01      	subs	r3, #1
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	8912      	ldrh	r2, [r2, #8]
 8008250:	fbb3 f3f2 	udiv	r3, r3, r2
 8008254:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008256:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008258:	8b7b      	ldrh	r3, [r7, #26]
 800825a:	429a      	cmp	r2, r3
 800825c:	d90b      	bls.n	8008276 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800825e:	8b7b      	ldrh	r3, [r7, #26]
 8008260:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	8912      	ldrh	r2, [r2, #8]
 8008268:	fb02 f203 	mul.w	r2, r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	611a      	str	r2, [r3, #16]
 8008270:	e001      	b.n	8008276 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008272:	2301      	movs	r3, #1
 8008274:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	78db      	ldrb	r3, [r3, #3]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d006      	beq.n	800828c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800827e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	8912      	ldrh	r2, [r2, #8]
 8008284:	fb02 f203 	mul.w	r2, r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008296:	04d9      	lsls	r1, r3, #19
 8008298:	4b69      	ldr	r3, [pc, #420]	; (8008440 <USB_HC_StartXfer+0x284>)
 800829a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800829c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	7a9b      	ldrb	r3, [r3, #10]
 80082a2:	075b      	lsls	r3, r3, #29
 80082a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	0148      	lsls	r0, r1, #5
 80082ac:	6a39      	ldr	r1, [r7, #32]
 80082ae:	4401      	add	r1, r0
 80082b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80082b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	68d9      	ldr	r1, [r3, #12]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ce:	460a      	mov	r2, r1
 80082d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bf0c      	ite	eq
 80082e2:	2301      	moveq	r3, #1
 80082e4:	2300      	movne	r3, #0
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	6a3a      	ldr	r2, [r7, #32]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008304:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008308:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	7e7b      	ldrb	r3, [r7, #25]
 800831a:	075b      	lsls	r3, r3, #29
 800831c:	69f9      	ldr	r1, [r7, #28]
 800831e:	0148      	lsls	r0, r1, #5
 8008320:	6a39      	ldr	r1, [r7, #32]
 8008322:	4401      	add	r1, r0
 8008324:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008328:	4313      	orrs	r3, r2
 800832a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	4413      	add	r3, r2
 8008334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a42      	ldr	r2, [pc, #264]	; (8008444 <USB_HC_StartXfer+0x288>)
 800833c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800833e:	4b41      	ldr	r3, [pc, #260]	; (8008444 <USB_HC_StartXfer+0x288>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008346:	4a3f      	ldr	r2, [pc, #252]	; (8008444 <USB_HC_StartXfer+0x288>)
 8008348:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	78db      	ldrb	r3, [r3, #3]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d006      	beq.n	8008360 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008352:	4b3c      	ldr	r3, [pc, #240]	; (8008444 <USB_HC_StartXfer+0x288>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800835a:	4a3a      	ldr	r2, [pc, #232]	; (8008444 <USB_HC_StartXfer+0x288>)
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	e005      	b.n	800836c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008360:	4b38      	ldr	r3, [pc, #224]	; (8008444 <USB_HC_StartXfer+0x288>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008368:	4a36      	ldr	r2, [pc, #216]	; (8008444 <USB_HC_StartXfer+0x288>)
 800836a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800836c:	4b35      	ldr	r3, [pc, #212]	; (8008444 <USB_HC_StartXfer+0x288>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008374:	4a33      	ldr	r2, [pc, #204]	; (8008444 <USB_HC_StartXfer+0x288>)
 8008376:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	4413      	add	r3, r2
 8008380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008384:	461a      	mov	r2, r3
 8008386:	4b2f      	ldr	r3, [pc, #188]	; (8008444 <USB_HC_StartXfer+0x288>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	e04f      	b.n	8008436 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	78db      	ldrb	r3, [r3, #3]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d14a      	bne.n	8008434 <USB_HC_StartXfer+0x278>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d046      	beq.n	8008434 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	79db      	ldrb	r3, [r3, #7]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d830      	bhi.n	8008410 <USB_HC_StartXfer+0x254>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USB_HC_StartXfer+0x1f8>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083e9 	.word	0x080083e9
 80083bc:	080083c5 	.word	0x080083c5
 80083c0:	080083e9 	.word	0x080083e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	3303      	adds	r3, #3
 80083ca:	089b      	lsrs	r3, r3, #2
 80083cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80083ce:	8afa      	ldrh	r2, [r7, #22]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d91c      	bls.n	8008414 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	699b      	ldr	r3, [r3, #24]
 80083de:	f043 0220 	orr.w	r2, r3, #32
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80083e6:	e015      	b.n	8008414 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	3303      	adds	r3, #3
 80083ee:	089b      	lsrs	r3, r3, #2
 80083f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80083f2:	8afa      	ldrh	r2, [r7, #22]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	429a      	cmp	r2, r3
 8008400:	d90a      	bls.n	8008418 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	619a      	str	r2, [r3, #24]
        }
        break;
 800840e:	e003      	b.n	8008418 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008410:	bf00      	nop
 8008412:	e002      	b.n	800841a <USB_HC_StartXfer+0x25e>
        break;
 8008414:	bf00      	nop
 8008416:	e000      	b.n	800841a <USB_HC_StartXfer+0x25e>
        break;
 8008418:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	68d9      	ldr	r1, [r3, #12]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	785a      	ldrb	r2, [r3, #1]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	b298      	uxth	r0, r3
 8008428:	2300      	movs	r3, #0
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4603      	mov	r3, r0
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f7ff fb84 	bl	8007b3c <USB_WritePacket>
  }

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3728      	adds	r7, #40	; 0x28
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	1ff80000 	.word	0x1ff80000
 8008444:	20000280 	.word	0x20000280

08008448 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	b29b      	uxth	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800846a:	b480      	push	{r7}
 800846c:	b087      	sub	sp, #28
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	0c9b      	lsrs	r3, r3, #18
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <USB_HC_Halt+0x3a>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d16c      	bne.n	800857e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d143      	bne.n	8008558 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	0151      	lsls	r1, r2, #5
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	440a      	add	r2, r1
 80084e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	440a      	add	r2, r1
 8008506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800850e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	440a      	add	r2, r1
 8008526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800852a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800852e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	3301      	adds	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800853c:	d81d      	bhi.n	800857a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008554:	d0ec      	beq.n	8008530 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008556:	e080      	b.n	800865a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	4413      	add	r3, r2
 8008560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	0151      	lsls	r1, r2, #5
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	440a      	add	r2, r1
 800856e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008576:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008578:	e06f      	b.n	800865a <USB_HC_Halt+0x1f0>
          break;
 800857a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800857c:	e06d      	b.n	800865a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	440a      	add	r2, r1
 8008594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800859c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d143      	bne.n	8008636 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	440a      	add	r2, r1
 8008604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800860c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	3301      	adds	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800861a:	d81d      	bhi.n	8008658 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800862e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008632:	d0ec      	beq.n	800860e <USB_HC_Halt+0x1a4>
 8008634:	e011      	b.n	800865a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	440a      	add	r2, r1
 800864c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e000      	b.n	800865a <USB_HC_Halt+0x1f0>
          break;
 8008658:	bf00      	nop
    }
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800867c:	2301      	movs	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	04da      	lsls	r2, r3, #19
 8008684:	4b15      	ldr	r3, [pc, #84]	; (80086dc <USB_DoPing+0x74>)
 8008686:	4013      	ands	r3, r2
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	0151      	lsls	r1, r2, #5
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	440a      	add	r2, r1
 8008690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008698:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c6:	461a      	mov	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	1ff80000 	.word	0x1ff80000

080086e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff f99f 	bl	8007a34 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80086f6:	2110      	movs	r1, #16
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7ff f9d7 	bl	8007aac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff f9fa 	bl	8007af8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]
 8008708:	e01f      	b.n	800874a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008720:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008728:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008730:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	015a      	lsls	r2, r3, #5
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800873e:	461a      	mov	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	3301      	adds	r3, #1
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b0f      	cmp	r3, #15
 800874e:	d9dc      	bls.n	800870a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008750:	2300      	movs	r3, #0
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	e034      	b.n	80087c0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800876c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008774:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800877c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878a:	461a      	mov	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	3301      	adds	r3, #1
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879c:	d80c      	bhi.n	80087b8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087b4:	d0ec      	beq.n	8008790 <USB_StopHost+0xb0>
 80087b6:	e000      	b.n	80087ba <USB_StopHost+0xda>
        break;
 80087b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	3301      	adds	r3, #1
 80087be:	613b      	str	r3, [r7, #16]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2b0f      	cmp	r3, #15
 80087c4:	d9c7      	bls.n	8008756 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087cc:	461a      	mov	r2, r3
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f04f 32ff 	mov.w	r2, #4294967295
 80087da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff f918 	bl	8007a12 <USB_EnableGlobalInt>

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087ec:	b590      	push	{r4, r7, lr}
 80087ee:	b089      	sub	sp, #36	; 0x24
 80087f0:	af04      	add	r7, sp, #16
 80087f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80087f4:	2301      	movs	r3, #1
 80087f6:	2202      	movs	r2, #2
 80087f8:	2102      	movs	r1, #2
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fc68 	bl	80090d0 <USBH_FindInterface>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2bff      	cmp	r3, #255	; 0xff
 8008808:	d002      	beq.n	8008810 <USBH_CDC_InterfaceInit+0x24>
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d901      	bls.n	8008814 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008810:	2302      	movs	r3, #2
 8008812:	e13d      	b.n	8008a90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fc3d 	bl	8009098 <USBH_SelectInterface>
 800881e:	4603      	mov	r3, r0
 8008820:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008828:	2302      	movs	r3, #2
 800882a:	e131      	b.n	8008a90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008832:	2050      	movs	r0, #80	; 0x50
 8008834:	f002 fa04 	bl	800ac40 <malloc>
 8008838:	4603      	mov	r3, r0
 800883a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800884c:	2302      	movs	r3, #2
 800884e:	e11f      	b.n	8008a90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008850:	2250      	movs	r2, #80	; 0x50
 8008852:	2100      	movs	r1, #0
 8008854:	68b8      	ldr	r0, [r7, #8]
 8008856:	f002 fa03 	bl	800ac60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	211a      	movs	r1, #26
 8008860:	fb01 f303 	mul.w	r3, r1, r3
 8008864:	4413      	add	r3, r2
 8008866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b25b      	sxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	da15      	bge.n	800889e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	211a      	movs	r1, #26
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	4413      	add	r3, r2
 800887e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	211a      	movs	r1, #26
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	4413      	add	r3, r2
 8008894:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008898:	881a      	ldrh	r2, [r3, #0]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 fe36 	bl	800a516 <USBH_AllocPipe>
 80088aa:	4603      	mov	r3, r0
 80088ac:	461a      	mov	r2, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	7819      	ldrb	r1, [r3, #0]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	7858      	ldrb	r0, [r3, #1]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	8952      	ldrh	r2, [r2, #10]
 80088ca:	9202      	str	r2, [sp, #8]
 80088cc:	2203      	movs	r2, #3
 80088ce:	9201      	str	r2, [sp, #4]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4623      	mov	r3, r4
 80088d4:	4602      	mov	r2, r0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fdee 	bl	800a4b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2200      	movs	r2, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f002 f8fb 	bl	800aae0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80088ea:	2300      	movs	r3, #0
 80088ec:	2200      	movs	r2, #0
 80088ee:	210a      	movs	r1, #10
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fbed 	bl	80090d0 <USBH_FindInterface>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2bff      	cmp	r3, #255	; 0xff
 80088fe:	d002      	beq.n	8008906 <USBH_CDC_InterfaceInit+0x11a>
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d901      	bls.n	800890a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008906:	2302      	movs	r3, #2
 8008908:	e0c2      	b.n	8008a90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	211a      	movs	r1, #26
 8008910:	fb01 f303 	mul.w	r3, r1, r3
 8008914:	4413      	add	r3, r2
 8008916:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b25b      	sxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	da16      	bge.n	8008950 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	211a      	movs	r1, #26
 8008928:	fb01 f303 	mul.w	r3, r1, r3
 800892c:	4413      	add	r3, r2
 800892e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008932:	781a      	ldrb	r2, [r3, #0]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	211a      	movs	r1, #26
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008948:	881a      	ldrh	r2, [r3, #0]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	835a      	strh	r2, [r3, #26]
 800894e:	e015      	b.n	800897c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	211a      	movs	r1, #26
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	4413      	add	r3, r2
 800895c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	211a      	movs	r1, #26
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	4413      	add	r3, r2
 8008972:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008976:	881a      	ldrh	r2, [r3, #0]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	211a      	movs	r1, #26
 8008982:	fb01 f303 	mul.w	r3, r1, r3
 8008986:	4413      	add	r3, r2
 8008988:	f203 3356 	addw	r3, r3, #854	; 0x356
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b25b      	sxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	da16      	bge.n	80089c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	211a      	movs	r1, #26
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	4413      	add	r3, r2
 80089a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	211a      	movs	r1, #26
 80089b0:	fb01 f303 	mul.w	r3, r1, r3
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089ba:	881a      	ldrh	r2, [r3, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	835a      	strh	r2, [r3, #26]
 80089c0:	e015      	b.n	80089ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	211a      	movs	r1, #26
 80089c8:	fb01 f303 	mul.w	r3, r1, r3
 80089cc:	4413      	add	r3, r2
 80089ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	211a      	movs	r1, #26
 80089de:	fb01 f303 	mul.w	r3, r1, r3
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80089e8:	881a      	ldrh	r2, [r3, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	7b9b      	ldrb	r3, [r3, #14]
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 fd8e 	bl	800a516 <USBH_AllocPipe>
 80089fa:	4603      	mov	r3, r0
 80089fc:	461a      	mov	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	7bdb      	ldrb	r3, [r3, #15]
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f001 fd84 	bl	800a516 <USBH_AllocPipe>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	461a      	mov	r2, r3
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	7b59      	ldrb	r1, [r3, #13]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	7b98      	ldrb	r0, [r3, #14]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	8b12      	ldrh	r2, [r2, #24]
 8008a2e:	9202      	str	r2, [sp, #8]
 8008a30:	2202      	movs	r2, #2
 8008a32:	9201      	str	r2, [sp, #4]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	4623      	mov	r3, r4
 8008a38:	4602      	mov	r2, r0
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f001 fd3c 	bl	800a4b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	7b19      	ldrb	r1, [r3, #12]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	7bd8      	ldrb	r0, [r3, #15]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	8b52      	ldrh	r2, [r2, #26]
 8008a58:	9202      	str	r2, [sp, #8]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	9201      	str	r2, [sp, #4]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4623      	mov	r3, r4
 8008a62:	4602      	mov	r2, r0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f001 fd27 	bl	800a4b8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	7b5b      	ldrb	r3, [r3, #13]
 8008a76:	2200      	movs	r2, #0
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 f830 	bl	800aae0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	7b1b      	ldrb	r3, [r3, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f002 f829 	bl	800aae0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}

08008a98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00e      	beq.n	8008ad0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f001 fd1c 	bl	800a4f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 fd47 	bl	800a558 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	7b1b      	ldrb	r3, [r3, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	7b1b      	ldrb	r3, [r3, #12]
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 fd09 	bl	800a4f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	7b1b      	ldrb	r3, [r3, #12]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fd34 	bl	800a558 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	7b5b      	ldrb	r3, [r3, #13]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00e      	beq.n	8008b1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	7b5b      	ldrb	r3, [r3, #13]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 fcf6 	bl	800a4f6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	7b5b      	ldrb	r3, [r3, #13]
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 fd21 	bl	800a558 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f002 f88d 	bl	800ac50 <free>
    phost->pActiveClass->pData = 0U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3340      	adds	r3, #64	; 0x40
 8008b60:	4619      	mov	r1, r3
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f8b1 	bl	8008cca <GetLineCoding>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d105      	bne.n	8008b7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b78:	2102      	movs	r1, #2
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	d877      	bhi.n	8008c9c <USBH_CDC_Process+0x114>
 8008bac:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <USBH_CDC_Process+0x2c>)
 8008bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb2:	bf00      	nop
 8008bb4:	08008bc9 	.word	0x08008bc9
 8008bb8:	08008bcf 	.word	0x08008bcf
 8008bbc:	08008bff 	.word	0x08008bff
 8008bc0:	08008c73 	.word	0x08008c73
 8008bc4:	08008c81 	.word	0x08008c81
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
      break;
 8008bcc:	e06d      	b.n	8008caa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f897 	bl	8008d08 <SetLineCoding>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bde:	7bbb      	ldrb	r3, [r7, #14]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008bec:	e058      	b.n	8008ca0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008bee:	7bbb      	ldrb	r3, [r7, #14]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d055      	beq.n	8008ca0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008bfc:	e050      	b.n	8008ca0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	3340      	adds	r3, #64	; 0x40
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f860 	bl	8008cca <GetLineCoding>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d126      	bne.n	8008c62 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c26:	791b      	ldrb	r3, [r3, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d13b      	bne.n	8008ca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c36:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d133      	bne.n	8008ca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c46:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d12b      	bne.n	8008ca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c54:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d124      	bne.n	8008ca4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f95a 	bl	8008f14 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c60:	e020      	b.n	8008ca4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d01d      	beq.n	8008ca4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c70:	e018      	b.n	8008ca4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f867 	bl	8008d46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f8dc 	bl	8008e36 <CDC_ProcessReception>
      break;
 8008c7e:	e014      	b.n	8008caa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c80:	2100      	movs	r1, #0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 ffe5 	bl	8009c52 <USBH_ClrFeature>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008c9a:	e005      	b.n	8008ca8 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e004      	b.n	8008caa <USBH_CDC_Process+0x122>
      break;
 8008ca0:	bf00      	nop
 8008ca2:	e002      	b.n	8008caa <USBH_CDC_Process+0x122>
      break;
 8008ca4:	bf00      	nop
 8008ca6:	e000      	b.n	8008caa <USBH_CDC_Process+0x122>
      break;
 8008ca8:	bf00      	nop

  }

  return status;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	370c      	adds	r7, #12
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	22a1      	movs	r2, #161	; 0xa1
 8008cd8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2221      	movs	r2, #33	; 0x21
 8008cde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2207      	movs	r2, #7
 8008cf0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2207      	movs	r2, #7
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f98a 	bl	800a012 <USBH_CtlReq>
 8008cfe:	4603      	mov	r3, r0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2221      	movs	r2, #33	; 0x21
 8008d16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2207      	movs	r2, #7
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f001 f96b 	bl	800a012 <USBH_CtlReq>
 8008d3c:	4603      	mov	r3, r0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b086      	sub	sp, #24
 8008d4a:	af02      	add	r7, sp, #8
 8008d4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d002      	beq.n	8008d6c <CDC_ProcessTransmission+0x26>
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d025      	beq.n	8008db6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8008d6a:	e060      	b.n	8008e2e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	8b12      	ldrh	r2, [r2, #24]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d90c      	bls.n	8008d92 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	69d9      	ldr	r1, [r3, #28]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	8b1a      	ldrh	r2, [r3, #24]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	7b58      	ldrb	r0, [r3, #13]
 8008d84:	2301      	movs	r3, #1
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4603      	mov	r3, r0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fb51 	bl	800a432 <USBH_BulkSendData>
 8008d90:	e00c      	b.n	8008dac <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	7b58      	ldrb	r0, [r3, #13]
 8008da0:	2301      	movs	r3, #1
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	4603      	mov	r3, r0
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f001 fb43 	bl	800a432 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008db4:	e03b      	b.n	8008e2e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	7b5b      	ldrb	r3, [r3, #13]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 fe65 	bl	800aa8c <USBH_LL_GetURBState>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d128      	bne.n	8008e1e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	8b12      	ldrh	r2, [r2, #24]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d90e      	bls.n	8008df6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	8b12      	ldrh	r2, [r2, #24]
 8008de0:	1a9a      	subs	r2, r3, r2
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	8b12      	ldrh	r2, [r2, #24]
 8008dee:	441a      	add	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	61da      	str	r2, [r3, #28]
 8008df4:	e002      	b.n	8008dfc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d004      	beq.n	8008e0e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e0c:	e00e      	b.n	8008e2c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f868 	bl	8008eec <USBH_CDC_TransmitCallback>
      break;
 8008e1c:	e006      	b.n	8008e2c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d103      	bne.n	8008e2c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e2c:	bf00      	nop
  }
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b086      	sub	sp, #24
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d002      	beq.n	8008e5c <CDC_ProcessReception+0x26>
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d00e      	beq.n	8008e78 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008e5a:	e043      	b.n	8008ee4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	6a19      	ldr	r1, [r3, #32]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	8b5a      	ldrh	r2, [r3, #26]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	7b1b      	ldrb	r3, [r3, #12]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 fb07 	bl	800a47c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2204      	movs	r2, #4
 8008e72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008e76:	e035      	b.n	8008ee4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	7b1b      	ldrb	r3, [r3, #12]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 fe04 	bl	800aa8c <USBH_LL_GetURBState>
 8008e84:	4603      	mov	r3, r0
 8008e86:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e88:	7cfb      	ldrb	r3, [r7, #19]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d129      	bne.n	8008ee2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	7b1b      	ldrb	r3, [r3, #12]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fd67 	bl	800a968 <USBH_LL_GetLastXferSize>
 8008e9a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d016      	beq.n	8008ed4 <CDC_ProcessReception+0x9e>
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	8b5b      	ldrh	r3, [r3, #26]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d910      	bls.n	8008ed4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad2      	subs	r2, r2, r3
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	441a      	add	r2, r3
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2203      	movs	r2, #3
 8008ece:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008ed2:	e006      	b.n	8008ee2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f80f 	bl	8008f00 <USBH_CDC_ReceiveCallback>
      break;
 8008ee2:	bf00      	nop
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4613      	mov	r3, r2
 8008f34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e029      	b.n	8008f94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	79fa      	ldrb	r2, [r7, #7]
 8008f44:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f81f 	bl	8008f9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f001 fc39 	bl	800a804 <USBH_LL_Init>

  return USBH_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e009      	b.n	8008fc2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	33e0      	adds	r3, #224	; 0xe0
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	2200      	movs	r2, #0
 8008fba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b0e      	cmp	r3, #14
 8008fc6:	d9f2      	bls.n	8008fae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e009      	b.n	8008fe2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008fd8:	2200      	movs	r2, #0
 8008fda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe8:	d3f1      	bcc.n	8008fce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2240      	movs	r2, #64	; 0x40
 800900e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d016      	beq.n	8009086 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10e      	bne.n	8009080 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009068:	1c59      	adds	r1, r3, #1
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	33de      	adds	r3, #222	; 0xde
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
 800907e:	e004      	b.n	800908a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009080:	2302      	movs	r3, #2
 8009082:	73fb      	strb	r3, [r7, #15]
 8009084:	e001      	b.n	800908a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009086:	2302      	movs	r3, #2
 8009088:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800908a:	7bfb      	ldrb	r3, [r7, #15]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d204      	bcs.n	80090be <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80090bc:	e001      	b.n	80090c2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80090be:	2302      	movs	r3, #2
 80090c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	4608      	mov	r0, r1
 80090da:	4611      	mov	r1, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	4603      	mov	r3, r0
 80090e0:	70fb      	strb	r3, [r7, #3]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70bb      	strb	r3, [r7, #2]
 80090e6:	4613      	mov	r3, r2
 80090e8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80090f8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090fa:	e025      	b.n	8009148 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	221a      	movs	r2, #26
 8009100:	fb02 f303 	mul.w	r3, r2, r3
 8009104:	3308      	adds	r3, #8
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	3302      	adds	r3, #2
 800910c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	795b      	ldrb	r3, [r3, #5]
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	429a      	cmp	r2, r3
 8009116:	d002      	beq.n	800911e <USBH_FindInterface+0x4e>
 8009118:	78fb      	ldrb	r3, [r7, #3]
 800911a:	2bff      	cmp	r3, #255	; 0xff
 800911c:	d111      	bne.n	8009142 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009122:	78ba      	ldrb	r2, [r7, #2]
 8009124:	429a      	cmp	r2, r3
 8009126:	d002      	beq.n	800912e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009128:	78bb      	ldrb	r3, [r7, #2]
 800912a:	2bff      	cmp	r3, #255	; 0xff
 800912c:	d109      	bne.n	8009142 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009132:	787a      	ldrb	r2, [r7, #1]
 8009134:	429a      	cmp	r2, r3
 8009136:	d002      	beq.n	800913e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009138:	787b      	ldrb	r3, [r7, #1]
 800913a:	2bff      	cmp	r3, #255	; 0xff
 800913c:	d101      	bne.n	8009142 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	e006      	b.n	8009150 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	3301      	adds	r3, #1
 8009146:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d9d6      	bls.n	80090fc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800914e:	23ff      	movs	r3, #255	; 0xff
}
 8009150:	4618      	mov	r0, r3
 8009152:	371c      	adds	r7, #28
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 fb89 	bl	800a87c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800916a:	2101      	movs	r1, #1
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 fca0 	bl	800aab2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af04      	add	r7, sp, #16
 8009182:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009184:	2302      	movs	r3, #2
 8009186:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b01      	cmp	r3, #1
 8009196:	d102      	bne.n	800919e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2203      	movs	r2, #3
 800919c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b0b      	cmp	r3, #11
 80091a6:	f200 81b3 	bhi.w	8009510 <USBH_Process+0x394>
 80091aa:	a201      	add	r2, pc, #4	; (adr r2, 80091b0 <USBH_Process+0x34>)
 80091ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091b0:	080091e1 	.word	0x080091e1
 80091b4:	08009213 	.word	0x08009213
 80091b8:	0800927b 	.word	0x0800927b
 80091bc:	080094ab 	.word	0x080094ab
 80091c0:	08009511 	.word	0x08009511
 80091c4:	0800931f 	.word	0x0800931f
 80091c8:	08009451 	.word	0x08009451
 80091cc:	08009355 	.word	0x08009355
 80091d0:	08009375 	.word	0x08009375
 80091d4:	08009395 	.word	0x08009395
 80091d8:	080093c3 	.word	0x080093c3
 80091dc:	08009493 	.word	0x08009493
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8193 	beq.w	8009514 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80091f4:	20c8      	movs	r0, #200	; 0xc8
 80091f6:	f001 fca6 	bl	800ab46 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fb99 	bl	800a932 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009210:	e180      	b.n	8009514 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009218:	2b01      	cmp	r3, #1
 800921a:	d107      	bne.n	800922c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800922a:	e182      	b.n	8009532 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009236:	d914      	bls.n	8009262 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800923e:	3301      	adds	r3, #1
 8009240:	b2da      	uxtb	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800924e:	2b03      	cmp	r3, #3
 8009250:	d903      	bls.n	800925a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	220d      	movs	r2, #13
 8009256:	701a      	strb	r2, [r3, #0]
      break;
 8009258:	e16b      	b.n	8009532 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]
      break;
 8009260:	e167      	b.n	8009532 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009268:	f103 020a 	add.w	r2, r3, #10
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009272:	200a      	movs	r0, #10
 8009274:	f001 fc67 	bl	800ab46 <USBH_Delay>
      break;
 8009278:	e15b      	b.n	8009532 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d005      	beq.n	8009290 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800928a:	2104      	movs	r1, #4
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009290:	2064      	movs	r0, #100	; 0x64
 8009292:	f001 fc58 	bl	800ab46 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 fb26 	bl	800a8e8 <USBH_LL_GetSpeed>
 800929c:	4603      	mov	r3, r0
 800929e:	461a      	mov	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2205      	movs	r2, #5
 80092aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80092ac:	2100      	movs	r1, #0
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 f931 	bl	800a516 <USBH_AllocPipe>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80092bc:	2180      	movs	r1, #128	; 0x80
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 f929 	bl	800a516 <USBH_AllocPipe>
 80092c4:	4603      	mov	r3, r0
 80092c6:	461a      	mov	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7919      	ldrb	r1, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092e0:	b292      	uxth	r2, r2
 80092e2:	9202      	str	r2, [sp, #8]
 80092e4:	2200      	movs	r2, #0
 80092e6:	9201      	str	r2, [sp, #4]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4603      	mov	r3, r0
 80092ec:	2280      	movs	r2, #128	; 0x80
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 f8e2 	bl	800a4b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	7959      	ldrb	r1, [r3, #5]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009308:	b292      	uxth	r2, r2
 800930a:	9202      	str	r2, [sp, #8]
 800930c:	2200      	movs	r2, #0
 800930e:	9201      	str	r2, [sp, #4]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	4603      	mov	r3, r0
 8009314:	2200      	movs	r2, #0
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 f8ce 	bl	800a4b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800931c:	e109      	b.n	8009532 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f90c 	bl	800953c <USBH_HandleEnum>
 8009324:	4603      	mov	r3, r0
 8009326:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009328:	7bbb      	ldrb	r3, [r7, #14]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 80f3 	bne.w	8009518 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009340:	2b01      	cmp	r3, #1
 8009342:	d103      	bne.n	800934c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2208      	movs	r2, #8
 8009348:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800934a:	e0e5      	b.n	8009518 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2207      	movs	r2, #7
 8009350:	701a      	strb	r2, [r3, #0]
      break;
 8009352:	e0e1      	b.n	8009518 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80de 	beq.w	800951c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009366:	2101      	movs	r1, #1
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2208      	movs	r2, #8
 8009370:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009372:	e0d3      	b.n	800951c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800937a:	b29b      	uxth	r3, r3
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fc20 	bl	8009bc4 <USBH_SetCfg>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	f040 80ca 	bne.w	8009520 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2209      	movs	r2, #9
 8009390:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009392:	e0c5      	b.n	8009520 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80093a2:	2101      	movs	r1, #1
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fc30 	bl	8009c0a <USBH_SetFeature>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f040 80b9 	bne.w	8009524 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	220a      	movs	r2, #10
 80093b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80093b8:	e0b4      	b.n	8009524 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	220a      	movs	r2, #10
 80093be:	701a      	strb	r2, [r3, #0]
      break;
 80093c0:	e0b0      	b.n	8009524 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80ad 	beq.w	8009528 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
 80093da:	e016      	b.n	800940a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80093dc:	7bfa      	ldrb	r2, [r7, #15]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	32de      	adds	r2, #222	; 0xde
 80093e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e6:	791a      	ldrb	r2, [r3, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d108      	bne.n	8009404 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80093f2:	7bfa      	ldrb	r2, [r7, #15]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	32de      	adds	r2, #222	; 0xde
 80093f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009402:	e005      	b.n	8009410 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	3301      	adds	r3, #1
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0e5      	beq.n	80093dc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d016      	beq.n	8009448 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d109      	bne.n	8009440 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2206      	movs	r2, #6
 8009430:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009438:	2103      	movs	r1, #3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800943e:	e073      	b.n	8009528 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	220d      	movs	r2, #13
 8009444:	701a      	strb	r2, [r3, #0]
      break;
 8009446:	e06f      	b.n	8009528 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	220d      	movs	r2, #13
 800944c:	701a      	strb	r2, [r3, #0]
      break;
 800944e:	e06b      	b.n	8009528 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d017      	beq.n	800948a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	4798      	blx	r3
 8009466:	4603      	mov	r3, r0
 8009468:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	220b      	movs	r2, #11
 8009476:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009478:	e058      	b.n	800952c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d154      	bne.n	800952c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	220d      	movs	r2, #13
 8009486:	701a      	strb	r2, [r3, #0]
      break;
 8009488:	e050      	b.n	800952c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	220d      	movs	r2, #13
 800948e:	701a      	strb	r2, [r3, #0]
      break;
 8009490:	e04c      	b.n	800952c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009498:	2b00      	cmp	r3, #0
 800949a:	d049      	beq.n	8009530 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
      }
      break;
 80094a8:	e042      	b.n	8009530 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff fd72 	bl	8008f9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094e6:	2105      	movs	r1, #5
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d107      	bne.n	8009508 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff fe2b 	bl	800915c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009506:	e014      	b.n	8009532 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 f9b7 	bl	800a87c <USBH_LL_Start>
      break;
 800950e:	e010      	b.n	8009532 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009510:	bf00      	nop
 8009512:	e00e      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 8009514:	bf00      	nop
 8009516:	e00c      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 8009518:	bf00      	nop
 800951a:	e00a      	b.n	8009532 <USBH_Process+0x3b6>
    break;
 800951c:	bf00      	nop
 800951e:	e008      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 8009520:	bf00      	nop
 8009522:	e006      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 8009524:	bf00      	nop
 8009526:	e004      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 8009528:	bf00      	nop
 800952a:	e002      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 800952c:	bf00      	nop
 800952e:	e000      	b.n	8009532 <USBH_Process+0x3b6>
      break;
 8009530:	bf00      	nop
  }
  return USBH_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af04      	add	r7, sp, #16
 8009542:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009548:	2301      	movs	r3, #1
 800954a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	2b07      	cmp	r3, #7
 8009552:	f200 81c1 	bhi.w	80098d8 <USBH_HandleEnum+0x39c>
 8009556:	a201      	add	r2, pc, #4	; (adr r2, 800955c <USBH_HandleEnum+0x20>)
 8009558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955c:	0800957d 	.word	0x0800957d
 8009560:	0800963b 	.word	0x0800963b
 8009564:	080096a5 	.word	0x080096a5
 8009568:	08009733 	.word	0x08009733
 800956c:	0800979d 	.word	0x0800979d
 8009570:	0800980d 	.word	0x0800980d
 8009574:	08009853 	.word	0x08009853
 8009578:	08009899 	.word	0x08009899
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800957c:	2108      	movs	r1, #8
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa50 	bl	8009a24 <USBH_Get_DevDesc>
 8009584:	4603      	mov	r3, r0
 8009586:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d130      	bne.n	80095f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7919      	ldrb	r1, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80095b2:	b292      	uxth	r2, r2
 80095b4:	9202      	str	r2, [sp, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	9201      	str	r2, [sp, #4]
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	4603      	mov	r3, r0
 80095be:	2280      	movs	r2, #128	; 0x80
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 ff79 	bl	800a4b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7959      	ldrb	r1, [r3, #5]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095da:	b292      	uxth	r2, r2
 80095dc:	9202      	str	r2, [sp, #8]
 80095de:	2200      	movs	r2, #0
 80095e0:	9201      	str	r2, [sp, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	4603      	mov	r3, r0
 80095e6:	2200      	movs	r2, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 ff65 	bl	800a4b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095ee:	e175      	b.n	80098dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	f040 8172 	bne.w	80098dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80095fe:	3301      	adds	r3, #1
 8009600:	b2da      	uxtb	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800960e:	2b03      	cmp	r3, #3
 8009610:	d903      	bls.n	800961a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	220d      	movs	r2, #13
 8009616:	701a      	strb	r2, [r3, #0]
      break;
 8009618:	e160      	b.n	80098dc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	795b      	ldrb	r3, [r3, #5]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 ff99 	bl	800a558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	791b      	ldrb	r3, [r3, #4]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 ff93 	bl	800a558 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]
      break;
 8009638:	e150      	b.n	80098dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800963a:	2112      	movs	r1, #18
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f9f1 	bl	8009a24 <USBH_Get_DevDesc>
 8009642:	4603      	mov	r3, r0
 8009644:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009652:	e145      	b.n	80098e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	2b03      	cmp	r3, #3
 8009658:	f040 8142 	bne.w	80098e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009662:	3301      	adds	r3, #1
 8009664:	b2da      	uxtb	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009672:	2b03      	cmp	r3, #3
 8009674:	d903      	bls.n	800967e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	220d      	movs	r2, #13
 800967a:	701a      	strb	r2, [r3, #0]
      break;
 800967c:	e130      	b.n	80098e0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	795b      	ldrb	r3, [r3, #5]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 ff67 	bl	800a558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	791b      	ldrb	r3, [r3, #4]
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 ff61 	bl	800a558 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
      break;
 80096a2:	e11d      	b.n	80098e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80096a4:	2101      	movs	r1, #1
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa68 	bl	8009b7c <USBH_SetAddress>
 80096ac:	4603      	mov	r3, r0
 80096ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d132      	bne.n	800971c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80096b6:	2002      	movs	r0, #2
 80096b8:	f001 fa45 	bl	800ab46 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2203      	movs	r2, #3
 80096c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7919      	ldrb	r1, [r3, #4]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096de:	b292      	uxth	r2, r2
 80096e0:	9202      	str	r2, [sp, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	9201      	str	r2, [sp, #4]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4603      	mov	r3, r0
 80096ea:	2280      	movs	r2, #128	; 0x80
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fee3 	bl	800a4b8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	7959      	ldrb	r1, [r3, #5]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009706:	b292      	uxth	r2, r2
 8009708:	9202      	str	r2, [sp, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	9201      	str	r2, [sp, #4]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4603      	mov	r3, r0
 8009712:	2200      	movs	r2, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fecf 	bl	800a4b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800971a:	e0e3      	b.n	80098e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b03      	cmp	r3, #3
 8009720:	f040 80e0 	bne.w	80098e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	220d      	movs	r2, #13
 8009728:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	705a      	strb	r2, [r3, #1]
      break;
 8009730:	e0d8      	b.n	80098e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009732:	2109      	movs	r1, #9
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f99d 	bl	8009a74 <USBH_Get_CfgDesc>
 800973a:	4603      	mov	r3, r0
 800973c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d103      	bne.n	800974c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2204      	movs	r2, #4
 8009748:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800974a:	e0cd      	b.n	80098e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	2b03      	cmp	r3, #3
 8009750:	f040 80ca 	bne.w	80098e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800975a:	3301      	adds	r3, #1
 800975c:	b2da      	uxtb	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800976a:	2b03      	cmp	r3, #3
 800976c:	d903      	bls.n	8009776 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	220d      	movs	r2, #13
 8009772:	701a      	strb	r2, [r3, #0]
      break;
 8009774:	e0b8      	b.n	80098e8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	795b      	ldrb	r3, [r3, #5]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 feeb 	bl	800a558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	791b      	ldrb	r3, [r3, #4]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fee5 	bl	800a558 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	701a      	strb	r2, [r3, #0]
      break;
 800979a:	e0a5      	b.n	80098e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f965 	bl	8009a74 <USBH_Get_CfgDesc>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d103      	bne.n	80097bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2205      	movs	r2, #5
 80097b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097ba:	e097      	b.n	80098ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	f040 8094 	bne.w	80098ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097ca:	3301      	adds	r3, #1
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d903      	bls.n	80097e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	220d      	movs	r2, #13
 80097e2:	701a      	strb	r2, [r3, #0]
      break;
 80097e4:	e082      	b.n	80098ec <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	795b      	ldrb	r3, [r3, #5]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 feb3 	bl	800a558 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	791b      	ldrb	r3, [r3, #4]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fead 	bl	800a558 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
      break;
 800980a:	e06f      	b.n	80098ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009812:	2b00      	cmp	r3, #0
 8009814:	d019      	beq.n	800984a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009822:	23ff      	movs	r3, #255	; 0xff
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f949 	bl	8009abc <USBH_Get_StringDesc>
 800982a:	4603      	mov	r3, r0
 800982c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d103      	bne.n	800983c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2206      	movs	r2, #6
 8009838:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800983a:	e059      	b.n	80098f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	2b03      	cmp	r3, #3
 8009840:	d156      	bne.n	80098f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2206      	movs	r2, #6
 8009846:	705a      	strb	r2, [r3, #1]
      break;
 8009848:	e052      	b.n	80098f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2206      	movs	r2, #6
 800984e:	705a      	strb	r2, [r3, #1]
      break;
 8009850:	e04e      	b.n	80098f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009858:	2b00      	cmp	r3, #0
 800985a:	d019      	beq.n	8009890 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009868:	23ff      	movs	r3, #255	; 0xff
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f926 	bl	8009abc <USBH_Get_StringDesc>
 8009870:	4603      	mov	r3, r0
 8009872:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d103      	bne.n	8009882 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2207      	movs	r2, #7
 800987e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009880:	e038      	b.n	80098f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d135      	bne.n	80098f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2207      	movs	r2, #7
 800988c:	705a      	strb	r2, [r3, #1]
      break;
 800988e:	e031      	b.n	80098f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2207      	movs	r2, #7
 8009894:	705a      	strb	r2, [r3, #1]
      break;
 8009896:	e02d      	b.n	80098f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d017      	beq.n	80098d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80098ae:	23ff      	movs	r3, #255	; 0xff
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f903 	bl	8009abc <USBH_Get_StringDesc>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80098c4:	e018      	b.n	80098f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098c6:	7bbb      	ldrb	r3, [r7, #14]
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d115      	bne.n	80098f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]
      break;
 80098d0:	e012      	b.n	80098f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
      break;
 80098d6:	e00f      	b.n	80098f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80098d8:	bf00      	nop
 80098da:	e00e      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098dc:	bf00      	nop
 80098de:	e00c      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098e0:	bf00      	nop
 80098e2:	e00a      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098e4:	bf00      	nop
 80098e6:	e008      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098e8:	bf00      	nop
 80098ea:	e006      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098ec:	bf00      	nop
 80098ee:	e004      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098f0:	bf00      	nop
 80098f2:	e002      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098f4:	bf00      	nop
 80098f6:	e000      	b.n	80098fa <USBH_HandleEnum+0x3be>
      break;
 80098f8:	bf00      	nop
  }
  return Status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f804 	bl	8009946 <USBH_HandleSof>
}
 800993e:	bf00      	nop
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b0b      	cmp	r3, #11
 8009956:	d10a      	bne.n	800996e <USBH_HandleSof+0x28>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d005      	beq.n	800996e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	4798      	blx	r3
  }
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009986:	bf00      	nop
}
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80099a2:	bf00      	nop
}
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 ff58 	bl	800a8b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	791b      	ldrb	r3, [r3, #4]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 fda5 	bl	800a558 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	795b      	ldrb	r3, [r3, #5]
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fd9f 	bl	800a558 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a42:	2100      	movs	r1, #0
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f864 	bl	8009b12 <USBH_GetDescriptor>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10a      	bne.n	8009a6a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	b292      	uxth	r2, r2
 8009a64:	4619      	mov	r1, r3
 8009a66:	f000 f918 	bl	8009c9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	331c      	adds	r3, #28
 8009a84:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a86:	887b      	ldrh	r3, [r7, #2]
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a90:	2100      	movs	r1, #0
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f83d 	bl	8009b12 <USBH_GetDescriptor>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	72fb      	strb	r3, [r7, #11]
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d107      	bne.n	8009ab2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009aa8:	887a      	ldrh	r2, [r7, #2]
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 f964 	bl	8009d7a <USBH_ParseCfgDesc>
  }

  return status;
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	607a      	str	r2, [r7, #4]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	460b      	mov	r3, r1
 8009aca:	72fb      	strb	r3, [r7, #11]
 8009acc:	4613      	mov	r3, r2
 8009ace:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009ad8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ae0:	893b      	ldrh	r3, [r7, #8]
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f812 	bl	8009b12 <USBH_GetDescriptor>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]
 8009af2:	7dfb      	ldrb	r3, [r7, #23]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d107      	bne.n	8009b08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009afe:	893a      	ldrh	r2, [r7, #8]
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fa37 	bl	8009f76 <USBH_ParseStringDesc>
  }

  return status;
 8009b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	60f8      	str	r0, [r7, #12]
 8009b1a:	607b      	str	r3, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	72fb      	strb	r3, [r7, #11]
 8009b20:	4613      	mov	r3, r2
 8009b22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	789b      	ldrb	r3, [r3, #2]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d11c      	bne.n	8009b66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	893a      	ldrh	r2, [r7, #8]
 8009b42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009b44:	893b      	ldrh	r3, [r7, #8]
 8009b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b4e:	d104      	bne.n	8009b5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f240 4209 	movw	r2, #1033	; 0x409
 8009b56:	829a      	strh	r2, [r3, #20]
 8009b58:	e002      	b.n	8009b60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8b3a      	ldrh	r2, [r7, #24]
 8009b64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b66:	8b3b      	ldrh	r3, [r7, #24]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fa50 	bl	800a012 <USBH_CtlReq>
 8009b72:	4603      	mov	r3, r0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	789b      	ldrb	r3, [r3, #2]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d10f      	bne.n	8009bb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2205      	movs	r2, #5
 8009b9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa2c 	bl	800a012 <USBH_CtlReq>
 8009bba:	4603      	mov	r3, r0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	789b      	ldrb	r3, [r3, #2]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d10e      	bne.n	8009bf6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2209      	movs	r2, #9
 8009be2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	887a      	ldrh	r2, [r7, #2]
 8009be8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa09 	bl	800a012 <USBH_CtlReq>
 8009c00:	4603      	mov	r3, r0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	789b      	ldrb	r3, [r3, #2]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d10f      	bne.n	8009c3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2203      	movs	r2, #3
 8009c28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2100      	movs	r1, #0
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9e5 	bl	800a012 <USBH_CtlReq>
 8009c48:	4603      	mov	r3, r0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b082      	sub	sp, #8
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	789b      	ldrb	r3, [r3, #2]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d10f      	bne.n	8009c86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9c1 	bl	800a012 <USBH_CtlReq>
 8009c90:	4603      	mov	r3, r0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b085      	sub	sp, #20
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	60b9      	str	r1, [r7, #8]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	785a      	ldrb	r2, [r3, #1]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	3302      	adds	r3, #2
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	3303      	adds	r3, #3
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	791a      	ldrb	r2, [r3, #4]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	795a      	ldrb	r2, [r3, #5]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	799a      	ldrb	r2, [r3, #6]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	79da      	ldrb	r2, [r3, #7]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009cf4:	88fb      	ldrh	r3, [r7, #6]
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d939      	bls.n	8009d6e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	3309      	adds	r3, #9
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	330a      	adds	r3, #10
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	330b      	adds	r3, #11
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	330c      	adds	r3, #12
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	330d      	adds	r3, #13
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	021b      	lsls	r3, r3, #8
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	7b9a      	ldrb	r2, [r3, #14]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	7bda      	ldrb	r2, [r3, #15]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	7c1a      	ldrb	r2, [r3, #16]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	7c5a      	ldrb	r2, [r3, #17]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	745a      	strb	r2, [r3, #17]
  }
}
 8009d6e:	bf00      	nop
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b08a      	sub	sp, #40	; 0x28
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	4613      	mov	r3, r2
 8009d86:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	785a      	ldrb	r2, [r3, #1]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3302      	adds	r3, #2
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3303      	adds	r3, #3
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	791a      	ldrb	r2, [r3, #4]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	795a      	ldrb	r2, [r3, #5]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	799a      	ldrb	r2, [r3, #6]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	79da      	ldrb	r2, [r3, #7]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	7a1a      	ldrb	r2, [r3, #8]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009df0:	88fb      	ldrh	r3, [r7, #6]
 8009df2:	2b09      	cmp	r3, #9
 8009df4:	d95f      	bls.n	8009eb6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009df6:	2309      	movs	r3, #9
 8009df8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dfe:	e051      	b.n	8009ea4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e00:	f107 0316 	add.w	r3, r7, #22
 8009e04:	4619      	mov	r1, r3
 8009e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e08:	f000 f8e8 	bl	8009fdc <USBH_GetNextDesc>
 8009e0c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b04      	cmp	r3, #4
 8009e14:	d146      	bne.n	8009ea4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e1a:	221a      	movs	r2, #26
 8009e1c:	fb02 f303 	mul.w	r3, r2, r3
 8009e20:	3308      	adds	r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	3302      	adds	r3, #2
 8009e28:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e2c:	69f8      	ldr	r0, [r7, #28]
 8009e2e:	f000 f846 	bl	8009ebe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e3c:	e022      	b.n	8009e84 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e3e:	f107 0316 	add.w	r3, r7, #22
 8009e42:	4619      	mov	r1, r3
 8009e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e46:	f000 f8c9 	bl	8009fdc <USBH_GetNextDesc>
 8009e4a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b05      	cmp	r3, #5
 8009e52:	d117      	bne.n	8009e84 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	00d2      	lsls	r2, r2, #3
 8009e60:	211a      	movs	r1, #26
 8009e62:	fb01 f303 	mul.w	r3, r1, r3
 8009e66:	4413      	add	r3, r2
 8009e68:	3308      	adds	r3, #8
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	3304      	adds	r3, #4
 8009e70:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e74:	69b8      	ldr	r0, [r7, #24]
 8009e76:	f000 f851 	bl	8009f1c <USBH_ParseEPDesc>
            ep_ix++;
 8009e7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	791b      	ldrb	r3, [r3, #4]
 8009e88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d204      	bcs.n	8009e9a <USBH_ParseCfgDesc+0x120>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	885a      	ldrh	r2, [r3, #2]
 8009e94:	8afb      	ldrh	r3, [r7, #22]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d8d1      	bhi.n	8009e3e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d804      	bhi.n	8009eb6 <USBH_ParseCfgDesc+0x13c>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	885a      	ldrh	r2, [r3, #2]
 8009eb0:	8afb      	ldrh	r3, [r7, #22]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d8a4      	bhi.n	8009e00 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	3728      	adds	r7, #40	; 0x28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785a      	ldrb	r2, [r3, #1]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	789a      	ldrb	r2, [r3, #2]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	78da      	ldrb	r2, [r3, #3]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	791a      	ldrb	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	795a      	ldrb	r2, [r3, #5]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	799a      	ldrb	r2, [r3, #6]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	79da      	ldrb	r2, [r3, #7]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	7a1a      	ldrb	r2, [r3, #8]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	721a      	strb	r2, [r3, #8]
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781a      	ldrb	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	785a      	ldrb	r2, [r3, #1]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	789a      	ldrb	r2, [r3, #2]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	78da      	ldrb	r2, [r3, #3]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3305      	adds	r3, #5
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	021b      	lsls	r3, r3, #8
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	799a      	ldrb	r2, [r3, #6]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	719a      	strb	r2, [r3, #6]
}
 8009f6a:	bf00      	nop
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b087      	sub	sp, #28
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	4613      	mov	r3, r2
 8009f82:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3301      	adds	r3, #1
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d120      	bne.n	8009fd0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	1e9a      	subs	r2, r3, #2
 8009f94:	88fb      	ldrh	r3, [r7, #6]
 8009f96:	4293      	cmp	r3, r2
 8009f98:	bf28      	it	cs
 8009f9a:	4613      	movcs	r3, r2
 8009f9c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3302      	adds	r3, #2
 8009fa2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	82fb      	strh	r3, [r7, #22]
 8009fa8:	e00b      	b.n	8009fc2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009faa:	8afb      	ldrh	r3, [r7, #22]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4413      	add	r3, r2
 8009fb0:	781a      	ldrb	r2, [r3, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009fbc:	8afb      	ldrh	r3, [r7, #22]
 8009fbe:	3302      	adds	r3, #2
 8009fc0:	82fb      	strh	r3, [r7, #22]
 8009fc2:	8afa      	ldrh	r2, [r7, #22]
 8009fc4:	8abb      	ldrh	r3, [r7, #20]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d3ef      	bcc.n	8009faa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	701a      	strb	r2, [r3, #0]
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	881a      	ldrh	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	4413      	add	r3, r2
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4413      	add	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a004:	68fb      	ldr	r3, [r7, #12]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b086      	sub	sp, #24
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	4613      	mov	r3, r2
 800a01e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a020:	2301      	movs	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	789b      	ldrb	r3, [r3, #2]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d002      	beq.n	800a032 <USBH_CtlReq+0x20>
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d00f      	beq.n	800a050 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a030:	e027      	b.n	800a082 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	88fa      	ldrh	r2, [r7, #6]
 800a03c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2202      	movs	r2, #2
 800a048:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a04a:	2301      	movs	r3, #1
 800a04c:	75fb      	strb	r3, [r7, #23]
      break;
 800a04e:	e018      	b.n	800a082 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 f81b 	bl	800a08c <USBH_HandleControl>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <USBH_CtlReq+0x54>
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	2b03      	cmp	r3, #3
 800a064:	d106      	bne.n	800a074 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2201      	movs	r2, #1
 800a06a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	761a      	strb	r2, [r3, #24]
      break;
 800a072:	e005      	b.n	800a080 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d102      	bne.n	800a080 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	709a      	strb	r2, [r3, #2]
      break;
 800a080:	bf00      	nop
  }
  return status;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a094:	2301      	movs	r3, #1
 800a096:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a098:	2300      	movs	r3, #0
 800a09a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	7e1b      	ldrb	r3, [r3, #24]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	2b0a      	cmp	r3, #10
 800a0a4:	f200 8158 	bhi.w	800a358 <USBH_HandleControl+0x2cc>
 800a0a8:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <USBH_HandleControl+0x24>)
 800a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ae:	bf00      	nop
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	0800a0f7 	.word	0x0800a0f7
 800a0b8:	0800a161 	.word	0x0800a161
 800a0bc:	0800a187 	.word	0x0800a187
 800a0c0:	0800a1bf 	.word	0x0800a1bf
 800a0c4:	0800a1eb 	.word	0x0800a1eb
 800a0c8:	0800a23d 	.word	0x0800a23d
 800a0cc:	0800a25f 	.word	0x0800a25f
 800a0d0:	0800a29b 	.word	0x0800a29b
 800a0d4:	0800a2c3 	.word	0x0800a2c3
 800a0d8:	0800a301 	.word	0x0800a301
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f103 0110 	add.w	r1, r3, #16
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	795b      	ldrb	r3, [r3, #5]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f945 	bl	800a378 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	761a      	strb	r2, [r3, #24]
      break;
 800a0f4:	e13b      	b.n	800a36e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	795b      	ldrb	r3, [r3, #5]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fcc5 	bl	800aa8c <USBH_LL_GetURBState>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d11e      	bne.n	800a14a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7c1b      	ldrb	r3, [r3, #16]
 800a110:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a114:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8adb      	ldrh	r3, [r3, #22]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a11e:	7b7b      	ldrb	r3, [r7, #13]
 800a120:	2b80      	cmp	r3, #128	; 0x80
 800a122:	d103      	bne.n	800a12c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2203      	movs	r2, #3
 800a128:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a12a:	e117      	b.n	800a35c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2205      	movs	r2, #5
 800a130:	761a      	strb	r2, [r3, #24]
      break;
 800a132:	e113      	b.n	800a35c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a134:	7b7b      	ldrb	r3, [r7, #13]
 800a136:	2b80      	cmp	r3, #128	; 0x80
 800a138:	d103      	bne.n	800a142 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2209      	movs	r2, #9
 800a13e:	761a      	strb	r2, [r3, #24]
      break;
 800a140:	e10c      	b.n	800a35c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2207      	movs	r2, #7
 800a146:	761a      	strb	r2, [r3, #24]
      break;
 800a148:	e108      	b.n	800a35c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	d003      	beq.n	800a158 <USBH_HandleControl+0xcc>
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	2b02      	cmp	r3, #2
 800a154:	f040 8102 	bne.w	800a35c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	220b      	movs	r2, #11
 800a15c:	761a      	strb	r2, [r3, #24]
      break;
 800a15e:	e0fd      	b.n	800a35c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6899      	ldr	r1, [r3, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	899a      	ldrh	r2, [r3, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	791b      	ldrb	r3, [r3, #4]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f93c 	bl	800a3f6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2204      	movs	r2, #4
 800a182:	761a      	strb	r2, [r3, #24]
      break;
 800a184:	e0f3      	b.n	800a36e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	791b      	ldrb	r3, [r3, #4]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fc7d 	bl	800aa8c <USBH_LL_GetURBState>
 800a192:	4603      	mov	r3, r0
 800a194:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d102      	bne.n	800a1a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2209      	movs	r2, #9
 800a1a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d102      	bne.n	800a1ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a1ac:	e0d8      	b.n	800a360 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	f040 80d5 	bne.w	800a360 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	220b      	movs	r2, #11
 800a1ba:	761a      	strb	r2, [r3, #24]
      break;
 800a1bc:	e0d0      	b.n	800a360 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6899      	ldr	r1, [r3, #8]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	899a      	ldrh	r2, [r3, #12]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	7958      	ldrb	r0, [r3, #5]
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f8eb 	bl	800a3ac <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2206      	movs	r2, #6
 800a1e6:	761a      	strb	r2, [r3, #24]
      break;
 800a1e8:	e0c1      	b.n	800a36e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	795b      	ldrb	r3, [r3, #5]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fc4b 	bl	800aa8c <USBH_LL_GetURBState>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d103      	bne.n	800a208 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2207      	movs	r2, #7
 800a204:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a206:	e0ad      	b.n	800a364 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a208:	7bbb      	ldrb	r3, [r7, #14]
 800a20a:	2b05      	cmp	r3, #5
 800a20c:	d105      	bne.n	800a21a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	220c      	movs	r2, #12
 800a212:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a214:	2303      	movs	r3, #3
 800a216:	73fb      	strb	r3, [r7, #15]
      break;
 800a218:	e0a4      	b.n	800a364 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d103      	bne.n	800a228 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2205      	movs	r2, #5
 800a224:	761a      	strb	r2, [r3, #24]
      break;
 800a226:	e09d      	b.n	800a364 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a228:	7bbb      	ldrb	r3, [r7, #14]
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	f040 809a 	bne.w	800a364 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	220b      	movs	r2, #11
 800a234:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a236:	2302      	movs	r3, #2
 800a238:	73fb      	strb	r3, [r7, #15]
      break;
 800a23a:	e093      	b.n	800a364 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	791b      	ldrb	r3, [r3, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f8d6 	bl	800a3f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a250:	b29a      	uxth	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2208      	movs	r2, #8
 800a25a:	761a      	strb	r2, [r3, #24]

      break;
 800a25c:	e087      	b.n	800a36e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	791b      	ldrb	r3, [r3, #4]
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fc11 	bl	800aa8c <USBH_LL_GetURBState>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d105      	bne.n	800a280 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	220d      	movs	r2, #13
 800a278:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a27e:	e073      	b.n	800a368 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d103      	bne.n	800a28e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	220b      	movs	r2, #11
 800a28a:	761a      	strb	r2, [r3, #24]
      break;
 800a28c:	e06c      	b.n	800a368 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
 800a290:	2b05      	cmp	r3, #5
 800a292:	d169      	bne.n	800a368 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a294:	2303      	movs	r3, #3
 800a296:	73fb      	strb	r3, [r7, #15]
      break;
 800a298:	e066      	b.n	800a368 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	795a      	ldrb	r2, [r3, #5]
 800a29e:	2301      	movs	r3, #1
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f87f 	bl	800a3ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	220a      	movs	r2, #10
 800a2be:	761a      	strb	r2, [r3, #24]
      break;
 800a2c0:	e055      	b.n	800a36e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	795b      	ldrb	r3, [r3, #5]
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fbdf 	bl	800aa8c <USBH_LL_GetURBState>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d105      	bne.n	800a2e4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	220d      	movs	r2, #13
 800a2e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a2e2:	e043      	b.n	800a36c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d103      	bne.n	800a2f2 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2209      	movs	r2, #9
 800a2ee:	761a      	strb	r2, [r3, #24]
      break;
 800a2f0:	e03c      	b.n	800a36c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d139      	bne.n	800a36c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	220b      	movs	r2, #11
 800a2fc:	761a      	strb	r2, [r3, #24]
      break;
 800a2fe:	e035      	b.n	800a36c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	7e5b      	ldrb	r3, [r3, #25]
 800a304:	3301      	adds	r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	765a      	strb	r2, [r3, #25]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7e5b      	ldrb	r3, [r3, #25]
 800a310:	2b02      	cmp	r3, #2
 800a312:	d806      	bhi.n	800a322 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a320:	e025      	b.n	800a36e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a328:	2106      	movs	r1, #6
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	795b      	ldrb	r3, [r3, #5]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f90c 	bl	800a558 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	791b      	ldrb	r3, [r3, #4]
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f906 	bl	800a558 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a352:	2302      	movs	r3, #2
 800a354:	73fb      	strb	r3, [r7, #15]
      break;
 800a356:	e00a      	b.n	800a36e <USBH_HandleControl+0x2e2>

    default:
      break;
 800a358:	bf00      	nop
 800a35a:	e008      	b.n	800a36e <USBH_HandleControl+0x2e2>
      break;
 800a35c:	bf00      	nop
 800a35e:	e006      	b.n	800a36e <USBH_HandleControl+0x2e2>
      break;
 800a360:	bf00      	nop
 800a362:	e004      	b.n	800a36e <USBH_HandleControl+0x2e2>
      break;
 800a364:	bf00      	nop
 800a366:	e002      	b.n	800a36e <USBH_HandleControl+0x2e2>
      break;
 800a368:	bf00      	nop
 800a36a:	e000      	b.n	800a36e <USBH_HandleControl+0x2e2>
      break;
 800a36c:	bf00      	nop
  }

  return status;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af04      	add	r7, sp, #16
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a386:	79f9      	ldrb	r1, [r7, #7]
 800a388:	2300      	movs	r3, #0
 800a38a:	9303      	str	r3, [sp, #12]
 800a38c:	2308      	movs	r3, #8
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	2300      	movs	r3, #0
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2300      	movs	r3, #0
 800a39a:	2200      	movs	r2, #0
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fb44 	bl	800aa2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af04      	add	r7, sp, #16
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	80fb      	strh	r3, [r7, #6]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a3d0:	7979      	ldrb	r1, [r7, #5]
 800a3d2:	7e3b      	ldrb	r3, [r7, #24]
 800a3d4:	9303      	str	r3, [sp, #12]
 800a3d6:	88fb      	ldrh	r3, [r7, #6]
 800a3d8:	9302      	str	r3, [sp, #8]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f000 fb1f 	bl	800aa2a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b088      	sub	sp, #32
 800a3fa:	af04      	add	r7, sp, #16
 800a3fc:	60f8      	str	r0, [r7, #12]
 800a3fe:	60b9      	str	r1, [r7, #8]
 800a400:	4611      	mov	r1, r2
 800a402:	461a      	mov	r2, r3
 800a404:	460b      	mov	r3, r1
 800a406:	80fb      	strh	r3, [r7, #6]
 800a408:	4613      	mov	r3, r2
 800a40a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a40c:	7979      	ldrb	r1, [r7, #5]
 800a40e:	2300      	movs	r3, #0
 800a410:	9303      	str	r3, [sp, #12]
 800a412:	88fb      	ldrh	r3, [r7, #6]
 800a414:	9302      	str	r3, [sp, #8]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	2301      	movs	r3, #1
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	2300      	movs	r3, #0
 800a420:	2201      	movs	r2, #1
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 fb01 	bl	800aa2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a428:	2300      	movs	r3, #0

}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b088      	sub	sp, #32
 800a436:	af04      	add	r7, sp, #16
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	4611      	mov	r1, r2
 800a43e:	461a      	mov	r2, r3
 800a440:	460b      	mov	r3, r1
 800a442:	80fb      	strh	r3, [r7, #6]
 800a444:	4613      	mov	r3, r2
 800a446:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a452:	2300      	movs	r3, #0
 800a454:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a456:	7979      	ldrb	r1, [r7, #5]
 800a458:	7e3b      	ldrb	r3, [r7, #24]
 800a45a:	9303      	str	r3, [sp, #12]
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	9302      	str	r3, [sp, #8]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	2301      	movs	r3, #1
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	2302      	movs	r3, #2
 800a46a:	2200      	movs	r2, #0
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 fadc 	bl	800aa2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af04      	add	r7, sp, #16
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	460b      	mov	r3, r1
 800a48c:	80fb      	strh	r3, [r7, #6]
 800a48e:	4613      	mov	r3, r2
 800a490:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a492:	7979      	ldrb	r1, [r7, #5]
 800a494:	2300      	movs	r3, #0
 800a496:	9303      	str	r3, [sp, #12]
 800a498:	88fb      	ldrh	r3, [r7, #6]
 800a49a:	9302      	str	r3, [sp, #8]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fabe 	bl	800aa2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af04      	add	r7, sp, #16
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	70fb      	strb	r3, [r7, #3]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70bb      	strb	r3, [r7, #2]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a4d2:	7878      	ldrb	r0, [r7, #1]
 800a4d4:	78ba      	ldrb	r2, [r7, #2]
 800a4d6:	78f9      	ldrb	r1, [r7, #3]
 800a4d8:	8b3b      	ldrh	r3, [r7, #24]
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	7d3b      	ldrb	r3, [r7, #20]
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	7c3b      	ldrb	r3, [r7, #16]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fa51 	bl	800a98e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa70 	bl	800a9ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f836 	bl	800a594 <USBH_GetFreePipe>
 800a528:	4603      	mov	r3, r0
 800a52a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a52c:	89fb      	ldrh	r3, [r7, #14]
 800a52e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a532:	4293      	cmp	r3, r2
 800a534:	d00a      	beq.n	800a54c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a536:	78fa      	ldrb	r2, [r7, #3]
 800a538:	89fb      	ldrh	r3, [r7, #14]
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	33e0      	adds	r3, #224	; 0xe0
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a54c:	89fb      	ldrh	r3, [r7, #14]
 800a54e:	b2db      	uxtb	r3, r3
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	2b0a      	cmp	r3, #10
 800a568:	d80d      	bhi.n	800a586 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	33e0      	adds	r3, #224	; 0xe0
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	78fb      	ldrb	r3, [r7, #3]
 800a578:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	33e0      	adds	r3, #224	; 0xe0
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e00f      	b.n	800a5c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	33e0      	adds	r3, #224	; 0xe0
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	e007      	b.n	800a5d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	73fb      	strb	r3, [r7, #15]
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	2b0a      	cmp	r3, #10
 800a5ca:	d9ec      	bls.n	800a5a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a5cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	490e      	ldr	r1, [pc, #56]	; (800a61c <MX_USB_HOST_Init+0x40>)
 800a5e4:	480e      	ldr	r0, [pc, #56]	; (800a620 <MX_USB_HOST_Init+0x44>)
 800a5e6:	f7fe fc9f 	bl	8008f28 <USBH_Init>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a5f0:	f7f7 fcd2 	bl	8001f98 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a5f4:	490b      	ldr	r1, [pc, #44]	; (800a624 <MX_USB_HOST_Init+0x48>)
 800a5f6:	480a      	ldr	r0, [pc, #40]	; (800a620 <MX_USB_HOST_Init+0x44>)
 800a5f8:	f7fe fd24 	bl	8009044 <USBH_RegisterClass>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a602:	f7f7 fcc9 	bl	8001f98 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a606:	4806      	ldr	r0, [pc, #24]	; (800a620 <MX_USB_HOST_Init+0x44>)
 800a608:	f7fe fda8 	bl	800915c <USBH_Start>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a612:	f7f7 fcc1 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	0800a63d 	.word	0x0800a63d
 800a620:	20000804 	.word	0x20000804
 800a624:	20000070 	.word	0x20000070

0800a628 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a62c:	4802      	ldr	r0, [pc, #8]	; (800a638 <MX_USB_HOST_Process+0x10>)
 800a62e:	f7fe fda5 	bl	800917c <USBH_Process>
}
 800a632:	bf00      	nop
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20000804 	.word	0x20000804

0800a63c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	3b01      	subs	r3, #1
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d819      	bhi.n	800a684 <USBH_UserProcess+0x48>
 800a650:	a201      	add	r2, pc, #4	; (adr r2, 800a658 <USBH_UserProcess+0x1c>)
 800a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a685 	.word	0x0800a685
 800a65c:	0800a675 	.word	0x0800a675
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a67d 	.word	0x0800a67d
 800a668:	0800a66d 	.word	0x0800a66d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a66c:	4b09      	ldr	r3, [pc, #36]	; (800a694 <USBH_UserProcess+0x58>)
 800a66e:	2203      	movs	r2, #3
 800a670:	701a      	strb	r2, [r3, #0]
  break;
 800a672:	e008      	b.n	800a686 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a674:	4b07      	ldr	r3, [pc, #28]	; (800a694 <USBH_UserProcess+0x58>)
 800a676:	2202      	movs	r2, #2
 800a678:	701a      	strb	r2, [r3, #0]
  break;
 800a67a:	e004      	b.n	800a686 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <USBH_UserProcess+0x58>)
 800a67e:	2201      	movs	r2, #1
 800a680:	701a      	strb	r2, [r3, #0]
  break;
 800a682:	e000      	b.n	800a686 <USBH_UserProcess+0x4a>

  default:
  break;
 800a684:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	20000284 	.word	0x20000284

0800a698 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	; 0x28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]
 800a6a8:	605a      	str	r2, [r3, #4]
 800a6aa:	609a      	str	r2, [r3, #8]
 800a6ac:	60da      	str	r2, [r3, #12]
 800a6ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6b8:	d147      	bne.n	800a74a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	613b      	str	r3, [r7, #16]
 800a6be:	4b25      	ldr	r3, [pc, #148]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	4a24      	ldr	r2, [pc, #144]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a6c4:	f043 0301 	orr.w	r3, r3, #1
 800a6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ca:	4b22      	ldr	r3, [pc, #136]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	613b      	str	r3, [r7, #16]
 800a6d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a6d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a6e4:	f107 0314 	add.w	r3, r7, #20
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	481b      	ldr	r0, [pc, #108]	; (800a758 <HAL_HCD_MspInit+0xc0>)
 800a6ec:	f7f8 fc60 	bl	8002fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a6f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a6f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6fe:	2300      	movs	r3, #0
 800a700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a702:	230a      	movs	r3, #10
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a706:	f107 0314 	add.w	r3, r7, #20
 800a70a:	4619      	mov	r1, r3
 800a70c:	4812      	ldr	r0, [pc, #72]	; (800a758 <HAL_HCD_MspInit+0xc0>)
 800a70e:	f7f8 fc4f 	bl	8002fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a716:	4a0f      	ldr	r2, [pc, #60]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a71c:	6353      	str	r3, [r2, #52]	; 0x34
 800a71e:	2300      	movs	r3, #0
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	4a0b      	ldr	r2, [pc, #44]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a72c:	6453      	str	r3, [r2, #68]	; 0x44
 800a72e:	4b09      	ldr	r3, [pc, #36]	; (800a754 <HAL_HCD_MspInit+0xbc>)
 800a730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a73a:	2200      	movs	r2, #0
 800a73c:	2100      	movs	r1, #0
 800a73e:	2043      	movs	r0, #67	; 0x43
 800a740:	f7f8 fbff 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a744:	2043      	movs	r0, #67	; 0x43
 800a746:	f7f8 fc18 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a74a:	bf00      	nop
 800a74c:	3728      	adds	r7, #40	; 0x28
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	40023800 	.word	0x40023800
 800a758:	40020000 	.word	0x40020000

0800a75c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff f8d9 	bl	8009922 <USBH_LL_IncTimer>
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff f911 	bl	80099ae <USBH_LL_Connect>
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff f91a 	bl	80099dc <USBH_LL_Disconnect>
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	70fb      	strb	r3, [r7, #3]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff f8cb 	bl	8009976 <USBH_LL_PortEnabled>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7ff f8cb 	bl	8009992 <USBH_LL_PortDisabled>
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a812:	2b01      	cmp	r3, #1
 800a814:	d12a      	bne.n	800a86c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a816:	4a18      	ldr	r2, [pc, #96]	; (800a878 <USBH_LL_Init+0x74>)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a15      	ldr	r2, [pc, #84]	; (800a878 <USBH_LL_Init+0x74>)
 800a822:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a826:	4b14      	ldr	r3, [pc, #80]	; (800a878 <USBH_LL_Init+0x74>)
 800a828:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a82c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a82e:	4b12      	ldr	r3, [pc, #72]	; (800a878 <USBH_LL_Init+0x74>)
 800a830:	2208      	movs	r2, #8
 800a832:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <USBH_LL_Init+0x74>)
 800a836:	2201      	movs	r2, #1
 800a838:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <USBH_LL_Init+0x74>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a840:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <USBH_LL_Init+0x74>)
 800a842:	2202      	movs	r2, #2
 800a844:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a846:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <USBH_LL_Init+0x74>)
 800a848:	2200      	movs	r2, #0
 800a84a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a84c:	480a      	ldr	r0, [pc, #40]	; (800a878 <USBH_LL_Init+0x74>)
 800a84e:	f7f8 fd62 	bl	8003316 <HAL_HCD_Init>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a858:	f7f7 fb9e 	bl	8001f98 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a85c:	4806      	ldr	r0, [pc, #24]	; (800a878 <USBH_LL_Init+0x74>)
 800a85e:	f7f9 f965 	bl	8003b2c <HAL_HCD_GetCurrentFrame>
 800a862:	4603      	mov	r3, r0
 800a864:	4619      	mov	r1, r3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff f84c 	bl	8009904 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20000bdc 	.word	0x20000bdc

0800a87c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a892:	4618      	mov	r0, r3
 800a894:	f7f9 f8d2 	bl	8003a3c <HAL_HCD_Start>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 f95c 	bl	800ab5c <USBH_Get_USB_Status>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f9 f8da 	bl	8003a82 <HAL_HCD_Stop>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 f941 	bl	800ab5c <USBH_Get_USB_Status>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7f9 f924 	bl	8003b48 <HAL_HCD_GetCurrentSpeed>
 800a900:	4603      	mov	r3, r0
 800a902:	2b01      	cmp	r3, #1
 800a904:	d007      	beq.n	800a916 <USBH_LL_GetSpeed+0x2e>
 800a906:	2b01      	cmp	r3, #1
 800a908:	d302      	bcc.n	800a910 <USBH_LL_GetSpeed+0x28>
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d006      	beq.n	800a91c <USBH_LL_GetSpeed+0x34>
 800a90e:	e008      	b.n	800a922 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]
    break;
 800a914:	e008      	b.n	800a928 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a916:	2301      	movs	r3, #1
 800a918:	73fb      	strb	r3, [r7, #15]
    break;
 800a91a:	e005      	b.n	800a928 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a91c:	2302      	movs	r3, #2
 800a91e:	73fb      	strb	r3, [r7, #15]
    break;
 800a920:	e002      	b.n	800a928 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800a922:	2301      	movs	r3, #1
 800a924:	73fb      	strb	r3, [r7, #15]
    break;
 800a926:	bf00      	nop
  }
  return  speed;
 800a928:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a948:	4618      	mov	r0, r3
 800a94a:	f7f9 f8b7 	bl	8003abc <HAL_HCD_ResetPort>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f901 	bl	800ab5c <USBH_Get_USB_Status>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a97a:	78fa      	ldrb	r2, [r7, #3]
 800a97c:	4611      	mov	r1, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f7f9 f8bf 	bl	8003b02 <HAL_HCD_HC_GetXferCount>
 800a984:	4603      	mov	r3, r0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a98e:	b590      	push	{r4, r7, lr}
 800a990:	b089      	sub	sp, #36	; 0x24
 800a992:	af04      	add	r7, sp, #16
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	4608      	mov	r0, r1
 800a998:	4611      	mov	r1, r2
 800a99a:	461a      	mov	r2, r3
 800a99c:	4603      	mov	r3, r0
 800a99e:	70fb      	strb	r3, [r7, #3]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70bb      	strb	r3, [r7, #2]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a9b6:	787c      	ldrb	r4, [r7, #1]
 800a9b8:	78ba      	ldrb	r2, [r7, #2]
 800a9ba:	78f9      	ldrb	r1, [r7, #3]
 800a9bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a9be:	9302      	str	r3, [sp, #8]
 800a9c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	f7f8 fd04 	bl	80033da <HAL_HCD_HC_Init>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 f8bf 	bl	800ab5c <USBH_Get_USB_Status>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd90      	pop	{r4, r7, pc}

0800a9ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa06:	78fa      	ldrb	r2, [r7, #3]
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f8 fd7d 	bl	800350a <HAL_HCD_HC_Halt>
 800aa10:	4603      	mov	r3, r0
 800aa12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 f8a0 	bl	800ab5c <USBH_Get_USB_Status>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aa2a:	b590      	push	{r4, r7, lr}
 800aa2c:	b089      	sub	sp, #36	; 0x24
 800aa2e:	af04      	add	r7, sp, #16
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	4608      	mov	r0, r1
 800aa34:	4611      	mov	r1, r2
 800aa36:	461a      	mov	r2, r3
 800aa38:	4603      	mov	r3, r0
 800aa3a:	70fb      	strb	r3, [r7, #3]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	70bb      	strb	r3, [r7, #2]
 800aa40:	4613      	mov	r3, r2
 800aa42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800aa52:	787c      	ldrb	r4, [r7, #1]
 800aa54:	78ba      	ldrb	r2, [r7, #2]
 800aa56:	78f9      	ldrb	r1, [r7, #3]
 800aa58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa5c:	9303      	str	r3, [sp, #12]
 800aa5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa60:	9302      	str	r3, [sp, #8]
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	4623      	mov	r3, r4
 800aa6e:	f7f8 fd6f 	bl	8003550 <HAL_HCD_HC_SubmitRequest>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 f86f 	bl	800ab5c <USBH_Get_USB_Status>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd90      	pop	{r4, r7, pc}

0800aa8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aa9e:	78fa      	ldrb	r2, [r7, #3]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f9 f818 	bl	8003ad8 <HAL_HCD_HC_GetURBState>
 800aaa8:	4603      	mov	r3, r0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	460b      	mov	r3, r1
 800aabc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d103      	bne.n	800aad0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 f872 	bl	800abb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aad0:	20c8      	movs	r0, #200	; 0xc8
 800aad2:	f7f8 f939 	bl	8002d48 <HAL_Delay>
  return USBH_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	70fb      	strb	r3, [r7, #3]
 800aaec:	4613      	mov	r3, r2
 800aaee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aaf6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aaf8:	78fa      	ldrb	r2, [r7, #3]
 800aafa:	68f9      	ldr	r1, [r7, #12]
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	440b      	add	r3, r1
 800ab06:	333b      	adds	r3, #59	; 0x3b
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00a      	beq.n	800ab24 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ab0e:	78fa      	ldrb	r2, [r7, #3]
 800ab10:	68f9      	ldr	r1, [r7, #12]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	00db      	lsls	r3, r3, #3
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3350      	adds	r3, #80	; 0x50
 800ab1e:	78ba      	ldrb	r2, [r7, #2]
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	e009      	b.n	800ab38 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	68f9      	ldr	r1, [r7, #12]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	00db      	lsls	r3, r3, #3
 800ab30:	440b      	add	r3, r1
 800ab32:	3351      	adds	r3, #81	; 0x51
 800ab34:	78ba      	ldrb	r2, [r7, #2]
 800ab36:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7f8 f8fa 	bl	8002d48 <HAL_Delay>
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	4603      	mov	r3, r0
 800ab64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab6a:	79fb      	ldrb	r3, [r7, #7]
 800ab6c:	2b03      	cmp	r3, #3
 800ab6e:	d817      	bhi.n	800aba0 <USBH_Get_USB_Status+0x44>
 800ab70:	a201      	add	r2, pc, #4	; (adr r2, 800ab78 <USBH_Get_USB_Status+0x1c>)
 800ab72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab76:	bf00      	nop
 800ab78:	0800ab89 	.word	0x0800ab89
 800ab7c:	0800ab8f 	.word	0x0800ab8f
 800ab80:	0800ab95 	.word	0x0800ab95
 800ab84:	0800ab9b 	.word	0x0800ab9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8c:	e00b      	b.n	800aba6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ab8e:	2302      	movs	r3, #2
 800ab90:	73fb      	strb	r3, [r7, #15]
    break;
 800ab92:	e008      	b.n	800aba6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ab94:	2301      	movs	r3, #1
 800ab96:	73fb      	strb	r3, [r7, #15]
    break;
 800ab98:	e005      	b.n	800aba6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9e:	e002      	b.n	800aba6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aba0:	2302      	movs	r3, #2
 800aba2:	73fb      	strb	r3, [r7, #15]
    break;
 800aba4:	bf00      	nop
  }
  return usb_status;
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	4603      	mov	r3, r0
 800abbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800abc8:	2301      	movs	r3, #1
 800abca:	73fb      	strb	r3, [r7, #15]
 800abcc:	e001      	b.n	800abd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	461a      	mov	r2, r3
 800abd6:	2101      	movs	r1, #1
 800abd8:	4803      	ldr	r0, [pc, #12]	; (800abe8 <MX_DriverVbusFS+0x34>)
 800abda:	f7f8 fb83 	bl	80032e4 <HAL_GPIO_WritePin>
}
 800abde:	bf00      	nop
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	40020800 	.word	0x40020800

0800abec <__errno>:
 800abec:	4b01      	ldr	r3, [pc, #4]	; (800abf4 <__errno+0x8>)
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	20000090 	.word	0x20000090

0800abf8 <__libc_init_array>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	4e0d      	ldr	r6, [pc, #52]	; (800ac30 <__libc_init_array+0x38>)
 800abfc:	4c0d      	ldr	r4, [pc, #52]	; (800ac34 <__libc_init_array+0x3c>)
 800abfe:	1ba4      	subs	r4, r4, r6
 800ac00:	10a4      	asrs	r4, r4, #2
 800ac02:	2500      	movs	r5, #0
 800ac04:	42a5      	cmp	r5, r4
 800ac06:	d109      	bne.n	800ac1c <__libc_init_array+0x24>
 800ac08:	4e0b      	ldr	r6, [pc, #44]	; (800ac38 <__libc_init_array+0x40>)
 800ac0a:	4c0c      	ldr	r4, [pc, #48]	; (800ac3c <__libc_init_array+0x44>)
 800ac0c:	f003 fd7a 	bl	800e704 <_init>
 800ac10:	1ba4      	subs	r4, r4, r6
 800ac12:	10a4      	asrs	r4, r4, #2
 800ac14:	2500      	movs	r5, #0
 800ac16:	42a5      	cmp	r5, r4
 800ac18:	d105      	bne.n	800ac26 <__libc_init_array+0x2e>
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac20:	4798      	blx	r3
 800ac22:	3501      	adds	r5, #1
 800ac24:	e7ee      	b.n	800ac04 <__libc_init_array+0xc>
 800ac26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac2a:	4798      	blx	r3
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	e7f2      	b.n	800ac16 <__libc_init_array+0x1e>
 800ac30:	0800ebc8 	.word	0x0800ebc8
 800ac34:	0800ebc8 	.word	0x0800ebc8
 800ac38:	0800ebc8 	.word	0x0800ebc8
 800ac3c:	0800ebcc 	.word	0x0800ebcc

0800ac40 <malloc>:
 800ac40:	4b02      	ldr	r3, [pc, #8]	; (800ac4c <malloc+0xc>)
 800ac42:	4601      	mov	r1, r0
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	f000 b861 	b.w	800ad0c <_malloc_r>
 800ac4a:	bf00      	nop
 800ac4c:	20000090 	.word	0x20000090

0800ac50 <free>:
 800ac50:	4b02      	ldr	r3, [pc, #8]	; (800ac5c <free+0xc>)
 800ac52:	4601      	mov	r1, r0
 800ac54:	6818      	ldr	r0, [r3, #0]
 800ac56:	f000 b80b 	b.w	800ac70 <_free_r>
 800ac5a:	bf00      	nop
 800ac5c:	20000090 	.word	0x20000090

0800ac60 <memset>:
 800ac60:	4402      	add	r2, r0
 800ac62:	4603      	mov	r3, r0
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d100      	bne.n	800ac6a <memset+0xa>
 800ac68:	4770      	bx	lr
 800ac6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac6e:	e7f9      	b.n	800ac64 <memset+0x4>

0800ac70 <_free_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4605      	mov	r5, r0
 800ac74:	2900      	cmp	r1, #0
 800ac76:	d045      	beq.n	800ad04 <_free_r+0x94>
 800ac78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac7c:	1f0c      	subs	r4, r1, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	18e4      	addlt	r4, r4, r3
 800ac84:	f002 ff77 	bl	800db76 <__malloc_lock>
 800ac88:	4a1f      	ldr	r2, [pc, #124]	; (800ad08 <_free_r+0x98>)
 800ac8a:	6813      	ldr	r3, [r2, #0]
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	b933      	cbnz	r3, 800ac9e <_free_r+0x2e>
 800ac90:	6063      	str	r3, [r4, #4]
 800ac92:	6014      	str	r4, [r2, #0]
 800ac94:	4628      	mov	r0, r5
 800ac96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac9a:	f002 bf6d 	b.w	800db78 <__malloc_unlock>
 800ac9e:	42a3      	cmp	r3, r4
 800aca0:	d90c      	bls.n	800acbc <_free_r+0x4c>
 800aca2:	6821      	ldr	r1, [r4, #0]
 800aca4:	1862      	adds	r2, r4, r1
 800aca6:	4293      	cmp	r3, r2
 800aca8:	bf04      	itt	eq
 800acaa:	681a      	ldreq	r2, [r3, #0]
 800acac:	685b      	ldreq	r3, [r3, #4]
 800acae:	6063      	str	r3, [r4, #4]
 800acb0:	bf04      	itt	eq
 800acb2:	1852      	addeq	r2, r2, r1
 800acb4:	6022      	streq	r2, [r4, #0]
 800acb6:	6004      	str	r4, [r0, #0]
 800acb8:	e7ec      	b.n	800ac94 <_free_r+0x24>
 800acba:	4613      	mov	r3, r2
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	b10a      	cbz	r2, 800acc4 <_free_r+0x54>
 800acc0:	42a2      	cmp	r2, r4
 800acc2:	d9fa      	bls.n	800acba <_free_r+0x4a>
 800acc4:	6819      	ldr	r1, [r3, #0]
 800acc6:	1858      	adds	r0, r3, r1
 800acc8:	42a0      	cmp	r0, r4
 800acca:	d10b      	bne.n	800ace4 <_free_r+0x74>
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	4401      	add	r1, r0
 800acd0:	1858      	adds	r0, r3, r1
 800acd2:	4282      	cmp	r2, r0
 800acd4:	6019      	str	r1, [r3, #0]
 800acd6:	d1dd      	bne.n	800ac94 <_free_r+0x24>
 800acd8:	6810      	ldr	r0, [r2, #0]
 800acda:	6852      	ldr	r2, [r2, #4]
 800acdc:	605a      	str	r2, [r3, #4]
 800acde:	4401      	add	r1, r0
 800ace0:	6019      	str	r1, [r3, #0]
 800ace2:	e7d7      	b.n	800ac94 <_free_r+0x24>
 800ace4:	d902      	bls.n	800acec <_free_r+0x7c>
 800ace6:	230c      	movs	r3, #12
 800ace8:	602b      	str	r3, [r5, #0]
 800acea:	e7d3      	b.n	800ac94 <_free_r+0x24>
 800acec:	6820      	ldr	r0, [r4, #0]
 800acee:	1821      	adds	r1, r4, r0
 800acf0:	428a      	cmp	r2, r1
 800acf2:	bf04      	itt	eq
 800acf4:	6811      	ldreq	r1, [r2, #0]
 800acf6:	6852      	ldreq	r2, [r2, #4]
 800acf8:	6062      	str	r2, [r4, #4]
 800acfa:	bf04      	itt	eq
 800acfc:	1809      	addeq	r1, r1, r0
 800acfe:	6021      	streq	r1, [r4, #0]
 800ad00:	605c      	str	r4, [r3, #4]
 800ad02:	e7c7      	b.n	800ac94 <_free_r+0x24>
 800ad04:	bd38      	pop	{r3, r4, r5, pc}
 800ad06:	bf00      	nop
 800ad08:	20000288 	.word	0x20000288

0800ad0c <_malloc_r>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	1ccd      	adds	r5, r1, #3
 800ad10:	f025 0503 	bic.w	r5, r5, #3
 800ad14:	3508      	adds	r5, #8
 800ad16:	2d0c      	cmp	r5, #12
 800ad18:	bf38      	it	cc
 800ad1a:	250c      	movcc	r5, #12
 800ad1c:	2d00      	cmp	r5, #0
 800ad1e:	4606      	mov	r6, r0
 800ad20:	db01      	blt.n	800ad26 <_malloc_r+0x1a>
 800ad22:	42a9      	cmp	r1, r5
 800ad24:	d903      	bls.n	800ad2e <_malloc_r+0x22>
 800ad26:	230c      	movs	r3, #12
 800ad28:	6033      	str	r3, [r6, #0]
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	f002 ff22 	bl	800db76 <__malloc_lock>
 800ad32:	4a21      	ldr	r2, [pc, #132]	; (800adb8 <_malloc_r+0xac>)
 800ad34:	6814      	ldr	r4, [r2, #0]
 800ad36:	4621      	mov	r1, r4
 800ad38:	b991      	cbnz	r1, 800ad60 <_malloc_r+0x54>
 800ad3a:	4c20      	ldr	r4, [pc, #128]	; (800adbc <_malloc_r+0xb0>)
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	b91b      	cbnz	r3, 800ad48 <_malloc_r+0x3c>
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 fe7b 	bl	800ba3c <_sbrk_r>
 800ad46:	6020      	str	r0, [r4, #0]
 800ad48:	4629      	mov	r1, r5
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f000 fe76 	bl	800ba3c <_sbrk_r>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d124      	bne.n	800ad9e <_malloc_r+0x92>
 800ad54:	230c      	movs	r3, #12
 800ad56:	6033      	str	r3, [r6, #0]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f002 ff0d 	bl	800db78 <__malloc_unlock>
 800ad5e:	e7e4      	b.n	800ad2a <_malloc_r+0x1e>
 800ad60:	680b      	ldr	r3, [r1, #0]
 800ad62:	1b5b      	subs	r3, r3, r5
 800ad64:	d418      	bmi.n	800ad98 <_malloc_r+0x8c>
 800ad66:	2b0b      	cmp	r3, #11
 800ad68:	d90f      	bls.n	800ad8a <_malloc_r+0x7e>
 800ad6a:	600b      	str	r3, [r1, #0]
 800ad6c:	50cd      	str	r5, [r1, r3]
 800ad6e:	18cc      	adds	r4, r1, r3
 800ad70:	4630      	mov	r0, r6
 800ad72:	f002 ff01 	bl	800db78 <__malloc_unlock>
 800ad76:	f104 000b 	add.w	r0, r4, #11
 800ad7a:	1d23      	adds	r3, r4, #4
 800ad7c:	f020 0007 	bic.w	r0, r0, #7
 800ad80:	1ac3      	subs	r3, r0, r3
 800ad82:	d0d3      	beq.n	800ad2c <_malloc_r+0x20>
 800ad84:	425a      	negs	r2, r3
 800ad86:	50e2      	str	r2, [r4, r3]
 800ad88:	e7d0      	b.n	800ad2c <_malloc_r+0x20>
 800ad8a:	428c      	cmp	r4, r1
 800ad8c:	684b      	ldr	r3, [r1, #4]
 800ad8e:	bf16      	itet	ne
 800ad90:	6063      	strne	r3, [r4, #4]
 800ad92:	6013      	streq	r3, [r2, #0]
 800ad94:	460c      	movne	r4, r1
 800ad96:	e7eb      	b.n	800ad70 <_malloc_r+0x64>
 800ad98:	460c      	mov	r4, r1
 800ad9a:	6849      	ldr	r1, [r1, #4]
 800ad9c:	e7cc      	b.n	800ad38 <_malloc_r+0x2c>
 800ad9e:	1cc4      	adds	r4, r0, #3
 800ada0:	f024 0403 	bic.w	r4, r4, #3
 800ada4:	42a0      	cmp	r0, r4
 800ada6:	d005      	beq.n	800adb4 <_malloc_r+0xa8>
 800ada8:	1a21      	subs	r1, r4, r0
 800adaa:	4630      	mov	r0, r6
 800adac:	f000 fe46 	bl	800ba3c <_sbrk_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d0cf      	beq.n	800ad54 <_malloc_r+0x48>
 800adb4:	6025      	str	r5, [r4, #0]
 800adb6:	e7db      	b.n	800ad70 <_malloc_r+0x64>
 800adb8:	20000288 	.word	0x20000288
 800adbc:	2000028c 	.word	0x2000028c

0800adc0 <__cvt>:
 800adc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc4:	ec55 4b10 	vmov	r4, r5, d0
 800adc8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800adca:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adce:	2d00      	cmp	r5, #0
 800add0:	460e      	mov	r6, r1
 800add2:	4691      	mov	r9, r2
 800add4:	4619      	mov	r1, r3
 800add6:	bfb8      	it	lt
 800add8:	4622      	movlt	r2, r4
 800adda:	462b      	mov	r3, r5
 800addc:	f027 0720 	bic.w	r7, r7, #32
 800ade0:	bfbb      	ittet	lt
 800ade2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ade6:	461d      	movlt	r5, r3
 800ade8:	2300      	movge	r3, #0
 800adea:	232d      	movlt	r3, #45	; 0x2d
 800adec:	bfb8      	it	lt
 800adee:	4614      	movlt	r4, r2
 800adf0:	2f46      	cmp	r7, #70	; 0x46
 800adf2:	700b      	strb	r3, [r1, #0]
 800adf4:	d004      	beq.n	800ae00 <__cvt+0x40>
 800adf6:	2f45      	cmp	r7, #69	; 0x45
 800adf8:	d100      	bne.n	800adfc <__cvt+0x3c>
 800adfa:	3601      	adds	r6, #1
 800adfc:	2102      	movs	r1, #2
 800adfe:	e000      	b.n	800ae02 <__cvt+0x42>
 800ae00:	2103      	movs	r1, #3
 800ae02:	ab03      	add	r3, sp, #12
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	ab02      	add	r3, sp, #8
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	4632      	mov	r2, r6
 800ae0c:	4653      	mov	r3, sl
 800ae0e:	ec45 4b10 	vmov	d0, r4, r5
 800ae12:	f001 fda1 	bl	800c958 <_dtoa_r>
 800ae16:	2f47      	cmp	r7, #71	; 0x47
 800ae18:	4680      	mov	r8, r0
 800ae1a:	d102      	bne.n	800ae22 <__cvt+0x62>
 800ae1c:	f019 0f01 	tst.w	r9, #1
 800ae20:	d026      	beq.n	800ae70 <__cvt+0xb0>
 800ae22:	2f46      	cmp	r7, #70	; 0x46
 800ae24:	eb08 0906 	add.w	r9, r8, r6
 800ae28:	d111      	bne.n	800ae4e <__cvt+0x8e>
 800ae2a:	f898 3000 	ldrb.w	r3, [r8]
 800ae2e:	2b30      	cmp	r3, #48	; 0x30
 800ae30:	d10a      	bne.n	800ae48 <__cvt+0x88>
 800ae32:	2200      	movs	r2, #0
 800ae34:	2300      	movs	r3, #0
 800ae36:	4620      	mov	r0, r4
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7f5 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3e:	b918      	cbnz	r0, 800ae48 <__cvt+0x88>
 800ae40:	f1c6 0601 	rsb	r6, r6, #1
 800ae44:	f8ca 6000 	str.w	r6, [sl]
 800ae48:	f8da 3000 	ldr.w	r3, [sl]
 800ae4c:	4499      	add	r9, r3
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2300      	movs	r3, #0
 800ae52:	4620      	mov	r0, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	f7f5 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae5a:	b938      	cbnz	r0, 800ae6c <__cvt+0xac>
 800ae5c:	2230      	movs	r2, #48	; 0x30
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	454b      	cmp	r3, r9
 800ae62:	d205      	bcs.n	800ae70 <__cvt+0xb0>
 800ae64:	1c59      	adds	r1, r3, #1
 800ae66:	9103      	str	r1, [sp, #12]
 800ae68:	701a      	strb	r2, [r3, #0]
 800ae6a:	e7f8      	b.n	800ae5e <__cvt+0x9e>
 800ae6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae74:	eba3 0308 	sub.w	r3, r3, r8
 800ae78:	4640      	mov	r0, r8
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	b004      	add	sp, #16
 800ae7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ae82 <__exponent>:
 800ae82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae84:	2900      	cmp	r1, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	bfba      	itte	lt
 800ae8a:	4249      	neglt	r1, r1
 800ae8c:	232d      	movlt	r3, #45	; 0x2d
 800ae8e:	232b      	movge	r3, #43	; 0x2b
 800ae90:	2909      	cmp	r1, #9
 800ae92:	f804 2b02 	strb.w	r2, [r4], #2
 800ae96:	7043      	strb	r3, [r0, #1]
 800ae98:	dd20      	ble.n	800aedc <__exponent+0x5a>
 800ae9a:	f10d 0307 	add.w	r3, sp, #7
 800ae9e:	461f      	mov	r7, r3
 800aea0:	260a      	movs	r6, #10
 800aea2:	fb91 f5f6 	sdiv	r5, r1, r6
 800aea6:	fb06 1115 	mls	r1, r6, r5, r1
 800aeaa:	3130      	adds	r1, #48	; 0x30
 800aeac:	2d09      	cmp	r5, #9
 800aeae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aeb2:	f103 32ff 	add.w	r2, r3, #4294967295
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	dc09      	bgt.n	800aece <__exponent+0x4c>
 800aeba:	3130      	adds	r1, #48	; 0x30
 800aebc:	3b02      	subs	r3, #2
 800aebe:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aec2:	42bb      	cmp	r3, r7
 800aec4:	4622      	mov	r2, r4
 800aec6:	d304      	bcc.n	800aed2 <__exponent+0x50>
 800aec8:	1a10      	subs	r0, r2, r0
 800aeca:	b003      	add	sp, #12
 800aecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aece:	4613      	mov	r3, r2
 800aed0:	e7e7      	b.n	800aea2 <__exponent+0x20>
 800aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed6:	f804 2b01 	strb.w	r2, [r4], #1
 800aeda:	e7f2      	b.n	800aec2 <__exponent+0x40>
 800aedc:	2330      	movs	r3, #48	; 0x30
 800aede:	4419      	add	r1, r3
 800aee0:	7083      	strb	r3, [r0, #2]
 800aee2:	1d02      	adds	r2, r0, #4
 800aee4:	70c1      	strb	r1, [r0, #3]
 800aee6:	e7ef      	b.n	800aec8 <__exponent+0x46>

0800aee8 <_printf_float>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	b08d      	sub	sp, #52	; 0x34
 800aeee:	460c      	mov	r4, r1
 800aef0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aef4:	4616      	mov	r6, r2
 800aef6:	461f      	mov	r7, r3
 800aef8:	4605      	mov	r5, r0
 800aefa:	f002 fe11 	bl	800db20 <_localeconv_r>
 800aefe:	6803      	ldr	r3, [r0, #0]
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	4618      	mov	r0, r3
 800af04:	f7f5 f964 	bl	80001d0 <strlen>
 800af08:	2300      	movs	r3, #0
 800af0a:	930a      	str	r3, [sp, #40]	; 0x28
 800af0c:	f8d8 3000 	ldr.w	r3, [r8]
 800af10:	9005      	str	r0, [sp, #20]
 800af12:	3307      	adds	r3, #7
 800af14:	f023 0307 	bic.w	r3, r3, #7
 800af18:	f103 0208 	add.w	r2, r3, #8
 800af1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800af20:	f8d4 b000 	ldr.w	fp, [r4]
 800af24:	f8c8 2000 	str.w	r2, [r8]
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af38:	9307      	str	r3, [sp, #28]
 800af3a:	f8cd 8018 	str.w	r8, [sp, #24]
 800af3e:	f04f 32ff 	mov.w	r2, #4294967295
 800af42:	4ba7      	ldr	r3, [pc, #668]	; (800b1e0 <_printf_float+0x2f8>)
 800af44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af48:	f7f5 fdf0 	bl	8000b2c <__aeabi_dcmpun>
 800af4c:	bb70      	cbnz	r0, 800afac <_printf_float+0xc4>
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295
 800af52:	4ba3      	ldr	r3, [pc, #652]	; (800b1e0 <_printf_float+0x2f8>)
 800af54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af58:	f7f5 fdca 	bl	8000af0 <__aeabi_dcmple>
 800af5c:	bb30      	cbnz	r0, 800afac <_printf_float+0xc4>
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	4640      	mov	r0, r8
 800af64:	4649      	mov	r1, r9
 800af66:	f7f5 fdb9 	bl	8000adc <__aeabi_dcmplt>
 800af6a:	b110      	cbz	r0, 800af72 <_printf_float+0x8a>
 800af6c:	232d      	movs	r3, #45	; 0x2d
 800af6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af72:	4a9c      	ldr	r2, [pc, #624]	; (800b1e4 <_printf_float+0x2fc>)
 800af74:	4b9c      	ldr	r3, [pc, #624]	; (800b1e8 <_printf_float+0x300>)
 800af76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af7a:	bf8c      	ite	hi
 800af7c:	4690      	movhi	r8, r2
 800af7e:	4698      	movls	r8, r3
 800af80:	2303      	movs	r3, #3
 800af82:	f02b 0204 	bic.w	r2, fp, #4
 800af86:	6123      	str	r3, [r4, #16]
 800af88:	6022      	str	r2, [r4, #0]
 800af8a:	f04f 0900 	mov.w	r9, #0
 800af8e:	9700      	str	r7, [sp, #0]
 800af90:	4633      	mov	r3, r6
 800af92:	aa0b      	add	r2, sp, #44	; 0x2c
 800af94:	4621      	mov	r1, r4
 800af96:	4628      	mov	r0, r5
 800af98:	f000 f9e6 	bl	800b368 <_printf_common>
 800af9c:	3001      	adds	r0, #1
 800af9e:	f040 808d 	bne.w	800b0bc <_printf_float+0x1d4>
 800afa2:	f04f 30ff 	mov.w	r0, #4294967295
 800afa6:	b00d      	add	sp, #52	; 0x34
 800afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afac:	4642      	mov	r2, r8
 800afae:	464b      	mov	r3, r9
 800afb0:	4640      	mov	r0, r8
 800afb2:	4649      	mov	r1, r9
 800afb4:	f7f5 fdba 	bl	8000b2c <__aeabi_dcmpun>
 800afb8:	b110      	cbz	r0, 800afc0 <_printf_float+0xd8>
 800afba:	4a8c      	ldr	r2, [pc, #560]	; (800b1ec <_printf_float+0x304>)
 800afbc:	4b8c      	ldr	r3, [pc, #560]	; (800b1f0 <_printf_float+0x308>)
 800afbe:	e7da      	b.n	800af76 <_printf_float+0x8e>
 800afc0:	6861      	ldr	r1, [r4, #4]
 800afc2:	1c4b      	adds	r3, r1, #1
 800afc4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800afc8:	a80a      	add	r0, sp, #40	; 0x28
 800afca:	d13e      	bne.n	800b04a <_printf_float+0x162>
 800afcc:	2306      	movs	r3, #6
 800afce:	6063      	str	r3, [r4, #4]
 800afd0:	2300      	movs	r3, #0
 800afd2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800afd6:	ab09      	add	r3, sp, #36	; 0x24
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	ec49 8b10 	vmov	d0, r8, r9
 800afde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afe2:	6022      	str	r2, [r4, #0]
 800afe4:	f8cd a004 	str.w	sl, [sp, #4]
 800afe8:	6861      	ldr	r1, [r4, #4]
 800afea:	4628      	mov	r0, r5
 800afec:	f7ff fee8 	bl	800adc0 <__cvt>
 800aff0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800aff4:	2b47      	cmp	r3, #71	; 0x47
 800aff6:	4680      	mov	r8, r0
 800aff8:	d109      	bne.n	800b00e <_printf_float+0x126>
 800affa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affc:	1cd8      	adds	r0, r3, #3
 800affe:	db02      	blt.n	800b006 <_printf_float+0x11e>
 800b000:	6862      	ldr	r2, [r4, #4]
 800b002:	4293      	cmp	r3, r2
 800b004:	dd47      	ble.n	800b096 <_printf_float+0x1ae>
 800b006:	f1aa 0a02 	sub.w	sl, sl, #2
 800b00a:	fa5f fa8a 	uxtb.w	sl, sl
 800b00e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b012:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b014:	d824      	bhi.n	800b060 <_printf_float+0x178>
 800b016:	3901      	subs	r1, #1
 800b018:	4652      	mov	r2, sl
 800b01a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b01e:	9109      	str	r1, [sp, #36]	; 0x24
 800b020:	f7ff ff2f 	bl	800ae82 <__exponent>
 800b024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b026:	1813      	adds	r3, r2, r0
 800b028:	2a01      	cmp	r2, #1
 800b02a:	4681      	mov	r9, r0
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	dc02      	bgt.n	800b036 <_printf_float+0x14e>
 800b030:	6822      	ldr	r2, [r4, #0]
 800b032:	07d1      	lsls	r1, r2, #31
 800b034:	d501      	bpl.n	800b03a <_printf_float+0x152>
 800b036:	3301      	adds	r3, #1
 800b038:	6123      	str	r3, [r4, #16]
 800b03a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0a5      	beq.n	800af8e <_printf_float+0xa6>
 800b042:	232d      	movs	r3, #45	; 0x2d
 800b044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b048:	e7a1      	b.n	800af8e <_printf_float+0xa6>
 800b04a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b04e:	f000 8177 	beq.w	800b340 <_printf_float+0x458>
 800b052:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b056:	d1bb      	bne.n	800afd0 <_printf_float+0xe8>
 800b058:	2900      	cmp	r1, #0
 800b05a:	d1b9      	bne.n	800afd0 <_printf_float+0xe8>
 800b05c:	2301      	movs	r3, #1
 800b05e:	e7b6      	b.n	800afce <_printf_float+0xe6>
 800b060:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b064:	d119      	bne.n	800b09a <_printf_float+0x1b2>
 800b066:	2900      	cmp	r1, #0
 800b068:	6863      	ldr	r3, [r4, #4]
 800b06a:	dd0c      	ble.n	800b086 <_printf_float+0x19e>
 800b06c:	6121      	str	r1, [r4, #16]
 800b06e:	b913      	cbnz	r3, 800b076 <_printf_float+0x18e>
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	07d2      	lsls	r2, r2, #31
 800b074:	d502      	bpl.n	800b07c <_printf_float+0x194>
 800b076:	3301      	adds	r3, #1
 800b078:	440b      	add	r3, r1
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b080:	f04f 0900 	mov.w	r9, #0
 800b084:	e7d9      	b.n	800b03a <_printf_float+0x152>
 800b086:	b913      	cbnz	r3, 800b08e <_printf_float+0x1a6>
 800b088:	6822      	ldr	r2, [r4, #0]
 800b08a:	07d0      	lsls	r0, r2, #31
 800b08c:	d501      	bpl.n	800b092 <_printf_float+0x1aa>
 800b08e:	3302      	adds	r3, #2
 800b090:	e7f3      	b.n	800b07a <_printf_float+0x192>
 800b092:	2301      	movs	r3, #1
 800b094:	e7f1      	b.n	800b07a <_printf_float+0x192>
 800b096:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b09a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	db05      	blt.n	800b0ae <_printf_float+0x1c6>
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	6123      	str	r3, [r4, #16]
 800b0a6:	07d1      	lsls	r1, r2, #31
 800b0a8:	d5e8      	bpl.n	800b07c <_printf_float+0x194>
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	e7e5      	b.n	800b07a <_printf_float+0x192>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfd4      	ite	le
 800b0b2:	f1c3 0302 	rsble	r3, r3, #2
 800b0b6:	2301      	movgt	r3, #1
 800b0b8:	4413      	add	r3, r2
 800b0ba:	e7de      	b.n	800b07a <_printf_float+0x192>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	055a      	lsls	r2, r3, #21
 800b0c0:	d407      	bmi.n	800b0d2 <_printf_float+0x1ea>
 800b0c2:	6923      	ldr	r3, [r4, #16]
 800b0c4:	4642      	mov	r2, r8
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d12b      	bne.n	800b128 <_printf_float+0x240>
 800b0d0:	e767      	b.n	800afa2 <_printf_float+0xba>
 800b0d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b0d6:	f240 80dc 	bls.w	800b292 <_printf_float+0x3aa>
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0e2:	f7f5 fcf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d033      	beq.n	800b152 <_printf_float+0x26a>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	4a41      	ldr	r2, [pc, #260]	; (800b1f4 <_printf_float+0x30c>)
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f43f af54 	beq.w	800afa2 <_printf_float+0xba>
 800b0fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0fe:	429a      	cmp	r2, r3
 800b100:	db02      	blt.n	800b108 <_printf_float+0x220>
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	07d8      	lsls	r0, r3, #31
 800b106:	d50f      	bpl.n	800b128 <_printf_float+0x240>
 800b108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b10c:	4631      	mov	r1, r6
 800b10e:	4628      	mov	r0, r5
 800b110:	47b8      	blx	r7
 800b112:	3001      	adds	r0, #1
 800b114:	f43f af45 	beq.w	800afa2 <_printf_float+0xba>
 800b118:	f04f 0800 	mov.w	r8, #0
 800b11c:	f104 091a 	add.w	r9, r4, #26
 800b120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b122:	3b01      	subs	r3, #1
 800b124:	4543      	cmp	r3, r8
 800b126:	dc09      	bgt.n	800b13c <_printf_float+0x254>
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	079b      	lsls	r3, r3, #30
 800b12c:	f100 8103 	bmi.w	800b336 <_printf_float+0x44e>
 800b130:	68e0      	ldr	r0, [r4, #12]
 800b132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b134:	4298      	cmp	r0, r3
 800b136:	bfb8      	it	lt
 800b138:	4618      	movlt	r0, r3
 800b13a:	e734      	b.n	800afa6 <_printf_float+0xbe>
 800b13c:	2301      	movs	r3, #1
 800b13e:	464a      	mov	r2, r9
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f af2b 	beq.w	800afa2 <_printf_float+0xba>
 800b14c:	f108 0801 	add.w	r8, r8, #1
 800b150:	e7e6      	b.n	800b120 <_printf_float+0x238>
 800b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	dc2b      	bgt.n	800b1b0 <_printf_float+0x2c8>
 800b158:	2301      	movs	r3, #1
 800b15a:	4a26      	ldr	r2, [pc, #152]	; (800b1f4 <_printf_float+0x30c>)
 800b15c:	4631      	mov	r1, r6
 800b15e:	4628      	mov	r0, r5
 800b160:	47b8      	blx	r7
 800b162:	3001      	adds	r0, #1
 800b164:	f43f af1d 	beq.w	800afa2 <_printf_float+0xba>
 800b168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16a:	b923      	cbnz	r3, 800b176 <_printf_float+0x28e>
 800b16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b16e:	b913      	cbnz	r3, 800b176 <_printf_float+0x28e>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	07d9      	lsls	r1, r3, #31
 800b174:	d5d8      	bpl.n	800b128 <_printf_float+0x240>
 800b176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f af0e 	beq.w	800afa2 <_printf_float+0xba>
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	f104 0a1a 	add.w	sl, r4, #26
 800b18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b190:	425b      	negs	r3, r3
 800b192:	454b      	cmp	r3, r9
 800b194:	dc01      	bgt.n	800b19a <_printf_float+0x2b2>
 800b196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b198:	e794      	b.n	800b0c4 <_printf_float+0x1dc>
 800b19a:	2301      	movs	r3, #1
 800b19c:	4652      	mov	r2, sl
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f43f aefc 	beq.w	800afa2 <_printf_float+0xba>
 800b1aa:	f109 0901 	add.w	r9, r9, #1
 800b1ae:	e7ee      	b.n	800b18e <_printf_float+0x2a6>
 800b1b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	bfa8      	it	ge
 800b1b8:	461a      	movge	r2, r3
 800b1ba:	2a00      	cmp	r2, #0
 800b1bc:	4691      	mov	r9, r2
 800b1be:	dd07      	ble.n	800b1d0 <_printf_float+0x2e8>
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4642      	mov	r2, r8
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	47b8      	blx	r7
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	f43f aee9 	beq.w	800afa2 <_printf_float+0xba>
 800b1d0:	f104 031a 	add.w	r3, r4, #26
 800b1d4:	f04f 0b00 	mov.w	fp, #0
 800b1d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1dc:	9306      	str	r3, [sp, #24]
 800b1de:	e015      	b.n	800b20c <_printf_float+0x324>
 800b1e0:	7fefffff 	.word	0x7fefffff
 800b1e4:	0800e90c 	.word	0x0800e90c
 800b1e8:	0800e908 	.word	0x0800e908
 800b1ec:	0800e914 	.word	0x0800e914
 800b1f0:	0800e910 	.word	0x0800e910
 800b1f4:	0800e918 	.word	0x0800e918
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	9a06      	ldr	r2, [sp, #24]
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f aecd 	beq.w	800afa2 <_printf_float+0xba>
 800b208:	f10b 0b01 	add.w	fp, fp, #1
 800b20c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b210:	ebaa 0309 	sub.w	r3, sl, r9
 800b214:	455b      	cmp	r3, fp
 800b216:	dcef      	bgt.n	800b1f8 <_printf_float+0x310>
 800b218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b21c:	429a      	cmp	r2, r3
 800b21e:	44d0      	add	r8, sl
 800b220:	db15      	blt.n	800b24e <_printf_float+0x366>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	07da      	lsls	r2, r3, #31
 800b226:	d412      	bmi.n	800b24e <_printf_float+0x366>
 800b228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b22a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b22c:	eba3 020a 	sub.w	r2, r3, sl
 800b230:	eba3 0a01 	sub.w	sl, r3, r1
 800b234:	4592      	cmp	sl, r2
 800b236:	bfa8      	it	ge
 800b238:	4692      	movge	sl, r2
 800b23a:	f1ba 0f00 	cmp.w	sl, #0
 800b23e:	dc0e      	bgt.n	800b25e <_printf_float+0x376>
 800b240:	f04f 0800 	mov.w	r8, #0
 800b244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b248:	f104 091a 	add.w	r9, r4, #26
 800b24c:	e019      	b.n	800b282 <_printf_float+0x39a>
 800b24e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b252:	4631      	mov	r1, r6
 800b254:	4628      	mov	r0, r5
 800b256:	47b8      	blx	r7
 800b258:	3001      	adds	r0, #1
 800b25a:	d1e5      	bne.n	800b228 <_printf_float+0x340>
 800b25c:	e6a1      	b.n	800afa2 <_printf_float+0xba>
 800b25e:	4653      	mov	r3, sl
 800b260:	4642      	mov	r2, r8
 800b262:	4631      	mov	r1, r6
 800b264:	4628      	mov	r0, r5
 800b266:	47b8      	blx	r7
 800b268:	3001      	adds	r0, #1
 800b26a:	d1e9      	bne.n	800b240 <_printf_float+0x358>
 800b26c:	e699      	b.n	800afa2 <_printf_float+0xba>
 800b26e:	2301      	movs	r3, #1
 800b270:	464a      	mov	r2, r9
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	f43f ae92 	beq.w	800afa2 <_printf_float+0xba>
 800b27e:	f108 0801 	add.w	r8, r8, #1
 800b282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	eba3 030a 	sub.w	r3, r3, sl
 800b28c:	4543      	cmp	r3, r8
 800b28e:	dcee      	bgt.n	800b26e <_printf_float+0x386>
 800b290:	e74a      	b.n	800b128 <_printf_float+0x240>
 800b292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b294:	2a01      	cmp	r2, #1
 800b296:	dc01      	bgt.n	800b29c <_printf_float+0x3b4>
 800b298:	07db      	lsls	r3, r3, #31
 800b29a:	d53a      	bpl.n	800b312 <_printf_float+0x42a>
 800b29c:	2301      	movs	r3, #1
 800b29e:	4642      	mov	r2, r8
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b8      	blx	r7
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	f43f ae7b 	beq.w	800afa2 <_printf_float+0xba>
 800b2ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f108 0801 	add.w	r8, r8, #1
 800b2bc:	f43f ae71 	beq.w	800afa2 <_printf_float+0xba>
 800b2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f103 3aff 	add.w	sl, r3, #4294967295
 800b2c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f7f5 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2d2:	b9c8      	cbnz	r0, 800b308 <_printf_float+0x420>
 800b2d4:	4653      	mov	r3, sl
 800b2d6:	4642      	mov	r2, r8
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4628      	mov	r0, r5
 800b2dc:	47b8      	blx	r7
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d10e      	bne.n	800b300 <_printf_float+0x418>
 800b2e2:	e65e      	b.n	800afa2 <_printf_float+0xba>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4652      	mov	r2, sl
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b8      	blx	r7
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f43f ae57 	beq.w	800afa2 <_printf_float+0xba>
 800b2f4:	f108 0801 	add.w	r8, r8, #1
 800b2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	4543      	cmp	r3, r8
 800b2fe:	dcf1      	bgt.n	800b2e4 <_printf_float+0x3fc>
 800b300:	464b      	mov	r3, r9
 800b302:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b306:	e6de      	b.n	800b0c6 <_printf_float+0x1de>
 800b308:	f04f 0800 	mov.w	r8, #0
 800b30c:	f104 0a1a 	add.w	sl, r4, #26
 800b310:	e7f2      	b.n	800b2f8 <_printf_float+0x410>
 800b312:	2301      	movs	r3, #1
 800b314:	e7df      	b.n	800b2d6 <_printf_float+0x3ee>
 800b316:	2301      	movs	r3, #1
 800b318:	464a      	mov	r2, r9
 800b31a:	4631      	mov	r1, r6
 800b31c:	4628      	mov	r0, r5
 800b31e:	47b8      	blx	r7
 800b320:	3001      	adds	r0, #1
 800b322:	f43f ae3e 	beq.w	800afa2 <_printf_float+0xba>
 800b326:	f108 0801 	add.w	r8, r8, #1
 800b32a:	68e3      	ldr	r3, [r4, #12]
 800b32c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b32e:	1a9b      	subs	r3, r3, r2
 800b330:	4543      	cmp	r3, r8
 800b332:	dcf0      	bgt.n	800b316 <_printf_float+0x42e>
 800b334:	e6fc      	b.n	800b130 <_printf_float+0x248>
 800b336:	f04f 0800 	mov.w	r8, #0
 800b33a:	f104 0919 	add.w	r9, r4, #25
 800b33e:	e7f4      	b.n	800b32a <_printf_float+0x442>
 800b340:	2900      	cmp	r1, #0
 800b342:	f43f ae8b 	beq.w	800b05c <_printf_float+0x174>
 800b346:	2300      	movs	r3, #0
 800b348:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b34c:	ab09      	add	r3, sp, #36	; 0x24
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	ec49 8b10 	vmov	d0, r8, r9
 800b354:	6022      	str	r2, [r4, #0]
 800b356:	f8cd a004 	str.w	sl, [sp, #4]
 800b35a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b35e:	4628      	mov	r0, r5
 800b360:	f7ff fd2e 	bl	800adc0 <__cvt>
 800b364:	4680      	mov	r8, r0
 800b366:	e648      	b.n	800affa <_printf_float+0x112>

0800b368 <_printf_common>:
 800b368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b36c:	4691      	mov	r9, r2
 800b36e:	461f      	mov	r7, r3
 800b370:	688a      	ldr	r2, [r1, #8]
 800b372:	690b      	ldr	r3, [r1, #16]
 800b374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b378:	4293      	cmp	r3, r2
 800b37a:	bfb8      	it	lt
 800b37c:	4613      	movlt	r3, r2
 800b37e:	f8c9 3000 	str.w	r3, [r9]
 800b382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b386:	4606      	mov	r6, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	b112      	cbz	r2, 800b392 <_printf_common+0x2a>
 800b38c:	3301      	adds	r3, #1
 800b38e:	f8c9 3000 	str.w	r3, [r9]
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	0699      	lsls	r1, r3, #26
 800b396:	bf42      	ittt	mi
 800b398:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b39c:	3302      	addmi	r3, #2
 800b39e:	f8c9 3000 	strmi.w	r3, [r9]
 800b3a2:	6825      	ldr	r5, [r4, #0]
 800b3a4:	f015 0506 	ands.w	r5, r5, #6
 800b3a8:	d107      	bne.n	800b3ba <_printf_common+0x52>
 800b3aa:	f104 0a19 	add.w	sl, r4, #25
 800b3ae:	68e3      	ldr	r3, [r4, #12]
 800b3b0:	f8d9 2000 	ldr.w	r2, [r9]
 800b3b4:	1a9b      	subs	r3, r3, r2
 800b3b6:	42ab      	cmp	r3, r5
 800b3b8:	dc28      	bgt.n	800b40c <_printf_common+0xa4>
 800b3ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b3be:	6822      	ldr	r2, [r4, #0]
 800b3c0:	3300      	adds	r3, #0
 800b3c2:	bf18      	it	ne
 800b3c4:	2301      	movne	r3, #1
 800b3c6:	0692      	lsls	r2, r2, #26
 800b3c8:	d42d      	bmi.n	800b426 <_printf_common+0xbe>
 800b3ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	47c0      	blx	r8
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d020      	beq.n	800b41a <_printf_common+0xb2>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	68e5      	ldr	r5, [r4, #12]
 800b3dc:	f8d9 2000 	ldr.w	r2, [r9]
 800b3e0:	f003 0306 	and.w	r3, r3, #6
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	bf08      	it	eq
 800b3e8:	1aad      	subeq	r5, r5, r2
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	6922      	ldr	r2, [r4, #16]
 800b3ee:	bf0c      	ite	eq
 800b3f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f4:	2500      	movne	r5, #0
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	bfc4      	itt	gt
 800b3fa:	1a9b      	subgt	r3, r3, r2
 800b3fc:	18ed      	addgt	r5, r5, r3
 800b3fe:	f04f 0900 	mov.w	r9, #0
 800b402:	341a      	adds	r4, #26
 800b404:	454d      	cmp	r5, r9
 800b406:	d11a      	bne.n	800b43e <_printf_common+0xd6>
 800b408:	2000      	movs	r0, #0
 800b40a:	e008      	b.n	800b41e <_printf_common+0xb6>
 800b40c:	2301      	movs	r3, #1
 800b40e:	4652      	mov	r2, sl
 800b410:	4639      	mov	r1, r7
 800b412:	4630      	mov	r0, r6
 800b414:	47c0      	blx	r8
 800b416:	3001      	adds	r0, #1
 800b418:	d103      	bne.n	800b422 <_printf_common+0xba>
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b422:	3501      	adds	r5, #1
 800b424:	e7c3      	b.n	800b3ae <_printf_common+0x46>
 800b426:	18e1      	adds	r1, r4, r3
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	2030      	movs	r0, #48	; 0x30
 800b42c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b430:	4422      	add	r2, r4
 800b432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b436:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b43a:	3302      	adds	r3, #2
 800b43c:	e7c5      	b.n	800b3ca <_printf_common+0x62>
 800b43e:	2301      	movs	r3, #1
 800b440:	4622      	mov	r2, r4
 800b442:	4639      	mov	r1, r7
 800b444:	4630      	mov	r0, r6
 800b446:	47c0      	blx	r8
 800b448:	3001      	adds	r0, #1
 800b44a:	d0e6      	beq.n	800b41a <_printf_common+0xb2>
 800b44c:	f109 0901 	add.w	r9, r9, #1
 800b450:	e7d8      	b.n	800b404 <_printf_common+0x9c>
	...

0800b454 <_printf_i>:
 800b454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b45c:	460c      	mov	r4, r1
 800b45e:	7e09      	ldrb	r1, [r1, #24]
 800b460:	b085      	sub	sp, #20
 800b462:	296e      	cmp	r1, #110	; 0x6e
 800b464:	4617      	mov	r7, r2
 800b466:	4606      	mov	r6, r0
 800b468:	4698      	mov	r8, r3
 800b46a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b46c:	f000 80b3 	beq.w	800b5d6 <_printf_i+0x182>
 800b470:	d822      	bhi.n	800b4b8 <_printf_i+0x64>
 800b472:	2963      	cmp	r1, #99	; 0x63
 800b474:	d036      	beq.n	800b4e4 <_printf_i+0x90>
 800b476:	d80a      	bhi.n	800b48e <_printf_i+0x3a>
 800b478:	2900      	cmp	r1, #0
 800b47a:	f000 80b9 	beq.w	800b5f0 <_printf_i+0x19c>
 800b47e:	2958      	cmp	r1, #88	; 0x58
 800b480:	f000 8083 	beq.w	800b58a <_printf_i+0x136>
 800b484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b48c:	e032      	b.n	800b4f4 <_printf_i+0xa0>
 800b48e:	2964      	cmp	r1, #100	; 0x64
 800b490:	d001      	beq.n	800b496 <_printf_i+0x42>
 800b492:	2969      	cmp	r1, #105	; 0x69
 800b494:	d1f6      	bne.n	800b484 <_printf_i+0x30>
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	6813      	ldr	r3, [r2, #0]
 800b49a:	0605      	lsls	r5, r0, #24
 800b49c:	f103 0104 	add.w	r1, r3, #4
 800b4a0:	d52a      	bpl.n	800b4f8 <_printf_i+0xa4>
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6011      	str	r1, [r2, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da03      	bge.n	800b4b2 <_printf_i+0x5e>
 800b4aa:	222d      	movs	r2, #45	; 0x2d
 800b4ac:	425b      	negs	r3, r3
 800b4ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b4b2:	486f      	ldr	r0, [pc, #444]	; (800b670 <_printf_i+0x21c>)
 800b4b4:	220a      	movs	r2, #10
 800b4b6:	e039      	b.n	800b52c <_printf_i+0xd8>
 800b4b8:	2973      	cmp	r1, #115	; 0x73
 800b4ba:	f000 809d 	beq.w	800b5f8 <_printf_i+0x1a4>
 800b4be:	d808      	bhi.n	800b4d2 <_printf_i+0x7e>
 800b4c0:	296f      	cmp	r1, #111	; 0x6f
 800b4c2:	d020      	beq.n	800b506 <_printf_i+0xb2>
 800b4c4:	2970      	cmp	r1, #112	; 0x70
 800b4c6:	d1dd      	bne.n	800b484 <_printf_i+0x30>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	f043 0320 	orr.w	r3, r3, #32
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	e003      	b.n	800b4da <_printf_i+0x86>
 800b4d2:	2975      	cmp	r1, #117	; 0x75
 800b4d4:	d017      	beq.n	800b506 <_printf_i+0xb2>
 800b4d6:	2978      	cmp	r1, #120	; 0x78
 800b4d8:	d1d4      	bne.n	800b484 <_printf_i+0x30>
 800b4da:	2378      	movs	r3, #120	; 0x78
 800b4dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4e0:	4864      	ldr	r0, [pc, #400]	; (800b674 <_printf_i+0x220>)
 800b4e2:	e055      	b.n	800b590 <_printf_i+0x13c>
 800b4e4:	6813      	ldr	r3, [r2, #0]
 800b4e6:	1d19      	adds	r1, r3, #4
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6011      	str	r1, [r2, #0]
 800b4ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e08c      	b.n	800b612 <_printf_i+0x1be>
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6011      	str	r1, [r2, #0]
 800b4fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b500:	bf18      	it	ne
 800b502:	b21b      	sxthne	r3, r3
 800b504:	e7cf      	b.n	800b4a6 <_printf_i+0x52>
 800b506:	6813      	ldr	r3, [r2, #0]
 800b508:	6825      	ldr	r5, [r4, #0]
 800b50a:	1d18      	adds	r0, r3, #4
 800b50c:	6010      	str	r0, [r2, #0]
 800b50e:	0628      	lsls	r0, r5, #24
 800b510:	d501      	bpl.n	800b516 <_printf_i+0xc2>
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	e002      	b.n	800b51c <_printf_i+0xc8>
 800b516:	0668      	lsls	r0, r5, #25
 800b518:	d5fb      	bpl.n	800b512 <_printf_i+0xbe>
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	4854      	ldr	r0, [pc, #336]	; (800b670 <_printf_i+0x21c>)
 800b51e:	296f      	cmp	r1, #111	; 0x6f
 800b520:	bf14      	ite	ne
 800b522:	220a      	movne	r2, #10
 800b524:	2208      	moveq	r2, #8
 800b526:	2100      	movs	r1, #0
 800b528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b52c:	6865      	ldr	r5, [r4, #4]
 800b52e:	60a5      	str	r5, [r4, #8]
 800b530:	2d00      	cmp	r5, #0
 800b532:	f2c0 8095 	blt.w	800b660 <_printf_i+0x20c>
 800b536:	6821      	ldr	r1, [r4, #0]
 800b538:	f021 0104 	bic.w	r1, r1, #4
 800b53c:	6021      	str	r1, [r4, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d13d      	bne.n	800b5be <_printf_i+0x16a>
 800b542:	2d00      	cmp	r5, #0
 800b544:	f040 808e 	bne.w	800b664 <_printf_i+0x210>
 800b548:	4665      	mov	r5, ip
 800b54a:	2a08      	cmp	r2, #8
 800b54c:	d10b      	bne.n	800b566 <_printf_i+0x112>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	07db      	lsls	r3, r3, #31
 800b552:	d508      	bpl.n	800b566 <_printf_i+0x112>
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	6862      	ldr	r2, [r4, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	bfde      	ittt	le
 800b55c:	2330      	movle	r3, #48	; 0x30
 800b55e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b562:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b566:	ebac 0305 	sub.w	r3, ip, r5
 800b56a:	6123      	str	r3, [r4, #16]
 800b56c:	f8cd 8000 	str.w	r8, [sp]
 800b570:	463b      	mov	r3, r7
 800b572:	aa03      	add	r2, sp, #12
 800b574:	4621      	mov	r1, r4
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff fef6 	bl	800b368 <_printf_common>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d14d      	bne.n	800b61c <_printf_i+0x1c8>
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	b005      	add	sp, #20
 800b586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58a:	4839      	ldr	r0, [pc, #228]	; (800b670 <_printf_i+0x21c>)
 800b58c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b590:	6813      	ldr	r3, [r2, #0]
 800b592:	6821      	ldr	r1, [r4, #0]
 800b594:	1d1d      	adds	r5, r3, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6015      	str	r5, [r2, #0]
 800b59a:	060a      	lsls	r2, r1, #24
 800b59c:	d50b      	bpl.n	800b5b6 <_printf_i+0x162>
 800b59e:	07ca      	lsls	r2, r1, #31
 800b5a0:	bf44      	itt	mi
 800b5a2:	f041 0120 	orrmi.w	r1, r1, #32
 800b5a6:	6021      	strmi	r1, [r4, #0]
 800b5a8:	b91b      	cbnz	r3, 800b5b2 <_printf_i+0x15e>
 800b5aa:	6822      	ldr	r2, [r4, #0]
 800b5ac:	f022 0220 	bic.w	r2, r2, #32
 800b5b0:	6022      	str	r2, [r4, #0]
 800b5b2:	2210      	movs	r2, #16
 800b5b4:	e7b7      	b.n	800b526 <_printf_i+0xd2>
 800b5b6:	064d      	lsls	r5, r1, #25
 800b5b8:	bf48      	it	mi
 800b5ba:	b29b      	uxthmi	r3, r3
 800b5bc:	e7ef      	b.n	800b59e <_printf_i+0x14a>
 800b5be:	4665      	mov	r5, ip
 800b5c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5c4:	fb02 3311 	mls	r3, r2, r1, r3
 800b5c8:	5cc3      	ldrb	r3, [r0, r3]
 800b5ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	2900      	cmp	r1, #0
 800b5d2:	d1f5      	bne.n	800b5c0 <_printf_i+0x16c>
 800b5d4:	e7b9      	b.n	800b54a <_printf_i+0xf6>
 800b5d6:	6813      	ldr	r3, [r2, #0]
 800b5d8:	6825      	ldr	r5, [r4, #0]
 800b5da:	6961      	ldr	r1, [r4, #20]
 800b5dc:	1d18      	adds	r0, r3, #4
 800b5de:	6010      	str	r0, [r2, #0]
 800b5e0:	0628      	lsls	r0, r5, #24
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	d501      	bpl.n	800b5ea <_printf_i+0x196>
 800b5e6:	6019      	str	r1, [r3, #0]
 800b5e8:	e002      	b.n	800b5f0 <_printf_i+0x19c>
 800b5ea:	066a      	lsls	r2, r5, #25
 800b5ec:	d5fb      	bpl.n	800b5e6 <_printf_i+0x192>
 800b5ee:	8019      	strh	r1, [r3, #0]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	6123      	str	r3, [r4, #16]
 800b5f4:	4665      	mov	r5, ip
 800b5f6:	e7b9      	b.n	800b56c <_printf_i+0x118>
 800b5f8:	6813      	ldr	r3, [r2, #0]
 800b5fa:	1d19      	adds	r1, r3, #4
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	681d      	ldr	r5, [r3, #0]
 800b600:	6862      	ldr	r2, [r4, #4]
 800b602:	2100      	movs	r1, #0
 800b604:	4628      	mov	r0, r5
 800b606:	f7f4 fdeb 	bl	80001e0 <memchr>
 800b60a:	b108      	cbz	r0, 800b610 <_printf_i+0x1bc>
 800b60c:	1b40      	subs	r0, r0, r5
 800b60e:	6060      	str	r0, [r4, #4]
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	6123      	str	r3, [r4, #16]
 800b614:	2300      	movs	r3, #0
 800b616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b61a:	e7a7      	b.n	800b56c <_printf_i+0x118>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	462a      	mov	r2, r5
 800b620:	4639      	mov	r1, r7
 800b622:	4630      	mov	r0, r6
 800b624:	47c0      	blx	r8
 800b626:	3001      	adds	r0, #1
 800b628:	d0aa      	beq.n	800b580 <_printf_i+0x12c>
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	079b      	lsls	r3, r3, #30
 800b62e:	d413      	bmi.n	800b658 <_printf_i+0x204>
 800b630:	68e0      	ldr	r0, [r4, #12]
 800b632:	9b03      	ldr	r3, [sp, #12]
 800b634:	4298      	cmp	r0, r3
 800b636:	bfb8      	it	lt
 800b638:	4618      	movlt	r0, r3
 800b63a:	e7a3      	b.n	800b584 <_printf_i+0x130>
 800b63c:	2301      	movs	r3, #1
 800b63e:	464a      	mov	r2, r9
 800b640:	4639      	mov	r1, r7
 800b642:	4630      	mov	r0, r6
 800b644:	47c0      	blx	r8
 800b646:	3001      	adds	r0, #1
 800b648:	d09a      	beq.n	800b580 <_printf_i+0x12c>
 800b64a:	3501      	adds	r5, #1
 800b64c:	68e3      	ldr	r3, [r4, #12]
 800b64e:	9a03      	ldr	r2, [sp, #12]
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	42ab      	cmp	r3, r5
 800b654:	dcf2      	bgt.n	800b63c <_printf_i+0x1e8>
 800b656:	e7eb      	b.n	800b630 <_printf_i+0x1dc>
 800b658:	2500      	movs	r5, #0
 800b65a:	f104 0919 	add.w	r9, r4, #25
 800b65e:	e7f5      	b.n	800b64c <_printf_i+0x1f8>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1ac      	bne.n	800b5be <_printf_i+0x16a>
 800b664:	7803      	ldrb	r3, [r0, #0]
 800b666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b66a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b66e:	e76c      	b.n	800b54a <_printf_i+0xf6>
 800b670:	0800e91a 	.word	0x0800e91a
 800b674:	0800e92b 	.word	0x0800e92b

0800b678 <_scanf_float>:
 800b678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b67c:	469a      	mov	sl, r3
 800b67e:	688b      	ldr	r3, [r1, #8]
 800b680:	4616      	mov	r6, r2
 800b682:	1e5a      	subs	r2, r3, #1
 800b684:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b688:	b087      	sub	sp, #28
 800b68a:	bf83      	ittte	hi
 800b68c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b690:	189b      	addhi	r3, r3, r2
 800b692:	9301      	strhi	r3, [sp, #4]
 800b694:	2300      	movls	r3, #0
 800b696:	bf86      	itte	hi
 800b698:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b69c:	608b      	strhi	r3, [r1, #8]
 800b69e:	9301      	strls	r3, [sp, #4]
 800b6a0:	680b      	ldr	r3, [r1, #0]
 800b6a2:	4688      	mov	r8, r1
 800b6a4:	f04f 0b00 	mov.w	fp, #0
 800b6a8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b6ac:	f848 3b1c 	str.w	r3, [r8], #28
 800b6b0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b6b4:	4607      	mov	r7, r0
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	4645      	mov	r5, r8
 800b6ba:	465a      	mov	r2, fp
 800b6bc:	46d9      	mov	r9, fp
 800b6be:	f8cd b008 	str.w	fp, [sp, #8]
 800b6c2:	68a1      	ldr	r1, [r4, #8]
 800b6c4:	b181      	cbz	r1, 800b6e8 <_scanf_float+0x70>
 800b6c6:	6833      	ldr	r3, [r6, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b49      	cmp	r3, #73	; 0x49
 800b6cc:	d071      	beq.n	800b7b2 <_scanf_float+0x13a>
 800b6ce:	d84d      	bhi.n	800b76c <_scanf_float+0xf4>
 800b6d0:	2b39      	cmp	r3, #57	; 0x39
 800b6d2:	d840      	bhi.n	800b756 <_scanf_float+0xde>
 800b6d4:	2b31      	cmp	r3, #49	; 0x31
 800b6d6:	f080 8088 	bcs.w	800b7ea <_scanf_float+0x172>
 800b6da:	2b2d      	cmp	r3, #45	; 0x2d
 800b6dc:	f000 8090 	beq.w	800b800 <_scanf_float+0x188>
 800b6e0:	d815      	bhi.n	800b70e <_scanf_float+0x96>
 800b6e2:	2b2b      	cmp	r3, #43	; 0x2b
 800b6e4:	f000 808c 	beq.w	800b800 <_scanf_float+0x188>
 800b6e8:	f1b9 0f00 	cmp.w	r9, #0
 800b6ec:	d003      	beq.n	800b6f6 <_scanf_float+0x7e>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	3a01      	subs	r2, #1
 800b6f8:	2a01      	cmp	r2, #1
 800b6fa:	f200 80ea 	bhi.w	800b8d2 <_scanf_float+0x25a>
 800b6fe:	4545      	cmp	r5, r8
 800b700:	f200 80dc 	bhi.w	800b8bc <_scanf_float+0x244>
 800b704:	2601      	movs	r6, #1
 800b706:	4630      	mov	r0, r6
 800b708:	b007      	add	sp, #28
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70e:	2b2e      	cmp	r3, #46	; 0x2e
 800b710:	f000 809f 	beq.w	800b852 <_scanf_float+0x1da>
 800b714:	2b30      	cmp	r3, #48	; 0x30
 800b716:	d1e7      	bne.n	800b6e8 <_scanf_float+0x70>
 800b718:	6820      	ldr	r0, [r4, #0]
 800b71a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b71e:	d064      	beq.n	800b7ea <_scanf_float+0x172>
 800b720:	9b01      	ldr	r3, [sp, #4]
 800b722:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b726:	6020      	str	r0, [r4, #0]
 800b728:	f109 0901 	add.w	r9, r9, #1
 800b72c:	b11b      	cbz	r3, 800b736 <_scanf_float+0xbe>
 800b72e:	3b01      	subs	r3, #1
 800b730:	3101      	adds	r1, #1
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	60a1      	str	r1, [r4, #8]
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	3b01      	subs	r3, #1
 800b73a:	60a3      	str	r3, [r4, #8]
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	3301      	adds	r3, #1
 800b740:	6123      	str	r3, [r4, #16]
 800b742:	6873      	ldr	r3, [r6, #4]
 800b744:	3b01      	subs	r3, #1
 800b746:	2b00      	cmp	r3, #0
 800b748:	6073      	str	r3, [r6, #4]
 800b74a:	f340 80ac 	ble.w	800b8a6 <_scanf_float+0x22e>
 800b74e:	6833      	ldr	r3, [r6, #0]
 800b750:	3301      	adds	r3, #1
 800b752:	6033      	str	r3, [r6, #0]
 800b754:	e7b5      	b.n	800b6c2 <_scanf_float+0x4a>
 800b756:	2b45      	cmp	r3, #69	; 0x45
 800b758:	f000 8085 	beq.w	800b866 <_scanf_float+0x1ee>
 800b75c:	2b46      	cmp	r3, #70	; 0x46
 800b75e:	d06a      	beq.n	800b836 <_scanf_float+0x1be>
 800b760:	2b41      	cmp	r3, #65	; 0x41
 800b762:	d1c1      	bne.n	800b6e8 <_scanf_float+0x70>
 800b764:	2a01      	cmp	r2, #1
 800b766:	d1bf      	bne.n	800b6e8 <_scanf_float+0x70>
 800b768:	2202      	movs	r2, #2
 800b76a:	e046      	b.n	800b7fa <_scanf_float+0x182>
 800b76c:	2b65      	cmp	r3, #101	; 0x65
 800b76e:	d07a      	beq.n	800b866 <_scanf_float+0x1ee>
 800b770:	d818      	bhi.n	800b7a4 <_scanf_float+0x12c>
 800b772:	2b54      	cmp	r3, #84	; 0x54
 800b774:	d066      	beq.n	800b844 <_scanf_float+0x1cc>
 800b776:	d811      	bhi.n	800b79c <_scanf_float+0x124>
 800b778:	2b4e      	cmp	r3, #78	; 0x4e
 800b77a:	d1b5      	bne.n	800b6e8 <_scanf_float+0x70>
 800b77c:	2a00      	cmp	r2, #0
 800b77e:	d146      	bne.n	800b80e <_scanf_float+0x196>
 800b780:	f1b9 0f00 	cmp.w	r9, #0
 800b784:	d145      	bne.n	800b812 <_scanf_float+0x19a>
 800b786:	6821      	ldr	r1, [r4, #0]
 800b788:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b78c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b790:	d13f      	bne.n	800b812 <_scanf_float+0x19a>
 800b792:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b796:	6021      	str	r1, [r4, #0]
 800b798:	2201      	movs	r2, #1
 800b79a:	e02e      	b.n	800b7fa <_scanf_float+0x182>
 800b79c:	2b59      	cmp	r3, #89	; 0x59
 800b79e:	d01e      	beq.n	800b7de <_scanf_float+0x166>
 800b7a0:	2b61      	cmp	r3, #97	; 0x61
 800b7a2:	e7de      	b.n	800b762 <_scanf_float+0xea>
 800b7a4:	2b6e      	cmp	r3, #110	; 0x6e
 800b7a6:	d0e9      	beq.n	800b77c <_scanf_float+0x104>
 800b7a8:	d815      	bhi.n	800b7d6 <_scanf_float+0x15e>
 800b7aa:	2b66      	cmp	r3, #102	; 0x66
 800b7ac:	d043      	beq.n	800b836 <_scanf_float+0x1be>
 800b7ae:	2b69      	cmp	r3, #105	; 0x69
 800b7b0:	d19a      	bne.n	800b6e8 <_scanf_float+0x70>
 800b7b2:	f1bb 0f00 	cmp.w	fp, #0
 800b7b6:	d138      	bne.n	800b82a <_scanf_float+0x1b2>
 800b7b8:	f1b9 0f00 	cmp.w	r9, #0
 800b7bc:	d197      	bne.n	800b6ee <_scanf_float+0x76>
 800b7be:	6821      	ldr	r1, [r4, #0]
 800b7c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b7c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b7c8:	d195      	bne.n	800b6f6 <_scanf_float+0x7e>
 800b7ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b7ce:	6021      	str	r1, [r4, #0]
 800b7d0:	f04f 0b01 	mov.w	fp, #1
 800b7d4:	e011      	b.n	800b7fa <_scanf_float+0x182>
 800b7d6:	2b74      	cmp	r3, #116	; 0x74
 800b7d8:	d034      	beq.n	800b844 <_scanf_float+0x1cc>
 800b7da:	2b79      	cmp	r3, #121	; 0x79
 800b7dc:	d184      	bne.n	800b6e8 <_scanf_float+0x70>
 800b7de:	f1bb 0f07 	cmp.w	fp, #7
 800b7e2:	d181      	bne.n	800b6e8 <_scanf_float+0x70>
 800b7e4:	f04f 0b08 	mov.w	fp, #8
 800b7e8:	e007      	b.n	800b7fa <_scanf_float+0x182>
 800b7ea:	eb12 0f0b 	cmn.w	r2, fp
 800b7ee:	f47f af7b 	bne.w	800b6e8 <_scanf_float+0x70>
 800b7f2:	6821      	ldr	r1, [r4, #0]
 800b7f4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b7f8:	6021      	str	r1, [r4, #0]
 800b7fa:	702b      	strb	r3, [r5, #0]
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	e79a      	b.n	800b736 <_scanf_float+0xbe>
 800b800:	6821      	ldr	r1, [r4, #0]
 800b802:	0608      	lsls	r0, r1, #24
 800b804:	f57f af70 	bpl.w	800b6e8 <_scanf_float+0x70>
 800b808:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b80c:	e7f4      	b.n	800b7f8 <_scanf_float+0x180>
 800b80e:	2a02      	cmp	r2, #2
 800b810:	d047      	beq.n	800b8a2 <_scanf_float+0x22a>
 800b812:	f1bb 0f01 	cmp.w	fp, #1
 800b816:	d003      	beq.n	800b820 <_scanf_float+0x1a8>
 800b818:	f1bb 0f04 	cmp.w	fp, #4
 800b81c:	f47f af64 	bne.w	800b6e8 <_scanf_float+0x70>
 800b820:	f10b 0b01 	add.w	fp, fp, #1
 800b824:	fa5f fb8b 	uxtb.w	fp, fp
 800b828:	e7e7      	b.n	800b7fa <_scanf_float+0x182>
 800b82a:	f1bb 0f03 	cmp.w	fp, #3
 800b82e:	d0f7      	beq.n	800b820 <_scanf_float+0x1a8>
 800b830:	f1bb 0f05 	cmp.w	fp, #5
 800b834:	e7f2      	b.n	800b81c <_scanf_float+0x1a4>
 800b836:	f1bb 0f02 	cmp.w	fp, #2
 800b83a:	f47f af55 	bne.w	800b6e8 <_scanf_float+0x70>
 800b83e:	f04f 0b03 	mov.w	fp, #3
 800b842:	e7da      	b.n	800b7fa <_scanf_float+0x182>
 800b844:	f1bb 0f06 	cmp.w	fp, #6
 800b848:	f47f af4e 	bne.w	800b6e8 <_scanf_float+0x70>
 800b84c:	f04f 0b07 	mov.w	fp, #7
 800b850:	e7d3      	b.n	800b7fa <_scanf_float+0x182>
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	0588      	lsls	r0, r1, #22
 800b856:	f57f af47 	bpl.w	800b6e8 <_scanf_float+0x70>
 800b85a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b85e:	6021      	str	r1, [r4, #0]
 800b860:	f8cd 9008 	str.w	r9, [sp, #8]
 800b864:	e7c9      	b.n	800b7fa <_scanf_float+0x182>
 800b866:	6821      	ldr	r1, [r4, #0]
 800b868:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b86c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b870:	d006      	beq.n	800b880 <_scanf_float+0x208>
 800b872:	0548      	lsls	r0, r1, #21
 800b874:	f57f af38 	bpl.w	800b6e8 <_scanf_float+0x70>
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	f43f af3b 	beq.w	800b6f6 <_scanf_float+0x7e>
 800b880:	0588      	lsls	r0, r1, #22
 800b882:	bf58      	it	pl
 800b884:	9802      	ldrpl	r0, [sp, #8]
 800b886:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b88a:	bf58      	it	pl
 800b88c:	eba9 0000 	subpl.w	r0, r9, r0
 800b890:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b894:	bf58      	it	pl
 800b896:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b89a:	6021      	str	r1, [r4, #0]
 800b89c:	f04f 0900 	mov.w	r9, #0
 800b8a0:	e7ab      	b.n	800b7fa <_scanf_float+0x182>
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	e7a9      	b.n	800b7fa <_scanf_float+0x182>
 800b8a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8aa:	9205      	str	r2, [sp, #20]
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	4798      	blx	r3
 800b8b2:	9a05      	ldr	r2, [sp, #20]
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	f43f af04 	beq.w	800b6c2 <_scanf_float+0x4a>
 800b8ba:	e715      	b.n	800b6e8 <_scanf_float+0x70>
 800b8bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	4798      	blx	r3
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	6123      	str	r3, [r4, #16]
 800b8d0:	e715      	b.n	800b6fe <_scanf_float+0x86>
 800b8d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	d80a      	bhi.n	800b8f0 <_scanf_float+0x278>
 800b8da:	f1bb 0f02 	cmp.w	fp, #2
 800b8de:	d968      	bls.n	800b9b2 <_scanf_float+0x33a>
 800b8e0:	f1ab 0b03 	sub.w	fp, fp, #3
 800b8e4:	fa5f fb8b 	uxtb.w	fp, fp
 800b8e8:	eba5 0b0b 	sub.w	fp, r5, fp
 800b8ec:	455d      	cmp	r5, fp
 800b8ee:	d14b      	bne.n	800b988 <_scanf_float+0x310>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	05da      	lsls	r2, r3, #23
 800b8f4:	d51f      	bpl.n	800b936 <_scanf_float+0x2be>
 800b8f6:	055b      	lsls	r3, r3, #21
 800b8f8:	d468      	bmi.n	800b9cc <_scanf_float+0x354>
 800b8fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b8fe:	6923      	ldr	r3, [r4, #16]
 800b900:	2965      	cmp	r1, #101	; 0x65
 800b902:	f103 33ff 	add.w	r3, r3, #4294967295
 800b906:	f105 3bff 	add.w	fp, r5, #4294967295
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	d00d      	beq.n	800b92a <_scanf_float+0x2b2>
 800b90e:	2945      	cmp	r1, #69	; 0x45
 800b910:	d00b      	beq.n	800b92a <_scanf_float+0x2b2>
 800b912:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b916:	4632      	mov	r2, r6
 800b918:	4638      	mov	r0, r7
 800b91a:	4798      	blx	r3
 800b91c:	6923      	ldr	r3, [r4, #16]
 800b91e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b922:	3b01      	subs	r3, #1
 800b924:	f1a5 0b02 	sub.w	fp, r5, #2
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b92e:	4632      	mov	r2, r6
 800b930:	4638      	mov	r0, r7
 800b932:	4798      	blx	r3
 800b934:	465d      	mov	r5, fp
 800b936:	6826      	ldr	r6, [r4, #0]
 800b938:	f016 0610 	ands.w	r6, r6, #16
 800b93c:	d17a      	bne.n	800ba34 <_scanf_float+0x3bc>
 800b93e:	702e      	strb	r6, [r5, #0]
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b94a:	d142      	bne.n	800b9d2 <_scanf_float+0x35a>
 800b94c:	9b02      	ldr	r3, [sp, #8]
 800b94e:	eba9 0303 	sub.w	r3, r9, r3
 800b952:	425a      	negs	r2, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	d149      	bne.n	800b9ec <_scanf_float+0x374>
 800b958:	2200      	movs	r2, #0
 800b95a:	4641      	mov	r1, r8
 800b95c:	4638      	mov	r0, r7
 800b95e:	f000 fecf 	bl	800c700 <_strtod_r>
 800b962:	6825      	ldr	r5, [r4, #0]
 800b964:	f8da 3000 	ldr.w	r3, [sl]
 800b968:	f015 0f02 	tst.w	r5, #2
 800b96c:	f103 0204 	add.w	r2, r3, #4
 800b970:	ec59 8b10 	vmov	r8, r9, d0
 800b974:	f8ca 2000 	str.w	r2, [sl]
 800b978:	d043      	beq.n	800ba02 <_scanf_float+0x38a>
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	e9c3 8900 	strd	r8, r9, [r3]
 800b980:	68e3      	ldr	r3, [r4, #12]
 800b982:	3301      	adds	r3, #1
 800b984:	60e3      	str	r3, [r4, #12]
 800b986:	e6be      	b.n	800b706 <_scanf_float+0x8e>
 800b988:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b98c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b990:	4632      	mov	r2, r6
 800b992:	4638      	mov	r0, r7
 800b994:	4798      	blx	r3
 800b996:	6923      	ldr	r3, [r4, #16]
 800b998:	3b01      	subs	r3, #1
 800b99a:	6123      	str	r3, [r4, #16]
 800b99c:	e7a6      	b.n	800b8ec <_scanf_float+0x274>
 800b99e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9a2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b9a6:	4632      	mov	r2, r6
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	4798      	blx	r3
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	6123      	str	r3, [r4, #16]
 800b9b2:	4545      	cmp	r5, r8
 800b9b4:	d8f3      	bhi.n	800b99e <_scanf_float+0x326>
 800b9b6:	e6a5      	b.n	800b704 <_scanf_float+0x8c>
 800b9b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	4638      	mov	r0, r7
 800b9c4:	4798      	blx	r3
 800b9c6:	6923      	ldr	r3, [r4, #16]
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	6123      	str	r3, [r4, #16]
 800b9cc:	4545      	cmp	r5, r8
 800b9ce:	d8f3      	bhi.n	800b9b8 <_scanf_float+0x340>
 800b9d0:	e698      	b.n	800b704 <_scanf_float+0x8c>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d0bf      	beq.n	800b958 <_scanf_float+0x2e0>
 800b9d8:	9904      	ldr	r1, [sp, #16]
 800b9da:	230a      	movs	r3, #10
 800b9dc:	4632      	mov	r2, r6
 800b9de:	3101      	adds	r1, #1
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f000 ff19 	bl	800c818 <_strtol_r>
 800b9e6:	9b03      	ldr	r3, [sp, #12]
 800b9e8:	9d04      	ldr	r5, [sp, #16]
 800b9ea:	1ac2      	subs	r2, r0, r3
 800b9ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b9f0:	429d      	cmp	r5, r3
 800b9f2:	bf28      	it	cs
 800b9f4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b9f8:	490f      	ldr	r1, [pc, #60]	; (800ba38 <_scanf_float+0x3c0>)
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f834 	bl	800ba68 <siprintf>
 800ba00:	e7aa      	b.n	800b958 <_scanf_float+0x2e0>
 800ba02:	f015 0504 	ands.w	r5, r5, #4
 800ba06:	d1b8      	bne.n	800b97a <_scanf_float+0x302>
 800ba08:	681f      	ldr	r7, [r3, #0]
 800ba0a:	ee10 2a10 	vmov	r2, s0
 800ba0e:	464b      	mov	r3, r9
 800ba10:	ee10 0a10 	vmov	r0, s0
 800ba14:	4649      	mov	r1, r9
 800ba16:	f7f5 f889 	bl	8000b2c <__aeabi_dcmpun>
 800ba1a:	b128      	cbz	r0, 800ba28 <_scanf_float+0x3b0>
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f81d 	bl	800ba5c <nanf>
 800ba22:	ed87 0a00 	vstr	s0, [r7]
 800ba26:	e7ab      	b.n	800b980 <_scanf_float+0x308>
 800ba28:	4640      	mov	r0, r8
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	f7f5 f8dc 	bl	8000be8 <__aeabi_d2f>
 800ba30:	6038      	str	r0, [r7, #0]
 800ba32:	e7a5      	b.n	800b980 <_scanf_float+0x308>
 800ba34:	2600      	movs	r6, #0
 800ba36:	e666      	b.n	800b706 <_scanf_float+0x8e>
 800ba38:	0800e93c 	.word	0x0800e93c

0800ba3c <_sbrk_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4c06      	ldr	r4, [pc, #24]	; (800ba58 <_sbrk_r+0x1c>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4605      	mov	r5, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	f7f6 fcfc 	bl	8002444 <_sbrk>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_sbrk_r+0x1a>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_sbrk_r+0x1a>
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	20000ea0 	.word	0x20000ea0

0800ba5c <nanf>:
 800ba5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba64 <nanf+0x8>
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	7fc00000 	.word	0x7fc00000

0800ba68 <siprintf>:
 800ba68:	b40e      	push	{r1, r2, r3}
 800ba6a:	b500      	push	{lr}
 800ba6c:	b09c      	sub	sp, #112	; 0x70
 800ba6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ba70:	9002      	str	r0, [sp, #8]
 800ba72:	9006      	str	r0, [sp, #24]
 800ba74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba78:	4809      	ldr	r0, [pc, #36]	; (800baa0 <siprintf+0x38>)
 800ba7a:	9107      	str	r1, [sp, #28]
 800ba7c:	9104      	str	r1, [sp, #16]
 800ba7e:	4909      	ldr	r1, [pc, #36]	; (800baa4 <siprintf+0x3c>)
 800ba80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba84:	9105      	str	r1, [sp, #20]
 800ba86:	6800      	ldr	r0, [r0, #0]
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	a902      	add	r1, sp, #8
 800ba8c:	f002 fcdc 	bl	800e448 <_svfiprintf_r>
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	2200      	movs	r2, #0
 800ba94:	701a      	strb	r2, [r3, #0]
 800ba96:	b01c      	add	sp, #112	; 0x70
 800ba98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba9c:	b003      	add	sp, #12
 800ba9e:	4770      	bx	lr
 800baa0:	20000090 	.word	0x20000090
 800baa4:	ffff0208 	.word	0xffff0208

0800baa8 <strstr>:
 800baa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baaa:	7803      	ldrb	r3, [r0, #0]
 800baac:	b17b      	cbz	r3, 800bace <strstr+0x26>
 800baae:	4604      	mov	r4, r0
 800bab0:	7823      	ldrb	r3, [r4, #0]
 800bab2:	4620      	mov	r0, r4
 800bab4:	1c66      	adds	r6, r4, #1
 800bab6:	b17b      	cbz	r3, 800bad8 <strstr+0x30>
 800bab8:	1e4a      	subs	r2, r1, #1
 800baba:	1e63      	subs	r3, r4, #1
 800babc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800bac0:	b14d      	cbz	r5, 800bad6 <strstr+0x2e>
 800bac2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bac6:	42af      	cmp	r7, r5
 800bac8:	4634      	mov	r4, r6
 800baca:	d0f7      	beq.n	800babc <strstr+0x14>
 800bacc:	e7f0      	b.n	800bab0 <strstr+0x8>
 800bace:	780b      	ldrb	r3, [r1, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bf18      	it	ne
 800bad4:	2000      	movne	r0, #0
 800bad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bad8:	4618      	mov	r0, r3
 800bada:	e7fc      	b.n	800bad6 <strstr+0x2e>

0800badc <sulp>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	4604      	mov	r4, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	ec45 4b10 	vmov	d0, r4, r5
 800bae6:	4616      	mov	r6, r2
 800bae8:	f002 fb12 	bl	800e110 <__ulp>
 800baec:	ec51 0b10 	vmov	r0, r1, d0
 800baf0:	b17e      	cbz	r6, 800bb12 <sulp+0x36>
 800baf2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800baf6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	dd09      	ble.n	800bb12 <sulp+0x36>
 800bafe:	051b      	lsls	r3, r3, #20
 800bb00:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bb04:	2400      	movs	r4, #0
 800bb06:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bb0a:	4622      	mov	r2, r4
 800bb0c:	462b      	mov	r3, r5
 800bb0e:	f7f4 fd73 	bl	80005f8 <__aeabi_dmul>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	0000      	movs	r0, r0
	...

0800bb18 <_strtod_l>:
 800bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	461f      	mov	r7, r3
 800bb1e:	b0a1      	sub	sp, #132	; 0x84
 800bb20:	2300      	movs	r3, #0
 800bb22:	4681      	mov	r9, r0
 800bb24:	4638      	mov	r0, r7
 800bb26:	460e      	mov	r6, r1
 800bb28:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb2a:	931c      	str	r3, [sp, #112]	; 0x70
 800bb2c:	f001 fff5 	bl	800db1a <__localeconv_l>
 800bb30:	4680      	mov	r8, r0
 800bb32:	6800      	ldr	r0, [r0, #0]
 800bb34:	f7f4 fb4c 	bl	80001d0 <strlen>
 800bb38:	f04f 0a00 	mov.w	sl, #0
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	f04f 0b00 	mov.w	fp, #0
 800bb42:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb46:	781a      	ldrb	r2, [r3, #0]
 800bb48:	2a0d      	cmp	r2, #13
 800bb4a:	d832      	bhi.n	800bbb2 <_strtod_l+0x9a>
 800bb4c:	2a09      	cmp	r2, #9
 800bb4e:	d236      	bcs.n	800bbbe <_strtod_l+0xa6>
 800bb50:	2a00      	cmp	r2, #0
 800bb52:	d03e      	beq.n	800bbd2 <_strtod_l+0xba>
 800bb54:	2300      	movs	r3, #0
 800bb56:	930d      	str	r3, [sp, #52]	; 0x34
 800bb58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bb5a:	782b      	ldrb	r3, [r5, #0]
 800bb5c:	2b30      	cmp	r3, #48	; 0x30
 800bb5e:	f040 80ac 	bne.w	800bcba <_strtod_l+0x1a2>
 800bb62:	786b      	ldrb	r3, [r5, #1]
 800bb64:	2b58      	cmp	r3, #88	; 0x58
 800bb66:	d001      	beq.n	800bb6c <_strtod_l+0x54>
 800bb68:	2b78      	cmp	r3, #120	; 0x78
 800bb6a:	d167      	bne.n	800bc3c <_strtod_l+0x124>
 800bb6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	ab1c      	add	r3, sp, #112	; 0x70
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	9702      	str	r7, [sp, #8]
 800bb76:	ab1d      	add	r3, sp, #116	; 0x74
 800bb78:	4a88      	ldr	r2, [pc, #544]	; (800bd9c <_strtod_l+0x284>)
 800bb7a:	a91b      	add	r1, sp, #108	; 0x6c
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	f001 fcf2 	bl	800d566 <__gethex>
 800bb82:	f010 0407 	ands.w	r4, r0, #7
 800bb86:	4606      	mov	r6, r0
 800bb88:	d005      	beq.n	800bb96 <_strtod_l+0x7e>
 800bb8a:	2c06      	cmp	r4, #6
 800bb8c:	d12b      	bne.n	800bbe6 <_strtod_l+0xce>
 800bb8e:	3501      	adds	r5, #1
 800bb90:	2300      	movs	r3, #0
 800bb92:	951b      	str	r5, [sp, #108]	; 0x6c
 800bb94:	930d      	str	r3, [sp, #52]	; 0x34
 800bb96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f040 859a 	bne.w	800c6d2 <_strtod_l+0xbba>
 800bb9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bba0:	b1e3      	cbz	r3, 800bbdc <_strtod_l+0xc4>
 800bba2:	4652      	mov	r2, sl
 800bba4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bba8:	ec43 2b10 	vmov	d0, r2, r3
 800bbac:	b021      	add	sp, #132	; 0x84
 800bbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb2:	2a2b      	cmp	r2, #43	; 0x2b
 800bbb4:	d015      	beq.n	800bbe2 <_strtod_l+0xca>
 800bbb6:	2a2d      	cmp	r2, #45	; 0x2d
 800bbb8:	d004      	beq.n	800bbc4 <_strtod_l+0xac>
 800bbba:	2a20      	cmp	r2, #32
 800bbbc:	d1ca      	bne.n	800bb54 <_strtod_l+0x3c>
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	931b      	str	r3, [sp, #108]	; 0x6c
 800bbc2:	e7bf      	b.n	800bb44 <_strtod_l+0x2c>
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	920d      	str	r2, [sp, #52]	; 0x34
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	921b      	str	r2, [sp, #108]	; 0x6c
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1c2      	bne.n	800bb58 <_strtod_l+0x40>
 800bbd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbd4:	961b      	str	r6, [sp, #108]	; 0x6c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f040 8579 	bne.w	800c6ce <_strtod_l+0xbb6>
 800bbdc:	4652      	mov	r2, sl
 800bbde:	465b      	mov	r3, fp
 800bbe0:	e7e2      	b.n	800bba8 <_strtod_l+0x90>
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	e7ef      	b.n	800bbc6 <_strtod_l+0xae>
 800bbe6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bbe8:	b13a      	cbz	r2, 800bbfa <_strtod_l+0xe2>
 800bbea:	2135      	movs	r1, #53	; 0x35
 800bbec:	a81e      	add	r0, sp, #120	; 0x78
 800bbee:	f002 fb87 	bl	800e300 <__copybits>
 800bbf2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbf4:	4648      	mov	r0, r9
 800bbf6:	f001 fff4 	bl	800dbe2 <_Bfree>
 800bbfa:	3c01      	subs	r4, #1
 800bbfc:	2c04      	cmp	r4, #4
 800bbfe:	d806      	bhi.n	800bc0e <_strtod_l+0xf6>
 800bc00:	e8df f004 	tbb	[pc, r4]
 800bc04:	1714030a 	.word	0x1714030a
 800bc08:	0a          	.byte	0x0a
 800bc09:	00          	.byte	0x00
 800bc0a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bc0e:	0730      	lsls	r0, r6, #28
 800bc10:	d5c1      	bpl.n	800bb96 <_strtod_l+0x7e>
 800bc12:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bc16:	e7be      	b.n	800bb96 <_strtod_l+0x7e>
 800bc18:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bc1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bc1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bc26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bc2a:	e7f0      	b.n	800bc0e <_strtod_l+0xf6>
 800bc2c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bda0 <_strtod_l+0x288>
 800bc30:	e7ed      	b.n	800bc0e <_strtod_l+0xf6>
 800bc32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bc36:	f04f 3aff 	mov.w	sl, #4294967295
 800bc3a:	e7e8      	b.n	800bc0e <_strtod_l+0xf6>
 800bc3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc42:	785b      	ldrb	r3, [r3, #1]
 800bc44:	2b30      	cmp	r3, #48	; 0x30
 800bc46:	d0f9      	beq.n	800bc3c <_strtod_l+0x124>
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d0a4      	beq.n	800bb96 <_strtod_l+0x7e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	2500      	movs	r5, #0
 800bc50:	9306      	str	r3, [sp, #24]
 800bc52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc54:	9308      	str	r3, [sp, #32]
 800bc56:	9507      	str	r5, [sp, #28]
 800bc58:	9505      	str	r5, [sp, #20]
 800bc5a:	220a      	movs	r2, #10
 800bc5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bc5e:	7807      	ldrb	r7, [r0, #0]
 800bc60:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bc64:	b2d9      	uxtb	r1, r3
 800bc66:	2909      	cmp	r1, #9
 800bc68:	d929      	bls.n	800bcbe <_strtod_l+0x1a6>
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	f8d8 1000 	ldr.w	r1, [r8]
 800bc70:	f002 fce2 	bl	800e638 <strncmp>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d031      	beq.n	800bcdc <_strtod_l+0x1c4>
 800bc78:	2000      	movs	r0, #0
 800bc7a:	9c05      	ldr	r4, [sp, #20]
 800bc7c:	9004      	str	r0, [sp, #16]
 800bc7e:	463b      	mov	r3, r7
 800bc80:	4602      	mov	r2, r0
 800bc82:	2b65      	cmp	r3, #101	; 0x65
 800bc84:	d001      	beq.n	800bc8a <_strtod_l+0x172>
 800bc86:	2b45      	cmp	r3, #69	; 0x45
 800bc88:	d114      	bne.n	800bcb4 <_strtod_l+0x19c>
 800bc8a:	b924      	cbnz	r4, 800bc96 <_strtod_l+0x17e>
 800bc8c:	b910      	cbnz	r0, 800bc94 <_strtod_l+0x17c>
 800bc8e:	9b06      	ldr	r3, [sp, #24]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d09e      	beq.n	800bbd2 <_strtod_l+0xba>
 800bc94:	2400      	movs	r4, #0
 800bc96:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bc98:	1c73      	adds	r3, r6, #1
 800bc9a:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc9c:	7873      	ldrb	r3, [r6, #1]
 800bc9e:	2b2b      	cmp	r3, #43	; 0x2b
 800bca0:	d078      	beq.n	800bd94 <_strtod_l+0x27c>
 800bca2:	2b2d      	cmp	r3, #45	; 0x2d
 800bca4:	d070      	beq.n	800bd88 <_strtod_l+0x270>
 800bca6:	f04f 0c00 	mov.w	ip, #0
 800bcaa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bcae:	2f09      	cmp	r7, #9
 800bcb0:	d97c      	bls.n	800bdac <_strtod_l+0x294>
 800bcb2:	961b      	str	r6, [sp, #108]	; 0x6c
 800bcb4:	f04f 0e00 	mov.w	lr, #0
 800bcb8:	e09a      	b.n	800bdf0 <_strtod_l+0x2d8>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	e7c7      	b.n	800bc4e <_strtod_l+0x136>
 800bcbe:	9905      	ldr	r1, [sp, #20]
 800bcc0:	2908      	cmp	r1, #8
 800bcc2:	bfdd      	ittte	le
 800bcc4:	9907      	ldrle	r1, [sp, #28]
 800bcc6:	fb02 3301 	mlale	r3, r2, r1, r3
 800bcca:	9307      	strle	r3, [sp, #28]
 800bccc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bcd0:	9b05      	ldr	r3, [sp, #20]
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	9305      	str	r3, [sp, #20]
 800bcd8:	901b      	str	r0, [sp, #108]	; 0x6c
 800bcda:	e7bf      	b.n	800bc5c <_strtod_l+0x144>
 800bcdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcde:	191a      	adds	r2, r3, r4
 800bce0:	921b      	str	r2, [sp, #108]	; 0x6c
 800bce2:	9a05      	ldr	r2, [sp, #20]
 800bce4:	5d1b      	ldrb	r3, [r3, r4]
 800bce6:	2a00      	cmp	r2, #0
 800bce8:	d037      	beq.n	800bd5a <_strtod_l+0x242>
 800bcea:	9c05      	ldr	r4, [sp, #20]
 800bcec:	4602      	mov	r2, r0
 800bcee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bcf2:	2909      	cmp	r1, #9
 800bcf4:	d913      	bls.n	800bd1e <_strtod_l+0x206>
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	9104      	str	r1, [sp, #16]
 800bcfa:	e7c2      	b.n	800bc82 <_strtod_l+0x16a>
 800bcfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcfe:	1c5a      	adds	r2, r3, #1
 800bd00:	921b      	str	r2, [sp, #108]	; 0x6c
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	3001      	adds	r0, #1
 800bd06:	2b30      	cmp	r3, #48	; 0x30
 800bd08:	d0f8      	beq.n	800bcfc <_strtod_l+0x1e4>
 800bd0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bd0e:	2a08      	cmp	r2, #8
 800bd10:	f200 84e4 	bhi.w	800c6dc <_strtod_l+0xbc4>
 800bd14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bd16:	9208      	str	r2, [sp, #32]
 800bd18:	4602      	mov	r2, r0
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bd22:	f100 0101 	add.w	r1, r0, #1
 800bd26:	d012      	beq.n	800bd4e <_strtod_l+0x236>
 800bd28:	440a      	add	r2, r1
 800bd2a:	eb00 0c04 	add.w	ip, r0, r4
 800bd2e:	4621      	mov	r1, r4
 800bd30:	270a      	movs	r7, #10
 800bd32:	458c      	cmp	ip, r1
 800bd34:	d113      	bne.n	800bd5e <_strtod_l+0x246>
 800bd36:	1821      	adds	r1, r4, r0
 800bd38:	2908      	cmp	r1, #8
 800bd3a:	f104 0401 	add.w	r4, r4, #1
 800bd3e:	4404      	add	r4, r0
 800bd40:	dc19      	bgt.n	800bd76 <_strtod_l+0x25e>
 800bd42:	9b07      	ldr	r3, [sp, #28]
 800bd44:	210a      	movs	r1, #10
 800bd46:	fb01 e303 	mla	r3, r1, r3, lr
 800bd4a:	9307      	str	r3, [sp, #28]
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd50:	1c58      	adds	r0, r3, #1
 800bd52:	901b      	str	r0, [sp, #108]	; 0x6c
 800bd54:	785b      	ldrb	r3, [r3, #1]
 800bd56:	4608      	mov	r0, r1
 800bd58:	e7c9      	b.n	800bcee <_strtod_l+0x1d6>
 800bd5a:	9805      	ldr	r0, [sp, #20]
 800bd5c:	e7d3      	b.n	800bd06 <_strtod_l+0x1ee>
 800bd5e:	2908      	cmp	r1, #8
 800bd60:	f101 0101 	add.w	r1, r1, #1
 800bd64:	dc03      	bgt.n	800bd6e <_strtod_l+0x256>
 800bd66:	9b07      	ldr	r3, [sp, #28]
 800bd68:	437b      	muls	r3, r7
 800bd6a:	9307      	str	r3, [sp, #28]
 800bd6c:	e7e1      	b.n	800bd32 <_strtod_l+0x21a>
 800bd6e:	2910      	cmp	r1, #16
 800bd70:	bfd8      	it	le
 800bd72:	437d      	mulle	r5, r7
 800bd74:	e7dd      	b.n	800bd32 <_strtod_l+0x21a>
 800bd76:	2c10      	cmp	r4, #16
 800bd78:	bfdc      	itt	le
 800bd7a:	210a      	movle	r1, #10
 800bd7c:	fb01 e505 	mlale	r5, r1, r5, lr
 800bd80:	e7e4      	b.n	800bd4c <_strtod_l+0x234>
 800bd82:	2301      	movs	r3, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	e781      	b.n	800bc8c <_strtod_l+0x174>
 800bd88:	f04f 0c01 	mov.w	ip, #1
 800bd8c:	1cb3      	adds	r3, r6, #2
 800bd8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd90:	78b3      	ldrb	r3, [r6, #2]
 800bd92:	e78a      	b.n	800bcaa <_strtod_l+0x192>
 800bd94:	f04f 0c00 	mov.w	ip, #0
 800bd98:	e7f8      	b.n	800bd8c <_strtod_l+0x274>
 800bd9a:	bf00      	nop
 800bd9c:	0800e944 	.word	0x0800e944
 800bda0:	7ff00000 	.word	0x7ff00000
 800bda4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bda6:	1c5f      	adds	r7, r3, #1
 800bda8:	971b      	str	r7, [sp, #108]	; 0x6c
 800bdaa:	785b      	ldrb	r3, [r3, #1]
 800bdac:	2b30      	cmp	r3, #48	; 0x30
 800bdae:	d0f9      	beq.n	800bda4 <_strtod_l+0x28c>
 800bdb0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bdb4:	2f08      	cmp	r7, #8
 800bdb6:	f63f af7d 	bhi.w	800bcb4 <_strtod_l+0x19c>
 800bdba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bdbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdc0:	930a      	str	r3, [sp, #40]	; 0x28
 800bdc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdc4:	1c5f      	adds	r7, r3, #1
 800bdc6:	971b      	str	r7, [sp, #108]	; 0x6c
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bdce:	f1b8 0f09 	cmp.w	r8, #9
 800bdd2:	d937      	bls.n	800be44 <_strtod_l+0x32c>
 800bdd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdd6:	1a7f      	subs	r7, r7, r1
 800bdd8:	2f08      	cmp	r7, #8
 800bdda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bdde:	dc37      	bgt.n	800be50 <_strtod_l+0x338>
 800bde0:	45be      	cmp	lr, r7
 800bde2:	bfa8      	it	ge
 800bde4:	46be      	movge	lr, r7
 800bde6:	f1bc 0f00 	cmp.w	ip, #0
 800bdea:	d001      	beq.n	800bdf0 <_strtod_l+0x2d8>
 800bdec:	f1ce 0e00 	rsb	lr, lr, #0
 800bdf0:	2c00      	cmp	r4, #0
 800bdf2:	d151      	bne.n	800be98 <_strtod_l+0x380>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	f47f aece 	bne.w	800bb96 <_strtod_l+0x7e>
 800bdfa:	9a06      	ldr	r2, [sp, #24]
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	f47f aeca 	bne.w	800bb96 <_strtod_l+0x7e>
 800be02:	9a04      	ldr	r2, [sp, #16]
 800be04:	2a00      	cmp	r2, #0
 800be06:	f47f aee4 	bne.w	800bbd2 <_strtod_l+0xba>
 800be0a:	2b4e      	cmp	r3, #78	; 0x4e
 800be0c:	d027      	beq.n	800be5e <_strtod_l+0x346>
 800be0e:	dc21      	bgt.n	800be54 <_strtod_l+0x33c>
 800be10:	2b49      	cmp	r3, #73	; 0x49
 800be12:	f47f aede 	bne.w	800bbd2 <_strtod_l+0xba>
 800be16:	49a0      	ldr	r1, [pc, #640]	; (800c098 <_strtod_l+0x580>)
 800be18:	a81b      	add	r0, sp, #108	; 0x6c
 800be1a:	f001 fdd7 	bl	800d9cc <__match>
 800be1e:	2800      	cmp	r0, #0
 800be20:	f43f aed7 	beq.w	800bbd2 <_strtod_l+0xba>
 800be24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be26:	499d      	ldr	r1, [pc, #628]	; (800c09c <_strtod_l+0x584>)
 800be28:	3b01      	subs	r3, #1
 800be2a:	a81b      	add	r0, sp, #108	; 0x6c
 800be2c:	931b      	str	r3, [sp, #108]	; 0x6c
 800be2e:	f001 fdcd 	bl	800d9cc <__match>
 800be32:	b910      	cbnz	r0, 800be3a <_strtod_l+0x322>
 800be34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be36:	3301      	adds	r3, #1
 800be38:	931b      	str	r3, [sp, #108]	; 0x6c
 800be3a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c0b0 <_strtod_l+0x598>
 800be3e:	f04f 0a00 	mov.w	sl, #0
 800be42:	e6a8      	b.n	800bb96 <_strtod_l+0x7e>
 800be44:	210a      	movs	r1, #10
 800be46:	fb01 3e0e 	mla	lr, r1, lr, r3
 800be4a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800be4e:	e7b8      	b.n	800bdc2 <_strtod_l+0x2aa>
 800be50:	46be      	mov	lr, r7
 800be52:	e7c8      	b.n	800bde6 <_strtod_l+0x2ce>
 800be54:	2b69      	cmp	r3, #105	; 0x69
 800be56:	d0de      	beq.n	800be16 <_strtod_l+0x2fe>
 800be58:	2b6e      	cmp	r3, #110	; 0x6e
 800be5a:	f47f aeba 	bne.w	800bbd2 <_strtod_l+0xba>
 800be5e:	4990      	ldr	r1, [pc, #576]	; (800c0a0 <_strtod_l+0x588>)
 800be60:	a81b      	add	r0, sp, #108	; 0x6c
 800be62:	f001 fdb3 	bl	800d9cc <__match>
 800be66:	2800      	cmp	r0, #0
 800be68:	f43f aeb3 	beq.w	800bbd2 <_strtod_l+0xba>
 800be6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b28      	cmp	r3, #40	; 0x28
 800be72:	d10e      	bne.n	800be92 <_strtod_l+0x37a>
 800be74:	aa1e      	add	r2, sp, #120	; 0x78
 800be76:	498b      	ldr	r1, [pc, #556]	; (800c0a4 <_strtod_l+0x58c>)
 800be78:	a81b      	add	r0, sp, #108	; 0x6c
 800be7a:	f001 fdbb 	bl	800d9f4 <__hexnan>
 800be7e:	2805      	cmp	r0, #5
 800be80:	d107      	bne.n	800be92 <_strtod_l+0x37a>
 800be82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be84:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800be88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800be8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800be90:	e681      	b.n	800bb96 <_strtod_l+0x7e>
 800be92:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c0b8 <_strtod_l+0x5a0>
 800be96:	e7d2      	b.n	800be3e <_strtod_l+0x326>
 800be98:	ebae 0302 	sub.w	r3, lr, r2
 800be9c:	9306      	str	r3, [sp, #24]
 800be9e:	9b05      	ldr	r3, [sp, #20]
 800bea0:	9807      	ldr	r0, [sp, #28]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	bf08      	it	eq
 800bea6:	4623      	moveq	r3, r4
 800bea8:	2c10      	cmp	r4, #16
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	46a0      	mov	r8, r4
 800beae:	bfa8      	it	ge
 800beb0:	f04f 0810 	movge.w	r8, #16
 800beb4:	f7f4 fb26 	bl	8000504 <__aeabi_ui2d>
 800beb8:	2c09      	cmp	r4, #9
 800beba:	4682      	mov	sl, r0
 800bebc:	468b      	mov	fp, r1
 800bebe:	dc13      	bgt.n	800bee8 <_strtod_l+0x3d0>
 800bec0:	9b06      	ldr	r3, [sp, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f43f ae67 	beq.w	800bb96 <_strtod_l+0x7e>
 800bec8:	9b06      	ldr	r3, [sp, #24]
 800beca:	dd7a      	ble.n	800bfc2 <_strtod_l+0x4aa>
 800becc:	2b16      	cmp	r3, #22
 800bece:	dc61      	bgt.n	800bf94 <_strtod_l+0x47c>
 800bed0:	4a75      	ldr	r2, [pc, #468]	; (800c0a8 <_strtod_l+0x590>)
 800bed2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bed6:	e9de 0100 	ldrd	r0, r1, [lr]
 800beda:	4652      	mov	r2, sl
 800bedc:	465b      	mov	r3, fp
 800bede:	f7f4 fb8b 	bl	80005f8 <__aeabi_dmul>
 800bee2:	4682      	mov	sl, r0
 800bee4:	468b      	mov	fp, r1
 800bee6:	e656      	b.n	800bb96 <_strtod_l+0x7e>
 800bee8:	4b6f      	ldr	r3, [pc, #444]	; (800c0a8 <_strtod_l+0x590>)
 800beea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800beee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bef2:	f7f4 fb81 	bl	80005f8 <__aeabi_dmul>
 800bef6:	4606      	mov	r6, r0
 800bef8:	4628      	mov	r0, r5
 800befa:	460f      	mov	r7, r1
 800befc:	f7f4 fb02 	bl	8000504 <__aeabi_ui2d>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4630      	mov	r0, r6
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 f9c0 	bl	800028c <__adddf3>
 800bf0c:	2c0f      	cmp	r4, #15
 800bf0e:	4682      	mov	sl, r0
 800bf10:	468b      	mov	fp, r1
 800bf12:	ddd5      	ble.n	800bec0 <_strtod_l+0x3a8>
 800bf14:	9b06      	ldr	r3, [sp, #24]
 800bf16:	eba4 0808 	sub.w	r8, r4, r8
 800bf1a:	4498      	add	r8, r3
 800bf1c:	f1b8 0f00 	cmp.w	r8, #0
 800bf20:	f340 8096 	ble.w	800c050 <_strtod_l+0x538>
 800bf24:	f018 030f 	ands.w	r3, r8, #15
 800bf28:	d00a      	beq.n	800bf40 <_strtod_l+0x428>
 800bf2a:	495f      	ldr	r1, [pc, #380]	; (800c0a8 <_strtod_l+0x590>)
 800bf2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf30:	4652      	mov	r2, sl
 800bf32:	465b      	mov	r3, fp
 800bf34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf38:	f7f4 fb5e 	bl	80005f8 <__aeabi_dmul>
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	468b      	mov	fp, r1
 800bf40:	f038 080f 	bics.w	r8, r8, #15
 800bf44:	d073      	beq.n	800c02e <_strtod_l+0x516>
 800bf46:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bf4a:	dd47      	ble.n	800bfdc <_strtod_l+0x4c4>
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	46a0      	mov	r8, r4
 800bf50:	9407      	str	r4, [sp, #28]
 800bf52:	9405      	str	r4, [sp, #20]
 800bf54:	2322      	movs	r3, #34	; 0x22
 800bf56:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c0b0 <_strtod_l+0x598>
 800bf5a:	f8c9 3000 	str.w	r3, [r9]
 800bf5e:	f04f 0a00 	mov.w	sl, #0
 800bf62:	9b07      	ldr	r3, [sp, #28]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f43f ae16 	beq.w	800bb96 <_strtod_l+0x7e>
 800bf6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf6c:	4648      	mov	r0, r9
 800bf6e:	f001 fe38 	bl	800dbe2 <_Bfree>
 800bf72:	9905      	ldr	r1, [sp, #20]
 800bf74:	4648      	mov	r0, r9
 800bf76:	f001 fe34 	bl	800dbe2 <_Bfree>
 800bf7a:	4641      	mov	r1, r8
 800bf7c:	4648      	mov	r0, r9
 800bf7e:	f001 fe30 	bl	800dbe2 <_Bfree>
 800bf82:	9907      	ldr	r1, [sp, #28]
 800bf84:	4648      	mov	r0, r9
 800bf86:	f001 fe2c 	bl	800dbe2 <_Bfree>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f001 fe28 	bl	800dbe2 <_Bfree>
 800bf92:	e600      	b.n	800bb96 <_strtod_l+0x7e>
 800bf94:	9a06      	ldr	r2, [sp, #24]
 800bf96:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	dbba      	blt.n	800bf14 <_strtod_l+0x3fc>
 800bf9e:	4d42      	ldr	r5, [pc, #264]	; (800c0a8 <_strtod_l+0x590>)
 800bfa0:	f1c4 040f 	rsb	r4, r4, #15
 800bfa4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bfa8:	4652      	mov	r2, sl
 800bfaa:	465b      	mov	r3, fp
 800bfac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfb0:	f7f4 fb22 	bl	80005f8 <__aeabi_dmul>
 800bfb4:	9b06      	ldr	r3, [sp, #24]
 800bfb6:	1b1c      	subs	r4, r3, r4
 800bfb8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bfbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfc0:	e78d      	b.n	800bede <_strtod_l+0x3c6>
 800bfc2:	f113 0f16 	cmn.w	r3, #22
 800bfc6:	dba5      	blt.n	800bf14 <_strtod_l+0x3fc>
 800bfc8:	4a37      	ldr	r2, [pc, #220]	; (800c0a8 <_strtod_l+0x590>)
 800bfca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bfce:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bfd2:	4650      	mov	r0, sl
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	f7f4 fc39 	bl	800084c <__aeabi_ddiv>
 800bfda:	e782      	b.n	800bee2 <_strtod_l+0x3ca>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4e33      	ldr	r6, [pc, #204]	; (800c0ac <_strtod_l+0x594>)
 800bfe0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bfe4:	4650      	mov	r0, sl
 800bfe6:	4659      	mov	r1, fp
 800bfe8:	461d      	mov	r5, r3
 800bfea:	f1b8 0f01 	cmp.w	r8, #1
 800bfee:	dc21      	bgt.n	800c034 <_strtod_l+0x51c>
 800bff0:	b10b      	cbz	r3, 800bff6 <_strtod_l+0x4de>
 800bff2:	4682      	mov	sl, r0
 800bff4:	468b      	mov	fp, r1
 800bff6:	4b2d      	ldr	r3, [pc, #180]	; (800c0ac <_strtod_l+0x594>)
 800bff8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bffc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c000:	4652      	mov	r2, sl
 800c002:	465b      	mov	r3, fp
 800c004:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c008:	f7f4 faf6 	bl	80005f8 <__aeabi_dmul>
 800c00c:	4b28      	ldr	r3, [pc, #160]	; (800c0b0 <_strtod_l+0x598>)
 800c00e:	460a      	mov	r2, r1
 800c010:	400b      	ands	r3, r1
 800c012:	4928      	ldr	r1, [pc, #160]	; (800c0b4 <_strtod_l+0x59c>)
 800c014:	428b      	cmp	r3, r1
 800c016:	4682      	mov	sl, r0
 800c018:	d898      	bhi.n	800bf4c <_strtod_l+0x434>
 800c01a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c01e:	428b      	cmp	r3, r1
 800c020:	bf86      	itte	hi
 800c022:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c0bc <_strtod_l+0x5a4>
 800c026:	f04f 3aff 	movhi.w	sl, #4294967295
 800c02a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c02e:	2300      	movs	r3, #0
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	e077      	b.n	800c124 <_strtod_l+0x60c>
 800c034:	f018 0f01 	tst.w	r8, #1
 800c038:	d006      	beq.n	800c048 <_strtod_l+0x530>
 800c03a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 fad9 	bl	80005f8 <__aeabi_dmul>
 800c046:	2301      	movs	r3, #1
 800c048:	3501      	adds	r5, #1
 800c04a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c04e:	e7cc      	b.n	800bfea <_strtod_l+0x4d2>
 800c050:	d0ed      	beq.n	800c02e <_strtod_l+0x516>
 800c052:	f1c8 0800 	rsb	r8, r8, #0
 800c056:	f018 020f 	ands.w	r2, r8, #15
 800c05a:	d00a      	beq.n	800c072 <_strtod_l+0x55a>
 800c05c:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <_strtod_l+0x590>)
 800c05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c062:	4650      	mov	r0, sl
 800c064:	4659      	mov	r1, fp
 800c066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06a:	f7f4 fbef 	bl	800084c <__aeabi_ddiv>
 800c06e:	4682      	mov	sl, r0
 800c070:	468b      	mov	fp, r1
 800c072:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c076:	d0da      	beq.n	800c02e <_strtod_l+0x516>
 800c078:	f1b8 0f1f 	cmp.w	r8, #31
 800c07c:	dd20      	ble.n	800c0c0 <_strtod_l+0x5a8>
 800c07e:	2400      	movs	r4, #0
 800c080:	46a0      	mov	r8, r4
 800c082:	9407      	str	r4, [sp, #28]
 800c084:	9405      	str	r4, [sp, #20]
 800c086:	2322      	movs	r3, #34	; 0x22
 800c088:	f04f 0a00 	mov.w	sl, #0
 800c08c:	f04f 0b00 	mov.w	fp, #0
 800c090:	f8c9 3000 	str.w	r3, [r9]
 800c094:	e765      	b.n	800bf62 <_strtod_l+0x44a>
 800c096:	bf00      	nop
 800c098:	0800e90d 	.word	0x0800e90d
 800c09c:	0800e99b 	.word	0x0800e99b
 800c0a0:	0800e915 	.word	0x0800e915
 800c0a4:	0800e958 	.word	0x0800e958
 800c0a8:	0800e9d8 	.word	0x0800e9d8
 800c0ac:	0800e9b0 	.word	0x0800e9b0
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	7ca00000 	.word	0x7ca00000
 800c0b8:	fff80000 	.word	0xfff80000
 800c0bc:	7fefffff 	.word	0x7fefffff
 800c0c0:	f018 0310 	ands.w	r3, r8, #16
 800c0c4:	bf18      	it	ne
 800c0c6:	236a      	movne	r3, #106	; 0x6a
 800c0c8:	4da0      	ldr	r5, [pc, #640]	; (800c34c <_strtod_l+0x834>)
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	4650      	mov	r0, sl
 800c0ce:	4659      	mov	r1, fp
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f1b8 0f00 	cmp.w	r8, #0
 800c0d6:	f300 810a 	bgt.w	800c2ee <_strtod_l+0x7d6>
 800c0da:	b10b      	cbz	r3, 800c0e0 <_strtod_l+0x5c8>
 800c0dc:	4682      	mov	sl, r0
 800c0de:	468b      	mov	fp, r1
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	b1bb      	cbz	r3, 800c114 <_strtod_l+0x5fc>
 800c0e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c0e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	4659      	mov	r1, fp
 800c0f0:	dd10      	ble.n	800c114 <_strtod_l+0x5fc>
 800c0f2:	2b1f      	cmp	r3, #31
 800c0f4:	f340 8107 	ble.w	800c306 <_strtod_l+0x7ee>
 800c0f8:	2b34      	cmp	r3, #52	; 0x34
 800c0fa:	bfde      	ittt	le
 800c0fc:	3b20      	suble	r3, #32
 800c0fe:	f04f 32ff 	movle.w	r2, #4294967295
 800c102:	fa02 f303 	lslle.w	r3, r2, r3
 800c106:	f04f 0a00 	mov.w	sl, #0
 800c10a:	bfcc      	ite	gt
 800c10c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c110:	ea03 0b01 	andle.w	fp, r3, r1
 800c114:	2200      	movs	r2, #0
 800c116:	2300      	movs	r3, #0
 800c118:	4650      	mov	r0, sl
 800c11a:	4659      	mov	r1, fp
 800c11c:	f7f4 fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c120:	2800      	cmp	r0, #0
 800c122:	d1ac      	bne.n	800c07e <_strtod_l+0x566>
 800c124:	9b07      	ldr	r3, [sp, #28]
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	9a05      	ldr	r2, [sp, #20]
 800c12a:	9908      	ldr	r1, [sp, #32]
 800c12c:	4623      	mov	r3, r4
 800c12e:	4648      	mov	r0, r9
 800c130:	f001 fda9 	bl	800dc86 <__s2b>
 800c134:	9007      	str	r0, [sp, #28]
 800c136:	2800      	cmp	r0, #0
 800c138:	f43f af08 	beq.w	800bf4c <_strtod_l+0x434>
 800c13c:	9a06      	ldr	r2, [sp, #24]
 800c13e:	9b06      	ldr	r3, [sp, #24]
 800c140:	2a00      	cmp	r2, #0
 800c142:	f1c3 0300 	rsb	r3, r3, #0
 800c146:	bfa8      	it	ge
 800c148:	2300      	movge	r3, #0
 800c14a:	930e      	str	r3, [sp, #56]	; 0x38
 800c14c:	2400      	movs	r4, #0
 800c14e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c152:	9316      	str	r3, [sp, #88]	; 0x58
 800c154:	46a0      	mov	r8, r4
 800c156:	9b07      	ldr	r3, [sp, #28]
 800c158:	4648      	mov	r0, r9
 800c15a:	6859      	ldr	r1, [r3, #4]
 800c15c:	f001 fd0d 	bl	800db7a <_Balloc>
 800c160:	9005      	str	r0, [sp, #20]
 800c162:	2800      	cmp	r0, #0
 800c164:	f43f aef6 	beq.w	800bf54 <_strtod_l+0x43c>
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	3202      	adds	r2, #2
 800c16e:	f103 010c 	add.w	r1, r3, #12
 800c172:	0092      	lsls	r2, r2, #2
 800c174:	300c      	adds	r0, #12
 800c176:	f001 fcf3 	bl	800db60 <memcpy>
 800c17a:	aa1e      	add	r2, sp, #120	; 0x78
 800c17c:	a91d      	add	r1, sp, #116	; 0x74
 800c17e:	ec4b ab10 	vmov	d0, sl, fp
 800c182:	4648      	mov	r0, r9
 800c184:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c188:	f002 f838 	bl	800e1fc <__d2b>
 800c18c:	901c      	str	r0, [sp, #112]	; 0x70
 800c18e:	2800      	cmp	r0, #0
 800c190:	f43f aee0 	beq.w	800bf54 <_strtod_l+0x43c>
 800c194:	2101      	movs	r1, #1
 800c196:	4648      	mov	r0, r9
 800c198:	f001 fe01 	bl	800dd9e <__i2b>
 800c19c:	4680      	mov	r8, r0
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	f43f aed8 	beq.w	800bf54 <_strtod_l+0x43c>
 800c1a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c1a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c1a8:	2e00      	cmp	r6, #0
 800c1aa:	bfab      	itete	ge
 800c1ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c1ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c1b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c1b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c1b4:	bfac      	ite	ge
 800c1b6:	18f7      	addge	r7, r6, r3
 800c1b8:	1b9d      	sublt	r5, r3, r6
 800c1ba:	9b04      	ldr	r3, [sp, #16]
 800c1bc:	1af6      	subs	r6, r6, r3
 800c1be:	4416      	add	r6, r2
 800c1c0:	4b63      	ldr	r3, [pc, #396]	; (800c350 <_strtod_l+0x838>)
 800c1c2:	3e01      	subs	r6, #1
 800c1c4:	429e      	cmp	r6, r3
 800c1c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c1ca:	f280 80af 	bge.w	800c32c <_strtod_l+0x814>
 800c1ce:	1b9b      	subs	r3, r3, r6
 800c1d0:	2b1f      	cmp	r3, #31
 800c1d2:	eba2 0203 	sub.w	r2, r2, r3
 800c1d6:	f04f 0101 	mov.w	r1, #1
 800c1da:	f300 809b 	bgt.w	800c314 <_strtod_l+0x7fc>
 800c1de:	fa01 f303 	lsl.w	r3, r1, r3
 800c1e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e8:	18be      	adds	r6, r7, r2
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	42b7      	cmp	r7, r6
 800c1ee:	4415      	add	r5, r2
 800c1f0:	441d      	add	r5, r3
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	bfa8      	it	ge
 800c1f6:	4633      	movge	r3, r6
 800c1f8:	42ab      	cmp	r3, r5
 800c1fa:	bfa8      	it	ge
 800c1fc:	462b      	movge	r3, r5
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	bfc2      	ittt	gt
 800c202:	1af6      	subgt	r6, r6, r3
 800c204:	1aed      	subgt	r5, r5, r3
 800c206:	1aff      	subgt	r7, r7, r3
 800c208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c20a:	b1bb      	cbz	r3, 800c23c <_strtod_l+0x724>
 800c20c:	4641      	mov	r1, r8
 800c20e:	461a      	mov	r2, r3
 800c210:	4648      	mov	r0, r9
 800c212:	f001 fe63 	bl	800dedc <__pow5mult>
 800c216:	4680      	mov	r8, r0
 800c218:	2800      	cmp	r0, #0
 800c21a:	f43f ae9b 	beq.w	800bf54 <_strtod_l+0x43c>
 800c21e:	4601      	mov	r1, r0
 800c220:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c222:	4648      	mov	r0, r9
 800c224:	f001 fdc4 	bl	800ddb0 <__multiply>
 800c228:	900c      	str	r0, [sp, #48]	; 0x30
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f43f ae92 	beq.w	800bf54 <_strtod_l+0x43c>
 800c230:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c232:	4648      	mov	r0, r9
 800c234:	f001 fcd5 	bl	800dbe2 <_Bfree>
 800c238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c23a:	931c      	str	r3, [sp, #112]	; 0x70
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	dc7a      	bgt.n	800c336 <_strtod_l+0x81e>
 800c240:	9b06      	ldr	r3, [sp, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	dd08      	ble.n	800c258 <_strtod_l+0x740>
 800c246:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c248:	9905      	ldr	r1, [sp, #20]
 800c24a:	4648      	mov	r0, r9
 800c24c:	f001 fe46 	bl	800dedc <__pow5mult>
 800c250:	9005      	str	r0, [sp, #20]
 800c252:	2800      	cmp	r0, #0
 800c254:	f43f ae7e 	beq.w	800bf54 <_strtod_l+0x43c>
 800c258:	2d00      	cmp	r5, #0
 800c25a:	dd08      	ble.n	800c26e <_strtod_l+0x756>
 800c25c:	462a      	mov	r2, r5
 800c25e:	9905      	ldr	r1, [sp, #20]
 800c260:	4648      	mov	r0, r9
 800c262:	f001 fe89 	bl	800df78 <__lshift>
 800c266:	9005      	str	r0, [sp, #20]
 800c268:	2800      	cmp	r0, #0
 800c26a:	f43f ae73 	beq.w	800bf54 <_strtod_l+0x43c>
 800c26e:	2f00      	cmp	r7, #0
 800c270:	dd08      	ble.n	800c284 <_strtod_l+0x76c>
 800c272:	4641      	mov	r1, r8
 800c274:	463a      	mov	r2, r7
 800c276:	4648      	mov	r0, r9
 800c278:	f001 fe7e 	bl	800df78 <__lshift>
 800c27c:	4680      	mov	r8, r0
 800c27e:	2800      	cmp	r0, #0
 800c280:	f43f ae68 	beq.w	800bf54 <_strtod_l+0x43c>
 800c284:	9a05      	ldr	r2, [sp, #20]
 800c286:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c288:	4648      	mov	r0, r9
 800c28a:	f001 fee3 	bl	800e054 <__mdiff>
 800c28e:	4604      	mov	r4, r0
 800c290:	2800      	cmp	r0, #0
 800c292:	f43f ae5f 	beq.w	800bf54 <_strtod_l+0x43c>
 800c296:	68c3      	ldr	r3, [r0, #12]
 800c298:	930c      	str	r3, [sp, #48]	; 0x30
 800c29a:	2300      	movs	r3, #0
 800c29c:	60c3      	str	r3, [r0, #12]
 800c29e:	4641      	mov	r1, r8
 800c2a0:	f001 febe 	bl	800e020 <__mcmp>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	da55      	bge.n	800c354 <_strtod_l+0x83c>
 800c2a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2aa:	b9e3      	cbnz	r3, 800c2e6 <_strtod_l+0x7ce>
 800c2ac:	f1ba 0f00 	cmp.w	sl, #0
 800c2b0:	d119      	bne.n	800c2e6 <_strtod_l+0x7ce>
 800c2b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2b6:	b9b3      	cbnz	r3, 800c2e6 <_strtod_l+0x7ce>
 800c2b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2bc:	0d1b      	lsrs	r3, r3, #20
 800c2be:	051b      	lsls	r3, r3, #20
 800c2c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c2c4:	d90f      	bls.n	800c2e6 <_strtod_l+0x7ce>
 800c2c6:	6963      	ldr	r3, [r4, #20]
 800c2c8:	b913      	cbnz	r3, 800c2d0 <_strtod_l+0x7b8>
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	dd0a      	ble.n	800c2e6 <_strtod_l+0x7ce>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	4648      	mov	r0, r9
 800c2d6:	f001 fe4f 	bl	800df78 <__lshift>
 800c2da:	4641      	mov	r1, r8
 800c2dc:	4604      	mov	r4, r0
 800c2de:	f001 fe9f 	bl	800e020 <__mcmp>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	dc67      	bgt.n	800c3b6 <_strtod_l+0x89e>
 800c2e6:	9b04      	ldr	r3, [sp, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d171      	bne.n	800c3d0 <_strtod_l+0x8b8>
 800c2ec:	e63d      	b.n	800bf6a <_strtod_l+0x452>
 800c2ee:	f018 0f01 	tst.w	r8, #1
 800c2f2:	d004      	beq.n	800c2fe <_strtod_l+0x7e6>
 800c2f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2f8:	f7f4 f97e 	bl	80005f8 <__aeabi_dmul>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c302:	3508      	adds	r5, #8
 800c304:	e6e5      	b.n	800c0d2 <_strtod_l+0x5ba>
 800c306:	f04f 32ff 	mov.w	r2, #4294967295
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	ea03 0a0a 	and.w	sl, r3, sl
 800c312:	e6ff      	b.n	800c114 <_strtod_l+0x5fc>
 800c314:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c318:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c31c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c320:	36e2      	adds	r6, #226	; 0xe2
 800c322:	fa01 f306 	lsl.w	r3, r1, r6
 800c326:	930a      	str	r3, [sp, #40]	; 0x28
 800c328:	910f      	str	r1, [sp, #60]	; 0x3c
 800c32a:	e75d      	b.n	800c1e8 <_strtod_l+0x6d0>
 800c32c:	2300      	movs	r3, #0
 800c32e:	930a      	str	r3, [sp, #40]	; 0x28
 800c330:	2301      	movs	r3, #1
 800c332:	930f      	str	r3, [sp, #60]	; 0x3c
 800c334:	e758      	b.n	800c1e8 <_strtod_l+0x6d0>
 800c336:	4632      	mov	r2, r6
 800c338:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c33a:	4648      	mov	r0, r9
 800c33c:	f001 fe1c 	bl	800df78 <__lshift>
 800c340:	901c      	str	r0, [sp, #112]	; 0x70
 800c342:	2800      	cmp	r0, #0
 800c344:	f47f af7c 	bne.w	800c240 <_strtod_l+0x728>
 800c348:	e604      	b.n	800bf54 <_strtod_l+0x43c>
 800c34a:	bf00      	nop
 800c34c:	0800e970 	.word	0x0800e970
 800c350:	fffffc02 	.word	0xfffffc02
 800c354:	465d      	mov	r5, fp
 800c356:	f040 8086 	bne.w	800c466 <_strtod_l+0x94e>
 800c35a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c35c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c360:	b32a      	cbz	r2, 800c3ae <_strtod_l+0x896>
 800c362:	4aaf      	ldr	r2, [pc, #700]	; (800c620 <_strtod_l+0xb08>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d153      	bne.n	800c410 <_strtod_l+0x8f8>
 800c368:	9b04      	ldr	r3, [sp, #16]
 800c36a:	4650      	mov	r0, sl
 800c36c:	b1d3      	cbz	r3, 800c3a4 <_strtod_l+0x88c>
 800c36e:	4aad      	ldr	r2, [pc, #692]	; (800c624 <_strtod_l+0xb0c>)
 800c370:	402a      	ands	r2, r5
 800c372:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c376:	f04f 31ff 	mov.w	r1, #4294967295
 800c37a:	d816      	bhi.n	800c3aa <_strtod_l+0x892>
 800c37c:	0d12      	lsrs	r2, r2, #20
 800c37e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c382:	fa01 f303 	lsl.w	r3, r1, r3
 800c386:	4298      	cmp	r0, r3
 800c388:	d142      	bne.n	800c410 <_strtod_l+0x8f8>
 800c38a:	4ba7      	ldr	r3, [pc, #668]	; (800c628 <_strtod_l+0xb10>)
 800c38c:	429d      	cmp	r5, r3
 800c38e:	d102      	bne.n	800c396 <_strtod_l+0x87e>
 800c390:	3001      	adds	r0, #1
 800c392:	f43f addf 	beq.w	800bf54 <_strtod_l+0x43c>
 800c396:	4ba3      	ldr	r3, [pc, #652]	; (800c624 <_strtod_l+0xb0c>)
 800c398:	402b      	ands	r3, r5
 800c39a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c39e:	f04f 0a00 	mov.w	sl, #0
 800c3a2:	e7a0      	b.n	800c2e6 <_strtod_l+0x7ce>
 800c3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a8:	e7ed      	b.n	800c386 <_strtod_l+0x86e>
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	e7eb      	b.n	800c386 <_strtod_l+0x86e>
 800c3ae:	bb7b      	cbnz	r3, 800c410 <_strtod_l+0x8f8>
 800c3b0:	f1ba 0f00 	cmp.w	sl, #0
 800c3b4:	d12c      	bne.n	800c410 <_strtod_l+0x8f8>
 800c3b6:	9904      	ldr	r1, [sp, #16]
 800c3b8:	4a9a      	ldr	r2, [pc, #616]	; (800c624 <_strtod_l+0xb0c>)
 800c3ba:	465b      	mov	r3, fp
 800c3bc:	b1f1      	cbz	r1, 800c3fc <_strtod_l+0x8e4>
 800c3be:	ea02 010b 	and.w	r1, r2, fp
 800c3c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c3c6:	dc19      	bgt.n	800c3fc <_strtod_l+0x8e4>
 800c3c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c3cc:	f77f ae5b 	ble.w	800c086 <_strtod_l+0x56e>
 800c3d0:	4a96      	ldr	r2, [pc, #600]	; (800c62c <_strtod_l+0xb14>)
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c3d8:	4650      	mov	r0, sl
 800c3da:	4659      	mov	r1, fp
 800c3dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c3e0:	f7f4 f90a 	bl	80005f8 <__aeabi_dmul>
 800c3e4:	4682      	mov	sl, r0
 800c3e6:	468b      	mov	fp, r1
 800c3e8:	2900      	cmp	r1, #0
 800c3ea:	f47f adbe 	bne.w	800bf6a <_strtod_l+0x452>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	f47f adbb 	bne.w	800bf6a <_strtod_l+0x452>
 800c3f4:	2322      	movs	r3, #34	; 0x22
 800c3f6:	f8c9 3000 	str.w	r3, [r9]
 800c3fa:	e5b6      	b.n	800bf6a <_strtod_l+0x452>
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c402:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c406:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c40a:	f04f 3aff 	mov.w	sl, #4294967295
 800c40e:	e76a      	b.n	800c2e6 <_strtod_l+0x7ce>
 800c410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c412:	b193      	cbz	r3, 800c43a <_strtod_l+0x922>
 800c414:	422b      	tst	r3, r5
 800c416:	f43f af66 	beq.w	800c2e6 <_strtod_l+0x7ce>
 800c41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	4650      	mov	r0, sl
 800c420:	4659      	mov	r1, fp
 800c422:	b173      	cbz	r3, 800c442 <_strtod_l+0x92a>
 800c424:	f7ff fb5a 	bl	800badc <sulp>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c430:	f7f3 ff2c 	bl	800028c <__adddf3>
 800c434:	4682      	mov	sl, r0
 800c436:	468b      	mov	fp, r1
 800c438:	e755      	b.n	800c2e6 <_strtod_l+0x7ce>
 800c43a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c43c:	ea13 0f0a 	tst.w	r3, sl
 800c440:	e7e9      	b.n	800c416 <_strtod_l+0x8fe>
 800c442:	f7ff fb4b 	bl	800badc <sulp>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c44e:	f7f3 ff1b 	bl	8000288 <__aeabi_dsub>
 800c452:	2200      	movs	r2, #0
 800c454:	2300      	movs	r3, #0
 800c456:	4682      	mov	sl, r0
 800c458:	468b      	mov	fp, r1
 800c45a:	f7f4 fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800c45e:	2800      	cmp	r0, #0
 800c460:	f47f ae11 	bne.w	800c086 <_strtod_l+0x56e>
 800c464:	e73f      	b.n	800c2e6 <_strtod_l+0x7ce>
 800c466:	4641      	mov	r1, r8
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 ff16 	bl	800e29a <__ratio>
 800c46e:	ec57 6b10 	vmov	r6, r7, d0
 800c472:	2200      	movs	r2, #0
 800c474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c478:	ee10 0a10 	vmov	r0, s0
 800c47c:	4639      	mov	r1, r7
 800c47e:	f7f4 fb37 	bl	8000af0 <__aeabi_dcmple>
 800c482:	2800      	cmp	r0, #0
 800c484:	d077      	beq.n	800c576 <_strtod_l+0xa5e>
 800c486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d04a      	beq.n	800c522 <_strtod_l+0xa0a>
 800c48c:	4b68      	ldr	r3, [pc, #416]	; (800c630 <_strtod_l+0xb18>)
 800c48e:	2200      	movs	r2, #0
 800c490:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c494:	4f66      	ldr	r7, [pc, #408]	; (800c630 <_strtod_l+0xb18>)
 800c496:	2600      	movs	r6, #0
 800c498:	4b62      	ldr	r3, [pc, #392]	; (800c624 <_strtod_l+0xb0c>)
 800c49a:	402b      	ands	r3, r5
 800c49c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c49e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4a0:	4b64      	ldr	r3, [pc, #400]	; (800c634 <_strtod_l+0xb1c>)
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	f040 80ce 	bne.w	800c644 <_strtod_l+0xb2c>
 800c4a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c4ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4b0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c4b4:	ec4b ab10 	vmov	d0, sl, fp
 800c4b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c4bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c4c0:	f001 fe26 	bl	800e110 <__ulp>
 800c4c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4c8:	ec53 2b10 	vmov	r2, r3, d0
 800c4cc:	f7f4 f894 	bl	80005f8 <__aeabi_dmul>
 800c4d0:	4652      	mov	r2, sl
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	f7f3 feda 	bl	800028c <__adddf3>
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4952      	ldr	r1, [pc, #328]	; (800c624 <_strtod_l+0xb0c>)
 800c4dc:	4a56      	ldr	r2, [pc, #344]	; (800c638 <_strtod_l+0xb20>)
 800c4de:	4019      	ands	r1, r3
 800c4e0:	4291      	cmp	r1, r2
 800c4e2:	4682      	mov	sl, r0
 800c4e4:	d95b      	bls.n	800c59e <_strtod_l+0xa86>
 800c4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d103      	bne.n	800c4f8 <_strtod_l+0x9e0>
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	f43f ad2e 	beq.w	800bf54 <_strtod_l+0x43c>
 800c4f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c628 <_strtod_l+0xb10>
 800c4fc:	f04f 3aff 	mov.w	sl, #4294967295
 800c500:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c502:	4648      	mov	r0, r9
 800c504:	f001 fb6d 	bl	800dbe2 <_Bfree>
 800c508:	9905      	ldr	r1, [sp, #20]
 800c50a:	4648      	mov	r0, r9
 800c50c:	f001 fb69 	bl	800dbe2 <_Bfree>
 800c510:	4641      	mov	r1, r8
 800c512:	4648      	mov	r0, r9
 800c514:	f001 fb65 	bl	800dbe2 <_Bfree>
 800c518:	4621      	mov	r1, r4
 800c51a:	4648      	mov	r0, r9
 800c51c:	f001 fb61 	bl	800dbe2 <_Bfree>
 800c520:	e619      	b.n	800c156 <_strtod_l+0x63e>
 800c522:	f1ba 0f00 	cmp.w	sl, #0
 800c526:	d11a      	bne.n	800c55e <_strtod_l+0xa46>
 800c528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c52c:	b9eb      	cbnz	r3, 800c56a <_strtod_l+0xa52>
 800c52e:	2200      	movs	r2, #0
 800c530:	4b3f      	ldr	r3, [pc, #252]	; (800c630 <_strtod_l+0xb18>)
 800c532:	4630      	mov	r0, r6
 800c534:	4639      	mov	r1, r7
 800c536:	f7f4 fad1 	bl	8000adc <__aeabi_dcmplt>
 800c53a:	b9c8      	cbnz	r0, 800c570 <_strtod_l+0xa58>
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	2200      	movs	r2, #0
 800c542:	4b3e      	ldr	r3, [pc, #248]	; (800c63c <_strtod_l+0xb24>)
 800c544:	f7f4 f858 	bl	80005f8 <__aeabi_dmul>
 800c548:	4606      	mov	r6, r0
 800c54a:	460f      	mov	r7, r1
 800c54c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c550:	9618      	str	r6, [sp, #96]	; 0x60
 800c552:	9319      	str	r3, [sp, #100]	; 0x64
 800c554:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c558:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c55c:	e79c      	b.n	800c498 <_strtod_l+0x980>
 800c55e:	f1ba 0f01 	cmp.w	sl, #1
 800c562:	d102      	bne.n	800c56a <_strtod_l+0xa52>
 800c564:	2d00      	cmp	r5, #0
 800c566:	f43f ad8e 	beq.w	800c086 <_strtod_l+0x56e>
 800c56a:	2200      	movs	r2, #0
 800c56c:	4b34      	ldr	r3, [pc, #208]	; (800c640 <_strtod_l+0xb28>)
 800c56e:	e78f      	b.n	800c490 <_strtod_l+0x978>
 800c570:	2600      	movs	r6, #0
 800c572:	4f32      	ldr	r7, [pc, #200]	; (800c63c <_strtod_l+0xb24>)
 800c574:	e7ea      	b.n	800c54c <_strtod_l+0xa34>
 800c576:	4b31      	ldr	r3, [pc, #196]	; (800c63c <_strtod_l+0xb24>)
 800c578:	4630      	mov	r0, r6
 800c57a:	4639      	mov	r1, r7
 800c57c:	2200      	movs	r2, #0
 800c57e:	f7f4 f83b 	bl	80005f8 <__aeabi_dmul>
 800c582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c584:	4606      	mov	r6, r0
 800c586:	460f      	mov	r7, r1
 800c588:	b933      	cbnz	r3, 800c598 <_strtod_l+0xa80>
 800c58a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c58e:	9010      	str	r0, [sp, #64]	; 0x40
 800c590:	9311      	str	r3, [sp, #68]	; 0x44
 800c592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c596:	e7df      	b.n	800c558 <_strtod_l+0xa40>
 800c598:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c59c:	e7f9      	b.n	800c592 <_strtod_l+0xa7a>
 800c59e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c5a2:	9b04      	ldr	r3, [sp, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1ab      	bne.n	800c500 <_strtod_l+0x9e8>
 800c5a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5ac:	0d1b      	lsrs	r3, r3, #20
 800c5ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c5b0:	051b      	lsls	r3, r3, #20
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	465d      	mov	r5, fp
 800c5b6:	d1a3      	bne.n	800c500 <_strtod_l+0x9e8>
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7f4 facc 	bl	8000b58 <__aeabi_d2iz>
 800c5c0:	f7f3 ffb0 	bl	8000524 <__aeabi_i2d>
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	f7f3 fe5c 	bl	8000288 <__aeabi_dsub>
 800c5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	460f      	mov	r7, r1
 800c5d6:	b933      	cbnz	r3, 800c5e6 <_strtod_l+0xace>
 800c5d8:	f1ba 0f00 	cmp.w	sl, #0
 800c5dc:	d103      	bne.n	800c5e6 <_strtod_l+0xace>
 800c5de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	d06d      	beq.n	800c6c2 <_strtod_l+0xbaa>
 800c5e6:	a30a      	add	r3, pc, #40	; (adr r3, 800c610 <_strtod_l+0xaf8>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	f7f4 fa74 	bl	8000adc <__aeabi_dcmplt>
 800c5f4:	2800      	cmp	r0, #0
 800c5f6:	f47f acb8 	bne.w	800bf6a <_strtod_l+0x452>
 800c5fa:	a307      	add	r3, pc, #28	; (adr r3, 800c618 <_strtod_l+0xb00>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f4 fa88 	bl	8000b18 <__aeabi_dcmpgt>
 800c608:	2800      	cmp	r0, #0
 800c60a:	f43f af79 	beq.w	800c500 <_strtod_l+0x9e8>
 800c60e:	e4ac      	b.n	800bf6a <_strtod_l+0x452>
 800c610:	94a03595 	.word	0x94a03595
 800c614:	3fdfffff 	.word	0x3fdfffff
 800c618:	35afe535 	.word	0x35afe535
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	000fffff 	.word	0x000fffff
 800c624:	7ff00000 	.word	0x7ff00000
 800c628:	7fefffff 	.word	0x7fefffff
 800c62c:	39500000 	.word	0x39500000
 800c630:	3ff00000 	.word	0x3ff00000
 800c634:	7fe00000 	.word	0x7fe00000
 800c638:	7c9fffff 	.word	0x7c9fffff
 800c63c:	3fe00000 	.word	0x3fe00000
 800c640:	bff00000 	.word	0xbff00000
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	b333      	cbz	r3, 800c696 <_strtod_l+0xb7e>
 800c648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c64a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c64e:	d822      	bhi.n	800c696 <_strtod_l+0xb7e>
 800c650:	a327      	add	r3, pc, #156	; (adr r3, 800c6f0 <_strtod_l+0xbd8>)
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f4 fa49 	bl	8000af0 <__aeabi_dcmple>
 800c65e:	b1a0      	cbz	r0, 800c68a <_strtod_l+0xb72>
 800c660:	4639      	mov	r1, r7
 800c662:	4630      	mov	r0, r6
 800c664:	f7f4 faa0 	bl	8000ba8 <__aeabi_d2uiz>
 800c668:	2800      	cmp	r0, #0
 800c66a:	bf08      	it	eq
 800c66c:	2001      	moveq	r0, #1
 800c66e:	f7f3 ff49 	bl	8000504 <__aeabi_ui2d>
 800c672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	bb03      	cbnz	r3, 800c6bc <_strtod_l+0xba4>
 800c67a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c67e:	9012      	str	r0, [sp, #72]	; 0x48
 800c680:	9313      	str	r3, [sp, #76]	; 0x4c
 800c682:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c686:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c68c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c68e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	930b      	str	r3, [sp, #44]	; 0x2c
 800c696:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c69a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c69e:	f001 fd37 	bl	800e110 <__ulp>
 800c6a2:	4650      	mov	r0, sl
 800c6a4:	ec53 2b10 	vmov	r2, r3, d0
 800c6a8:	4659      	mov	r1, fp
 800c6aa:	f7f3 ffa5 	bl	80005f8 <__aeabi_dmul>
 800c6ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6b2:	f7f3 fdeb 	bl	800028c <__adddf3>
 800c6b6:	4682      	mov	sl, r0
 800c6b8:	468b      	mov	fp, r1
 800c6ba:	e772      	b.n	800c5a2 <_strtod_l+0xa8a>
 800c6bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c6c0:	e7df      	b.n	800c682 <_strtod_l+0xb6a>
 800c6c2:	a30d      	add	r3, pc, #52	; (adr r3, 800c6f8 <_strtod_l+0xbe0>)
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	f7f4 fa08 	bl	8000adc <__aeabi_dcmplt>
 800c6cc:	e79c      	b.n	800c608 <_strtod_l+0xaf0>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	930d      	str	r3, [sp, #52]	; 0x34
 800c6d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	f7ff ba61 	b.w	800bb9e <_strtod_l+0x86>
 800c6dc:	2b65      	cmp	r3, #101	; 0x65
 800c6de:	f04f 0200 	mov.w	r2, #0
 800c6e2:	f43f ab4e 	beq.w	800bd82 <_strtod_l+0x26a>
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	9104      	str	r1, [sp, #16]
 800c6ec:	f7ff bacb 	b.w	800bc86 <_strtod_l+0x16e>
 800c6f0:	ffc00000 	.word	0xffc00000
 800c6f4:	41dfffff 	.word	0x41dfffff
 800c6f8:	94a03595 	.word	0x94a03595
 800c6fc:	3fcfffff 	.word	0x3fcfffff

0800c700 <_strtod_r>:
 800c700:	4b05      	ldr	r3, [pc, #20]	; (800c718 <_strtod_r+0x18>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	b410      	push	{r4}
 800c706:	6a1b      	ldr	r3, [r3, #32]
 800c708:	4c04      	ldr	r4, [pc, #16]	; (800c71c <_strtod_r+0x1c>)
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	bf08      	it	eq
 800c70e:	4623      	moveq	r3, r4
 800c710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c714:	f7ff ba00 	b.w	800bb18 <_strtod_l>
 800c718:	20000090 	.word	0x20000090
 800c71c:	200000f4 	.word	0x200000f4

0800c720 <_strtol_l.isra.0>:
 800c720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c724:	4680      	mov	r8, r0
 800c726:	4689      	mov	r9, r1
 800c728:	4692      	mov	sl, r2
 800c72a:	461e      	mov	r6, r3
 800c72c:	460f      	mov	r7, r1
 800c72e:	463d      	mov	r5, r7
 800c730:	9808      	ldr	r0, [sp, #32]
 800c732:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c736:	f001 f9ed 	bl	800db14 <__locale_ctype_ptr_l>
 800c73a:	4420      	add	r0, r4
 800c73c:	7843      	ldrb	r3, [r0, #1]
 800c73e:	f013 0308 	ands.w	r3, r3, #8
 800c742:	d132      	bne.n	800c7aa <_strtol_l.isra.0+0x8a>
 800c744:	2c2d      	cmp	r4, #45	; 0x2d
 800c746:	d132      	bne.n	800c7ae <_strtol_l.isra.0+0x8e>
 800c748:	787c      	ldrb	r4, [r7, #1]
 800c74a:	1cbd      	adds	r5, r7, #2
 800c74c:	2201      	movs	r2, #1
 800c74e:	2e00      	cmp	r6, #0
 800c750:	d05d      	beq.n	800c80e <_strtol_l.isra.0+0xee>
 800c752:	2e10      	cmp	r6, #16
 800c754:	d109      	bne.n	800c76a <_strtol_l.isra.0+0x4a>
 800c756:	2c30      	cmp	r4, #48	; 0x30
 800c758:	d107      	bne.n	800c76a <_strtol_l.isra.0+0x4a>
 800c75a:	782b      	ldrb	r3, [r5, #0]
 800c75c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c760:	2b58      	cmp	r3, #88	; 0x58
 800c762:	d14f      	bne.n	800c804 <_strtol_l.isra.0+0xe4>
 800c764:	786c      	ldrb	r4, [r5, #1]
 800c766:	2610      	movs	r6, #16
 800c768:	3502      	adds	r5, #2
 800c76a:	2a00      	cmp	r2, #0
 800c76c:	bf14      	ite	ne
 800c76e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c772:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c776:	2700      	movs	r7, #0
 800c778:	fbb1 fcf6 	udiv	ip, r1, r6
 800c77c:	4638      	mov	r0, r7
 800c77e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c782:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c786:	2b09      	cmp	r3, #9
 800c788:	d817      	bhi.n	800c7ba <_strtol_l.isra.0+0x9a>
 800c78a:	461c      	mov	r4, r3
 800c78c:	42a6      	cmp	r6, r4
 800c78e:	dd23      	ble.n	800c7d8 <_strtol_l.isra.0+0xb8>
 800c790:	1c7b      	adds	r3, r7, #1
 800c792:	d007      	beq.n	800c7a4 <_strtol_l.isra.0+0x84>
 800c794:	4584      	cmp	ip, r0
 800c796:	d31c      	bcc.n	800c7d2 <_strtol_l.isra.0+0xb2>
 800c798:	d101      	bne.n	800c79e <_strtol_l.isra.0+0x7e>
 800c79a:	45a6      	cmp	lr, r4
 800c79c:	db19      	blt.n	800c7d2 <_strtol_l.isra.0+0xb2>
 800c79e:	fb00 4006 	mla	r0, r0, r6, r4
 800c7a2:	2701      	movs	r7, #1
 800c7a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7a8:	e7eb      	b.n	800c782 <_strtol_l.isra.0+0x62>
 800c7aa:	462f      	mov	r7, r5
 800c7ac:	e7bf      	b.n	800c72e <_strtol_l.isra.0+0xe>
 800c7ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c7b0:	bf04      	itt	eq
 800c7b2:	1cbd      	addeq	r5, r7, #2
 800c7b4:	787c      	ldrbeq	r4, [r7, #1]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	e7c9      	b.n	800c74e <_strtol_l.isra.0+0x2e>
 800c7ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c7be:	2b19      	cmp	r3, #25
 800c7c0:	d801      	bhi.n	800c7c6 <_strtol_l.isra.0+0xa6>
 800c7c2:	3c37      	subs	r4, #55	; 0x37
 800c7c4:	e7e2      	b.n	800c78c <_strtol_l.isra.0+0x6c>
 800c7c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c7ca:	2b19      	cmp	r3, #25
 800c7cc:	d804      	bhi.n	800c7d8 <_strtol_l.isra.0+0xb8>
 800c7ce:	3c57      	subs	r4, #87	; 0x57
 800c7d0:	e7dc      	b.n	800c78c <_strtol_l.isra.0+0x6c>
 800c7d2:	f04f 37ff 	mov.w	r7, #4294967295
 800c7d6:	e7e5      	b.n	800c7a4 <_strtol_l.isra.0+0x84>
 800c7d8:	1c7b      	adds	r3, r7, #1
 800c7da:	d108      	bne.n	800c7ee <_strtol_l.isra.0+0xce>
 800c7dc:	2322      	movs	r3, #34	; 0x22
 800c7de:	f8c8 3000 	str.w	r3, [r8]
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	f1ba 0f00 	cmp.w	sl, #0
 800c7e8:	d107      	bne.n	800c7fa <_strtol_l.isra.0+0xda>
 800c7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ee:	b102      	cbz	r2, 800c7f2 <_strtol_l.isra.0+0xd2>
 800c7f0:	4240      	negs	r0, r0
 800c7f2:	f1ba 0f00 	cmp.w	sl, #0
 800c7f6:	d0f8      	beq.n	800c7ea <_strtol_l.isra.0+0xca>
 800c7f8:	b10f      	cbz	r7, 800c7fe <_strtol_l.isra.0+0xde>
 800c7fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7fe:	f8ca 9000 	str.w	r9, [sl]
 800c802:	e7f2      	b.n	800c7ea <_strtol_l.isra.0+0xca>
 800c804:	2430      	movs	r4, #48	; 0x30
 800c806:	2e00      	cmp	r6, #0
 800c808:	d1af      	bne.n	800c76a <_strtol_l.isra.0+0x4a>
 800c80a:	2608      	movs	r6, #8
 800c80c:	e7ad      	b.n	800c76a <_strtol_l.isra.0+0x4a>
 800c80e:	2c30      	cmp	r4, #48	; 0x30
 800c810:	d0a3      	beq.n	800c75a <_strtol_l.isra.0+0x3a>
 800c812:	260a      	movs	r6, #10
 800c814:	e7a9      	b.n	800c76a <_strtol_l.isra.0+0x4a>
	...

0800c818 <_strtol_r>:
 800c818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c81a:	4c06      	ldr	r4, [pc, #24]	; (800c834 <_strtol_r+0x1c>)
 800c81c:	4d06      	ldr	r5, [pc, #24]	; (800c838 <_strtol_r+0x20>)
 800c81e:	6824      	ldr	r4, [r4, #0]
 800c820:	6a24      	ldr	r4, [r4, #32]
 800c822:	2c00      	cmp	r4, #0
 800c824:	bf08      	it	eq
 800c826:	462c      	moveq	r4, r5
 800c828:	9400      	str	r4, [sp, #0]
 800c82a:	f7ff ff79 	bl	800c720 <_strtol_l.isra.0>
 800c82e:	b003      	add	sp, #12
 800c830:	bd30      	pop	{r4, r5, pc}
 800c832:	bf00      	nop
 800c834:	20000090 	.word	0x20000090
 800c838:	200000f4 	.word	0x200000f4

0800c83c <quorem>:
 800c83c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	6903      	ldr	r3, [r0, #16]
 800c842:	690c      	ldr	r4, [r1, #16]
 800c844:	42a3      	cmp	r3, r4
 800c846:	4680      	mov	r8, r0
 800c848:	f2c0 8082 	blt.w	800c950 <quorem+0x114>
 800c84c:	3c01      	subs	r4, #1
 800c84e:	f101 0714 	add.w	r7, r1, #20
 800c852:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c856:	f100 0614 	add.w	r6, r0, #20
 800c85a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c85e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c862:	eb06 030c 	add.w	r3, r6, ip
 800c866:	3501      	adds	r5, #1
 800c868:	eb07 090c 	add.w	r9, r7, ip
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c872:	b395      	cbz	r5, 800c8da <quorem+0x9e>
 800c874:	f04f 0a00 	mov.w	sl, #0
 800c878:	4638      	mov	r0, r7
 800c87a:	46b6      	mov	lr, r6
 800c87c:	46d3      	mov	fp, sl
 800c87e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c882:	b293      	uxth	r3, r2
 800c884:	fb05 a303 	mla	r3, r5, r3, sl
 800c888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	ebab 0303 	sub.w	r3, fp, r3
 800c892:	0c12      	lsrs	r2, r2, #16
 800c894:	f8de b000 	ldr.w	fp, [lr]
 800c898:	fb05 a202 	mla	r2, r5, r2, sl
 800c89c:	fa13 f38b 	uxtah	r3, r3, fp
 800c8a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c8a4:	fa1f fb82 	uxth.w	fp, r2
 800c8a8:	f8de 2000 	ldr.w	r2, [lr]
 800c8ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c8b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8ba:	4581      	cmp	r9, r0
 800c8bc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c8c0:	f84e 3b04 	str.w	r3, [lr], #4
 800c8c4:	d2db      	bcs.n	800c87e <quorem+0x42>
 800c8c6:	f856 300c 	ldr.w	r3, [r6, ip]
 800c8ca:	b933      	cbnz	r3, 800c8da <quorem+0x9e>
 800c8cc:	9b01      	ldr	r3, [sp, #4]
 800c8ce:	3b04      	subs	r3, #4
 800c8d0:	429e      	cmp	r6, r3
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	d330      	bcc.n	800c938 <quorem+0xfc>
 800c8d6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c8da:	4640      	mov	r0, r8
 800c8dc:	f001 fba0 	bl	800e020 <__mcmp>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	db25      	blt.n	800c930 <quorem+0xf4>
 800c8e4:	3501      	adds	r5, #1
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f04f 0c00 	mov.w	ip, #0
 800c8ec:	f857 2b04 	ldr.w	r2, [r7], #4
 800c8f0:	f8d0 e000 	ldr.w	lr, [r0]
 800c8f4:	b293      	uxth	r3, r2
 800c8f6:	ebac 0303 	sub.w	r3, ip, r3
 800c8fa:	0c12      	lsrs	r2, r2, #16
 800c8fc:	fa13 f38e 	uxtah	r3, r3, lr
 800c900:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c908:	b29b      	uxth	r3, r3
 800c90a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c90e:	45b9      	cmp	r9, r7
 800c910:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c914:	f840 3b04 	str.w	r3, [r0], #4
 800c918:	d2e8      	bcs.n	800c8ec <quorem+0xb0>
 800c91a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c91e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c922:	b92a      	cbnz	r2, 800c930 <quorem+0xf4>
 800c924:	3b04      	subs	r3, #4
 800c926:	429e      	cmp	r6, r3
 800c928:	461a      	mov	r2, r3
 800c92a:	d30b      	bcc.n	800c944 <quorem+0x108>
 800c92c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c930:	4628      	mov	r0, r5
 800c932:	b003      	add	sp, #12
 800c934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c938:	6812      	ldr	r2, [r2, #0]
 800c93a:	3b04      	subs	r3, #4
 800c93c:	2a00      	cmp	r2, #0
 800c93e:	d1ca      	bne.n	800c8d6 <quorem+0x9a>
 800c940:	3c01      	subs	r4, #1
 800c942:	e7c5      	b.n	800c8d0 <quorem+0x94>
 800c944:	6812      	ldr	r2, [r2, #0]
 800c946:	3b04      	subs	r3, #4
 800c948:	2a00      	cmp	r2, #0
 800c94a:	d1ef      	bne.n	800c92c <quorem+0xf0>
 800c94c:	3c01      	subs	r4, #1
 800c94e:	e7ea      	b.n	800c926 <quorem+0xea>
 800c950:	2000      	movs	r0, #0
 800c952:	e7ee      	b.n	800c932 <quorem+0xf6>
 800c954:	0000      	movs	r0, r0
	...

0800c958 <_dtoa_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	ec57 6b10 	vmov	r6, r7, d0
 800c960:	b097      	sub	sp, #92	; 0x5c
 800c962:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c964:	9106      	str	r1, [sp, #24]
 800c966:	4604      	mov	r4, r0
 800c968:	920b      	str	r2, [sp, #44]	; 0x2c
 800c96a:	9312      	str	r3, [sp, #72]	; 0x48
 800c96c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c970:	e9cd 6700 	strd	r6, r7, [sp]
 800c974:	b93d      	cbnz	r5, 800c986 <_dtoa_r+0x2e>
 800c976:	2010      	movs	r0, #16
 800c978:	f7fe f962 	bl	800ac40 <malloc>
 800c97c:	6260      	str	r0, [r4, #36]	; 0x24
 800c97e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c982:	6005      	str	r5, [r0, #0]
 800c984:	60c5      	str	r5, [r0, #12]
 800c986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c988:	6819      	ldr	r1, [r3, #0]
 800c98a:	b151      	cbz	r1, 800c9a2 <_dtoa_r+0x4a>
 800c98c:	685a      	ldr	r2, [r3, #4]
 800c98e:	604a      	str	r2, [r1, #4]
 800c990:	2301      	movs	r3, #1
 800c992:	4093      	lsls	r3, r2
 800c994:	608b      	str	r3, [r1, #8]
 800c996:	4620      	mov	r0, r4
 800c998:	f001 f923 	bl	800dbe2 <_Bfree>
 800c99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
 800c9a2:	1e3b      	subs	r3, r7, #0
 800c9a4:	bfbb      	ittet	lt
 800c9a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9aa:	9301      	strlt	r3, [sp, #4]
 800c9ac:	2300      	movge	r3, #0
 800c9ae:	2201      	movlt	r2, #1
 800c9b0:	bfac      	ite	ge
 800c9b2:	f8c8 3000 	strge.w	r3, [r8]
 800c9b6:	f8c8 2000 	strlt.w	r2, [r8]
 800c9ba:	4baf      	ldr	r3, [pc, #700]	; (800cc78 <_dtoa_r+0x320>)
 800c9bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c9c0:	ea33 0308 	bics.w	r3, r3, r8
 800c9c4:	d114      	bne.n	800c9f0 <_dtoa_r+0x98>
 800c9c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	9b00      	ldr	r3, [sp, #0]
 800c9d0:	b923      	cbnz	r3, 800c9dc <_dtoa_r+0x84>
 800c9d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f000 8542 	beq.w	800d460 <_dtoa_r+0xb08>
 800c9dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cc8c <_dtoa_r+0x334>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 8544 	beq.w	800d470 <_dtoa_r+0xb18>
 800c9e8:	f10b 0303 	add.w	r3, fp, #3
 800c9ec:	f000 bd3e 	b.w	800d46c <_dtoa_r+0xb14>
 800c9f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	f7f4 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca00:	4681      	mov	r9, r0
 800ca02:	b168      	cbz	r0, 800ca20 <_dtoa_r+0xc8>
 800ca04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca06:	2301      	movs	r3, #1
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f000 8524 	beq.w	800d45a <_dtoa_r+0xb02>
 800ca12:	4b9a      	ldr	r3, [pc, #616]	; (800cc7c <_dtoa_r+0x324>)
 800ca14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca16:	f103 3bff 	add.w	fp, r3, #4294967295
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	f000 bd28 	b.w	800d470 <_dtoa_r+0xb18>
 800ca20:	aa14      	add	r2, sp, #80	; 0x50
 800ca22:	a915      	add	r1, sp, #84	; 0x54
 800ca24:	ec47 6b10 	vmov	d0, r6, r7
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f001 fbe7 	bl	800e1fc <__d2b>
 800ca2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ca32:	9004      	str	r0, [sp, #16]
 800ca34:	2d00      	cmp	r5, #0
 800ca36:	d07c      	beq.n	800cb32 <_dtoa_r+0x1da>
 800ca38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ca40:	46b2      	mov	sl, r6
 800ca42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ca46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ca4e:	2200      	movs	r2, #0
 800ca50:	4b8b      	ldr	r3, [pc, #556]	; (800cc80 <_dtoa_r+0x328>)
 800ca52:	4650      	mov	r0, sl
 800ca54:	4659      	mov	r1, fp
 800ca56:	f7f3 fc17 	bl	8000288 <__aeabi_dsub>
 800ca5a:	a381      	add	r3, pc, #516	; (adr r3, 800cc60 <_dtoa_r+0x308>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	f7f3 fdca 	bl	80005f8 <__aeabi_dmul>
 800ca64:	a380      	add	r3, pc, #512	; (adr r3, 800cc68 <_dtoa_r+0x310>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f7f3 fc0f 	bl	800028c <__adddf3>
 800ca6e:	4606      	mov	r6, r0
 800ca70:	4628      	mov	r0, r5
 800ca72:	460f      	mov	r7, r1
 800ca74:	f7f3 fd56 	bl	8000524 <__aeabi_i2d>
 800ca78:	a37d      	add	r3, pc, #500	; (adr r3, 800cc70 <_dtoa_r+0x318>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f3 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	4630      	mov	r0, r6
 800ca88:	4639      	mov	r1, r7
 800ca8a:	f7f3 fbff 	bl	800028c <__adddf3>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	460f      	mov	r7, r1
 800ca92:	f7f4 f861 	bl	8000b58 <__aeabi_d2iz>
 800ca96:	2200      	movs	r2, #0
 800ca98:	4682      	mov	sl, r0
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	4639      	mov	r1, r7
 800caa0:	f7f4 f81c 	bl	8000adc <__aeabi_dcmplt>
 800caa4:	b148      	cbz	r0, 800caba <_dtoa_r+0x162>
 800caa6:	4650      	mov	r0, sl
 800caa8:	f7f3 fd3c 	bl	8000524 <__aeabi_i2d>
 800caac:	4632      	mov	r2, r6
 800caae:	463b      	mov	r3, r7
 800cab0:	f7f4 f80a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cab4:	b908      	cbnz	r0, 800caba <_dtoa_r+0x162>
 800cab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800caba:	f1ba 0f16 	cmp.w	sl, #22
 800cabe:	d859      	bhi.n	800cb74 <_dtoa_r+0x21c>
 800cac0:	4970      	ldr	r1, [pc, #448]	; (800cc84 <_dtoa_r+0x32c>)
 800cac2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cace:	f7f4 f823 	bl	8000b18 <__aeabi_dcmpgt>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	d050      	beq.n	800cb78 <_dtoa_r+0x220>
 800cad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cada:	2300      	movs	r3, #0
 800cadc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cae0:	1b5d      	subs	r5, r3, r5
 800cae2:	f1b5 0801 	subs.w	r8, r5, #1
 800cae6:	bf49      	itett	mi
 800cae8:	f1c5 0301 	rsbmi	r3, r5, #1
 800caec:	2300      	movpl	r3, #0
 800caee:	9305      	strmi	r3, [sp, #20]
 800caf0:	f04f 0800 	movmi.w	r8, #0
 800caf4:	bf58      	it	pl
 800caf6:	9305      	strpl	r3, [sp, #20]
 800caf8:	f1ba 0f00 	cmp.w	sl, #0
 800cafc:	db3e      	blt.n	800cb7c <_dtoa_r+0x224>
 800cafe:	2300      	movs	r3, #0
 800cb00:	44d0      	add	r8, sl
 800cb02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cb06:	9307      	str	r3, [sp, #28]
 800cb08:	9b06      	ldr	r3, [sp, #24]
 800cb0a:	2b09      	cmp	r3, #9
 800cb0c:	f200 8090 	bhi.w	800cc30 <_dtoa_r+0x2d8>
 800cb10:	2b05      	cmp	r3, #5
 800cb12:	bfc4      	itt	gt
 800cb14:	3b04      	subgt	r3, #4
 800cb16:	9306      	strgt	r3, [sp, #24]
 800cb18:	9b06      	ldr	r3, [sp, #24]
 800cb1a:	f1a3 0302 	sub.w	r3, r3, #2
 800cb1e:	bfcc      	ite	gt
 800cb20:	2500      	movgt	r5, #0
 800cb22:	2501      	movle	r5, #1
 800cb24:	2b03      	cmp	r3, #3
 800cb26:	f200 808f 	bhi.w	800cc48 <_dtoa_r+0x2f0>
 800cb2a:	e8df f003 	tbb	[pc, r3]
 800cb2e:	7f7d      	.short	0x7f7d
 800cb30:	7131      	.short	0x7131
 800cb32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cb36:	441d      	add	r5, r3
 800cb38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cb3c:	2820      	cmp	r0, #32
 800cb3e:	dd13      	ble.n	800cb68 <_dtoa_r+0x210>
 800cb40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cb44:	9b00      	ldr	r3, [sp, #0]
 800cb46:	fa08 f800 	lsl.w	r8, r8, r0
 800cb4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cb4e:	fa23 f000 	lsr.w	r0, r3, r0
 800cb52:	ea48 0000 	orr.w	r0, r8, r0
 800cb56:	f7f3 fcd5 	bl	8000504 <__aeabi_ui2d>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4682      	mov	sl, r0
 800cb5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cb62:	3d01      	subs	r5, #1
 800cb64:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb66:	e772      	b.n	800ca4e <_dtoa_r+0xf6>
 800cb68:	9b00      	ldr	r3, [sp, #0]
 800cb6a:	f1c0 0020 	rsb	r0, r0, #32
 800cb6e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb72:	e7f0      	b.n	800cb56 <_dtoa_r+0x1fe>
 800cb74:	2301      	movs	r3, #1
 800cb76:	e7b1      	b.n	800cadc <_dtoa_r+0x184>
 800cb78:	900f      	str	r0, [sp, #60]	; 0x3c
 800cb7a:	e7b0      	b.n	800cade <_dtoa_r+0x186>
 800cb7c:	9b05      	ldr	r3, [sp, #20]
 800cb7e:	eba3 030a 	sub.w	r3, r3, sl
 800cb82:	9305      	str	r3, [sp, #20]
 800cb84:	f1ca 0300 	rsb	r3, sl, #0
 800cb88:	9307      	str	r3, [sp, #28]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	930e      	str	r3, [sp, #56]	; 0x38
 800cb8e:	e7bb      	b.n	800cb08 <_dtoa_r+0x1b0>
 800cb90:	2301      	movs	r3, #1
 800cb92:	930a      	str	r3, [sp, #40]	; 0x28
 800cb94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	dd59      	ble.n	800cc4e <_dtoa_r+0x2f6>
 800cb9a:	9302      	str	r3, [sp, #8]
 800cb9c:	4699      	mov	r9, r3
 800cb9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cba0:	2200      	movs	r2, #0
 800cba2:	6072      	str	r2, [r6, #4]
 800cba4:	2204      	movs	r2, #4
 800cba6:	f102 0014 	add.w	r0, r2, #20
 800cbaa:	4298      	cmp	r0, r3
 800cbac:	6871      	ldr	r1, [r6, #4]
 800cbae:	d953      	bls.n	800cc58 <_dtoa_r+0x300>
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f000 ffe2 	bl	800db7a <_Balloc>
 800cbb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbb8:	6030      	str	r0, [r6, #0]
 800cbba:	f1b9 0f0e 	cmp.w	r9, #14
 800cbbe:	f8d3 b000 	ldr.w	fp, [r3]
 800cbc2:	f200 80e6 	bhi.w	800cd92 <_dtoa_r+0x43a>
 800cbc6:	2d00      	cmp	r5, #0
 800cbc8:	f000 80e3 	beq.w	800cd92 <_dtoa_r+0x43a>
 800cbcc:	ed9d 7b00 	vldr	d7, [sp]
 800cbd0:	f1ba 0f00 	cmp.w	sl, #0
 800cbd4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cbd8:	dd74      	ble.n	800ccc4 <_dtoa_r+0x36c>
 800cbda:	4a2a      	ldr	r2, [pc, #168]	; (800cc84 <_dtoa_r+0x32c>)
 800cbdc:	f00a 030f 	and.w	r3, sl, #15
 800cbe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cbe4:	ed93 7b00 	vldr	d7, [r3]
 800cbe8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cbec:	06f0      	lsls	r0, r6, #27
 800cbee:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cbf2:	d565      	bpl.n	800ccc0 <_dtoa_r+0x368>
 800cbf4:	4b24      	ldr	r3, [pc, #144]	; (800cc88 <_dtoa_r+0x330>)
 800cbf6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cbfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cbfe:	f7f3 fe25 	bl	800084c <__aeabi_ddiv>
 800cc02:	e9cd 0100 	strd	r0, r1, [sp]
 800cc06:	f006 060f 	and.w	r6, r6, #15
 800cc0a:	2503      	movs	r5, #3
 800cc0c:	4f1e      	ldr	r7, [pc, #120]	; (800cc88 <_dtoa_r+0x330>)
 800cc0e:	e04c      	b.n	800ccaa <_dtoa_r+0x352>
 800cc10:	2301      	movs	r3, #1
 800cc12:	930a      	str	r3, [sp, #40]	; 0x28
 800cc14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc16:	4453      	add	r3, sl
 800cc18:	f103 0901 	add.w	r9, r3, #1
 800cc1c:	9302      	str	r3, [sp, #8]
 800cc1e:	464b      	mov	r3, r9
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	bfb8      	it	lt
 800cc24:	2301      	movlt	r3, #1
 800cc26:	e7ba      	b.n	800cb9e <_dtoa_r+0x246>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	e7b2      	b.n	800cb92 <_dtoa_r+0x23a>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e7f0      	b.n	800cc12 <_dtoa_r+0x2ba>
 800cc30:	2501      	movs	r5, #1
 800cc32:	2300      	movs	r3, #0
 800cc34:	9306      	str	r3, [sp, #24]
 800cc36:	950a      	str	r5, [sp, #40]	; 0x28
 800cc38:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3c:	9302      	str	r3, [sp, #8]
 800cc3e:	4699      	mov	r9, r3
 800cc40:	2200      	movs	r2, #0
 800cc42:	2312      	movs	r3, #18
 800cc44:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc46:	e7aa      	b.n	800cb9e <_dtoa_r+0x246>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc4c:	e7f4      	b.n	800cc38 <_dtoa_r+0x2e0>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	4699      	mov	r9, r3
 800cc54:	461a      	mov	r2, r3
 800cc56:	e7f5      	b.n	800cc44 <_dtoa_r+0x2ec>
 800cc58:	3101      	adds	r1, #1
 800cc5a:	6071      	str	r1, [r6, #4]
 800cc5c:	0052      	lsls	r2, r2, #1
 800cc5e:	e7a2      	b.n	800cba6 <_dtoa_r+0x24e>
 800cc60:	636f4361 	.word	0x636f4361
 800cc64:	3fd287a7 	.word	0x3fd287a7
 800cc68:	8b60c8b3 	.word	0x8b60c8b3
 800cc6c:	3fc68a28 	.word	0x3fc68a28
 800cc70:	509f79fb 	.word	0x509f79fb
 800cc74:	3fd34413 	.word	0x3fd34413
 800cc78:	7ff00000 	.word	0x7ff00000
 800cc7c:	0800e919 	.word	0x0800e919
 800cc80:	3ff80000 	.word	0x3ff80000
 800cc84:	0800e9d8 	.word	0x0800e9d8
 800cc88:	0800e9b0 	.word	0x0800e9b0
 800cc8c:	0800e9a1 	.word	0x0800e9a1
 800cc90:	07f1      	lsls	r1, r6, #31
 800cc92:	d508      	bpl.n	800cca6 <_dtoa_r+0x34e>
 800cc94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc9c:	f7f3 fcac 	bl	80005f8 <__aeabi_dmul>
 800cca0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cca4:	3501      	adds	r5, #1
 800cca6:	1076      	asrs	r6, r6, #1
 800cca8:	3708      	adds	r7, #8
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	d1f0      	bne.n	800cc90 <_dtoa_r+0x338>
 800ccae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ccb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccb6:	f7f3 fdc9 	bl	800084c <__aeabi_ddiv>
 800ccba:	e9cd 0100 	strd	r0, r1, [sp]
 800ccbe:	e01a      	b.n	800ccf6 <_dtoa_r+0x39e>
 800ccc0:	2502      	movs	r5, #2
 800ccc2:	e7a3      	b.n	800cc0c <_dtoa_r+0x2b4>
 800ccc4:	f000 80a0 	beq.w	800ce08 <_dtoa_r+0x4b0>
 800ccc8:	f1ca 0600 	rsb	r6, sl, #0
 800cccc:	4b9f      	ldr	r3, [pc, #636]	; (800cf4c <_dtoa_r+0x5f4>)
 800ccce:	4fa0      	ldr	r7, [pc, #640]	; (800cf50 <_dtoa_r+0x5f8>)
 800ccd0:	f006 020f 	and.w	r2, r6, #15
 800ccd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	e9cd 0100 	strd	r0, r1, [sp]
 800cce8:	1136      	asrs	r6, r6, #4
 800ccea:	2300      	movs	r3, #0
 800ccec:	2502      	movs	r5, #2
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	d17f      	bne.n	800cdf2 <_dtoa_r+0x49a>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e1      	bne.n	800ccba <_dtoa_r+0x362>
 800ccf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f000 8087 	beq.w	800ce0c <_dtoa_r+0x4b4>
 800ccfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd02:	2200      	movs	r2, #0
 800cd04:	4b93      	ldr	r3, [pc, #588]	; (800cf54 <_dtoa_r+0x5fc>)
 800cd06:	4630      	mov	r0, r6
 800cd08:	4639      	mov	r1, r7
 800cd0a:	f7f3 fee7 	bl	8000adc <__aeabi_dcmplt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d07c      	beq.n	800ce0c <_dtoa_r+0x4b4>
 800cd12:	f1b9 0f00 	cmp.w	r9, #0
 800cd16:	d079      	beq.n	800ce0c <_dtoa_r+0x4b4>
 800cd18:	9b02      	ldr	r3, [sp, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dd35      	ble.n	800cd8a <_dtoa_r+0x432>
 800cd1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd22:	9308      	str	r3, [sp, #32]
 800cd24:	4639      	mov	r1, r7
 800cd26:	2200      	movs	r2, #0
 800cd28:	4b8b      	ldr	r3, [pc, #556]	; (800cf58 <_dtoa_r+0x600>)
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7f3 fc64 	bl	80005f8 <__aeabi_dmul>
 800cd30:	e9cd 0100 	strd	r0, r1, [sp]
 800cd34:	9f02      	ldr	r7, [sp, #8]
 800cd36:	3501      	adds	r5, #1
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f7f3 fbf3 	bl	8000524 <__aeabi_i2d>
 800cd3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd42:	f7f3 fc59 	bl	80005f8 <__aeabi_dmul>
 800cd46:	2200      	movs	r2, #0
 800cd48:	4b84      	ldr	r3, [pc, #528]	; (800cf5c <_dtoa_r+0x604>)
 800cd4a:	f7f3 fa9f 	bl	800028c <__adddf3>
 800cd4e:	4605      	mov	r5, r0
 800cd50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cd54:	2f00      	cmp	r7, #0
 800cd56:	d15d      	bne.n	800ce14 <_dtoa_r+0x4bc>
 800cd58:	2200      	movs	r2, #0
 800cd5a:	4b81      	ldr	r3, [pc, #516]	; (800cf60 <_dtoa_r+0x608>)
 800cd5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd60:	f7f3 fa92 	bl	8000288 <__aeabi_dsub>
 800cd64:	462a      	mov	r2, r5
 800cd66:	4633      	mov	r3, r6
 800cd68:	e9cd 0100 	strd	r0, r1, [sp]
 800cd6c:	f7f3 fed4 	bl	8000b18 <__aeabi_dcmpgt>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f040 8288 	bne.w	800d286 <_dtoa_r+0x92e>
 800cd76:	462a      	mov	r2, r5
 800cd78:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cd7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd80:	f7f3 feac 	bl	8000adc <__aeabi_dcmplt>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f040 827c 	bne.w	800d282 <_dtoa_r+0x92a>
 800cd8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd8e:	e9cd 2300 	strd	r2, r3, [sp]
 800cd92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f2c0 8150 	blt.w	800d03a <_dtoa_r+0x6e2>
 800cd9a:	f1ba 0f0e 	cmp.w	sl, #14
 800cd9e:	f300 814c 	bgt.w	800d03a <_dtoa_r+0x6e2>
 800cda2:	4b6a      	ldr	r3, [pc, #424]	; (800cf4c <_dtoa_r+0x5f4>)
 800cda4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cda8:	ed93 7b00 	vldr	d7, [r3]
 800cdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdb4:	f280 80d8 	bge.w	800cf68 <_dtoa_r+0x610>
 800cdb8:	f1b9 0f00 	cmp.w	r9, #0
 800cdbc:	f300 80d4 	bgt.w	800cf68 <_dtoa_r+0x610>
 800cdc0:	f040 825e 	bne.w	800d280 <_dtoa_r+0x928>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4b66      	ldr	r3, [pc, #408]	; (800cf60 <_dtoa_r+0x608>)
 800cdc8:	ec51 0b17 	vmov	r0, r1, d7
 800cdcc:	f7f3 fc14 	bl	80005f8 <__aeabi_dmul>
 800cdd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdd4:	f7f3 fe96 	bl	8000b04 <__aeabi_dcmpge>
 800cdd8:	464f      	mov	r7, r9
 800cdda:	464e      	mov	r6, r9
 800cddc:	2800      	cmp	r0, #0
 800cdde:	f040 8234 	bne.w	800d24a <_dtoa_r+0x8f2>
 800cde2:	2331      	movs	r3, #49	; 0x31
 800cde4:	f10b 0501 	add.w	r5, fp, #1
 800cde8:	f88b 3000 	strb.w	r3, [fp]
 800cdec:	f10a 0a01 	add.w	sl, sl, #1
 800cdf0:	e22f      	b.n	800d252 <_dtoa_r+0x8fa>
 800cdf2:	07f2      	lsls	r2, r6, #31
 800cdf4:	d505      	bpl.n	800ce02 <_dtoa_r+0x4aa>
 800cdf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdfa:	f7f3 fbfd 	bl	80005f8 <__aeabi_dmul>
 800cdfe:	3501      	adds	r5, #1
 800ce00:	2301      	movs	r3, #1
 800ce02:	1076      	asrs	r6, r6, #1
 800ce04:	3708      	adds	r7, #8
 800ce06:	e772      	b.n	800ccee <_dtoa_r+0x396>
 800ce08:	2502      	movs	r5, #2
 800ce0a:	e774      	b.n	800ccf6 <_dtoa_r+0x39e>
 800ce0c:	f8cd a020 	str.w	sl, [sp, #32]
 800ce10:	464f      	mov	r7, r9
 800ce12:	e791      	b.n	800cd38 <_dtoa_r+0x3e0>
 800ce14:	4b4d      	ldr	r3, [pc, #308]	; (800cf4c <_dtoa_r+0x5f4>)
 800ce16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce1a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ce1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d047      	beq.n	800ceb4 <_dtoa_r+0x55c>
 800ce24:	4602      	mov	r2, r0
 800ce26:	460b      	mov	r3, r1
 800ce28:	2000      	movs	r0, #0
 800ce2a:	494e      	ldr	r1, [pc, #312]	; (800cf64 <_dtoa_r+0x60c>)
 800ce2c:	f7f3 fd0e 	bl	800084c <__aeabi_ddiv>
 800ce30:	462a      	mov	r2, r5
 800ce32:	4633      	mov	r3, r6
 800ce34:	f7f3 fa28 	bl	8000288 <__aeabi_dsub>
 800ce38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce3c:	465d      	mov	r5, fp
 800ce3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce42:	f7f3 fe89 	bl	8000b58 <__aeabi_d2iz>
 800ce46:	4606      	mov	r6, r0
 800ce48:	f7f3 fb6c 	bl	8000524 <__aeabi_i2d>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce54:	f7f3 fa18 	bl	8000288 <__aeabi_dsub>
 800ce58:	3630      	adds	r6, #48	; 0x30
 800ce5a:	f805 6b01 	strb.w	r6, [r5], #1
 800ce5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce62:	e9cd 0100 	strd	r0, r1, [sp]
 800ce66:	f7f3 fe39 	bl	8000adc <__aeabi_dcmplt>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d163      	bne.n	800cf36 <_dtoa_r+0x5de>
 800ce6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce72:	2000      	movs	r0, #0
 800ce74:	4937      	ldr	r1, [pc, #220]	; (800cf54 <_dtoa_r+0x5fc>)
 800ce76:	f7f3 fa07 	bl	8000288 <__aeabi_dsub>
 800ce7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce7e:	f7f3 fe2d 	bl	8000adc <__aeabi_dcmplt>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	f040 80b7 	bne.w	800cff6 <_dtoa_r+0x69e>
 800ce88:	eba5 030b 	sub.w	r3, r5, fp
 800ce8c:	429f      	cmp	r7, r3
 800ce8e:	f77f af7c 	ble.w	800cd8a <_dtoa_r+0x432>
 800ce92:	2200      	movs	r2, #0
 800ce94:	4b30      	ldr	r3, [pc, #192]	; (800cf58 <_dtoa_r+0x600>)
 800ce96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ce9a:	f7f3 fbad 	bl	80005f8 <__aeabi_dmul>
 800ce9e:	2200      	movs	r2, #0
 800cea0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cea4:	4b2c      	ldr	r3, [pc, #176]	; (800cf58 <_dtoa_r+0x600>)
 800cea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceaa:	f7f3 fba5 	bl	80005f8 <__aeabi_dmul>
 800ceae:	e9cd 0100 	strd	r0, r1, [sp]
 800ceb2:	e7c4      	b.n	800ce3e <_dtoa_r+0x4e6>
 800ceb4:	462a      	mov	r2, r5
 800ceb6:	4633      	mov	r3, r6
 800ceb8:	f7f3 fb9e 	bl	80005f8 <__aeabi_dmul>
 800cebc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cec0:	eb0b 0507 	add.w	r5, fp, r7
 800cec4:	465e      	mov	r6, fp
 800cec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ceca:	f7f3 fe45 	bl	8000b58 <__aeabi_d2iz>
 800cece:	4607      	mov	r7, r0
 800ced0:	f7f3 fb28 	bl	8000524 <__aeabi_i2d>
 800ced4:	3730      	adds	r7, #48	; 0x30
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cede:	f7f3 f9d3 	bl	8000288 <__aeabi_dsub>
 800cee2:	f806 7b01 	strb.w	r7, [r6], #1
 800cee6:	42ae      	cmp	r6, r5
 800cee8:	e9cd 0100 	strd	r0, r1, [sp]
 800ceec:	f04f 0200 	mov.w	r2, #0
 800cef0:	d126      	bne.n	800cf40 <_dtoa_r+0x5e8>
 800cef2:	4b1c      	ldr	r3, [pc, #112]	; (800cf64 <_dtoa_r+0x60c>)
 800cef4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cef8:	f7f3 f9c8 	bl	800028c <__adddf3>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf04:	f7f3 fe08 	bl	8000b18 <__aeabi_dcmpgt>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d174      	bne.n	800cff6 <_dtoa_r+0x69e>
 800cf0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf10:	2000      	movs	r0, #0
 800cf12:	4914      	ldr	r1, [pc, #80]	; (800cf64 <_dtoa_r+0x60c>)
 800cf14:	f7f3 f9b8 	bl	8000288 <__aeabi_dsub>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf20:	f7f3 fddc 	bl	8000adc <__aeabi_dcmplt>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	f43f af30 	beq.w	800cd8a <_dtoa_r+0x432>
 800cf2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf2e:	2b30      	cmp	r3, #48	; 0x30
 800cf30:	f105 32ff 	add.w	r2, r5, #4294967295
 800cf34:	d002      	beq.n	800cf3c <_dtoa_r+0x5e4>
 800cf36:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cf3a:	e04a      	b.n	800cfd2 <_dtoa_r+0x67a>
 800cf3c:	4615      	mov	r5, r2
 800cf3e:	e7f4      	b.n	800cf2a <_dtoa_r+0x5d2>
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <_dtoa_r+0x600>)
 800cf42:	f7f3 fb59 	bl	80005f8 <__aeabi_dmul>
 800cf46:	e9cd 0100 	strd	r0, r1, [sp]
 800cf4a:	e7bc      	b.n	800cec6 <_dtoa_r+0x56e>
 800cf4c:	0800e9d8 	.word	0x0800e9d8
 800cf50:	0800e9b0 	.word	0x0800e9b0
 800cf54:	3ff00000 	.word	0x3ff00000
 800cf58:	40240000 	.word	0x40240000
 800cf5c:	401c0000 	.word	0x401c0000
 800cf60:	40140000 	.word	0x40140000
 800cf64:	3fe00000 	.word	0x3fe00000
 800cf68:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf6c:	465d      	mov	r5, fp
 800cf6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf72:	4630      	mov	r0, r6
 800cf74:	4639      	mov	r1, r7
 800cf76:	f7f3 fc69 	bl	800084c <__aeabi_ddiv>
 800cf7a:	f7f3 fded 	bl	8000b58 <__aeabi_d2iz>
 800cf7e:	4680      	mov	r8, r0
 800cf80:	f7f3 fad0 	bl	8000524 <__aeabi_i2d>
 800cf84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf88:	f7f3 fb36 	bl	80005f8 <__aeabi_dmul>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4630      	mov	r0, r6
 800cf92:	4639      	mov	r1, r7
 800cf94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cf98:	f7f3 f976 	bl	8000288 <__aeabi_dsub>
 800cf9c:	f805 6b01 	strb.w	r6, [r5], #1
 800cfa0:	eba5 060b 	sub.w	r6, r5, fp
 800cfa4:	45b1      	cmp	r9, r6
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	d139      	bne.n	800d020 <_dtoa_r+0x6c8>
 800cfac:	f7f3 f96e 	bl	800028c <__adddf3>
 800cfb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	460f      	mov	r7, r1
 800cfb8:	f7f3 fdae 	bl	8000b18 <__aeabi_dcmpgt>
 800cfbc:	b9c8      	cbnz	r0, 800cff2 <_dtoa_r+0x69a>
 800cfbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	f7f3 fd7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfca:	b110      	cbz	r0, 800cfd2 <_dtoa_r+0x67a>
 800cfcc:	f018 0f01 	tst.w	r8, #1
 800cfd0:	d10f      	bne.n	800cff2 <_dtoa_r+0x69a>
 800cfd2:	9904      	ldr	r1, [sp, #16]
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 fe04 	bl	800dbe2 <_Bfree>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfde:	702b      	strb	r3, [r5, #0]
 800cfe0:	f10a 0301 	add.w	r3, sl, #1
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 8241 	beq.w	800d470 <_dtoa_r+0xb18>
 800cfee:	601d      	str	r5, [r3, #0]
 800cff0:	e23e      	b.n	800d470 <_dtoa_r+0xb18>
 800cff2:	f8cd a020 	str.w	sl, [sp, #32]
 800cff6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cffa:	2a39      	cmp	r2, #57	; 0x39
 800cffc:	f105 33ff 	add.w	r3, r5, #4294967295
 800d000:	d108      	bne.n	800d014 <_dtoa_r+0x6bc>
 800d002:	459b      	cmp	fp, r3
 800d004:	d10a      	bne.n	800d01c <_dtoa_r+0x6c4>
 800d006:	9b08      	ldr	r3, [sp, #32]
 800d008:	3301      	adds	r3, #1
 800d00a:	9308      	str	r3, [sp, #32]
 800d00c:	2330      	movs	r3, #48	; 0x30
 800d00e:	f88b 3000 	strb.w	r3, [fp]
 800d012:	465b      	mov	r3, fp
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	3201      	adds	r2, #1
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e78c      	b.n	800cf36 <_dtoa_r+0x5de>
 800d01c:	461d      	mov	r5, r3
 800d01e:	e7ea      	b.n	800cff6 <_dtoa_r+0x69e>
 800d020:	2200      	movs	r2, #0
 800d022:	4b9b      	ldr	r3, [pc, #620]	; (800d290 <_dtoa_r+0x938>)
 800d024:	f7f3 fae8 	bl	80005f8 <__aeabi_dmul>
 800d028:	2200      	movs	r2, #0
 800d02a:	2300      	movs	r3, #0
 800d02c:	4606      	mov	r6, r0
 800d02e:	460f      	mov	r7, r1
 800d030:	f7f3 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d034:	2800      	cmp	r0, #0
 800d036:	d09a      	beq.n	800cf6e <_dtoa_r+0x616>
 800d038:	e7cb      	b.n	800cfd2 <_dtoa_r+0x67a>
 800d03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d03c:	2a00      	cmp	r2, #0
 800d03e:	f000 808b 	beq.w	800d158 <_dtoa_r+0x800>
 800d042:	9a06      	ldr	r2, [sp, #24]
 800d044:	2a01      	cmp	r2, #1
 800d046:	dc6e      	bgt.n	800d126 <_dtoa_r+0x7ce>
 800d048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d04a:	2a00      	cmp	r2, #0
 800d04c:	d067      	beq.n	800d11e <_dtoa_r+0x7c6>
 800d04e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d052:	9f07      	ldr	r7, [sp, #28]
 800d054:	9d05      	ldr	r5, [sp, #20]
 800d056:	9a05      	ldr	r2, [sp, #20]
 800d058:	2101      	movs	r1, #1
 800d05a:	441a      	add	r2, r3
 800d05c:	4620      	mov	r0, r4
 800d05e:	9205      	str	r2, [sp, #20]
 800d060:	4498      	add	r8, r3
 800d062:	f000 fe9c 	bl	800dd9e <__i2b>
 800d066:	4606      	mov	r6, r0
 800d068:	2d00      	cmp	r5, #0
 800d06a:	dd0c      	ble.n	800d086 <_dtoa_r+0x72e>
 800d06c:	f1b8 0f00 	cmp.w	r8, #0
 800d070:	dd09      	ble.n	800d086 <_dtoa_r+0x72e>
 800d072:	4545      	cmp	r5, r8
 800d074:	9a05      	ldr	r2, [sp, #20]
 800d076:	462b      	mov	r3, r5
 800d078:	bfa8      	it	ge
 800d07a:	4643      	movge	r3, r8
 800d07c:	1ad2      	subs	r2, r2, r3
 800d07e:	9205      	str	r2, [sp, #20]
 800d080:	1aed      	subs	r5, r5, r3
 800d082:	eba8 0803 	sub.w	r8, r8, r3
 800d086:	9b07      	ldr	r3, [sp, #28]
 800d088:	b1eb      	cbz	r3, 800d0c6 <_dtoa_r+0x76e>
 800d08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d067      	beq.n	800d160 <_dtoa_r+0x808>
 800d090:	b18f      	cbz	r7, 800d0b6 <_dtoa_r+0x75e>
 800d092:	4631      	mov	r1, r6
 800d094:	463a      	mov	r2, r7
 800d096:	4620      	mov	r0, r4
 800d098:	f000 ff20 	bl	800dedc <__pow5mult>
 800d09c:	9a04      	ldr	r2, [sp, #16]
 800d09e:	4601      	mov	r1, r0
 800d0a0:	4606      	mov	r6, r0
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 fe84 	bl	800ddb0 <__multiply>
 800d0a8:	9904      	ldr	r1, [sp, #16]
 800d0aa:	9008      	str	r0, [sp, #32]
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f000 fd98 	bl	800dbe2 <_Bfree>
 800d0b2:	9b08      	ldr	r3, [sp, #32]
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	9b07      	ldr	r3, [sp, #28]
 800d0b8:	1bda      	subs	r2, r3, r7
 800d0ba:	d004      	beq.n	800d0c6 <_dtoa_r+0x76e>
 800d0bc:	9904      	ldr	r1, [sp, #16]
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 ff0c 	bl	800dedc <__pow5mult>
 800d0c4:	9004      	str	r0, [sp, #16]
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fe68 	bl	800dd9e <__i2b>
 800d0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 81d0 	beq.w	800d478 <_dtoa_r+0xb20>
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4601      	mov	r1, r0
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fefd 	bl	800dedc <__pow5mult>
 800d0e2:	9b06      	ldr	r3, [sp, #24]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	dc40      	bgt.n	800d16c <_dtoa_r+0x814>
 800d0ea:	9b00      	ldr	r3, [sp, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d139      	bne.n	800d164 <_dtoa_r+0x80c>
 800d0f0:	9b01      	ldr	r3, [sp, #4]
 800d0f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d136      	bne.n	800d168 <_dtoa_r+0x810>
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d100:	0d1b      	lsrs	r3, r3, #20
 800d102:	051b      	lsls	r3, r3, #20
 800d104:	b12b      	cbz	r3, 800d112 <_dtoa_r+0x7ba>
 800d106:	9b05      	ldr	r3, [sp, #20]
 800d108:	3301      	adds	r3, #1
 800d10a:	9305      	str	r3, [sp, #20]
 800d10c:	f108 0801 	add.w	r8, r8, #1
 800d110:	2301      	movs	r3, #1
 800d112:	9307      	str	r3, [sp, #28]
 800d114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d116:	2b00      	cmp	r3, #0
 800d118:	d12a      	bne.n	800d170 <_dtoa_r+0x818>
 800d11a:	2001      	movs	r0, #1
 800d11c:	e030      	b.n	800d180 <_dtoa_r+0x828>
 800d11e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d120:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d124:	e795      	b.n	800d052 <_dtoa_r+0x6fa>
 800d126:	9b07      	ldr	r3, [sp, #28]
 800d128:	f109 37ff 	add.w	r7, r9, #4294967295
 800d12c:	42bb      	cmp	r3, r7
 800d12e:	bfbf      	itttt	lt
 800d130:	9b07      	ldrlt	r3, [sp, #28]
 800d132:	9707      	strlt	r7, [sp, #28]
 800d134:	1afa      	sublt	r2, r7, r3
 800d136:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d138:	bfbb      	ittet	lt
 800d13a:	189b      	addlt	r3, r3, r2
 800d13c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d13e:	1bdf      	subge	r7, r3, r7
 800d140:	2700      	movlt	r7, #0
 800d142:	f1b9 0f00 	cmp.w	r9, #0
 800d146:	bfb5      	itete	lt
 800d148:	9b05      	ldrlt	r3, [sp, #20]
 800d14a:	9d05      	ldrge	r5, [sp, #20]
 800d14c:	eba3 0509 	sublt.w	r5, r3, r9
 800d150:	464b      	movge	r3, r9
 800d152:	bfb8      	it	lt
 800d154:	2300      	movlt	r3, #0
 800d156:	e77e      	b.n	800d056 <_dtoa_r+0x6fe>
 800d158:	9f07      	ldr	r7, [sp, #28]
 800d15a:	9d05      	ldr	r5, [sp, #20]
 800d15c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d15e:	e783      	b.n	800d068 <_dtoa_r+0x710>
 800d160:	9a07      	ldr	r2, [sp, #28]
 800d162:	e7ab      	b.n	800d0bc <_dtoa_r+0x764>
 800d164:	2300      	movs	r3, #0
 800d166:	e7d4      	b.n	800d112 <_dtoa_r+0x7ba>
 800d168:	9b00      	ldr	r3, [sp, #0]
 800d16a:	e7d2      	b.n	800d112 <_dtoa_r+0x7ba>
 800d16c:	2300      	movs	r3, #0
 800d16e:	9307      	str	r3, [sp, #28]
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d176:	6918      	ldr	r0, [r3, #16]
 800d178:	f000 fdc3 	bl	800dd02 <__hi0bits>
 800d17c:	f1c0 0020 	rsb	r0, r0, #32
 800d180:	4440      	add	r0, r8
 800d182:	f010 001f 	ands.w	r0, r0, #31
 800d186:	d047      	beq.n	800d218 <_dtoa_r+0x8c0>
 800d188:	f1c0 0320 	rsb	r3, r0, #32
 800d18c:	2b04      	cmp	r3, #4
 800d18e:	dd3b      	ble.n	800d208 <_dtoa_r+0x8b0>
 800d190:	9b05      	ldr	r3, [sp, #20]
 800d192:	f1c0 001c 	rsb	r0, r0, #28
 800d196:	4403      	add	r3, r0
 800d198:	9305      	str	r3, [sp, #20]
 800d19a:	4405      	add	r5, r0
 800d19c:	4480      	add	r8, r0
 800d19e:	9b05      	ldr	r3, [sp, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	dd05      	ble.n	800d1b0 <_dtoa_r+0x858>
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	9904      	ldr	r1, [sp, #16]
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 fee5 	bl	800df78 <__lshift>
 800d1ae:	9004      	str	r0, [sp, #16]
 800d1b0:	f1b8 0f00 	cmp.w	r8, #0
 800d1b4:	dd05      	ble.n	800d1c2 <_dtoa_r+0x86a>
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	4642      	mov	r2, r8
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f000 fedc 	bl	800df78 <__lshift>
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c4:	b353      	cbz	r3, 800d21c <_dtoa_r+0x8c4>
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	9804      	ldr	r0, [sp, #16]
 800d1ca:	f000 ff29 	bl	800e020 <__mcmp>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	da24      	bge.n	800d21c <_dtoa_r+0x8c4>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	220a      	movs	r2, #10
 800d1d6:	9904      	ldr	r1, [sp, #16]
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 fd19 	bl	800dc10 <__multadd>
 800d1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e0:	9004      	str	r0, [sp, #16]
 800d1e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 814d 	beq.w	800d486 <_dtoa_r+0xb2e>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	220a      	movs	r2, #10
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 fd0c 	bl	800dc10 <__multadd>
 800d1f8:	9b02      	ldr	r3, [sp, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	dc4f      	bgt.n	800d2a0 <_dtoa_r+0x948>
 800d200:	9b06      	ldr	r3, [sp, #24]
 800d202:	2b02      	cmp	r3, #2
 800d204:	dd4c      	ble.n	800d2a0 <_dtoa_r+0x948>
 800d206:	e011      	b.n	800d22c <_dtoa_r+0x8d4>
 800d208:	d0c9      	beq.n	800d19e <_dtoa_r+0x846>
 800d20a:	9a05      	ldr	r2, [sp, #20]
 800d20c:	331c      	adds	r3, #28
 800d20e:	441a      	add	r2, r3
 800d210:	9205      	str	r2, [sp, #20]
 800d212:	441d      	add	r5, r3
 800d214:	4498      	add	r8, r3
 800d216:	e7c2      	b.n	800d19e <_dtoa_r+0x846>
 800d218:	4603      	mov	r3, r0
 800d21a:	e7f6      	b.n	800d20a <_dtoa_r+0x8b2>
 800d21c:	f1b9 0f00 	cmp.w	r9, #0
 800d220:	dc38      	bgt.n	800d294 <_dtoa_r+0x93c>
 800d222:	9b06      	ldr	r3, [sp, #24]
 800d224:	2b02      	cmp	r3, #2
 800d226:	dd35      	ble.n	800d294 <_dtoa_r+0x93c>
 800d228:	f8cd 9008 	str.w	r9, [sp, #8]
 800d22c:	9b02      	ldr	r3, [sp, #8]
 800d22e:	b963      	cbnz	r3, 800d24a <_dtoa_r+0x8f2>
 800d230:	4639      	mov	r1, r7
 800d232:	2205      	movs	r2, #5
 800d234:	4620      	mov	r0, r4
 800d236:	f000 fceb 	bl	800dc10 <__multadd>
 800d23a:	4601      	mov	r1, r0
 800d23c:	4607      	mov	r7, r0
 800d23e:	9804      	ldr	r0, [sp, #16]
 800d240:	f000 feee 	bl	800e020 <__mcmp>
 800d244:	2800      	cmp	r0, #0
 800d246:	f73f adcc 	bgt.w	800cde2 <_dtoa_r+0x48a>
 800d24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d24c:	465d      	mov	r5, fp
 800d24e:	ea6f 0a03 	mvn.w	sl, r3
 800d252:	f04f 0900 	mov.w	r9, #0
 800d256:	4639      	mov	r1, r7
 800d258:	4620      	mov	r0, r4
 800d25a:	f000 fcc2 	bl	800dbe2 <_Bfree>
 800d25e:	2e00      	cmp	r6, #0
 800d260:	f43f aeb7 	beq.w	800cfd2 <_dtoa_r+0x67a>
 800d264:	f1b9 0f00 	cmp.w	r9, #0
 800d268:	d005      	beq.n	800d276 <_dtoa_r+0x91e>
 800d26a:	45b1      	cmp	r9, r6
 800d26c:	d003      	beq.n	800d276 <_dtoa_r+0x91e>
 800d26e:	4649      	mov	r1, r9
 800d270:	4620      	mov	r0, r4
 800d272:	f000 fcb6 	bl	800dbe2 <_Bfree>
 800d276:	4631      	mov	r1, r6
 800d278:	4620      	mov	r0, r4
 800d27a:	f000 fcb2 	bl	800dbe2 <_Bfree>
 800d27e:	e6a8      	b.n	800cfd2 <_dtoa_r+0x67a>
 800d280:	2700      	movs	r7, #0
 800d282:	463e      	mov	r6, r7
 800d284:	e7e1      	b.n	800d24a <_dtoa_r+0x8f2>
 800d286:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d28a:	463e      	mov	r6, r7
 800d28c:	e5a9      	b.n	800cde2 <_dtoa_r+0x48a>
 800d28e:	bf00      	nop
 800d290:	40240000 	.word	0x40240000
 800d294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d296:	f8cd 9008 	str.w	r9, [sp, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f000 80fa 	beq.w	800d494 <_dtoa_r+0xb3c>
 800d2a0:	2d00      	cmp	r5, #0
 800d2a2:	dd05      	ble.n	800d2b0 <_dtoa_r+0x958>
 800d2a4:	4631      	mov	r1, r6
 800d2a6:	462a      	mov	r2, r5
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f000 fe65 	bl	800df78 <__lshift>
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	9b07      	ldr	r3, [sp, #28]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d04c      	beq.n	800d350 <_dtoa_r+0x9f8>
 800d2b6:	6871      	ldr	r1, [r6, #4]
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f000 fc5e 	bl	800db7a <_Balloc>
 800d2be:	6932      	ldr	r2, [r6, #16]
 800d2c0:	3202      	adds	r2, #2
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	0092      	lsls	r2, r2, #2
 800d2c6:	f106 010c 	add.w	r1, r6, #12
 800d2ca:	300c      	adds	r0, #12
 800d2cc:	f000 fc48 	bl	800db60 <memcpy>
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	4629      	mov	r1, r5
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fe4f 	bl	800df78 <__lshift>
 800d2da:	9b00      	ldr	r3, [sp, #0]
 800d2dc:	f8cd b014 	str.w	fp, [sp, #20]
 800d2e0:	f003 0301 	and.w	r3, r3, #1
 800d2e4:	46b1      	mov	r9, r6
 800d2e6:	9307      	str	r3, [sp, #28]
 800d2e8:	4606      	mov	r6, r0
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	9804      	ldr	r0, [sp, #16]
 800d2ee:	f7ff faa5 	bl	800c83c <quorem>
 800d2f2:	4649      	mov	r1, r9
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2fa:	9804      	ldr	r0, [sp, #16]
 800d2fc:	f000 fe90 	bl	800e020 <__mcmp>
 800d300:	4632      	mov	r2, r6
 800d302:	9000      	str	r0, [sp, #0]
 800d304:	4639      	mov	r1, r7
 800d306:	4620      	mov	r0, r4
 800d308:	f000 fea4 	bl	800e054 <__mdiff>
 800d30c:	68c3      	ldr	r3, [r0, #12]
 800d30e:	4602      	mov	r2, r0
 800d310:	bb03      	cbnz	r3, 800d354 <_dtoa_r+0x9fc>
 800d312:	4601      	mov	r1, r0
 800d314:	9008      	str	r0, [sp, #32]
 800d316:	9804      	ldr	r0, [sp, #16]
 800d318:	f000 fe82 	bl	800e020 <__mcmp>
 800d31c:	9a08      	ldr	r2, [sp, #32]
 800d31e:	4603      	mov	r3, r0
 800d320:	4611      	mov	r1, r2
 800d322:	4620      	mov	r0, r4
 800d324:	9308      	str	r3, [sp, #32]
 800d326:	f000 fc5c 	bl	800dbe2 <_Bfree>
 800d32a:	9b08      	ldr	r3, [sp, #32]
 800d32c:	b9a3      	cbnz	r3, 800d358 <_dtoa_r+0xa00>
 800d32e:	9a06      	ldr	r2, [sp, #24]
 800d330:	b992      	cbnz	r2, 800d358 <_dtoa_r+0xa00>
 800d332:	9a07      	ldr	r2, [sp, #28]
 800d334:	b982      	cbnz	r2, 800d358 <_dtoa_r+0xa00>
 800d336:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d33a:	d029      	beq.n	800d390 <_dtoa_r+0xa38>
 800d33c:	9b00      	ldr	r3, [sp, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	dd01      	ble.n	800d346 <_dtoa_r+0x9ee>
 800d342:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d346:	9b05      	ldr	r3, [sp, #20]
 800d348:	1c5d      	adds	r5, r3, #1
 800d34a:	f883 8000 	strb.w	r8, [r3]
 800d34e:	e782      	b.n	800d256 <_dtoa_r+0x8fe>
 800d350:	4630      	mov	r0, r6
 800d352:	e7c2      	b.n	800d2da <_dtoa_r+0x982>
 800d354:	2301      	movs	r3, #1
 800d356:	e7e3      	b.n	800d320 <_dtoa_r+0x9c8>
 800d358:	9a00      	ldr	r2, [sp, #0]
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	db04      	blt.n	800d368 <_dtoa_r+0xa10>
 800d35e:	d125      	bne.n	800d3ac <_dtoa_r+0xa54>
 800d360:	9a06      	ldr	r2, [sp, #24]
 800d362:	bb1a      	cbnz	r2, 800d3ac <_dtoa_r+0xa54>
 800d364:	9a07      	ldr	r2, [sp, #28]
 800d366:	bb0a      	cbnz	r2, 800d3ac <_dtoa_r+0xa54>
 800d368:	2b00      	cmp	r3, #0
 800d36a:	ddec      	ble.n	800d346 <_dtoa_r+0x9ee>
 800d36c:	2201      	movs	r2, #1
 800d36e:	9904      	ldr	r1, [sp, #16]
 800d370:	4620      	mov	r0, r4
 800d372:	f000 fe01 	bl	800df78 <__lshift>
 800d376:	4639      	mov	r1, r7
 800d378:	9004      	str	r0, [sp, #16]
 800d37a:	f000 fe51 	bl	800e020 <__mcmp>
 800d37e:	2800      	cmp	r0, #0
 800d380:	dc03      	bgt.n	800d38a <_dtoa_r+0xa32>
 800d382:	d1e0      	bne.n	800d346 <_dtoa_r+0x9ee>
 800d384:	f018 0f01 	tst.w	r8, #1
 800d388:	d0dd      	beq.n	800d346 <_dtoa_r+0x9ee>
 800d38a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d38e:	d1d8      	bne.n	800d342 <_dtoa_r+0x9ea>
 800d390:	9b05      	ldr	r3, [sp, #20]
 800d392:	9a05      	ldr	r2, [sp, #20]
 800d394:	1c5d      	adds	r5, r3, #1
 800d396:	2339      	movs	r3, #57	; 0x39
 800d398:	7013      	strb	r3, [r2, #0]
 800d39a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d39e:	2b39      	cmp	r3, #57	; 0x39
 800d3a0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d3a4:	d04f      	beq.n	800d446 <_dtoa_r+0xaee>
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	7013      	strb	r3, [r2, #0]
 800d3aa:	e754      	b.n	800d256 <_dtoa_r+0x8fe>
 800d3ac:	9a05      	ldr	r2, [sp, #20]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f102 0501 	add.w	r5, r2, #1
 800d3b4:	dd06      	ble.n	800d3c4 <_dtoa_r+0xa6c>
 800d3b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d3ba:	d0e9      	beq.n	800d390 <_dtoa_r+0xa38>
 800d3bc:	f108 0801 	add.w	r8, r8, #1
 800d3c0:	9b05      	ldr	r3, [sp, #20]
 800d3c2:	e7c2      	b.n	800d34a <_dtoa_r+0x9f2>
 800d3c4:	9a02      	ldr	r2, [sp, #8]
 800d3c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d3ca:	eba5 030b 	sub.w	r3, r5, fp
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d021      	beq.n	800d416 <_dtoa_r+0xabe>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	220a      	movs	r2, #10
 800d3d6:	9904      	ldr	r1, [sp, #16]
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f000 fc19 	bl	800dc10 <__multadd>
 800d3de:	45b1      	cmp	r9, r6
 800d3e0:	9004      	str	r0, [sp, #16]
 800d3e2:	f04f 0300 	mov.w	r3, #0
 800d3e6:	f04f 020a 	mov.w	r2, #10
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	d105      	bne.n	800d3fc <_dtoa_r+0xaa4>
 800d3f0:	f000 fc0e 	bl	800dc10 <__multadd>
 800d3f4:	4681      	mov	r9, r0
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	9505      	str	r5, [sp, #20]
 800d3fa:	e776      	b.n	800d2ea <_dtoa_r+0x992>
 800d3fc:	f000 fc08 	bl	800dc10 <__multadd>
 800d400:	4631      	mov	r1, r6
 800d402:	4681      	mov	r9, r0
 800d404:	2300      	movs	r3, #0
 800d406:	220a      	movs	r2, #10
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 fc01 	bl	800dc10 <__multadd>
 800d40e:	4606      	mov	r6, r0
 800d410:	e7f2      	b.n	800d3f8 <_dtoa_r+0xaa0>
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	2201      	movs	r2, #1
 800d418:	9904      	ldr	r1, [sp, #16]
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fdac 	bl	800df78 <__lshift>
 800d420:	4639      	mov	r1, r7
 800d422:	9004      	str	r0, [sp, #16]
 800d424:	f000 fdfc 	bl	800e020 <__mcmp>
 800d428:	2800      	cmp	r0, #0
 800d42a:	dcb6      	bgt.n	800d39a <_dtoa_r+0xa42>
 800d42c:	d102      	bne.n	800d434 <_dtoa_r+0xadc>
 800d42e:	f018 0f01 	tst.w	r8, #1
 800d432:	d1b2      	bne.n	800d39a <_dtoa_r+0xa42>
 800d434:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d438:	2b30      	cmp	r3, #48	; 0x30
 800d43a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d43e:	f47f af0a 	bne.w	800d256 <_dtoa_r+0x8fe>
 800d442:	4615      	mov	r5, r2
 800d444:	e7f6      	b.n	800d434 <_dtoa_r+0xadc>
 800d446:	4593      	cmp	fp, r2
 800d448:	d105      	bne.n	800d456 <_dtoa_r+0xafe>
 800d44a:	2331      	movs	r3, #49	; 0x31
 800d44c:	f10a 0a01 	add.w	sl, sl, #1
 800d450:	f88b 3000 	strb.w	r3, [fp]
 800d454:	e6ff      	b.n	800d256 <_dtoa_r+0x8fe>
 800d456:	4615      	mov	r5, r2
 800d458:	e79f      	b.n	800d39a <_dtoa_r+0xa42>
 800d45a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d4c0 <_dtoa_r+0xb68>
 800d45e:	e007      	b.n	800d470 <_dtoa_r+0xb18>
 800d460:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d462:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d4c4 <_dtoa_r+0xb6c>
 800d466:	b11b      	cbz	r3, 800d470 <_dtoa_r+0xb18>
 800d468:	f10b 0308 	add.w	r3, fp, #8
 800d46c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d46e:	6013      	str	r3, [r2, #0]
 800d470:	4658      	mov	r0, fp
 800d472:	b017      	add	sp, #92	; 0x5c
 800d474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d478:	9b06      	ldr	r3, [sp, #24]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	f77f ae35 	ble.w	800d0ea <_dtoa_r+0x792>
 800d480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d482:	9307      	str	r3, [sp, #28]
 800d484:	e649      	b.n	800d11a <_dtoa_r+0x7c2>
 800d486:	9b02      	ldr	r3, [sp, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	dc03      	bgt.n	800d494 <_dtoa_r+0xb3c>
 800d48c:	9b06      	ldr	r3, [sp, #24]
 800d48e:	2b02      	cmp	r3, #2
 800d490:	f73f aecc 	bgt.w	800d22c <_dtoa_r+0x8d4>
 800d494:	465d      	mov	r5, fp
 800d496:	4639      	mov	r1, r7
 800d498:	9804      	ldr	r0, [sp, #16]
 800d49a:	f7ff f9cf 	bl	800c83c <quorem>
 800d49e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d4a2:	f805 8b01 	strb.w	r8, [r5], #1
 800d4a6:	9a02      	ldr	r2, [sp, #8]
 800d4a8:	eba5 030b 	sub.w	r3, r5, fp
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	ddb0      	ble.n	800d412 <_dtoa_r+0xaba>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	220a      	movs	r2, #10
 800d4b4:	9904      	ldr	r1, [sp, #16]
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f000 fbaa 	bl	800dc10 <__multadd>
 800d4bc:	9004      	str	r0, [sp, #16]
 800d4be:	e7ea      	b.n	800d496 <_dtoa_r+0xb3e>
 800d4c0:	0800e918 	.word	0x0800e918
 800d4c4:	0800e998 	.word	0x0800e998

0800d4c8 <rshift>:
 800d4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ca:	6906      	ldr	r6, [r0, #16]
 800d4cc:	114b      	asrs	r3, r1, #5
 800d4ce:	429e      	cmp	r6, r3
 800d4d0:	f100 0414 	add.w	r4, r0, #20
 800d4d4:	dd30      	ble.n	800d538 <rshift+0x70>
 800d4d6:	f011 011f 	ands.w	r1, r1, #31
 800d4da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d4de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d4e2:	d108      	bne.n	800d4f6 <rshift+0x2e>
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	42b2      	cmp	r2, r6
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	d211      	bcs.n	800d510 <rshift+0x48>
 800d4ec:	f852 3b04 	ldr.w	r3, [r2], #4
 800d4f0:	f841 3b04 	str.w	r3, [r1], #4
 800d4f4:	e7f7      	b.n	800d4e6 <rshift+0x1e>
 800d4f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d4fa:	f1c1 0c20 	rsb	ip, r1, #32
 800d4fe:	40cd      	lsrs	r5, r1
 800d500:	3204      	adds	r2, #4
 800d502:	4623      	mov	r3, r4
 800d504:	42b2      	cmp	r2, r6
 800d506:	4617      	mov	r7, r2
 800d508:	d30c      	bcc.n	800d524 <rshift+0x5c>
 800d50a:	601d      	str	r5, [r3, #0]
 800d50c:	b105      	cbz	r5, 800d510 <rshift+0x48>
 800d50e:	3304      	adds	r3, #4
 800d510:	1b1a      	subs	r2, r3, r4
 800d512:	42a3      	cmp	r3, r4
 800d514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d518:	bf08      	it	eq
 800d51a:	2300      	moveq	r3, #0
 800d51c:	6102      	str	r2, [r0, #16]
 800d51e:	bf08      	it	eq
 800d520:	6143      	streq	r3, [r0, #20]
 800d522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d524:	683f      	ldr	r7, [r7, #0]
 800d526:	fa07 f70c 	lsl.w	r7, r7, ip
 800d52a:	433d      	orrs	r5, r7
 800d52c:	f843 5b04 	str.w	r5, [r3], #4
 800d530:	f852 5b04 	ldr.w	r5, [r2], #4
 800d534:	40cd      	lsrs	r5, r1
 800d536:	e7e5      	b.n	800d504 <rshift+0x3c>
 800d538:	4623      	mov	r3, r4
 800d53a:	e7e9      	b.n	800d510 <rshift+0x48>

0800d53c <__hexdig_fun>:
 800d53c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d540:	2b09      	cmp	r3, #9
 800d542:	d802      	bhi.n	800d54a <__hexdig_fun+0xe>
 800d544:	3820      	subs	r0, #32
 800d546:	b2c0      	uxtb	r0, r0
 800d548:	4770      	bx	lr
 800d54a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d54e:	2b05      	cmp	r3, #5
 800d550:	d801      	bhi.n	800d556 <__hexdig_fun+0x1a>
 800d552:	3847      	subs	r0, #71	; 0x47
 800d554:	e7f7      	b.n	800d546 <__hexdig_fun+0xa>
 800d556:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d55a:	2b05      	cmp	r3, #5
 800d55c:	d801      	bhi.n	800d562 <__hexdig_fun+0x26>
 800d55e:	3827      	subs	r0, #39	; 0x27
 800d560:	e7f1      	b.n	800d546 <__hexdig_fun+0xa>
 800d562:	2000      	movs	r0, #0
 800d564:	4770      	bx	lr

0800d566 <__gethex>:
 800d566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56a:	b08b      	sub	sp, #44	; 0x2c
 800d56c:	468a      	mov	sl, r1
 800d56e:	9002      	str	r0, [sp, #8]
 800d570:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d572:	9306      	str	r3, [sp, #24]
 800d574:	4690      	mov	r8, r2
 800d576:	f000 fad0 	bl	800db1a <__localeconv_l>
 800d57a:	6803      	ldr	r3, [r0, #0]
 800d57c:	9303      	str	r3, [sp, #12]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f2 fe26 	bl	80001d0 <strlen>
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	9001      	str	r0, [sp, #4]
 800d588:	4403      	add	r3, r0
 800d58a:	f04f 0b00 	mov.w	fp, #0
 800d58e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d592:	9307      	str	r3, [sp, #28]
 800d594:	f8da 3000 	ldr.w	r3, [sl]
 800d598:	3302      	adds	r3, #2
 800d59a:	461f      	mov	r7, r3
 800d59c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d5a0:	2830      	cmp	r0, #48	; 0x30
 800d5a2:	d06c      	beq.n	800d67e <__gethex+0x118>
 800d5a4:	f7ff ffca 	bl	800d53c <__hexdig_fun>
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d16a      	bne.n	800d684 <__gethex+0x11e>
 800d5ae:	9a01      	ldr	r2, [sp, #4]
 800d5b0:	9903      	ldr	r1, [sp, #12]
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	f001 f840 	bl	800e638 <strncmp>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d166      	bne.n	800d68a <__gethex+0x124>
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	5cf8      	ldrb	r0, [r7, r3]
 800d5c0:	18fe      	adds	r6, r7, r3
 800d5c2:	f7ff ffbb 	bl	800d53c <__hexdig_fun>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d062      	beq.n	800d690 <__gethex+0x12a>
 800d5ca:	4633      	mov	r3, r6
 800d5cc:	7818      	ldrb	r0, [r3, #0]
 800d5ce:	2830      	cmp	r0, #48	; 0x30
 800d5d0:	461f      	mov	r7, r3
 800d5d2:	f103 0301 	add.w	r3, r3, #1
 800d5d6:	d0f9      	beq.n	800d5cc <__gethex+0x66>
 800d5d8:	f7ff ffb0 	bl	800d53c <__hexdig_fun>
 800d5dc:	fab0 f580 	clz	r5, r0
 800d5e0:	096d      	lsrs	r5, r5, #5
 800d5e2:	4634      	mov	r4, r6
 800d5e4:	f04f 0b01 	mov.w	fp, #1
 800d5e8:	463a      	mov	r2, r7
 800d5ea:	4616      	mov	r6, r2
 800d5ec:	3201      	adds	r2, #1
 800d5ee:	7830      	ldrb	r0, [r6, #0]
 800d5f0:	f7ff ffa4 	bl	800d53c <__hexdig_fun>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d1f8      	bne.n	800d5ea <__gethex+0x84>
 800d5f8:	9a01      	ldr	r2, [sp, #4]
 800d5fa:	9903      	ldr	r1, [sp, #12]
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f001 f81b 	bl	800e638 <strncmp>
 800d602:	b950      	cbnz	r0, 800d61a <__gethex+0xb4>
 800d604:	b954      	cbnz	r4, 800d61c <__gethex+0xb6>
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	18f4      	adds	r4, r6, r3
 800d60a:	4622      	mov	r2, r4
 800d60c:	4616      	mov	r6, r2
 800d60e:	3201      	adds	r2, #1
 800d610:	7830      	ldrb	r0, [r6, #0]
 800d612:	f7ff ff93 	bl	800d53c <__hexdig_fun>
 800d616:	2800      	cmp	r0, #0
 800d618:	d1f8      	bne.n	800d60c <__gethex+0xa6>
 800d61a:	b10c      	cbz	r4, 800d620 <__gethex+0xba>
 800d61c:	1ba4      	subs	r4, r4, r6
 800d61e:	00a4      	lsls	r4, r4, #2
 800d620:	7833      	ldrb	r3, [r6, #0]
 800d622:	2b50      	cmp	r3, #80	; 0x50
 800d624:	d001      	beq.n	800d62a <__gethex+0xc4>
 800d626:	2b70      	cmp	r3, #112	; 0x70
 800d628:	d140      	bne.n	800d6ac <__gethex+0x146>
 800d62a:	7873      	ldrb	r3, [r6, #1]
 800d62c:	2b2b      	cmp	r3, #43	; 0x2b
 800d62e:	d031      	beq.n	800d694 <__gethex+0x12e>
 800d630:	2b2d      	cmp	r3, #45	; 0x2d
 800d632:	d033      	beq.n	800d69c <__gethex+0x136>
 800d634:	1c71      	adds	r1, r6, #1
 800d636:	f04f 0900 	mov.w	r9, #0
 800d63a:	7808      	ldrb	r0, [r1, #0]
 800d63c:	f7ff ff7e 	bl	800d53c <__hexdig_fun>
 800d640:	1e43      	subs	r3, r0, #1
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b18      	cmp	r3, #24
 800d646:	d831      	bhi.n	800d6ac <__gethex+0x146>
 800d648:	f1a0 0210 	sub.w	r2, r0, #16
 800d64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d650:	f7ff ff74 	bl	800d53c <__hexdig_fun>
 800d654:	1e43      	subs	r3, r0, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	2b18      	cmp	r3, #24
 800d65a:	d922      	bls.n	800d6a2 <__gethex+0x13c>
 800d65c:	f1b9 0f00 	cmp.w	r9, #0
 800d660:	d000      	beq.n	800d664 <__gethex+0xfe>
 800d662:	4252      	negs	r2, r2
 800d664:	4414      	add	r4, r2
 800d666:	f8ca 1000 	str.w	r1, [sl]
 800d66a:	b30d      	cbz	r5, 800d6b0 <__gethex+0x14a>
 800d66c:	f1bb 0f00 	cmp.w	fp, #0
 800d670:	bf0c      	ite	eq
 800d672:	2706      	moveq	r7, #6
 800d674:	2700      	movne	r7, #0
 800d676:	4638      	mov	r0, r7
 800d678:	b00b      	add	sp, #44	; 0x2c
 800d67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67e:	f10b 0b01 	add.w	fp, fp, #1
 800d682:	e78a      	b.n	800d59a <__gethex+0x34>
 800d684:	2500      	movs	r5, #0
 800d686:	462c      	mov	r4, r5
 800d688:	e7ae      	b.n	800d5e8 <__gethex+0x82>
 800d68a:	463e      	mov	r6, r7
 800d68c:	2501      	movs	r5, #1
 800d68e:	e7c7      	b.n	800d620 <__gethex+0xba>
 800d690:	4604      	mov	r4, r0
 800d692:	e7fb      	b.n	800d68c <__gethex+0x126>
 800d694:	f04f 0900 	mov.w	r9, #0
 800d698:	1cb1      	adds	r1, r6, #2
 800d69a:	e7ce      	b.n	800d63a <__gethex+0xd4>
 800d69c:	f04f 0901 	mov.w	r9, #1
 800d6a0:	e7fa      	b.n	800d698 <__gethex+0x132>
 800d6a2:	230a      	movs	r3, #10
 800d6a4:	fb03 0202 	mla	r2, r3, r2, r0
 800d6a8:	3a10      	subs	r2, #16
 800d6aa:	e7cf      	b.n	800d64c <__gethex+0xe6>
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	e7da      	b.n	800d666 <__gethex+0x100>
 800d6b0:	1bf3      	subs	r3, r6, r7
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	2b07      	cmp	r3, #7
 800d6b8:	dc49      	bgt.n	800d74e <__gethex+0x1e8>
 800d6ba:	9802      	ldr	r0, [sp, #8]
 800d6bc:	f000 fa5d 	bl	800db7a <_Balloc>
 800d6c0:	9b01      	ldr	r3, [sp, #4]
 800d6c2:	f100 0914 	add.w	r9, r0, #20
 800d6c6:	f04f 0b00 	mov.w	fp, #0
 800d6ca:	f1c3 0301 	rsb	r3, r3, #1
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	f8cd 9010 	str.w	r9, [sp, #16]
 800d6d4:	46da      	mov	sl, fp
 800d6d6:	9308      	str	r3, [sp, #32]
 800d6d8:	42b7      	cmp	r7, r6
 800d6da:	d33b      	bcc.n	800d754 <__gethex+0x1ee>
 800d6dc:	9804      	ldr	r0, [sp, #16]
 800d6de:	f840 ab04 	str.w	sl, [r0], #4
 800d6e2:	eba0 0009 	sub.w	r0, r0, r9
 800d6e6:	1080      	asrs	r0, r0, #2
 800d6e8:	6128      	str	r0, [r5, #16]
 800d6ea:	0147      	lsls	r7, r0, #5
 800d6ec:	4650      	mov	r0, sl
 800d6ee:	f000 fb08 	bl	800dd02 <__hi0bits>
 800d6f2:	f8d8 6000 	ldr.w	r6, [r8]
 800d6f6:	1a3f      	subs	r7, r7, r0
 800d6f8:	42b7      	cmp	r7, r6
 800d6fa:	dd64      	ble.n	800d7c6 <__gethex+0x260>
 800d6fc:	1bbf      	subs	r7, r7, r6
 800d6fe:	4639      	mov	r1, r7
 800d700:	4628      	mov	r0, r5
 800d702:	f000 fe17 	bl	800e334 <__any_on>
 800d706:	4682      	mov	sl, r0
 800d708:	b178      	cbz	r0, 800d72a <__gethex+0x1c4>
 800d70a:	1e7b      	subs	r3, r7, #1
 800d70c:	1159      	asrs	r1, r3, #5
 800d70e:	f003 021f 	and.w	r2, r3, #31
 800d712:	f04f 0a01 	mov.w	sl, #1
 800d716:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d71a:	fa0a f202 	lsl.w	r2, sl, r2
 800d71e:	420a      	tst	r2, r1
 800d720:	d003      	beq.n	800d72a <__gethex+0x1c4>
 800d722:	4553      	cmp	r3, sl
 800d724:	dc46      	bgt.n	800d7b4 <__gethex+0x24e>
 800d726:	f04f 0a02 	mov.w	sl, #2
 800d72a:	4639      	mov	r1, r7
 800d72c:	4628      	mov	r0, r5
 800d72e:	f7ff fecb 	bl	800d4c8 <rshift>
 800d732:	443c      	add	r4, r7
 800d734:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d738:	42a3      	cmp	r3, r4
 800d73a:	da52      	bge.n	800d7e2 <__gethex+0x27c>
 800d73c:	4629      	mov	r1, r5
 800d73e:	9802      	ldr	r0, [sp, #8]
 800d740:	f000 fa4f 	bl	800dbe2 <_Bfree>
 800d744:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d746:	2300      	movs	r3, #0
 800d748:	6013      	str	r3, [r2, #0]
 800d74a:	27a3      	movs	r7, #163	; 0xa3
 800d74c:	e793      	b.n	800d676 <__gethex+0x110>
 800d74e:	3101      	adds	r1, #1
 800d750:	105b      	asrs	r3, r3, #1
 800d752:	e7b0      	b.n	800d6b6 <__gethex+0x150>
 800d754:	1e73      	subs	r3, r6, #1
 800d756:	9305      	str	r3, [sp, #20]
 800d758:	9a07      	ldr	r2, [sp, #28]
 800d75a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d75e:	4293      	cmp	r3, r2
 800d760:	d018      	beq.n	800d794 <__gethex+0x22e>
 800d762:	f1bb 0f20 	cmp.w	fp, #32
 800d766:	d107      	bne.n	800d778 <__gethex+0x212>
 800d768:	9b04      	ldr	r3, [sp, #16]
 800d76a:	f8c3 a000 	str.w	sl, [r3]
 800d76e:	3304      	adds	r3, #4
 800d770:	f04f 0a00 	mov.w	sl, #0
 800d774:	9304      	str	r3, [sp, #16]
 800d776:	46d3      	mov	fp, sl
 800d778:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d77c:	f7ff fede 	bl	800d53c <__hexdig_fun>
 800d780:	f000 000f 	and.w	r0, r0, #15
 800d784:	fa00 f00b 	lsl.w	r0, r0, fp
 800d788:	ea4a 0a00 	orr.w	sl, sl, r0
 800d78c:	f10b 0b04 	add.w	fp, fp, #4
 800d790:	9b05      	ldr	r3, [sp, #20]
 800d792:	e00d      	b.n	800d7b0 <__gethex+0x24a>
 800d794:	9b05      	ldr	r3, [sp, #20]
 800d796:	9a08      	ldr	r2, [sp, #32]
 800d798:	4413      	add	r3, r2
 800d79a:	42bb      	cmp	r3, r7
 800d79c:	d3e1      	bcc.n	800d762 <__gethex+0x1fc>
 800d79e:	4618      	mov	r0, r3
 800d7a0:	9a01      	ldr	r2, [sp, #4]
 800d7a2:	9903      	ldr	r1, [sp, #12]
 800d7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a6:	f000 ff47 	bl	800e638 <strncmp>
 800d7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d1d8      	bne.n	800d762 <__gethex+0x1fc>
 800d7b0:	461e      	mov	r6, r3
 800d7b2:	e791      	b.n	800d6d8 <__gethex+0x172>
 800d7b4:	1eb9      	subs	r1, r7, #2
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f000 fdbc 	bl	800e334 <__any_on>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d0b2      	beq.n	800d726 <__gethex+0x1c0>
 800d7c0:	f04f 0a03 	mov.w	sl, #3
 800d7c4:	e7b1      	b.n	800d72a <__gethex+0x1c4>
 800d7c6:	da09      	bge.n	800d7dc <__gethex+0x276>
 800d7c8:	1bf7      	subs	r7, r6, r7
 800d7ca:	4629      	mov	r1, r5
 800d7cc:	463a      	mov	r2, r7
 800d7ce:	9802      	ldr	r0, [sp, #8]
 800d7d0:	f000 fbd2 	bl	800df78 <__lshift>
 800d7d4:	1be4      	subs	r4, r4, r7
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	f100 0914 	add.w	r9, r0, #20
 800d7dc:	f04f 0a00 	mov.w	sl, #0
 800d7e0:	e7a8      	b.n	800d734 <__gethex+0x1ce>
 800d7e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d7e6:	42a0      	cmp	r0, r4
 800d7e8:	dd6a      	ble.n	800d8c0 <__gethex+0x35a>
 800d7ea:	1b04      	subs	r4, r0, r4
 800d7ec:	42a6      	cmp	r6, r4
 800d7ee:	dc2e      	bgt.n	800d84e <__gethex+0x2e8>
 800d7f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d022      	beq.n	800d83e <__gethex+0x2d8>
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	d024      	beq.n	800d846 <__gethex+0x2e0>
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d115      	bne.n	800d82c <__gethex+0x2c6>
 800d800:	42a6      	cmp	r6, r4
 800d802:	d113      	bne.n	800d82c <__gethex+0x2c6>
 800d804:	2e01      	cmp	r6, #1
 800d806:	dc0b      	bgt.n	800d820 <__gethex+0x2ba>
 800d808:	9a06      	ldr	r2, [sp, #24]
 800d80a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	2301      	movs	r3, #1
 800d812:	612b      	str	r3, [r5, #16]
 800d814:	f8c9 3000 	str.w	r3, [r9]
 800d818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d81a:	2762      	movs	r7, #98	; 0x62
 800d81c:	601d      	str	r5, [r3, #0]
 800d81e:	e72a      	b.n	800d676 <__gethex+0x110>
 800d820:	1e71      	subs	r1, r6, #1
 800d822:	4628      	mov	r0, r5
 800d824:	f000 fd86 	bl	800e334 <__any_on>
 800d828:	2800      	cmp	r0, #0
 800d82a:	d1ed      	bne.n	800d808 <__gethex+0x2a2>
 800d82c:	4629      	mov	r1, r5
 800d82e:	9802      	ldr	r0, [sp, #8]
 800d830:	f000 f9d7 	bl	800dbe2 <_Bfree>
 800d834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d836:	2300      	movs	r3, #0
 800d838:	6013      	str	r3, [r2, #0]
 800d83a:	2750      	movs	r7, #80	; 0x50
 800d83c:	e71b      	b.n	800d676 <__gethex+0x110>
 800d83e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d840:	2b00      	cmp	r3, #0
 800d842:	d0e1      	beq.n	800d808 <__gethex+0x2a2>
 800d844:	e7f2      	b.n	800d82c <__gethex+0x2c6>
 800d846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1dd      	bne.n	800d808 <__gethex+0x2a2>
 800d84c:	e7ee      	b.n	800d82c <__gethex+0x2c6>
 800d84e:	1e67      	subs	r7, r4, #1
 800d850:	f1ba 0f00 	cmp.w	sl, #0
 800d854:	d131      	bne.n	800d8ba <__gethex+0x354>
 800d856:	b127      	cbz	r7, 800d862 <__gethex+0x2fc>
 800d858:	4639      	mov	r1, r7
 800d85a:	4628      	mov	r0, r5
 800d85c:	f000 fd6a 	bl	800e334 <__any_on>
 800d860:	4682      	mov	sl, r0
 800d862:	117a      	asrs	r2, r7, #5
 800d864:	2301      	movs	r3, #1
 800d866:	f007 071f 	and.w	r7, r7, #31
 800d86a:	fa03 f707 	lsl.w	r7, r3, r7
 800d86e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d872:	4621      	mov	r1, r4
 800d874:	421f      	tst	r7, r3
 800d876:	4628      	mov	r0, r5
 800d878:	bf18      	it	ne
 800d87a:	f04a 0a02 	orrne.w	sl, sl, #2
 800d87e:	1b36      	subs	r6, r6, r4
 800d880:	f7ff fe22 	bl	800d4c8 <rshift>
 800d884:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d888:	2702      	movs	r7, #2
 800d88a:	f1ba 0f00 	cmp.w	sl, #0
 800d88e:	d048      	beq.n	800d922 <__gethex+0x3bc>
 800d890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d894:	2b02      	cmp	r3, #2
 800d896:	d015      	beq.n	800d8c4 <__gethex+0x35e>
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d017      	beq.n	800d8cc <__gethex+0x366>
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d109      	bne.n	800d8b4 <__gethex+0x34e>
 800d8a0:	f01a 0f02 	tst.w	sl, #2
 800d8a4:	d006      	beq.n	800d8b4 <__gethex+0x34e>
 800d8a6:	f8d9 3000 	ldr.w	r3, [r9]
 800d8aa:	ea4a 0a03 	orr.w	sl, sl, r3
 800d8ae:	f01a 0f01 	tst.w	sl, #1
 800d8b2:	d10e      	bne.n	800d8d2 <__gethex+0x36c>
 800d8b4:	f047 0710 	orr.w	r7, r7, #16
 800d8b8:	e033      	b.n	800d922 <__gethex+0x3bc>
 800d8ba:	f04f 0a01 	mov.w	sl, #1
 800d8be:	e7d0      	b.n	800d862 <__gethex+0x2fc>
 800d8c0:	2701      	movs	r7, #1
 800d8c2:	e7e2      	b.n	800d88a <__gethex+0x324>
 800d8c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8c6:	f1c3 0301 	rsb	r3, r3, #1
 800d8ca:	9315      	str	r3, [sp, #84]	; 0x54
 800d8cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d0f0      	beq.n	800d8b4 <__gethex+0x34e>
 800d8d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d8d6:	f105 0314 	add.w	r3, r5, #20
 800d8da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d8de:	eb03 010a 	add.w	r1, r3, sl
 800d8e2:	f04f 0c00 	mov.w	ip, #0
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d8f0:	d01c      	beq.n	800d92c <__gethex+0x3c6>
 800d8f2:	3201      	adds	r2, #1
 800d8f4:	6002      	str	r2, [r0, #0]
 800d8f6:	2f02      	cmp	r7, #2
 800d8f8:	f105 0314 	add.w	r3, r5, #20
 800d8fc:	d138      	bne.n	800d970 <__gethex+0x40a>
 800d8fe:	f8d8 2000 	ldr.w	r2, [r8]
 800d902:	3a01      	subs	r2, #1
 800d904:	42b2      	cmp	r2, r6
 800d906:	d10a      	bne.n	800d91e <__gethex+0x3b8>
 800d908:	1171      	asrs	r1, r6, #5
 800d90a:	2201      	movs	r2, #1
 800d90c:	f006 061f 	and.w	r6, r6, #31
 800d910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d914:	fa02 f606 	lsl.w	r6, r2, r6
 800d918:	421e      	tst	r6, r3
 800d91a:	bf18      	it	ne
 800d91c:	4617      	movne	r7, r2
 800d91e:	f047 0720 	orr.w	r7, r7, #32
 800d922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d924:	601d      	str	r5, [r3, #0]
 800d926:	9b06      	ldr	r3, [sp, #24]
 800d928:	601c      	str	r4, [r3, #0]
 800d92a:	e6a4      	b.n	800d676 <__gethex+0x110>
 800d92c:	4299      	cmp	r1, r3
 800d92e:	f843 cc04 	str.w	ip, [r3, #-4]
 800d932:	d8d8      	bhi.n	800d8e6 <__gethex+0x380>
 800d934:	68ab      	ldr	r3, [r5, #8]
 800d936:	4599      	cmp	r9, r3
 800d938:	db12      	blt.n	800d960 <__gethex+0x3fa>
 800d93a:	6869      	ldr	r1, [r5, #4]
 800d93c:	9802      	ldr	r0, [sp, #8]
 800d93e:	3101      	adds	r1, #1
 800d940:	f000 f91b 	bl	800db7a <_Balloc>
 800d944:	692a      	ldr	r2, [r5, #16]
 800d946:	3202      	adds	r2, #2
 800d948:	f105 010c 	add.w	r1, r5, #12
 800d94c:	4683      	mov	fp, r0
 800d94e:	0092      	lsls	r2, r2, #2
 800d950:	300c      	adds	r0, #12
 800d952:	f000 f905 	bl	800db60 <memcpy>
 800d956:	4629      	mov	r1, r5
 800d958:	9802      	ldr	r0, [sp, #8]
 800d95a:	f000 f942 	bl	800dbe2 <_Bfree>
 800d95e:	465d      	mov	r5, fp
 800d960:	692b      	ldr	r3, [r5, #16]
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d968:	612a      	str	r2, [r5, #16]
 800d96a:	2201      	movs	r2, #1
 800d96c:	615a      	str	r2, [r3, #20]
 800d96e:	e7c2      	b.n	800d8f6 <__gethex+0x390>
 800d970:	692a      	ldr	r2, [r5, #16]
 800d972:	454a      	cmp	r2, r9
 800d974:	dd0b      	ble.n	800d98e <__gethex+0x428>
 800d976:	2101      	movs	r1, #1
 800d978:	4628      	mov	r0, r5
 800d97a:	f7ff fda5 	bl	800d4c8 <rshift>
 800d97e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d982:	3401      	adds	r4, #1
 800d984:	42a3      	cmp	r3, r4
 800d986:	f6ff aed9 	blt.w	800d73c <__gethex+0x1d6>
 800d98a:	2701      	movs	r7, #1
 800d98c:	e7c7      	b.n	800d91e <__gethex+0x3b8>
 800d98e:	f016 061f 	ands.w	r6, r6, #31
 800d992:	d0fa      	beq.n	800d98a <__gethex+0x424>
 800d994:	449a      	add	sl, r3
 800d996:	f1c6 0620 	rsb	r6, r6, #32
 800d99a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d99e:	f000 f9b0 	bl	800dd02 <__hi0bits>
 800d9a2:	42b0      	cmp	r0, r6
 800d9a4:	dbe7      	blt.n	800d976 <__gethex+0x410>
 800d9a6:	e7f0      	b.n	800d98a <__gethex+0x424>

0800d9a8 <L_shift>:
 800d9a8:	f1c2 0208 	rsb	r2, r2, #8
 800d9ac:	0092      	lsls	r2, r2, #2
 800d9ae:	b570      	push	{r4, r5, r6, lr}
 800d9b0:	f1c2 0620 	rsb	r6, r2, #32
 800d9b4:	6843      	ldr	r3, [r0, #4]
 800d9b6:	6804      	ldr	r4, [r0, #0]
 800d9b8:	fa03 f506 	lsl.w	r5, r3, r6
 800d9bc:	432c      	orrs	r4, r5
 800d9be:	40d3      	lsrs	r3, r2
 800d9c0:	6004      	str	r4, [r0, #0]
 800d9c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9c6:	4288      	cmp	r0, r1
 800d9c8:	d3f4      	bcc.n	800d9b4 <L_shift+0xc>
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}

0800d9cc <__match>:
 800d9cc:	b530      	push	{r4, r5, lr}
 800d9ce:	6803      	ldr	r3, [r0, #0]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9d6:	b914      	cbnz	r4, 800d9de <__match+0x12>
 800d9d8:	6003      	str	r3, [r0, #0]
 800d9da:	2001      	movs	r0, #1
 800d9dc:	bd30      	pop	{r4, r5, pc}
 800d9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d9e6:	2d19      	cmp	r5, #25
 800d9e8:	bf98      	it	ls
 800d9ea:	3220      	addls	r2, #32
 800d9ec:	42a2      	cmp	r2, r4
 800d9ee:	d0f0      	beq.n	800d9d2 <__match+0x6>
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	e7f3      	b.n	800d9dc <__match+0x10>

0800d9f4 <__hexnan>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	680b      	ldr	r3, [r1, #0]
 800d9fa:	6801      	ldr	r1, [r0, #0]
 800d9fc:	115f      	asrs	r7, r3, #5
 800d9fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800da02:	f013 031f 	ands.w	r3, r3, #31
 800da06:	b087      	sub	sp, #28
 800da08:	bf18      	it	ne
 800da0a:	3704      	addne	r7, #4
 800da0c:	2500      	movs	r5, #0
 800da0e:	1f3e      	subs	r6, r7, #4
 800da10:	4682      	mov	sl, r0
 800da12:	4690      	mov	r8, r2
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	f847 5c04 	str.w	r5, [r7, #-4]
 800da1a:	46b1      	mov	r9, r6
 800da1c:	4634      	mov	r4, r6
 800da1e:	9502      	str	r5, [sp, #8]
 800da20:	46ab      	mov	fp, r5
 800da22:	784a      	ldrb	r2, [r1, #1]
 800da24:	1c4b      	adds	r3, r1, #1
 800da26:	9303      	str	r3, [sp, #12]
 800da28:	b342      	cbz	r2, 800da7c <__hexnan+0x88>
 800da2a:	4610      	mov	r0, r2
 800da2c:	9105      	str	r1, [sp, #20]
 800da2e:	9204      	str	r2, [sp, #16]
 800da30:	f7ff fd84 	bl	800d53c <__hexdig_fun>
 800da34:	2800      	cmp	r0, #0
 800da36:	d143      	bne.n	800dac0 <__hexnan+0xcc>
 800da38:	9a04      	ldr	r2, [sp, #16]
 800da3a:	9905      	ldr	r1, [sp, #20]
 800da3c:	2a20      	cmp	r2, #32
 800da3e:	d818      	bhi.n	800da72 <__hexnan+0x7e>
 800da40:	9b02      	ldr	r3, [sp, #8]
 800da42:	459b      	cmp	fp, r3
 800da44:	dd13      	ble.n	800da6e <__hexnan+0x7a>
 800da46:	454c      	cmp	r4, r9
 800da48:	d206      	bcs.n	800da58 <__hexnan+0x64>
 800da4a:	2d07      	cmp	r5, #7
 800da4c:	dc04      	bgt.n	800da58 <__hexnan+0x64>
 800da4e:	462a      	mov	r2, r5
 800da50:	4649      	mov	r1, r9
 800da52:	4620      	mov	r0, r4
 800da54:	f7ff ffa8 	bl	800d9a8 <L_shift>
 800da58:	4544      	cmp	r4, r8
 800da5a:	d944      	bls.n	800dae6 <__hexnan+0xf2>
 800da5c:	2300      	movs	r3, #0
 800da5e:	f1a4 0904 	sub.w	r9, r4, #4
 800da62:	f844 3c04 	str.w	r3, [r4, #-4]
 800da66:	f8cd b008 	str.w	fp, [sp, #8]
 800da6a:	464c      	mov	r4, r9
 800da6c:	461d      	mov	r5, r3
 800da6e:	9903      	ldr	r1, [sp, #12]
 800da70:	e7d7      	b.n	800da22 <__hexnan+0x2e>
 800da72:	2a29      	cmp	r2, #41	; 0x29
 800da74:	d14a      	bne.n	800db0c <__hexnan+0x118>
 800da76:	3102      	adds	r1, #2
 800da78:	f8ca 1000 	str.w	r1, [sl]
 800da7c:	f1bb 0f00 	cmp.w	fp, #0
 800da80:	d044      	beq.n	800db0c <__hexnan+0x118>
 800da82:	454c      	cmp	r4, r9
 800da84:	d206      	bcs.n	800da94 <__hexnan+0xa0>
 800da86:	2d07      	cmp	r5, #7
 800da88:	dc04      	bgt.n	800da94 <__hexnan+0xa0>
 800da8a:	462a      	mov	r2, r5
 800da8c:	4649      	mov	r1, r9
 800da8e:	4620      	mov	r0, r4
 800da90:	f7ff ff8a 	bl	800d9a8 <L_shift>
 800da94:	4544      	cmp	r4, r8
 800da96:	d928      	bls.n	800daea <__hexnan+0xf6>
 800da98:	4643      	mov	r3, r8
 800da9a:	f854 2b04 	ldr.w	r2, [r4], #4
 800da9e:	f843 2b04 	str.w	r2, [r3], #4
 800daa2:	42a6      	cmp	r6, r4
 800daa4:	d2f9      	bcs.n	800da9a <__hexnan+0xa6>
 800daa6:	2200      	movs	r2, #0
 800daa8:	f843 2b04 	str.w	r2, [r3], #4
 800daac:	429e      	cmp	r6, r3
 800daae:	d2fb      	bcs.n	800daa8 <__hexnan+0xb4>
 800dab0:	6833      	ldr	r3, [r6, #0]
 800dab2:	b91b      	cbnz	r3, 800dabc <__hexnan+0xc8>
 800dab4:	4546      	cmp	r6, r8
 800dab6:	d127      	bne.n	800db08 <__hexnan+0x114>
 800dab8:	2301      	movs	r3, #1
 800daba:	6033      	str	r3, [r6, #0]
 800dabc:	2005      	movs	r0, #5
 800dabe:	e026      	b.n	800db0e <__hexnan+0x11a>
 800dac0:	3501      	adds	r5, #1
 800dac2:	2d08      	cmp	r5, #8
 800dac4:	f10b 0b01 	add.w	fp, fp, #1
 800dac8:	dd06      	ble.n	800dad8 <__hexnan+0xe4>
 800daca:	4544      	cmp	r4, r8
 800dacc:	d9cf      	bls.n	800da6e <__hexnan+0x7a>
 800dace:	2300      	movs	r3, #0
 800dad0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dad4:	2501      	movs	r5, #1
 800dad6:	3c04      	subs	r4, #4
 800dad8:	6822      	ldr	r2, [r4, #0]
 800dada:	f000 000f 	and.w	r0, r0, #15
 800dade:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dae2:	6020      	str	r0, [r4, #0]
 800dae4:	e7c3      	b.n	800da6e <__hexnan+0x7a>
 800dae6:	2508      	movs	r5, #8
 800dae8:	e7c1      	b.n	800da6e <__hexnan+0x7a>
 800daea:	9b01      	ldr	r3, [sp, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d0df      	beq.n	800dab0 <__hexnan+0xbc>
 800daf0:	f04f 32ff 	mov.w	r2, #4294967295
 800daf4:	f1c3 0320 	rsb	r3, r3, #32
 800daf8:	fa22 f303 	lsr.w	r3, r2, r3
 800dafc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800db00:	401a      	ands	r2, r3
 800db02:	f847 2c04 	str.w	r2, [r7, #-4]
 800db06:	e7d3      	b.n	800dab0 <__hexnan+0xbc>
 800db08:	3e04      	subs	r6, #4
 800db0a:	e7d1      	b.n	800dab0 <__hexnan+0xbc>
 800db0c:	2004      	movs	r0, #4
 800db0e:	b007      	add	sp, #28
 800db10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db14 <__locale_ctype_ptr_l>:
 800db14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800db18:	4770      	bx	lr

0800db1a <__localeconv_l>:
 800db1a:	30f0      	adds	r0, #240	; 0xf0
 800db1c:	4770      	bx	lr
	...

0800db20 <_localeconv_r>:
 800db20:	4b04      	ldr	r3, [pc, #16]	; (800db34 <_localeconv_r+0x14>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6a18      	ldr	r0, [r3, #32]
 800db26:	4b04      	ldr	r3, [pc, #16]	; (800db38 <_localeconv_r+0x18>)
 800db28:	2800      	cmp	r0, #0
 800db2a:	bf08      	it	eq
 800db2c:	4618      	moveq	r0, r3
 800db2e:	30f0      	adds	r0, #240	; 0xf0
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	20000090 	.word	0x20000090
 800db38:	200000f4 	.word	0x200000f4

0800db3c <__ascii_mbtowc>:
 800db3c:	b082      	sub	sp, #8
 800db3e:	b901      	cbnz	r1, 800db42 <__ascii_mbtowc+0x6>
 800db40:	a901      	add	r1, sp, #4
 800db42:	b142      	cbz	r2, 800db56 <__ascii_mbtowc+0x1a>
 800db44:	b14b      	cbz	r3, 800db5a <__ascii_mbtowc+0x1e>
 800db46:	7813      	ldrb	r3, [r2, #0]
 800db48:	600b      	str	r3, [r1, #0]
 800db4a:	7812      	ldrb	r2, [r2, #0]
 800db4c:	1c10      	adds	r0, r2, #0
 800db4e:	bf18      	it	ne
 800db50:	2001      	movne	r0, #1
 800db52:	b002      	add	sp, #8
 800db54:	4770      	bx	lr
 800db56:	4610      	mov	r0, r2
 800db58:	e7fb      	b.n	800db52 <__ascii_mbtowc+0x16>
 800db5a:	f06f 0001 	mvn.w	r0, #1
 800db5e:	e7f8      	b.n	800db52 <__ascii_mbtowc+0x16>

0800db60 <memcpy>:
 800db60:	b510      	push	{r4, lr}
 800db62:	1e43      	subs	r3, r0, #1
 800db64:	440a      	add	r2, r1
 800db66:	4291      	cmp	r1, r2
 800db68:	d100      	bne.n	800db6c <memcpy+0xc>
 800db6a:	bd10      	pop	{r4, pc}
 800db6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db74:	e7f7      	b.n	800db66 <memcpy+0x6>

0800db76 <__malloc_lock>:
 800db76:	4770      	bx	lr

0800db78 <__malloc_unlock>:
 800db78:	4770      	bx	lr

0800db7a <_Balloc>:
 800db7a:	b570      	push	{r4, r5, r6, lr}
 800db7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db7e:	4604      	mov	r4, r0
 800db80:	460e      	mov	r6, r1
 800db82:	b93d      	cbnz	r5, 800db94 <_Balloc+0x1a>
 800db84:	2010      	movs	r0, #16
 800db86:	f7fd f85b 	bl	800ac40 <malloc>
 800db8a:	6260      	str	r0, [r4, #36]	; 0x24
 800db8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db90:	6005      	str	r5, [r0, #0]
 800db92:	60c5      	str	r5, [r0, #12]
 800db94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800db96:	68eb      	ldr	r3, [r5, #12]
 800db98:	b183      	cbz	r3, 800dbbc <_Balloc+0x42>
 800db9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dba2:	b9b8      	cbnz	r0, 800dbd4 <_Balloc+0x5a>
 800dba4:	2101      	movs	r1, #1
 800dba6:	fa01 f506 	lsl.w	r5, r1, r6
 800dbaa:	1d6a      	adds	r2, r5, #5
 800dbac:	0092      	lsls	r2, r2, #2
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 fbe1 	bl	800e376 <_calloc_r>
 800dbb4:	b160      	cbz	r0, 800dbd0 <_Balloc+0x56>
 800dbb6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dbba:	e00e      	b.n	800dbda <_Balloc+0x60>
 800dbbc:	2221      	movs	r2, #33	; 0x21
 800dbbe:	2104      	movs	r1, #4
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 fbd8 	bl	800e376 <_calloc_r>
 800dbc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc8:	60e8      	str	r0, [r5, #12]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1e4      	bne.n	800db9a <_Balloc+0x20>
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	bd70      	pop	{r4, r5, r6, pc}
 800dbd4:	6802      	ldr	r2, [r0, #0]
 800dbd6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbe0:	e7f7      	b.n	800dbd2 <_Balloc+0x58>

0800dbe2 <_Bfree>:
 800dbe2:	b570      	push	{r4, r5, r6, lr}
 800dbe4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460d      	mov	r5, r1
 800dbea:	b93c      	cbnz	r4, 800dbfc <_Bfree+0x1a>
 800dbec:	2010      	movs	r0, #16
 800dbee:	f7fd f827 	bl	800ac40 <malloc>
 800dbf2:	6270      	str	r0, [r6, #36]	; 0x24
 800dbf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbf8:	6004      	str	r4, [r0, #0]
 800dbfa:	60c4      	str	r4, [r0, #12]
 800dbfc:	b13d      	cbz	r5, 800dc0e <_Bfree+0x2c>
 800dbfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dc00:	686a      	ldr	r2, [r5, #4]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc08:	6029      	str	r1, [r5, #0]
 800dc0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dc0e:	bd70      	pop	{r4, r5, r6, pc}

0800dc10 <__multadd>:
 800dc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc14:	690d      	ldr	r5, [r1, #16]
 800dc16:	461f      	mov	r7, r3
 800dc18:	4606      	mov	r6, r0
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	f101 0c14 	add.w	ip, r1, #20
 800dc20:	2300      	movs	r3, #0
 800dc22:	f8dc 0000 	ldr.w	r0, [ip]
 800dc26:	b281      	uxth	r1, r0
 800dc28:	fb02 7101 	mla	r1, r2, r1, r7
 800dc2c:	0c0f      	lsrs	r7, r1, #16
 800dc2e:	0c00      	lsrs	r0, r0, #16
 800dc30:	fb02 7000 	mla	r0, r2, r0, r7
 800dc34:	b289      	uxth	r1, r1
 800dc36:	3301      	adds	r3, #1
 800dc38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dc3c:	429d      	cmp	r5, r3
 800dc3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dc42:	f84c 1b04 	str.w	r1, [ip], #4
 800dc46:	dcec      	bgt.n	800dc22 <__multadd+0x12>
 800dc48:	b1d7      	cbz	r7, 800dc80 <__multadd+0x70>
 800dc4a:	68a3      	ldr	r3, [r4, #8]
 800dc4c:	42ab      	cmp	r3, r5
 800dc4e:	dc12      	bgt.n	800dc76 <__multadd+0x66>
 800dc50:	6861      	ldr	r1, [r4, #4]
 800dc52:	4630      	mov	r0, r6
 800dc54:	3101      	adds	r1, #1
 800dc56:	f7ff ff90 	bl	800db7a <_Balloc>
 800dc5a:	6922      	ldr	r2, [r4, #16]
 800dc5c:	3202      	adds	r2, #2
 800dc5e:	f104 010c 	add.w	r1, r4, #12
 800dc62:	4680      	mov	r8, r0
 800dc64:	0092      	lsls	r2, r2, #2
 800dc66:	300c      	adds	r0, #12
 800dc68:	f7ff ff7a 	bl	800db60 <memcpy>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f7ff ffb7 	bl	800dbe2 <_Bfree>
 800dc74:	4644      	mov	r4, r8
 800dc76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc7a:	3501      	adds	r5, #1
 800dc7c:	615f      	str	r7, [r3, #20]
 800dc7e:	6125      	str	r5, [r4, #16]
 800dc80:	4620      	mov	r0, r4
 800dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc86 <__s2b>:
 800dc86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	4615      	mov	r5, r2
 800dc8e:	461f      	mov	r7, r3
 800dc90:	2209      	movs	r2, #9
 800dc92:	3308      	adds	r3, #8
 800dc94:	4606      	mov	r6, r0
 800dc96:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	db20      	blt.n	800dce4 <__s2b+0x5e>
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7ff ff69 	bl	800db7a <_Balloc>
 800dca8:	9b08      	ldr	r3, [sp, #32]
 800dcaa:	6143      	str	r3, [r0, #20]
 800dcac:	2d09      	cmp	r5, #9
 800dcae:	f04f 0301 	mov.w	r3, #1
 800dcb2:	6103      	str	r3, [r0, #16]
 800dcb4:	dd19      	ble.n	800dcea <__s2b+0x64>
 800dcb6:	f104 0809 	add.w	r8, r4, #9
 800dcba:	46c1      	mov	r9, r8
 800dcbc:	442c      	add	r4, r5
 800dcbe:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	3b30      	subs	r3, #48	; 0x30
 800dcc6:	220a      	movs	r2, #10
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f7ff ffa1 	bl	800dc10 <__multadd>
 800dcce:	45a1      	cmp	r9, r4
 800dcd0:	d1f5      	bne.n	800dcbe <__s2b+0x38>
 800dcd2:	eb08 0405 	add.w	r4, r8, r5
 800dcd6:	3c08      	subs	r4, #8
 800dcd8:	1b2d      	subs	r5, r5, r4
 800dcda:	1963      	adds	r3, r4, r5
 800dcdc:	42bb      	cmp	r3, r7
 800dcde:	db07      	blt.n	800dcf0 <__s2b+0x6a>
 800dce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dce4:	0052      	lsls	r2, r2, #1
 800dce6:	3101      	adds	r1, #1
 800dce8:	e7d9      	b.n	800dc9e <__s2b+0x18>
 800dcea:	340a      	adds	r4, #10
 800dcec:	2509      	movs	r5, #9
 800dcee:	e7f3      	b.n	800dcd8 <__s2b+0x52>
 800dcf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dcf4:	4601      	mov	r1, r0
 800dcf6:	3b30      	subs	r3, #48	; 0x30
 800dcf8:	220a      	movs	r2, #10
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	f7ff ff88 	bl	800dc10 <__multadd>
 800dd00:	e7eb      	b.n	800dcda <__s2b+0x54>

0800dd02 <__hi0bits>:
 800dd02:	0c02      	lsrs	r2, r0, #16
 800dd04:	0412      	lsls	r2, r2, #16
 800dd06:	4603      	mov	r3, r0
 800dd08:	b9b2      	cbnz	r2, 800dd38 <__hi0bits+0x36>
 800dd0a:	0403      	lsls	r3, r0, #16
 800dd0c:	2010      	movs	r0, #16
 800dd0e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dd12:	bf04      	itt	eq
 800dd14:	021b      	lsleq	r3, r3, #8
 800dd16:	3008      	addeq	r0, #8
 800dd18:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dd1c:	bf04      	itt	eq
 800dd1e:	011b      	lsleq	r3, r3, #4
 800dd20:	3004      	addeq	r0, #4
 800dd22:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dd26:	bf04      	itt	eq
 800dd28:	009b      	lsleq	r3, r3, #2
 800dd2a:	3002      	addeq	r0, #2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	db06      	blt.n	800dd3e <__hi0bits+0x3c>
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	d503      	bpl.n	800dd3c <__hi0bits+0x3a>
 800dd34:	3001      	adds	r0, #1
 800dd36:	4770      	bx	lr
 800dd38:	2000      	movs	r0, #0
 800dd3a:	e7e8      	b.n	800dd0e <__hi0bits+0xc>
 800dd3c:	2020      	movs	r0, #32
 800dd3e:	4770      	bx	lr

0800dd40 <__lo0bits>:
 800dd40:	6803      	ldr	r3, [r0, #0]
 800dd42:	f013 0207 	ands.w	r2, r3, #7
 800dd46:	4601      	mov	r1, r0
 800dd48:	d00b      	beq.n	800dd62 <__lo0bits+0x22>
 800dd4a:	07da      	lsls	r2, r3, #31
 800dd4c:	d423      	bmi.n	800dd96 <__lo0bits+0x56>
 800dd4e:	0798      	lsls	r0, r3, #30
 800dd50:	bf49      	itett	mi
 800dd52:	085b      	lsrmi	r3, r3, #1
 800dd54:	089b      	lsrpl	r3, r3, #2
 800dd56:	2001      	movmi	r0, #1
 800dd58:	600b      	strmi	r3, [r1, #0]
 800dd5a:	bf5c      	itt	pl
 800dd5c:	600b      	strpl	r3, [r1, #0]
 800dd5e:	2002      	movpl	r0, #2
 800dd60:	4770      	bx	lr
 800dd62:	b298      	uxth	r0, r3
 800dd64:	b9a8      	cbnz	r0, 800dd92 <__lo0bits+0x52>
 800dd66:	0c1b      	lsrs	r3, r3, #16
 800dd68:	2010      	movs	r0, #16
 800dd6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dd6e:	bf04      	itt	eq
 800dd70:	0a1b      	lsreq	r3, r3, #8
 800dd72:	3008      	addeq	r0, #8
 800dd74:	071a      	lsls	r2, r3, #28
 800dd76:	bf04      	itt	eq
 800dd78:	091b      	lsreq	r3, r3, #4
 800dd7a:	3004      	addeq	r0, #4
 800dd7c:	079a      	lsls	r2, r3, #30
 800dd7e:	bf04      	itt	eq
 800dd80:	089b      	lsreq	r3, r3, #2
 800dd82:	3002      	addeq	r0, #2
 800dd84:	07da      	lsls	r2, r3, #31
 800dd86:	d402      	bmi.n	800dd8e <__lo0bits+0x4e>
 800dd88:	085b      	lsrs	r3, r3, #1
 800dd8a:	d006      	beq.n	800dd9a <__lo0bits+0x5a>
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	600b      	str	r3, [r1, #0]
 800dd90:	4770      	bx	lr
 800dd92:	4610      	mov	r0, r2
 800dd94:	e7e9      	b.n	800dd6a <__lo0bits+0x2a>
 800dd96:	2000      	movs	r0, #0
 800dd98:	4770      	bx	lr
 800dd9a:	2020      	movs	r0, #32
 800dd9c:	4770      	bx	lr

0800dd9e <__i2b>:
 800dd9e:	b510      	push	{r4, lr}
 800dda0:	460c      	mov	r4, r1
 800dda2:	2101      	movs	r1, #1
 800dda4:	f7ff fee9 	bl	800db7a <_Balloc>
 800dda8:	2201      	movs	r2, #1
 800ddaa:	6144      	str	r4, [r0, #20]
 800ddac:	6102      	str	r2, [r0, #16]
 800ddae:	bd10      	pop	{r4, pc}

0800ddb0 <__multiply>:
 800ddb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	690a      	ldr	r2, [r1, #16]
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	bfb8      	it	lt
 800ddbe:	460b      	movlt	r3, r1
 800ddc0:	4688      	mov	r8, r1
 800ddc2:	bfbc      	itt	lt
 800ddc4:	46a0      	movlt	r8, r4
 800ddc6:	461c      	movlt	r4, r3
 800ddc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ddcc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ddd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ddd8:	eb07 0609 	add.w	r6, r7, r9
 800dddc:	42b3      	cmp	r3, r6
 800ddde:	bfb8      	it	lt
 800dde0:	3101      	addlt	r1, #1
 800dde2:	f7ff feca 	bl	800db7a <_Balloc>
 800dde6:	f100 0514 	add.w	r5, r0, #20
 800ddea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ddee:	462b      	mov	r3, r5
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	4573      	cmp	r3, lr
 800ddf4:	d316      	bcc.n	800de24 <__multiply+0x74>
 800ddf6:	f104 0214 	add.w	r2, r4, #20
 800ddfa:	f108 0114 	add.w	r1, r8, #20
 800ddfe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800de02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800de06:	9300      	str	r3, [sp, #0]
 800de08:	9b00      	ldr	r3, [sp, #0]
 800de0a:	9201      	str	r2, [sp, #4]
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d80c      	bhi.n	800de2a <__multiply+0x7a>
 800de10:	2e00      	cmp	r6, #0
 800de12:	dd03      	ble.n	800de1c <__multiply+0x6c>
 800de14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d05d      	beq.n	800ded8 <__multiply+0x128>
 800de1c:	6106      	str	r6, [r0, #16]
 800de1e:	b003      	add	sp, #12
 800de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de24:	f843 2b04 	str.w	r2, [r3], #4
 800de28:	e7e3      	b.n	800ddf2 <__multiply+0x42>
 800de2a:	f8b2 b000 	ldrh.w	fp, [r2]
 800de2e:	f1bb 0f00 	cmp.w	fp, #0
 800de32:	d023      	beq.n	800de7c <__multiply+0xcc>
 800de34:	4689      	mov	r9, r1
 800de36:	46ac      	mov	ip, r5
 800de38:	f04f 0800 	mov.w	r8, #0
 800de3c:	f859 4b04 	ldr.w	r4, [r9], #4
 800de40:	f8dc a000 	ldr.w	sl, [ip]
 800de44:	b2a3      	uxth	r3, r4
 800de46:	fa1f fa8a 	uxth.w	sl, sl
 800de4a:	fb0b a303 	mla	r3, fp, r3, sl
 800de4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800de52:	f8dc 4000 	ldr.w	r4, [ip]
 800de56:	4443      	add	r3, r8
 800de58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800de5c:	fb0b 840a 	mla	r4, fp, sl, r8
 800de60:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800de64:	46e2      	mov	sl, ip
 800de66:	b29b      	uxth	r3, r3
 800de68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800de6c:	454f      	cmp	r7, r9
 800de6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800de72:	f84a 3b04 	str.w	r3, [sl], #4
 800de76:	d82b      	bhi.n	800ded0 <__multiply+0x120>
 800de78:	f8cc 8004 	str.w	r8, [ip, #4]
 800de7c:	9b01      	ldr	r3, [sp, #4]
 800de7e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800de82:	3204      	adds	r2, #4
 800de84:	f1ba 0f00 	cmp.w	sl, #0
 800de88:	d020      	beq.n	800decc <__multiply+0x11c>
 800de8a:	682b      	ldr	r3, [r5, #0]
 800de8c:	4689      	mov	r9, r1
 800de8e:	46a8      	mov	r8, r5
 800de90:	f04f 0b00 	mov.w	fp, #0
 800de94:	f8b9 c000 	ldrh.w	ip, [r9]
 800de98:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800de9c:	fb0a 440c 	mla	r4, sl, ip, r4
 800dea0:	445c      	add	r4, fp
 800dea2:	46c4      	mov	ip, r8
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800deaa:	f84c 3b04 	str.w	r3, [ip], #4
 800deae:	f859 3b04 	ldr.w	r3, [r9], #4
 800deb2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800deb6:	0c1b      	lsrs	r3, r3, #16
 800deb8:	fb0a b303 	mla	r3, sl, r3, fp
 800debc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dec0:	454f      	cmp	r7, r9
 800dec2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dec6:	d805      	bhi.n	800ded4 <__multiply+0x124>
 800dec8:	f8c8 3004 	str.w	r3, [r8, #4]
 800decc:	3504      	adds	r5, #4
 800dece:	e79b      	b.n	800de08 <__multiply+0x58>
 800ded0:	46d4      	mov	ip, sl
 800ded2:	e7b3      	b.n	800de3c <__multiply+0x8c>
 800ded4:	46e0      	mov	r8, ip
 800ded6:	e7dd      	b.n	800de94 <__multiply+0xe4>
 800ded8:	3e01      	subs	r6, #1
 800deda:	e799      	b.n	800de10 <__multiply+0x60>

0800dedc <__pow5mult>:
 800dedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee0:	4615      	mov	r5, r2
 800dee2:	f012 0203 	ands.w	r2, r2, #3
 800dee6:	4606      	mov	r6, r0
 800dee8:	460f      	mov	r7, r1
 800deea:	d007      	beq.n	800defc <__pow5mult+0x20>
 800deec:	3a01      	subs	r2, #1
 800deee:	4c21      	ldr	r4, [pc, #132]	; (800df74 <__pow5mult+0x98>)
 800def0:	2300      	movs	r3, #0
 800def2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800def6:	f7ff fe8b 	bl	800dc10 <__multadd>
 800defa:	4607      	mov	r7, r0
 800defc:	10ad      	asrs	r5, r5, #2
 800defe:	d035      	beq.n	800df6c <__pow5mult+0x90>
 800df00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800df02:	b93c      	cbnz	r4, 800df14 <__pow5mult+0x38>
 800df04:	2010      	movs	r0, #16
 800df06:	f7fc fe9b 	bl	800ac40 <malloc>
 800df0a:	6270      	str	r0, [r6, #36]	; 0x24
 800df0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df10:	6004      	str	r4, [r0, #0]
 800df12:	60c4      	str	r4, [r0, #12]
 800df14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800df18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df1c:	b94c      	cbnz	r4, 800df32 <__pow5mult+0x56>
 800df1e:	f240 2171 	movw	r1, #625	; 0x271
 800df22:	4630      	mov	r0, r6
 800df24:	f7ff ff3b 	bl	800dd9e <__i2b>
 800df28:	2300      	movs	r3, #0
 800df2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800df2e:	4604      	mov	r4, r0
 800df30:	6003      	str	r3, [r0, #0]
 800df32:	f04f 0800 	mov.w	r8, #0
 800df36:	07eb      	lsls	r3, r5, #31
 800df38:	d50a      	bpl.n	800df50 <__pow5mult+0x74>
 800df3a:	4639      	mov	r1, r7
 800df3c:	4622      	mov	r2, r4
 800df3e:	4630      	mov	r0, r6
 800df40:	f7ff ff36 	bl	800ddb0 <__multiply>
 800df44:	4639      	mov	r1, r7
 800df46:	4681      	mov	r9, r0
 800df48:	4630      	mov	r0, r6
 800df4a:	f7ff fe4a 	bl	800dbe2 <_Bfree>
 800df4e:	464f      	mov	r7, r9
 800df50:	106d      	asrs	r5, r5, #1
 800df52:	d00b      	beq.n	800df6c <__pow5mult+0x90>
 800df54:	6820      	ldr	r0, [r4, #0]
 800df56:	b938      	cbnz	r0, 800df68 <__pow5mult+0x8c>
 800df58:	4622      	mov	r2, r4
 800df5a:	4621      	mov	r1, r4
 800df5c:	4630      	mov	r0, r6
 800df5e:	f7ff ff27 	bl	800ddb0 <__multiply>
 800df62:	6020      	str	r0, [r4, #0]
 800df64:	f8c0 8000 	str.w	r8, [r0]
 800df68:	4604      	mov	r4, r0
 800df6a:	e7e4      	b.n	800df36 <__pow5mult+0x5a>
 800df6c:	4638      	mov	r0, r7
 800df6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df72:	bf00      	nop
 800df74:	0800eaa0 	.word	0x0800eaa0

0800df78 <__lshift>:
 800df78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df7c:	460c      	mov	r4, r1
 800df7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df82:	6923      	ldr	r3, [r4, #16]
 800df84:	6849      	ldr	r1, [r1, #4]
 800df86:	eb0a 0903 	add.w	r9, sl, r3
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	4607      	mov	r7, r0
 800df8e:	4616      	mov	r6, r2
 800df90:	f109 0501 	add.w	r5, r9, #1
 800df94:	42ab      	cmp	r3, r5
 800df96:	db32      	blt.n	800dffe <__lshift+0x86>
 800df98:	4638      	mov	r0, r7
 800df9a:	f7ff fdee 	bl	800db7a <_Balloc>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	4680      	mov	r8, r0
 800dfa2:	f100 0114 	add.w	r1, r0, #20
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	4553      	cmp	r3, sl
 800dfaa:	db2b      	blt.n	800e004 <__lshift+0x8c>
 800dfac:	6920      	ldr	r0, [r4, #16]
 800dfae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfb2:	f104 0314 	add.w	r3, r4, #20
 800dfb6:	f016 021f 	ands.w	r2, r6, #31
 800dfba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dfc2:	d025      	beq.n	800e010 <__lshift+0x98>
 800dfc4:	f1c2 0e20 	rsb	lr, r2, #32
 800dfc8:	2000      	movs	r0, #0
 800dfca:	681e      	ldr	r6, [r3, #0]
 800dfcc:	468a      	mov	sl, r1
 800dfce:	4096      	lsls	r6, r2
 800dfd0:	4330      	orrs	r0, r6
 800dfd2:	f84a 0b04 	str.w	r0, [sl], #4
 800dfd6:	f853 0b04 	ldr.w	r0, [r3], #4
 800dfda:	459c      	cmp	ip, r3
 800dfdc:	fa20 f00e 	lsr.w	r0, r0, lr
 800dfe0:	d814      	bhi.n	800e00c <__lshift+0x94>
 800dfe2:	6048      	str	r0, [r1, #4]
 800dfe4:	b108      	cbz	r0, 800dfea <__lshift+0x72>
 800dfe6:	f109 0502 	add.w	r5, r9, #2
 800dfea:	3d01      	subs	r5, #1
 800dfec:	4638      	mov	r0, r7
 800dfee:	f8c8 5010 	str.w	r5, [r8, #16]
 800dff2:	4621      	mov	r1, r4
 800dff4:	f7ff fdf5 	bl	800dbe2 <_Bfree>
 800dff8:	4640      	mov	r0, r8
 800dffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dffe:	3101      	adds	r1, #1
 800e000:	005b      	lsls	r3, r3, #1
 800e002:	e7c7      	b.n	800df94 <__lshift+0x1c>
 800e004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e008:	3301      	adds	r3, #1
 800e00a:	e7cd      	b.n	800dfa8 <__lshift+0x30>
 800e00c:	4651      	mov	r1, sl
 800e00e:	e7dc      	b.n	800dfca <__lshift+0x52>
 800e010:	3904      	subs	r1, #4
 800e012:	f853 2b04 	ldr.w	r2, [r3], #4
 800e016:	f841 2f04 	str.w	r2, [r1, #4]!
 800e01a:	459c      	cmp	ip, r3
 800e01c:	d8f9      	bhi.n	800e012 <__lshift+0x9a>
 800e01e:	e7e4      	b.n	800dfea <__lshift+0x72>

0800e020 <__mcmp>:
 800e020:	6903      	ldr	r3, [r0, #16]
 800e022:	690a      	ldr	r2, [r1, #16]
 800e024:	1a9b      	subs	r3, r3, r2
 800e026:	b530      	push	{r4, r5, lr}
 800e028:	d10c      	bne.n	800e044 <__mcmp+0x24>
 800e02a:	0092      	lsls	r2, r2, #2
 800e02c:	3014      	adds	r0, #20
 800e02e:	3114      	adds	r1, #20
 800e030:	1884      	adds	r4, r0, r2
 800e032:	4411      	add	r1, r2
 800e034:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e038:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e03c:	4295      	cmp	r5, r2
 800e03e:	d003      	beq.n	800e048 <__mcmp+0x28>
 800e040:	d305      	bcc.n	800e04e <__mcmp+0x2e>
 800e042:	2301      	movs	r3, #1
 800e044:	4618      	mov	r0, r3
 800e046:	bd30      	pop	{r4, r5, pc}
 800e048:	42a0      	cmp	r0, r4
 800e04a:	d3f3      	bcc.n	800e034 <__mcmp+0x14>
 800e04c:	e7fa      	b.n	800e044 <__mcmp+0x24>
 800e04e:	f04f 33ff 	mov.w	r3, #4294967295
 800e052:	e7f7      	b.n	800e044 <__mcmp+0x24>

0800e054 <__mdiff>:
 800e054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e058:	460d      	mov	r5, r1
 800e05a:	4607      	mov	r7, r0
 800e05c:	4611      	mov	r1, r2
 800e05e:	4628      	mov	r0, r5
 800e060:	4614      	mov	r4, r2
 800e062:	f7ff ffdd 	bl	800e020 <__mcmp>
 800e066:	1e06      	subs	r6, r0, #0
 800e068:	d108      	bne.n	800e07c <__mdiff+0x28>
 800e06a:	4631      	mov	r1, r6
 800e06c:	4638      	mov	r0, r7
 800e06e:	f7ff fd84 	bl	800db7a <_Balloc>
 800e072:	2301      	movs	r3, #1
 800e074:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e07c:	bfa4      	itt	ge
 800e07e:	4623      	movge	r3, r4
 800e080:	462c      	movge	r4, r5
 800e082:	4638      	mov	r0, r7
 800e084:	6861      	ldr	r1, [r4, #4]
 800e086:	bfa6      	itte	ge
 800e088:	461d      	movge	r5, r3
 800e08a:	2600      	movge	r6, #0
 800e08c:	2601      	movlt	r6, #1
 800e08e:	f7ff fd74 	bl	800db7a <_Balloc>
 800e092:	692b      	ldr	r3, [r5, #16]
 800e094:	60c6      	str	r6, [r0, #12]
 800e096:	6926      	ldr	r6, [r4, #16]
 800e098:	f105 0914 	add.w	r9, r5, #20
 800e09c:	f104 0214 	add.w	r2, r4, #20
 800e0a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e0a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e0a8:	f100 0514 	add.w	r5, r0, #20
 800e0ac:	f04f 0e00 	mov.w	lr, #0
 800e0b0:	f852 ab04 	ldr.w	sl, [r2], #4
 800e0b4:	f859 4b04 	ldr.w	r4, [r9], #4
 800e0b8:	fa1e f18a 	uxtah	r1, lr, sl
 800e0bc:	b2a3      	uxth	r3, r4
 800e0be:	1ac9      	subs	r1, r1, r3
 800e0c0:	0c23      	lsrs	r3, r4, #16
 800e0c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e0c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e0ca:	b289      	uxth	r1, r1
 800e0cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e0d0:	45c8      	cmp	r8, r9
 800e0d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e0d6:	4694      	mov	ip, r2
 800e0d8:	f845 3b04 	str.w	r3, [r5], #4
 800e0dc:	d8e8      	bhi.n	800e0b0 <__mdiff+0x5c>
 800e0de:	45bc      	cmp	ip, r7
 800e0e0:	d304      	bcc.n	800e0ec <__mdiff+0x98>
 800e0e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e0e6:	b183      	cbz	r3, 800e10a <__mdiff+0xb6>
 800e0e8:	6106      	str	r6, [r0, #16]
 800e0ea:	e7c5      	b.n	800e078 <__mdiff+0x24>
 800e0ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e0f0:	fa1e f381 	uxtah	r3, lr, r1
 800e0f4:	141a      	asrs	r2, r3, #16
 800e0f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e100:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e104:	f845 3b04 	str.w	r3, [r5], #4
 800e108:	e7e9      	b.n	800e0de <__mdiff+0x8a>
 800e10a:	3e01      	subs	r6, #1
 800e10c:	e7e9      	b.n	800e0e2 <__mdiff+0x8e>
	...

0800e110 <__ulp>:
 800e110:	4b12      	ldr	r3, [pc, #72]	; (800e15c <__ulp+0x4c>)
 800e112:	ee10 2a90 	vmov	r2, s1
 800e116:	401a      	ands	r2, r3
 800e118:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	dd04      	ble.n	800e12a <__ulp+0x1a>
 800e120:	2000      	movs	r0, #0
 800e122:	4619      	mov	r1, r3
 800e124:	ec41 0b10 	vmov	d0, r0, r1
 800e128:	4770      	bx	lr
 800e12a:	425b      	negs	r3, r3
 800e12c:	151b      	asrs	r3, r3, #20
 800e12e:	2b13      	cmp	r3, #19
 800e130:	f04f 0000 	mov.w	r0, #0
 800e134:	f04f 0100 	mov.w	r1, #0
 800e138:	dc04      	bgt.n	800e144 <__ulp+0x34>
 800e13a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e13e:	fa42 f103 	asr.w	r1, r2, r3
 800e142:	e7ef      	b.n	800e124 <__ulp+0x14>
 800e144:	3b14      	subs	r3, #20
 800e146:	2b1e      	cmp	r3, #30
 800e148:	f04f 0201 	mov.w	r2, #1
 800e14c:	bfda      	itte	le
 800e14e:	f1c3 031f 	rsble	r3, r3, #31
 800e152:	fa02 f303 	lslle.w	r3, r2, r3
 800e156:	4613      	movgt	r3, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	e7e3      	b.n	800e124 <__ulp+0x14>
 800e15c:	7ff00000 	.word	0x7ff00000

0800e160 <__b2d>:
 800e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e162:	6905      	ldr	r5, [r0, #16]
 800e164:	f100 0714 	add.w	r7, r0, #20
 800e168:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e16c:	1f2e      	subs	r6, r5, #4
 800e16e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e172:	4620      	mov	r0, r4
 800e174:	f7ff fdc5 	bl	800dd02 <__hi0bits>
 800e178:	f1c0 0320 	rsb	r3, r0, #32
 800e17c:	280a      	cmp	r0, #10
 800e17e:	600b      	str	r3, [r1, #0]
 800e180:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e1f8 <__b2d+0x98>
 800e184:	dc14      	bgt.n	800e1b0 <__b2d+0x50>
 800e186:	f1c0 0e0b 	rsb	lr, r0, #11
 800e18a:	fa24 f10e 	lsr.w	r1, r4, lr
 800e18e:	42b7      	cmp	r7, r6
 800e190:	ea41 030c 	orr.w	r3, r1, ip
 800e194:	bf34      	ite	cc
 800e196:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e19a:	2100      	movcs	r1, #0
 800e19c:	3015      	adds	r0, #21
 800e19e:	fa04 f000 	lsl.w	r0, r4, r0
 800e1a2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e1a6:	ea40 0201 	orr.w	r2, r0, r1
 800e1aa:	ec43 2b10 	vmov	d0, r2, r3
 800e1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b0:	42b7      	cmp	r7, r6
 800e1b2:	bf3a      	itte	cc
 800e1b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800e1b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e1bc:	2100      	movcs	r1, #0
 800e1be:	380b      	subs	r0, #11
 800e1c0:	d015      	beq.n	800e1ee <__b2d+0x8e>
 800e1c2:	4084      	lsls	r4, r0
 800e1c4:	f1c0 0520 	rsb	r5, r0, #32
 800e1c8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e1cc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e1d0:	42be      	cmp	r6, r7
 800e1d2:	fa21 fc05 	lsr.w	ip, r1, r5
 800e1d6:	ea44 030c 	orr.w	r3, r4, ip
 800e1da:	bf8c      	ite	hi
 800e1dc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e1e0:	2400      	movls	r4, #0
 800e1e2:	fa01 f000 	lsl.w	r0, r1, r0
 800e1e6:	40ec      	lsrs	r4, r5
 800e1e8:	ea40 0204 	orr.w	r2, r0, r4
 800e1ec:	e7dd      	b.n	800e1aa <__b2d+0x4a>
 800e1ee:	ea44 030c 	orr.w	r3, r4, ip
 800e1f2:	460a      	mov	r2, r1
 800e1f4:	e7d9      	b.n	800e1aa <__b2d+0x4a>
 800e1f6:	bf00      	nop
 800e1f8:	3ff00000 	.word	0x3ff00000

0800e1fc <__d2b>:
 800e1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e200:	460e      	mov	r6, r1
 800e202:	2101      	movs	r1, #1
 800e204:	ec59 8b10 	vmov	r8, r9, d0
 800e208:	4615      	mov	r5, r2
 800e20a:	f7ff fcb6 	bl	800db7a <_Balloc>
 800e20e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e212:	4607      	mov	r7, r0
 800e214:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e218:	bb34      	cbnz	r4, 800e268 <__d2b+0x6c>
 800e21a:	9301      	str	r3, [sp, #4]
 800e21c:	f1b8 0300 	subs.w	r3, r8, #0
 800e220:	d027      	beq.n	800e272 <__d2b+0x76>
 800e222:	a802      	add	r0, sp, #8
 800e224:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e228:	f7ff fd8a 	bl	800dd40 <__lo0bits>
 800e22c:	9900      	ldr	r1, [sp, #0]
 800e22e:	b1f0      	cbz	r0, 800e26e <__d2b+0x72>
 800e230:	9a01      	ldr	r2, [sp, #4]
 800e232:	f1c0 0320 	rsb	r3, r0, #32
 800e236:	fa02 f303 	lsl.w	r3, r2, r3
 800e23a:	430b      	orrs	r3, r1
 800e23c:	40c2      	lsrs	r2, r0
 800e23e:	617b      	str	r3, [r7, #20]
 800e240:	9201      	str	r2, [sp, #4]
 800e242:	9b01      	ldr	r3, [sp, #4]
 800e244:	61bb      	str	r3, [r7, #24]
 800e246:	2b00      	cmp	r3, #0
 800e248:	bf14      	ite	ne
 800e24a:	2102      	movne	r1, #2
 800e24c:	2101      	moveq	r1, #1
 800e24e:	6139      	str	r1, [r7, #16]
 800e250:	b1c4      	cbz	r4, 800e284 <__d2b+0x88>
 800e252:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e256:	4404      	add	r4, r0
 800e258:	6034      	str	r4, [r6, #0]
 800e25a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e25e:	6028      	str	r0, [r5, #0]
 800e260:	4638      	mov	r0, r7
 800e262:	b003      	add	sp, #12
 800e264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e26c:	e7d5      	b.n	800e21a <__d2b+0x1e>
 800e26e:	6179      	str	r1, [r7, #20]
 800e270:	e7e7      	b.n	800e242 <__d2b+0x46>
 800e272:	a801      	add	r0, sp, #4
 800e274:	f7ff fd64 	bl	800dd40 <__lo0bits>
 800e278:	9b01      	ldr	r3, [sp, #4]
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	2101      	movs	r1, #1
 800e27e:	6139      	str	r1, [r7, #16]
 800e280:	3020      	adds	r0, #32
 800e282:	e7e5      	b.n	800e250 <__d2b+0x54>
 800e284:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e288:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e28c:	6030      	str	r0, [r6, #0]
 800e28e:	6918      	ldr	r0, [r3, #16]
 800e290:	f7ff fd37 	bl	800dd02 <__hi0bits>
 800e294:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e298:	e7e1      	b.n	800e25e <__d2b+0x62>

0800e29a <__ratio>:
 800e29a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29e:	4688      	mov	r8, r1
 800e2a0:	4669      	mov	r1, sp
 800e2a2:	4681      	mov	r9, r0
 800e2a4:	f7ff ff5c 	bl	800e160 <__b2d>
 800e2a8:	a901      	add	r1, sp, #4
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	ec57 6b10 	vmov	r6, r7, d0
 800e2b0:	f7ff ff56 	bl	800e160 <__b2d>
 800e2b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e2bc:	eba3 0c02 	sub.w	ip, r3, r2
 800e2c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e2c4:	1a9b      	subs	r3, r3, r2
 800e2c6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e2ca:	ec5b ab10 	vmov	sl, fp, d0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfce      	itee	gt
 800e2d2:	463a      	movgt	r2, r7
 800e2d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e2d8:	465a      	movle	r2, fp
 800e2da:	4659      	mov	r1, fp
 800e2dc:	463d      	mov	r5, r7
 800e2de:	bfd4      	ite	le
 800e2e0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e2e4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	ee10 2a10 	vmov	r2, s0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	f7f2 faab 	bl	800084c <__aeabi_ddiv>
 800e2f6:	ec41 0b10 	vmov	d0, r0, r1
 800e2fa:	b003      	add	sp, #12
 800e2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e300 <__copybits>:
 800e300:	3901      	subs	r1, #1
 800e302:	b510      	push	{r4, lr}
 800e304:	1149      	asrs	r1, r1, #5
 800e306:	6914      	ldr	r4, [r2, #16]
 800e308:	3101      	adds	r1, #1
 800e30a:	f102 0314 	add.w	r3, r2, #20
 800e30e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e312:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e316:	42a3      	cmp	r3, r4
 800e318:	4602      	mov	r2, r0
 800e31a:	d303      	bcc.n	800e324 <__copybits+0x24>
 800e31c:	2300      	movs	r3, #0
 800e31e:	428a      	cmp	r2, r1
 800e320:	d305      	bcc.n	800e32e <__copybits+0x2e>
 800e322:	bd10      	pop	{r4, pc}
 800e324:	f853 2b04 	ldr.w	r2, [r3], #4
 800e328:	f840 2b04 	str.w	r2, [r0], #4
 800e32c:	e7f3      	b.n	800e316 <__copybits+0x16>
 800e32e:	f842 3b04 	str.w	r3, [r2], #4
 800e332:	e7f4      	b.n	800e31e <__copybits+0x1e>

0800e334 <__any_on>:
 800e334:	f100 0214 	add.w	r2, r0, #20
 800e338:	6900      	ldr	r0, [r0, #16]
 800e33a:	114b      	asrs	r3, r1, #5
 800e33c:	4298      	cmp	r0, r3
 800e33e:	b510      	push	{r4, lr}
 800e340:	db11      	blt.n	800e366 <__any_on+0x32>
 800e342:	dd0a      	ble.n	800e35a <__any_on+0x26>
 800e344:	f011 011f 	ands.w	r1, r1, #31
 800e348:	d007      	beq.n	800e35a <__any_on+0x26>
 800e34a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e34e:	fa24 f001 	lsr.w	r0, r4, r1
 800e352:	fa00 f101 	lsl.w	r1, r0, r1
 800e356:	428c      	cmp	r4, r1
 800e358:	d10b      	bne.n	800e372 <__any_on+0x3e>
 800e35a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e35e:	4293      	cmp	r3, r2
 800e360:	d803      	bhi.n	800e36a <__any_on+0x36>
 800e362:	2000      	movs	r0, #0
 800e364:	bd10      	pop	{r4, pc}
 800e366:	4603      	mov	r3, r0
 800e368:	e7f7      	b.n	800e35a <__any_on+0x26>
 800e36a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e36e:	2900      	cmp	r1, #0
 800e370:	d0f5      	beq.n	800e35e <__any_on+0x2a>
 800e372:	2001      	movs	r0, #1
 800e374:	e7f6      	b.n	800e364 <__any_on+0x30>

0800e376 <_calloc_r>:
 800e376:	b538      	push	{r3, r4, r5, lr}
 800e378:	fb02 f401 	mul.w	r4, r2, r1
 800e37c:	4621      	mov	r1, r4
 800e37e:	f7fc fcc5 	bl	800ad0c <_malloc_r>
 800e382:	4605      	mov	r5, r0
 800e384:	b118      	cbz	r0, 800e38e <_calloc_r+0x18>
 800e386:	4622      	mov	r2, r4
 800e388:	2100      	movs	r1, #0
 800e38a:	f7fc fc69 	bl	800ac60 <memset>
 800e38e:	4628      	mov	r0, r5
 800e390:	bd38      	pop	{r3, r4, r5, pc}

0800e392 <__ssputs_r>:
 800e392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e396:	688e      	ldr	r6, [r1, #8]
 800e398:	429e      	cmp	r6, r3
 800e39a:	4682      	mov	sl, r0
 800e39c:	460c      	mov	r4, r1
 800e39e:	4690      	mov	r8, r2
 800e3a0:	4699      	mov	r9, r3
 800e3a2:	d837      	bhi.n	800e414 <__ssputs_r+0x82>
 800e3a4:	898a      	ldrh	r2, [r1, #12]
 800e3a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3aa:	d031      	beq.n	800e410 <__ssputs_r+0x7e>
 800e3ac:	6825      	ldr	r5, [r4, #0]
 800e3ae:	6909      	ldr	r1, [r1, #16]
 800e3b0:	1a6f      	subs	r7, r5, r1
 800e3b2:	6965      	ldr	r5, [r4, #20]
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3ba:	fb95 f5f3 	sdiv	r5, r5, r3
 800e3be:	f109 0301 	add.w	r3, r9, #1
 800e3c2:	443b      	add	r3, r7
 800e3c4:	429d      	cmp	r5, r3
 800e3c6:	bf38      	it	cc
 800e3c8:	461d      	movcc	r5, r3
 800e3ca:	0553      	lsls	r3, r2, #21
 800e3cc:	d530      	bpl.n	800e430 <__ssputs_r+0x9e>
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	f7fc fc9c 	bl	800ad0c <_malloc_r>
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	b950      	cbnz	r0, 800e3ee <__ssputs_r+0x5c>
 800e3d8:	230c      	movs	r3, #12
 800e3da:	f8ca 3000 	str.w	r3, [sl]
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3e4:	81a3      	strh	r3, [r4, #12]
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ee:	463a      	mov	r2, r7
 800e3f0:	6921      	ldr	r1, [r4, #16]
 800e3f2:	f7ff fbb5 	bl	800db60 <memcpy>
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e400:	81a3      	strh	r3, [r4, #12]
 800e402:	6126      	str	r6, [r4, #16]
 800e404:	6165      	str	r5, [r4, #20]
 800e406:	443e      	add	r6, r7
 800e408:	1bed      	subs	r5, r5, r7
 800e40a:	6026      	str	r6, [r4, #0]
 800e40c:	60a5      	str	r5, [r4, #8]
 800e40e:	464e      	mov	r6, r9
 800e410:	454e      	cmp	r6, r9
 800e412:	d900      	bls.n	800e416 <__ssputs_r+0x84>
 800e414:	464e      	mov	r6, r9
 800e416:	4632      	mov	r2, r6
 800e418:	4641      	mov	r1, r8
 800e41a:	6820      	ldr	r0, [r4, #0]
 800e41c:	f000 f92b 	bl	800e676 <memmove>
 800e420:	68a3      	ldr	r3, [r4, #8]
 800e422:	1b9b      	subs	r3, r3, r6
 800e424:	60a3      	str	r3, [r4, #8]
 800e426:	6823      	ldr	r3, [r4, #0]
 800e428:	441e      	add	r6, r3
 800e42a:	6026      	str	r6, [r4, #0]
 800e42c:	2000      	movs	r0, #0
 800e42e:	e7dc      	b.n	800e3ea <__ssputs_r+0x58>
 800e430:	462a      	mov	r2, r5
 800e432:	f000 f939 	bl	800e6a8 <_realloc_r>
 800e436:	4606      	mov	r6, r0
 800e438:	2800      	cmp	r0, #0
 800e43a:	d1e2      	bne.n	800e402 <__ssputs_r+0x70>
 800e43c:	6921      	ldr	r1, [r4, #16]
 800e43e:	4650      	mov	r0, sl
 800e440:	f7fc fc16 	bl	800ac70 <_free_r>
 800e444:	e7c8      	b.n	800e3d8 <__ssputs_r+0x46>
	...

0800e448 <_svfiprintf_r>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	461d      	mov	r5, r3
 800e44e:	898b      	ldrh	r3, [r1, #12]
 800e450:	061f      	lsls	r7, r3, #24
 800e452:	b09d      	sub	sp, #116	; 0x74
 800e454:	4680      	mov	r8, r0
 800e456:	460c      	mov	r4, r1
 800e458:	4616      	mov	r6, r2
 800e45a:	d50f      	bpl.n	800e47c <_svfiprintf_r+0x34>
 800e45c:	690b      	ldr	r3, [r1, #16]
 800e45e:	b96b      	cbnz	r3, 800e47c <_svfiprintf_r+0x34>
 800e460:	2140      	movs	r1, #64	; 0x40
 800e462:	f7fc fc53 	bl	800ad0c <_malloc_r>
 800e466:	6020      	str	r0, [r4, #0]
 800e468:	6120      	str	r0, [r4, #16]
 800e46a:	b928      	cbnz	r0, 800e478 <_svfiprintf_r+0x30>
 800e46c:	230c      	movs	r3, #12
 800e46e:	f8c8 3000 	str.w	r3, [r8]
 800e472:	f04f 30ff 	mov.w	r0, #4294967295
 800e476:	e0c8      	b.n	800e60a <_svfiprintf_r+0x1c2>
 800e478:	2340      	movs	r3, #64	; 0x40
 800e47a:	6163      	str	r3, [r4, #20]
 800e47c:	2300      	movs	r3, #0
 800e47e:	9309      	str	r3, [sp, #36]	; 0x24
 800e480:	2320      	movs	r3, #32
 800e482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e486:	2330      	movs	r3, #48	; 0x30
 800e488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e48c:	9503      	str	r5, [sp, #12]
 800e48e:	f04f 0b01 	mov.w	fp, #1
 800e492:	4637      	mov	r7, r6
 800e494:	463d      	mov	r5, r7
 800e496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e49a:	b10b      	cbz	r3, 800e4a0 <_svfiprintf_r+0x58>
 800e49c:	2b25      	cmp	r3, #37	; 0x25
 800e49e:	d13e      	bne.n	800e51e <_svfiprintf_r+0xd6>
 800e4a0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e4a4:	d00b      	beq.n	800e4be <_svfiprintf_r+0x76>
 800e4a6:	4653      	mov	r3, sl
 800e4a8:	4632      	mov	r2, r6
 800e4aa:	4621      	mov	r1, r4
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	f7ff ff70 	bl	800e392 <__ssputs_r>
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	f000 80a4 	beq.w	800e600 <_svfiprintf_r+0x1b8>
 800e4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ba:	4453      	add	r3, sl
 800e4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e4be:	783b      	ldrb	r3, [r7, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 809d 	beq.w	800e600 <_svfiprintf_r+0x1b8>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4d0:	9304      	str	r3, [sp, #16]
 800e4d2:	9307      	str	r3, [sp, #28]
 800e4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4d8:	931a      	str	r3, [sp, #104]	; 0x68
 800e4da:	462f      	mov	r7, r5
 800e4dc:	2205      	movs	r2, #5
 800e4de:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e4e2:	4850      	ldr	r0, [pc, #320]	; (800e624 <_svfiprintf_r+0x1dc>)
 800e4e4:	f7f1 fe7c 	bl	80001e0 <memchr>
 800e4e8:	9b04      	ldr	r3, [sp, #16]
 800e4ea:	b9d0      	cbnz	r0, 800e522 <_svfiprintf_r+0xda>
 800e4ec:	06d9      	lsls	r1, r3, #27
 800e4ee:	bf44      	itt	mi
 800e4f0:	2220      	movmi	r2, #32
 800e4f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e4f6:	071a      	lsls	r2, r3, #28
 800e4f8:	bf44      	itt	mi
 800e4fa:	222b      	movmi	r2, #43	; 0x2b
 800e4fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e500:	782a      	ldrb	r2, [r5, #0]
 800e502:	2a2a      	cmp	r2, #42	; 0x2a
 800e504:	d015      	beq.n	800e532 <_svfiprintf_r+0xea>
 800e506:	9a07      	ldr	r2, [sp, #28]
 800e508:	462f      	mov	r7, r5
 800e50a:	2000      	movs	r0, #0
 800e50c:	250a      	movs	r5, #10
 800e50e:	4639      	mov	r1, r7
 800e510:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e514:	3b30      	subs	r3, #48	; 0x30
 800e516:	2b09      	cmp	r3, #9
 800e518:	d94d      	bls.n	800e5b6 <_svfiprintf_r+0x16e>
 800e51a:	b1b8      	cbz	r0, 800e54c <_svfiprintf_r+0x104>
 800e51c:	e00f      	b.n	800e53e <_svfiprintf_r+0xf6>
 800e51e:	462f      	mov	r7, r5
 800e520:	e7b8      	b.n	800e494 <_svfiprintf_r+0x4c>
 800e522:	4a40      	ldr	r2, [pc, #256]	; (800e624 <_svfiprintf_r+0x1dc>)
 800e524:	1a80      	subs	r0, r0, r2
 800e526:	fa0b f000 	lsl.w	r0, fp, r0
 800e52a:	4318      	orrs	r0, r3
 800e52c:	9004      	str	r0, [sp, #16]
 800e52e:	463d      	mov	r5, r7
 800e530:	e7d3      	b.n	800e4da <_svfiprintf_r+0x92>
 800e532:	9a03      	ldr	r2, [sp, #12]
 800e534:	1d11      	adds	r1, r2, #4
 800e536:	6812      	ldr	r2, [r2, #0]
 800e538:	9103      	str	r1, [sp, #12]
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	db01      	blt.n	800e542 <_svfiprintf_r+0xfa>
 800e53e:	9207      	str	r2, [sp, #28]
 800e540:	e004      	b.n	800e54c <_svfiprintf_r+0x104>
 800e542:	4252      	negs	r2, r2
 800e544:	f043 0302 	orr.w	r3, r3, #2
 800e548:	9207      	str	r2, [sp, #28]
 800e54a:	9304      	str	r3, [sp, #16]
 800e54c:	783b      	ldrb	r3, [r7, #0]
 800e54e:	2b2e      	cmp	r3, #46	; 0x2e
 800e550:	d10c      	bne.n	800e56c <_svfiprintf_r+0x124>
 800e552:	787b      	ldrb	r3, [r7, #1]
 800e554:	2b2a      	cmp	r3, #42	; 0x2a
 800e556:	d133      	bne.n	800e5c0 <_svfiprintf_r+0x178>
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	1d1a      	adds	r2, r3, #4
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	9203      	str	r2, [sp, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	bfb8      	it	lt
 800e564:	f04f 33ff 	movlt.w	r3, #4294967295
 800e568:	3702      	adds	r7, #2
 800e56a:	9305      	str	r3, [sp, #20]
 800e56c:	4d2e      	ldr	r5, [pc, #184]	; (800e628 <_svfiprintf_r+0x1e0>)
 800e56e:	7839      	ldrb	r1, [r7, #0]
 800e570:	2203      	movs	r2, #3
 800e572:	4628      	mov	r0, r5
 800e574:	f7f1 fe34 	bl	80001e0 <memchr>
 800e578:	b138      	cbz	r0, 800e58a <_svfiprintf_r+0x142>
 800e57a:	2340      	movs	r3, #64	; 0x40
 800e57c:	1b40      	subs	r0, r0, r5
 800e57e:	fa03 f000 	lsl.w	r0, r3, r0
 800e582:	9b04      	ldr	r3, [sp, #16]
 800e584:	4303      	orrs	r3, r0
 800e586:	3701      	adds	r7, #1
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	7839      	ldrb	r1, [r7, #0]
 800e58c:	4827      	ldr	r0, [pc, #156]	; (800e62c <_svfiprintf_r+0x1e4>)
 800e58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e592:	2206      	movs	r2, #6
 800e594:	1c7e      	adds	r6, r7, #1
 800e596:	f7f1 fe23 	bl	80001e0 <memchr>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d038      	beq.n	800e610 <_svfiprintf_r+0x1c8>
 800e59e:	4b24      	ldr	r3, [pc, #144]	; (800e630 <_svfiprintf_r+0x1e8>)
 800e5a0:	bb13      	cbnz	r3, 800e5e8 <_svfiprintf_r+0x1a0>
 800e5a2:	9b03      	ldr	r3, [sp, #12]
 800e5a4:	3307      	adds	r3, #7
 800e5a6:	f023 0307 	bic.w	r3, r3, #7
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	9303      	str	r3, [sp, #12]
 800e5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b0:	444b      	add	r3, r9
 800e5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5b4:	e76d      	b.n	800e492 <_svfiprintf_r+0x4a>
 800e5b6:	fb05 3202 	mla	r2, r5, r2, r3
 800e5ba:	2001      	movs	r0, #1
 800e5bc:	460f      	mov	r7, r1
 800e5be:	e7a6      	b.n	800e50e <_svfiprintf_r+0xc6>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	3701      	adds	r7, #1
 800e5c4:	9305      	str	r3, [sp, #20]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	250a      	movs	r5, #10
 800e5ca:	4638      	mov	r0, r7
 800e5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5d0:	3a30      	subs	r2, #48	; 0x30
 800e5d2:	2a09      	cmp	r2, #9
 800e5d4:	d903      	bls.n	800e5de <_svfiprintf_r+0x196>
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0c8      	beq.n	800e56c <_svfiprintf_r+0x124>
 800e5da:	9105      	str	r1, [sp, #20]
 800e5dc:	e7c6      	b.n	800e56c <_svfiprintf_r+0x124>
 800e5de:	fb05 2101 	mla	r1, r5, r1, r2
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	4607      	mov	r7, r0
 800e5e6:	e7f0      	b.n	800e5ca <_svfiprintf_r+0x182>
 800e5e8:	ab03      	add	r3, sp, #12
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	4622      	mov	r2, r4
 800e5ee:	4b11      	ldr	r3, [pc, #68]	; (800e634 <_svfiprintf_r+0x1ec>)
 800e5f0:	a904      	add	r1, sp, #16
 800e5f2:	4640      	mov	r0, r8
 800e5f4:	f7fc fc78 	bl	800aee8 <_printf_float>
 800e5f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e5fc:	4681      	mov	r9, r0
 800e5fe:	d1d6      	bne.n	800e5ae <_svfiprintf_r+0x166>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	065b      	lsls	r3, r3, #25
 800e604:	f53f af35 	bmi.w	800e472 <_svfiprintf_r+0x2a>
 800e608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e60a:	b01d      	add	sp, #116	; 0x74
 800e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e610:	ab03      	add	r3, sp, #12
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	4622      	mov	r2, r4
 800e616:	4b07      	ldr	r3, [pc, #28]	; (800e634 <_svfiprintf_r+0x1ec>)
 800e618:	a904      	add	r1, sp, #16
 800e61a:	4640      	mov	r0, r8
 800e61c:	f7fc ff1a 	bl	800b454 <_printf_i>
 800e620:	e7ea      	b.n	800e5f8 <_svfiprintf_r+0x1b0>
 800e622:	bf00      	nop
 800e624:	0800eaac 	.word	0x0800eaac
 800e628:	0800eab2 	.word	0x0800eab2
 800e62c:	0800eab6 	.word	0x0800eab6
 800e630:	0800aee9 	.word	0x0800aee9
 800e634:	0800e393 	.word	0x0800e393

0800e638 <strncmp>:
 800e638:	b510      	push	{r4, lr}
 800e63a:	b16a      	cbz	r2, 800e658 <strncmp+0x20>
 800e63c:	3901      	subs	r1, #1
 800e63e:	1884      	adds	r4, r0, r2
 800e640:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e644:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e648:	4293      	cmp	r3, r2
 800e64a:	d103      	bne.n	800e654 <strncmp+0x1c>
 800e64c:	42a0      	cmp	r0, r4
 800e64e:	d001      	beq.n	800e654 <strncmp+0x1c>
 800e650:	2b00      	cmp	r3, #0
 800e652:	d1f5      	bne.n	800e640 <strncmp+0x8>
 800e654:	1a98      	subs	r0, r3, r2
 800e656:	bd10      	pop	{r4, pc}
 800e658:	4610      	mov	r0, r2
 800e65a:	e7fc      	b.n	800e656 <strncmp+0x1e>

0800e65c <__ascii_wctomb>:
 800e65c:	b149      	cbz	r1, 800e672 <__ascii_wctomb+0x16>
 800e65e:	2aff      	cmp	r2, #255	; 0xff
 800e660:	bf85      	ittet	hi
 800e662:	238a      	movhi	r3, #138	; 0x8a
 800e664:	6003      	strhi	r3, [r0, #0]
 800e666:	700a      	strbls	r2, [r1, #0]
 800e668:	f04f 30ff 	movhi.w	r0, #4294967295
 800e66c:	bf98      	it	ls
 800e66e:	2001      	movls	r0, #1
 800e670:	4770      	bx	lr
 800e672:	4608      	mov	r0, r1
 800e674:	4770      	bx	lr

0800e676 <memmove>:
 800e676:	4288      	cmp	r0, r1
 800e678:	b510      	push	{r4, lr}
 800e67a:	eb01 0302 	add.w	r3, r1, r2
 800e67e:	d807      	bhi.n	800e690 <memmove+0x1a>
 800e680:	1e42      	subs	r2, r0, #1
 800e682:	4299      	cmp	r1, r3
 800e684:	d00a      	beq.n	800e69c <memmove+0x26>
 800e686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e68a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e68e:	e7f8      	b.n	800e682 <memmove+0xc>
 800e690:	4283      	cmp	r3, r0
 800e692:	d9f5      	bls.n	800e680 <memmove+0xa>
 800e694:	1881      	adds	r1, r0, r2
 800e696:	1ad2      	subs	r2, r2, r3
 800e698:	42d3      	cmn	r3, r2
 800e69a:	d100      	bne.n	800e69e <memmove+0x28>
 800e69c:	bd10      	pop	{r4, pc}
 800e69e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e6a6:	e7f7      	b.n	800e698 <memmove+0x22>

0800e6a8 <_realloc_r>:
 800e6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6aa:	4607      	mov	r7, r0
 800e6ac:	4614      	mov	r4, r2
 800e6ae:	460e      	mov	r6, r1
 800e6b0:	b921      	cbnz	r1, 800e6bc <_realloc_r+0x14>
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e6b8:	f7fc bb28 	b.w	800ad0c <_malloc_r>
 800e6bc:	b922      	cbnz	r2, 800e6c8 <_realloc_r+0x20>
 800e6be:	f7fc fad7 	bl	800ac70 <_free_r>
 800e6c2:	4625      	mov	r5, r4
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c8:	f000 f814 	bl	800e6f4 <_malloc_usable_size_r>
 800e6cc:	42a0      	cmp	r0, r4
 800e6ce:	d20f      	bcs.n	800e6f0 <_realloc_r+0x48>
 800e6d0:	4621      	mov	r1, r4
 800e6d2:	4638      	mov	r0, r7
 800e6d4:	f7fc fb1a 	bl	800ad0c <_malloc_r>
 800e6d8:	4605      	mov	r5, r0
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	d0f2      	beq.n	800e6c4 <_realloc_r+0x1c>
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	f7ff fa3d 	bl	800db60 <memcpy>
 800e6e6:	4631      	mov	r1, r6
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	f7fc fac1 	bl	800ac70 <_free_r>
 800e6ee:	e7e9      	b.n	800e6c4 <_realloc_r+0x1c>
 800e6f0:	4635      	mov	r5, r6
 800e6f2:	e7e7      	b.n	800e6c4 <_realloc_r+0x1c>

0800e6f4 <_malloc_usable_size_r>:
 800e6f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6f8:	1f18      	subs	r0, r3, #4
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	bfbc      	itt	lt
 800e6fe:	580b      	ldrlt	r3, [r1, r0]
 800e700:	18c0      	addlt	r0, r0, r3
 800e702:	4770      	bx	lr

0800e704 <_init>:
 800e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e706:	bf00      	nop
 800e708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e70a:	bc08      	pop	{r3}
 800e70c:	469e      	mov	lr, r3
 800e70e:	4770      	bx	lr

0800e710 <_fini>:
 800e710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e712:	bf00      	nop
 800e714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e716:	bc08      	pop	{r3}
 800e718:	469e      	mov	lr, r3
 800e71a:	4770      	bx	lr
