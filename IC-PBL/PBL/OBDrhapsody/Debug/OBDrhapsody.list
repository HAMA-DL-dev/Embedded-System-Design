
OBDrhapsody.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  0800ffd8  0800ffd8  0001ffd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a20  08010a20  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010a20  08010a20  00020a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a28  08010a28  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a28  08010a28  00020a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a2c  08010a2c  00020a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08010a30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001668  200001fc  08010c2c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001864  08010c2c  00031864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b488  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006592  00000000  00000000  0005b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001de0  00000000  00000000  00061c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a58  00000000  00000000  00063a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002842a  00000000  00000000  00065480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b3a6  00000000  00000000  0008d8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9aa4  00000000  00000000  000a8c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000c4  00000000  00000000  001826f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea4  00000000  00000000  001827b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ffbc 	.word	0x0800ffbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800ffbc 	.word	0x0800ffbc

080001d0 <RiCEvent_Init>:
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	811a      	strh	r2, [r3, #8]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	729a      	strb	r2, [r3, #10]
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <RiCEvent_Cleanup>:
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d105      	bne.n	8000216 <RiCEvent_Cleanup+0x1a>
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <RiCEvent_Cleanup+0x28>)
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <RiCEvent_Cleanup+0x2c>)
 800020e:	2127      	movs	r1, #39	; 0x27
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <RiCEvent_Cleanup+0x30>)
 8000212:	f00d f873 	bl	800d2fc <__assert_func>
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 f80a 	bl	8000230 <RiCEvent_cleanup>
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	080101ac 	.word	0x080101ac
 8000228:	080101c4 	.word	0x080101c4
 800022c:	080101b8 	.word	0x080101b8

08000230 <RiCEvent_cleanup>:
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d105      	bne.n	800024a <RiCEvent_cleanup+0x1a>
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <RiCEvent_cleanup+0x38>)
 8000240:	4a0a      	ldr	r2, [pc, #40]	; (800026c <RiCEvent_cleanup+0x3c>)
 8000242:	212f      	movs	r1, #47	; 0x2f
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <RiCEvent_cleanup+0x40>)
 8000246:	f00d f859 	bl	800d2fc <__assert_func>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000250:	811a      	strh	r2, [r3, #8]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	080101ac 	.word	0x080101ac
 800026c:	080101d8 	.word	0x080101d8
 8000270:	080101b8 	.word	0x080101b8

08000274 <RiCEvent_destroy>:
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d105      	bne.n	800028e <RiCEvent_destroy+0x1a>
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <RiCEvent_destroy+0x48>)
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <RiCEvent_destroy+0x4c>)
 8000286:	2139      	movs	r1, #57	; 0x39
 8000288:	480e      	ldr	r0, [pc, #56]	; (80002c4 <RiCEvent_destroy+0x50>)
 800028a:	f00d f837 	bl	800d2fc <__assert_func>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00f      	beq.n	80002b4 <RiCEvent_destroy+0x40>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d106      	bne.n	80002aa <RiCEvent_destroy+0x36>
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ffc7 	bl	8000230 <RiCEvent_cleanup>
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f00d f88c 	bl	800d3c0 <free>
 80002a8:	e005      	b.n	80002b6 <RiCEvent_destroy+0x42>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	4798      	blx	r3
 80002b2:	e000      	b.n	80002b6 <RiCEvent_destroy+0x42>
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	080101ac 	.word	0x080101ac
 80002c0:	080101ec 	.word	0x080101ec
 80002c4:	080101b8 	.word	0x080101b8

080002c8 <RiCEvent_getDestination>:
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d105      	bne.n	80002e2 <RiCEvent_getDestination+0x1a>
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <RiCEvent_getDestination+0x30>)
 80002d8:	4a08      	ldr	r2, [pc, #32]	; (80002fc <RiCEvent_getDestination+0x34>)
 80002da:	214d      	movs	r1, #77	; 0x4d
 80002dc:	4808      	ldr	r0, [pc, #32]	; (8000300 <RiCEvent_getDestination+0x38>)
 80002de:	f00d f80d 	bl	800d2fc <__assert_func>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d101      	bne.n	80002ec <RiCEvent_getDestination+0x24>
 80002e8:	2300      	movs	r3, #0
 80002ea:	e001      	b.n	80002f0 <RiCEvent_getDestination+0x28>
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	080101ac 	.word	0x080101ac
 80002fc:	08010200 	.word	0x08010200
 8000300:	080101b8 	.word	0x080101b8

08000304 <RiCEvent_getlId>:
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d105      	bne.n	800031e <RiCEvent_getlId+0x1a>
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <RiCEvent_getlId+0x34>)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <RiCEvent_getlId+0x38>)
 8000316:	2159      	movs	r1, #89	; 0x59
 8000318:	4809      	ldr	r0, [pc, #36]	; (8000340 <RiCEvent_getlId+0x3c>)
 800031a:	f00c ffef 	bl	800d2fc <__assert_func>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d102      	bne.n	800032a <RiCEvent_getlId+0x26>
 8000324:	f06f 0302 	mvn.w	r3, #2
 8000328:	e002      	b.n	8000330 <RiCEvent_getlId+0x2c>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000330:	4618      	mov	r0, r3
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	080101ac 	.word	0x080101ac
 800033c:	08010218 	.word	0x08010218
 8000340:	080101b8 	.word	0x080101b8

08000344 <RiCEvent_init>:
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	460b      	mov	r3, r1
 800034e:	607a      	str	r2, [r7, #4]
 8000350:	817b      	strh	r3, [r7, #10]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d105      	bne.n	8000364 <RiCEvent_init+0x20>
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <RiCEvent_init+0x40>)
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <RiCEvent_init+0x44>)
 800035c:	2165      	movs	r1, #101	; 0x65
 800035e:	480b      	ldr	r0, [pc, #44]	; (800038c <RiCEvent_init+0x48>)
 8000360:	f00c ffcc 	bl	800d2fc <__assert_func>
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d008      	beq.n	800037c <RiCEvent_init+0x38>
 800036a:	68f8      	ldr	r0, [r7, #12]
 800036c:	f7ff ff30 	bl	80001d0 <RiCEvent_Init>
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	897a      	ldrh	r2, [r7, #10]
 8000374:	811a      	strh	r2, [r3, #8]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	080101ac 	.word	0x080101ac
 8000388:	08010228 	.word	0x08010228
 800038c:	080101b8 	.word	0x080101b8

08000390 <RiCEvent_isDeleteAfterConsume>:
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d105      	bne.n	80003aa <RiCEvent_isDeleteAfterConsume+0x1a>
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <RiCEvent_isDeleteAfterConsume+0x28>)
 80003a0:	4a06      	ldr	r2, [pc, #24]	; (80003bc <RiCEvent_isDeleteAfterConsume+0x2c>)
 80003a2:	2171      	movs	r1, #113	; 0x71
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <RiCEvent_isDeleteAfterConsume+0x30>)
 80003a6:	f00c ffa9 	bl	800d2fc <__assert_func>
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7a9b      	ldrb	r3, [r3, #10]
 80003ae:	4618      	mov	r0, r3
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	080101ac 	.word	0x080101ac
 80003bc:	08010238 	.word	0x08010238
 80003c0:	080101b8 	.word	0x080101b8

080003c4 <RiCEvent_isTimeout>:
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d105      	bne.n	80003de <RiCEvent_isTimeout+0x1a>
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <RiCEvent_isTimeout+0x4c>)
 80003d4:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <RiCEvent_isTimeout+0x50>)
 80003d6:	2179      	movs	r1, #121	; 0x79
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <RiCEvent_isTimeout+0x54>)
 80003da:	f00c ff8f 	bl	800d2fc <__assert_func>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d101      	bne.n	80003e8 <RiCEvent_isTimeout+0x24>
 80003e4:	2300      	movs	r3, #0
 80003e6:	e00e      	b.n	8000406 <RiCEvent_isTimeout+0x42>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003ee:	f113 0f02 	cmn.w	r3, #2
 80003f2:	d005      	beq.n	8000400 <RiCEvent_isTimeout+0x3c>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003fa:	f113 0f06 	cmn.w	r3, #6
 80003fe:	d101      	bne.n	8000404 <RiCEvent_isTimeout+0x40>
 8000400:	2301      	movs	r3, #1
 8000402:	e000      	b.n	8000406 <RiCEvent_isTimeout+0x42>
 8000404:	2300      	movs	r3, #0
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	080101ac 	.word	0x080101ac
 8000414:	08010258 	.word	0x08010258
 8000418:	080101b8 	.word	0x080101b8

0800041c <RiCEvent_setDestination>:
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <RiCEvent_setLId>:
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	887a      	ldrh	r2, [r7, #2]
 8000448:	811a      	strh	r2, [r3, #8]
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <RiCEvent_setDeleteAfterConsume>:
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	460b      	mov	r3, r1
 8000460:	70fb      	strb	r3, [r7, #3]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	78fa      	ldrb	r2, [r7, #3]
 8000466:	729a      	strb	r2, [r3, #10]
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <RiCReactive_Init>:
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d018      	beq.n	80004c0 <RiCReactive_Init+0x4c>
 800048e:	68f9      	ldr	r1, [r7, #12]
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <RiCReactive_Init+0x54>)
 8000492:	f000 fbed 	bl	8000c70 <RiCStartBehaviorEvent_init>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	2200      	movs	r2, #0
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	68f8      	ldr	r0, [r7, #12]
 80004a2:	f000 f90b 	bl	80006bc <RiCReactive_setTask>
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	2200      	movs	r2, #0
 80004bc:	741a      	strb	r2, [r3, #16]
 80004be:	e000      	b.n	80004c2 <RiCReactive_Init+0x4e>
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000218 	.word	0x20000218

080004cc <RiCReactive_cleanup>:
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <RiCReactive_cleanup+0x1a>
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <RiCReactive_cleanup+0x40>)
 80004dc:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <RiCReactive_cleanup+0x44>)
 80004de:	2177      	movs	r1, #119	; 0x77
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <RiCReactive_cleanup+0x48>)
 80004e2:	f00c ff0b 	bl	800d2fc <__assert_func>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00b      	beq.n	8000504 <RiCReactive_cleanup+0x38>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	f043 0210 	orr.w	r2, r3, #16
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	6879      	ldr	r1, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fc19 	bl	8000d36 <RiCTask_cancelEvents>
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	0801026c 	.word	0x0801026c
 8000510:	08010288 	.word	0x08010288
 8000514:	08010278 	.word	0x08010278

08000518 <RiCReactive_destroy>:
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <RiCReactive_destroy+0x1a>
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ffd0 	bl	80004cc <RiCReactive_cleanup>
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f00c ff47 	bl	800d3c0 <free>
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <RiCReactive_gen>:
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d105      	bne.n	8000556 <RiCReactive_gen+0x1c>
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <RiCReactive_gen+0x56>)
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <RiCReactive_gen+0x5a>)
 800054e:	218d      	movs	r1, #141	; 0x8d
 8000550:	4811      	ldr	r0, [pc, #68]	; (8000598 <RiCReactive_gen+0x5e>)
 8000552:	f00c fed3 	bl	800d2fc <__assert_func>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <RiCReactive_gen+0x26>
 800055c:	2300      	movs	r3, #0
 800055e:	e012      	b.n	8000586 <RiCReactive_gen+0x4c>
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 fa72 	bl	8000a4a <isInCleanup>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <RiCReactive_gen+0x36>
 800056c:	2300      	movs	r3, #0
 800056e:	e00a      	b.n	8000586 <RiCReactive_gen+0x4c>
 8000570:	6879      	ldr	r1, [r7, #4]
 8000572:	6838      	ldr	r0, [r7, #0]
 8000574:	f7ff ff52 	bl	800041c <RiCEvent_setDestination>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	6839      	ldr	r1, [r7, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fc07 	bl	8000d92 <RiCTask_queueEvent>
 8000584:	2301      	movs	r3, #1
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	0801026c 	.word	0x0801026c
 8000594:	0801029c 	.word	0x0801029c
 8000598:	08010278 	.word	0x08010278

0800059c <RiCReactive_init>:
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	68b9      	ldr	r1, [r7, #8]
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f7ff ff5f 	bl	8000474 <RiCReactive_Init>
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <RiCReactive_popNullConfig>:
 80005be:	b580      	push	{r7, lr}
 80005c0:	b082      	sub	sp, #8
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d105      	bne.n	80005d8 <RiCReactive_popNullConfig+0x1a>
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <RiCReactive_popNullConfig+0x32>)
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <RiCReactive_popNullConfig+0x36>)
 80005d0:	21a8      	movs	r1, #168	; 0xa8
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <RiCReactive_popNullConfig+0x3a>)
 80005d4:	f00c fe92 	bl	800d2fc <__assert_func>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d004      	beq.n	80005e8 <RiCReactive_popNullConfig+0x2a>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0801026c 	.word	0x0801026c
 80005f4:	080102ac 	.word	0x080102ac
 80005f8:	08010278 	.word	0x08010278

080005fc <RiCReactive_pushNullConfig>:
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d105      	bne.n	8000616 <RiCReactive_pushNullConfig+0x1a>
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <RiCReactive_pushNullConfig+0x34>)
 800060c:	4a09      	ldr	r2, [pc, #36]	; (8000634 <RiCReactive_pushNullConfig+0x38>)
 800060e:	21b3      	movs	r1, #179	; 0xb3
 8000610:	4809      	ldr	r0, [pc, #36]	; (8000638 <RiCReactive_pushNullConfig+0x3c>)
 8000612:	f00c fe73 	bl	800d2fc <__assert_func>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <RiCReactive_pushNullConfig+0x2a>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	0801026c 	.word	0x0801026c
 8000634:	080102c8 	.word	0x080102c8
 8000638:	08010278 	.word	0x08010278

0800063c <RiCReactive_setActive>:
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d102      	bne.n	8000654 <RiCReactive_setActive+0x18>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	e000      	b.n	8000656 <RiCReactive_setActive+0x1a>
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <RiCReactive_setShouldDelete>:
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d105      	bne.n	800067e <RiCReactive_setShouldDelete+0x1e>
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <RiCReactive_setShouldDelete+0x50>)
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <RiCReactive_setShouldDelete+0x54>)
 8000676:	21c6      	movs	r1, #198	; 0xc6
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <RiCReactive_setShouldDelete+0x58>)
 800067a:	f00c fe3f 	bl	800d2fc <__assert_func>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d010      	beq.n	80006a6 <RiCReactive_setShouldDelete+0x46>
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <RiCReactive_setShouldDelete+0x38>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f043 0220 	orr.w	r2, r3, #32
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	e007      	b.n	80006a8 <RiCReactive_setShouldDelete+0x48>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 0220 	bic.w	r2, r3, #32
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	e000      	b.n	80006a8 <RiCReactive_setShouldDelete+0x48>
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	0801026c 	.word	0x0801026c
 80006b4:	080102e4 	.word	0x080102e4
 80006b8:	08010278 	.word	0x08010278

080006bc <RiCReactive_setTask>:
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d105      	bne.n	80006dc <RiCReactive_setTask+0x20>
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <RiCReactive_setTask+0x58>)
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <RiCReactive_setTask+0x5c>)
 80006d4:	21d2      	movs	r1, #210	; 0xd2
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <RiCReactive_setTask+0x60>)
 80006d8:	f00c fe10 	bl	800d2fc <__assert_func>
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d013      	beq.n	800070a <RiCReactive_setTask+0x4e>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d002      	beq.n	80006f2 <RiCReactive_setTask+0x36>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d104      	bne.n	8000704 <RiCReactive_setTask+0x48>
 80006fa:	f000 fff2 	bl	80016e2 <RiCMainTask>
 80006fe:	4602      	mov	r2, r0
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	e000      	b.n	800070c <RiCReactive_setTask+0x50>
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	0801026c 	.word	0x0801026c
 8000718:	08010300 	.word	0x08010300
 800071c:	08010278 	.word	0x08010278

08000720 <RiCReactive_startBehavior>:
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <RiCReactive_startBehavior+0x1a>
 800072e:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <RiCReactive_startBehavior+0xc8>)
 8000730:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <RiCReactive_startBehavior+0xcc>)
 8000732:	21e9      	movs	r1, #233	; 0xe9
 8000734:	482e      	ldr	r0, [pc, #184]	; (80007f0 <RiCReactive_startBehavior+0xd0>)
 8000736:	f00c fde1 	bl	800d2fc <__assert_func>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <RiCReactive_startBehavior+0x28>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <RiCReactive_startBehavior+0x2c>
 8000748:	2300      	movs	r3, #0
 800074a:	e049      	b.n	80007e0 <RiCReactive_startBehavior+0xc0>
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f95d 	bl	8000a0c <isBehaviorStarted>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d11d      	bne.n	8000794 <RiCReactive_startBehavior+0x74>
 8000758:	2101      	movs	r1, #1
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f9d0 	bl	8000b00 <setBehaviorStarted>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <RiCReactive_startBehavior+0x58>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	68d2      	ldr	r2, [r2, #12]
 8000774:	4610      	mov	r0, r2
 8000776:	4798      	blx	r3
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 fa15 	bl	8000ba8 <shouldCompleteRun>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d007      	beq.n	8000794 <RiCReactive_startBehavior+0x74>
 8000784:	2101      	movs	r1, #1
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f9d6 	bl	8000b38 <setCompleteStartBehavior>
 800078c:	4919      	ldr	r1, [pc, #100]	; (80007f4 <RiCReactive_startBehavior+0xd4>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fed3 	bl	800053a <RiCReactive_gen>
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fa47 	bl	8000c28 <shouldTerminate>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <RiCReactive_startBehavior+0x86>
 80007a0:	2301      	movs	r3, #1
 80007a2:	73fb      	strb	r3, [r7, #15]
 80007a4:	e001      	b.n	80007aa <RiCReactive_startBehavior+0x8a>
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d011      	beq.n	80007d4 <RiCReactive_startBehavior+0xb4>
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fa26 	bl	8000c02 <shouldDelete>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00b      	beq.n	80007d4 <RiCReactive_startBehavior+0xb4>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d006      	beq.n	80007d4 <RiCReactive_startBehavior+0xb4>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	68d2      	ldr	r2, [r2, #12]
 80007d0:	4610      	mov	r0, r2
 80007d2:	4798      	blx	r3
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <RiCReactive_startBehavior+0xbe>
 80007da:	2301      	movs	r3, #1
 80007dc:	e000      	b.n	80007e0 <RiCReactive_startBehavior+0xc0>
 80007de:	2300      	movs	r3, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	0801026c 	.word	0x0801026c
 80007ec:	08010314 	.word	0x08010314
 80007f0:	08010278 	.word	0x08010278
 80007f4:	20000218 	.word	0x20000218

080007f8 <RiCReactive_takeEvent>:
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d106      	bne.n	8000816 <RiCReactive_takeEvent+0x1e>
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <RiCReactive_takeEvent+0x84>)
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <RiCReactive_takeEvent+0x88>)
 800080c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000810:	481c      	ldr	r0, [pc, #112]	; (8000884 <RiCReactive_takeEvent+0x8c>)
 8000812:	f00c fd73 	bl	800d2fc <__assert_func>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d101      	bne.n	8000820 <RiCReactive_takeEvent+0x28>
 800081c:	2305      	movs	r3, #5
 800081e:	e028      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 f912 	bl	8000a4a <isInCleanup>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <RiCReactive_takeEvent+0x38>
 800082c:	2303      	movs	r3, #3
 800082e:	e020      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f9f9 	bl	8000c28 <shouldTerminate>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d007      	beq.n	800084c <RiCReactive_takeEvent+0x54>
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f9e0 	bl	8000c02 <shouldDelete>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d101      	bne.n	800084c <RiCReactive_takeEvent+0x54>
 8000848:	2302      	movs	r3, #2
 800084a:	e012      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d003      	beq.n	8000860 <RiCReactive_takeEvent+0x68>
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f852 	bl	8000904 <consumeEvent>
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f9e1 	bl	8000c28 <shouldTerminate>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <RiCReactive_takeEvent+0x78>
 800086c:	2304      	movs	r3, #4
 800086e:	e000      	b.n	8000872 <RiCReactive_takeEvent+0x7a>
 8000870:	2302      	movs	r3, #2
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	0801026c 	.word	0x0801026c
 8000880:	08010330 	.word	0x08010330
 8000884:	08010278 	.word	0x08010278

08000888 <RiCReactive_takeTrigger>:
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d106      	bne.n	80008a6 <RiCReactive_takeTrigger+0x1e>
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <RiCReactive_takeTrigger+0x30>)
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <RiCReactive_takeTrigger+0x34>)
 800089c:	f44f 719a 	mov.w	r1, #308	; 0x134
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <RiCReactive_takeTrigger+0x38>)
 80008a2:	f00c fd2b 	bl	800d2fc <__assert_func>
 80008a6:	6839      	ldr	r1, [r7, #0]
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffa5 	bl	80007f8 <RiCReactive_takeEvent>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0801026c 	.word	0x0801026c
 80008bc:	08010348 	.word	0x08010348
 80008c0:	08010278 	.word	0x08010278

080008c4 <RiCReactive_terminate>:
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d106      	bne.n	80008e0 <RiCReactive_terminate+0x1c>
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <RiCReactive_terminate+0x34>)
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <RiCReactive_terminate+0x38>)
 80008d6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <RiCReactive_terminate+0x3c>)
 80008dc:	f00c fd0e 	bl	800d2fc <__assert_func>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <RiCReactive_terminate+0x2a>
 80008e6:	2101      	movs	r1, #1
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f941 	bl	8000b70 <setShouldTerminate>
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	0801026c 	.word	0x0801026c
 80008fc:	08010360 	.word	0x08010360
 8000900:	08010278 	.word	0x08010278

08000904 <consumeEvent>:
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f89b 	bl	8000a4a <isInCleanup>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d15e      	bne.n	80009d8 <consumeEvent+0xd4>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d05d      	beq.n	80009dc <consumeEvent+0xd8>
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f873 	bl	8000a0c <isBehaviorStarted>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d059      	beq.n	80009e0 <consumeEvent+0xdc>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d057      	beq.n	80009e4 <consumeEvent+0xe0>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d052      	beq.n	80009e8 <consumeEvent+0xe4>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f94c 	bl	8000be6 <shouldCompleteStartBehavior>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d013      	beq.n	800097c <consumeEvent+0x78>
 8000954:	2100      	movs	r1, #0
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f8ee 	bl	8000b38 <setCompleteStartBehavior>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2201      	movs	r2, #1
 8000960:	741a      	strb	r2, [r3, #16]
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f884 	bl	8000a70 <runToCompletion>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <consumeEvent+0x72>
 800096e:	2005      	movs	r0, #5
 8000970:	f001 f94c 	bl	8001c0c <RiCErrorManager_log>
 8000974:	e039      	b.n	80009ea <consumeEvent+0xe6>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	741a      	strb	r2, [r3, #16]
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000982:	f113 0f05 	cmn.w	r3, #5
 8000986:	d023      	beq.n	80009d0 <consumeEvent+0xcc>
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f852 	bl	8000a32 <isBusy>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d11d      	bne.n	80009d0 <consumeEvent+0xcc>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	741a      	strb	r2, [r3, #16]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68da      	ldr	r2, [r3, #12]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4610      	mov	r0, r2
 80009a8:	4798      	blx	r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f8fc 	bl	8000ba8 <shouldCompleteRun>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d009      	beq.n	80009ca <consumeEvent+0xc6>
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f85a 	bl	8000a70 <runToCompletion>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d103      	bne.n	80009ca <consumeEvent+0xc6>
 80009c2:	2005      	movs	r0, #5
 80009c4:	f001 f922 	bl	8001c0c <RiCErrorManager_log>
 80009c8:	e00f      	b.n	80009ea <consumeEvent+0xe6>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	741a      	strb	r2, [r3, #16]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e008      	b.n	80009ea <consumeEvent+0xe6>
 80009d8:	bf00      	nop
 80009da:	e006      	b.n	80009ea <consumeEvent+0xe6>
 80009dc:	bf00      	nop
 80009de:	e004      	b.n	80009ea <consumeEvent+0xe6>
 80009e0:	bf00      	nop
 80009e2:	e002      	b.n	80009ea <consumeEvent+0xe6>
 80009e4:	bf00      	nop
 80009e6:	e000      	b.n	80009ea <consumeEvent+0xe6>
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <inNullConfig>:
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <isBehaviorStarted>:
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <isBehaviorStarted+0x18>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <isBehaviorStarted+0x1a>
 8000a24:	2300      	movs	r3, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <isBusy>:
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7c1b      	ldrb	r3, [r3, #16]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <isInCleanup>:
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f003 0310 	and.w	r3, r3, #16
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <isInCleanup+0x18>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <isInCleanup+0x1a>
 8000a62:	2300      	movs	r3, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <runToCompletion>:
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e025      	b.n	8000aca <runToCompletion+0x5a>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <runToCompletion+0x28>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	dc19      	bgt.n	8000ad8 <runToCompletion+0x68>
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <runToCompletion+0x3e>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e024      	b.n	8000af8 <runToCompletion+0x88>
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffcb 	bl	8000a4a <isInCleanup>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <runToCompletion+0x6a>
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	4798      	blx	r3
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <runToCompletion+0x6a>
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ff90 	bl	80009f0 <inNullConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1d3      	bne.n	8000a7e <runToCompletion+0xe>
 8000ad6:	e000      	b.n	8000ada <runToCompletion+0x6a>
 8000ad8:	bf00      	nop
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	dd0a      	ble.n	8000af6 <runToCompletion+0x86>
 8000ae0:	2005      	movs	r0, #5
 8000ae2:	f001 f893 	bl	8001c0c <RiCErrorManager_log>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f023 0207 	bic.w	r2, r3, #7
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <runToCompletion+0x88>
 8000af6:	2301      	movs	r3, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <setBehaviorStarted>:
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <setBehaviorStarted+0x20>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	e005      	b.n	8000b2c <setBehaviorStarted+0x2c>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <setCompleteStartBehavior>:
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d006      	beq.n	8000b58 <setCompleteStartBehavior+0x20>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	e005      	b.n	8000b64 <setCompleteStartBehavior+0x2c>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <setShouldTerminate>:
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <setShouldTerminate+0x20>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f043 0208 	orr.w	r2, r3, #8
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	e005      	b.n	8000b9c <setShouldTerminate+0x2c>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	f023 0208 	bic.w	r2, r3, #8
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <shouldCompleteRun>:
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <shouldCompleteRun+0x12>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e00f      	b.n	8000bda <shouldCompleteRun+0x32>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f023 0320 	bic.w	r3, r3, #32
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <shouldCompleteStartBehavior>:
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <shouldDelete>:
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <shouldDelete+0x18>
 8000c16:	2301      	movs	r3, #1
 8000c18:	e000      	b.n	8000c1c <shouldDelete+0x1a>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <shouldTerminate>:
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <RiCStartBehaviorEvent_Init>:
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <RiCStartBehaviorEvent_Cleanup>:
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <RiCStartBehaviorEvent_init>:
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <RiCStartBehaviorEvent_init+0x1c>
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <RiCStartBehaviorEvent_init+0x40>)
 8000c82:	4a0c      	ldr	r2, [pc, #48]	; (8000cb4 <RiCStartBehaviorEvent_init+0x44>)
 8000c84:	212f      	movs	r1, #47	; 0x2f
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <RiCStartBehaviorEvent_init+0x48>)
 8000c88:	f00c fb38 	bl	800d2fc <__assert_func>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <RiCStartBehaviorEvent_init+0x26>
 8000c92:	2300      	movs	r3, #0
 8000c94:	e007      	b.n	8000ca6 <RiCStartBehaviorEvent_init+0x36>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000c9c:	811a      	strh	r2, [r3, #8]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	08010378 	.word	0x08010378
 8000cb4:	0801039c 	.word	0x0801039c
 8000cb8:	08010384 	.word	0x08010384

08000cbc <RiCStartBehaviorEvent_setDestination>:
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <RiCStartBehaviorEvent_setLId>:
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	811a      	strh	r2, [r3, #8]
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <RiCTask_Init>:
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2204      	movs	r2, #4
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f8b1 	bl	8000e7a <initRelations>
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <RiCTask_Cleanup>:
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f8b3 	bl	8000e94 <cleanUpRelations>
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <RiCTask_cancelEvents>:
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <RiCTask_cancelEvents+0x28>
 8000d46:	6838      	ldr	r0, [r7, #0]
 8000d48:	f000 fe2a 	bl	80019a0 <RiCTmManager_cancelEvents>
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f000 f86e 	bl	8000e2e <RiCTask_getItsRiCEvtQueue>
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	6839      	ldr	r1, [r7, #0]
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f000 f8e1 	bl	8000f1e <RiCEvtQueue_cancelEvents>
 8000d5c:	e000      	b.n	8000d60 <RiCTask_cancelEvents+0x2a>
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <RiCTask_cleanup>:
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <RiCTask_getPriority>:
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <RiCTask_queueEvent>:
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d008      	beq.n	8000db4 <RiCTask_queueEvent+0x22>
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f843 	bl	8000e2e <RiCTask_getItsRiCEvtQueue>
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	6839      	ldr	r1, [r7, #0]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f96b 	bl	8001088 <RiCEvtQueue_put>
 8000db2:	e000      	b.n	8000db6 <RiCTask_queueEvent+0x24>
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <RiCTask_schedTm>:
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	68b8      	ldr	r0, [r7, #8]
 8000dd6:	f000 ffed 	bl	8001db4 <theMainTask_schedTm>
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <RiCTask_setPriority>:
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <RiCTask_start>:
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <RiCTask_unschedTm>:
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	460b      	mov	r3, r1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	817b      	strh	r3, [r7, #10]
 8000e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f861 	bl	8001ee8 <theMainTask_unschedTm>
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <RiCTask_getItsRiCEvtQueue>:
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <RiCTask_getNext>:
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <RiCTask_setNext>:
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <initRelations>:
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3304      	adds	r3, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f818 	bl	8000ebc <RiCEvtQueue_Init>
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <cleanUpRelations>:
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f831 	bl	8000f08 <RiCEvtQueue_Cleanup>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <cleanUpRelations+0x20>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <RiCEvtQueue_Init>:
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	e008      	b.n	8000ef4 <RiCEvtQueue_Init+0x38>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	3204      	adds	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	ddf3      	ble.n	8000ee2 <RiCEvtQueue_Init+0x26>
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <RiCEvtQueue_Cleanup>:
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f98c 	bl	800122e <cleanUpRelations>
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <RiCEvtQueue_cancelEvents>:
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fbff 	bl	8001730 <RiCEnterCriticalRegion>
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f886 	bl	8001044 <RiCEvtQueue_isEmpty>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d13a      	bne.n	8000fb4 <RiCEvtQueue_cancelEvents+0x96>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	e02f      	b.n	8000faa <RiCEvtQueue_cancelEvents+0x8c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	3204      	adds	r2, #4
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff f9b6 	bl	80002c8 <RiCEvent_getDestination>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d11a      	bne.n	8000f9a <RiCEvtQueue_cancelEvents+0x7c>
 8000f64:	2100      	movs	r1, #0
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff fa58 	bl	800041c <RiCEvent_setDestination>
 8000f6c:	68f8      	ldr	r0, [r7, #12]
 8000f6e:	f7ff fa29 	bl	80003c4 <RiCEvent_isTimeout>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <RiCEvtQueue_cancelEvents+0x66>
 8000f78:	f06f 0105 	mvn.w	r1, #5
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff fa5b 	bl	8000438 <RiCEvent_setLId>
 8000f82:	e00a      	b.n	8000f9a <RiCEvtQueue_cancelEvents+0x7c>
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f7ff fa03 	bl	8000390 <RiCEvent_isDeleteAfterConsume>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <RiCEvtQueue_cancelEvents+0x7c>
 8000f90:	f06f 0102 	mvn.w	r1, #2
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fa4f 	bl	8000438 <RiCEvent_setLId>
 8000f9a:	6979      	ldr	r1, [r7, #20]
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f8c5 	bl	800112c <next>
 8000fa2:	6178      	str	r0, [r7, #20]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbca      	blt.n	8000f4a <RiCEvtQueue_cancelEvents+0x2c>
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fbc0 	bl	800173e <RiCExitCriticalRegion>
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <RiCEvtQueue_get>:
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fbac 	bl	8001730 <RiCEnterCriticalRegion>
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f833 	bl	8001044 <RiCEvtQueue_isEmpty>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d009      	beq.n	8000ff8 <RiCEvtQueue_get+0x32>
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fba8 	bl	800173e <RiCExitCriticalRegion>
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 fe0c 	bl	8001c0c <RiCErrorManager_log>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e021      	b.n	800103c <RiCEvtQueue_get+0x76>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3204      	adds	r2, #4
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3204      	adds	r2, #4
 800100e:	2100      	movs	r1, #0
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f886 	bl	800112c <next>
 8001020:	4602      	mov	r2, r0
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fb82 	bl	800173e <RiCExitCriticalRegion>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <RiCEvtQueue_isEmpty>:
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <RiCEvtQueue_isEmpty+0x14>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <RiCEvtQueue_isEmpty+0x16>
 8001058:	2300      	movs	r3, #0
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <RiCEvtQueue_isFull>:
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b08      	cmp	r3, #8
 8001074:	d101      	bne.n	800107a <RiCEvtQueue_isFull+0x14>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <RiCEvtQueue_isFull+0x16>
 800107a:	2300      	movs	r3, #0
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <RiCEvtQueue_put>:
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fb4a 	bl	8001730 <RiCEnterCriticalRegion>
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ffe2 	bl	8001066 <RiCEvtQueue_isFull>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <RiCEvtQueue_put+0x32>
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fb46 	bl	800173e <RiCExitCriticalRegion>
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fdaa 	bl	8001c0c <RiCErrorManager_log>
 80010b8:	e023      	b.n	8001102 <RiCEvtQueue_put+0x7a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3204      	adds	r2, #4
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4619      	mov	r1, r3
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f82c 	bl	800112c <next>
 80010d4:	4602      	mov	r2, r0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dd03      	ble.n	80010f8 <RiCEvtQueue_put+0x70>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fb1e 	bl	800173e <RiCExitCriticalRegion>
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <RiCEvtQueue_usage>:
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6899      	ldr	r1, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <RiCEvtQueue_usage+0x20>)
 800111c:	f00c ffa4 	bl	800e068 <iprintf>
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	080103b8 	.word	0x080103b8

0800112c <next>:
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	425a      	negs	r2, r3
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	f002 0207 	and.w	r2, r2, #7
 8001144:	bf58      	it	pl
 8001146:	4253      	negpl	r3, r2
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <RiCEvtQueue_getItsEvent>:
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <RiCEvtQueue_addItsEvent>:
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e010      	b.n	80011a0 <RiCEvtQueue_addItsEvent+0x32>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	3204      	adds	r2, #4
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d106      	bne.n	800119a <RiCEvtQueue_addItsEvent+0x2c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	3204      	adds	r2, #4
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001198:	e006      	b.n	80011a8 <RiCEvtQueue_addItsEvent+0x3a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	ddeb      	ble.n	800117e <RiCEvtQueue_addItsEvent+0x10>
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <RiCEvtQueue_removeItsEvent>:
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e010      	b.n	80011e6 <RiCEvtQueue_removeItsEvent+0x32>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	3204      	adds	r2, #4
 80011ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d105      	bne.n	80011e0 <RiCEvtQueue_removeItsEvent+0x2c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	3204      	adds	r2, #4
 80011da:	2100      	movs	r1, #0
 80011dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	ddeb      	ble.n	80011c4 <RiCEvtQueue_removeItsEvent+0x10>
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <RiCEvtQueue_clearItsEvent>:
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e008      	b.n	800121a <RiCEvtQueue_clearItsEvent+0x20>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	3204      	adds	r2, #4
 800120e:	2100      	movs	r1, #0
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b07      	cmp	r3, #7
 800121e:	ddf3      	ble.n	8001208 <RiCEvtQueue_clearItsEvent+0xe>
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <cleanUpRelations>:
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <RiC_MemoryAllocationPkg_OMInitializer_Init>:
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
 8001248:	f000 f809 	bl	800125e <RiC_MemoryAllocationPkg_initRelations>
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <RiC_MemoryAllocationPkg_OMInitializer_Cleanup>:
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <RiC_MemoryAllocationPkg_initRelations>:
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
 8001262:	f000 f829 	bl	80012b8 <RiCAllocator_Init>
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <RiC_MemoryAllocationPkg_initRelations+0x42>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	2101      	movs	r1, #1
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <RiC_MemoryAllocationPkg_initRelations+0x46>)
 800126e:	f000 f92b 	bl	80014c8 <RiCMemoryPool_Init>
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <RiC_MemoryAllocationPkg_initRelations+0x4a>)
 8001274:	2220      	movs	r2, #32
 8001276:	2106      	movs	r1, #6
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <RiC_MemoryAllocationPkg_initRelations+0x4e>)
 800127a:	f000 f925 	bl	80014c8 <RiCMemoryPool_Init>
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <RiC_MemoryAllocationPkg_initRelations+0x52>)
 8001280:	2210      	movs	r2, #16
 8001282:	210c      	movs	r1, #12
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <RiC_MemoryAllocationPkg_initRelations+0x56>)
 8001286:	f000 f91f 	bl	80014c8 <RiCMemoryPool_Init>
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <RiC_MemoryAllocationPkg_initRelations+0x56>)
 800128c:	f000 f8ee 	bl	800146c <RiCAllocator_setItsSmallPool>
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <RiC_MemoryAllocationPkg_initRelations+0x4e>)
 8001292:	f000 f8cf 	bl	8001434 <RiCAllocator_setItsMediumPool>
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <RiC_MemoryAllocationPkg_initRelations+0x46>)
 8001298:	f000 f8b0 	bl	80013fc <RiCAllocator_setItsLargePool>
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000224 	.word	0x20000224
 80012a4:	20000930 	.word	0x20000930
 80012a8:	20000324 	.word	0x20000324
 80012ac:	20000940 	.word	0x20000940
 80012b0:	20000624 	.word	0x20000624
 80012b4:	20000950 	.word	0x20000950

080012b8 <RiCAllocator_Init>:
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <RiCAllocator_Init+0x20>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <RiCAllocator_Init+0x20>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <RiCAllocator_Init+0x20>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	20000924 	.word	0x20000924

080012dc <RiCAllocator_Cleanup>:
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	f000 f8d4 	bl	800148c <cleanUpRelations>
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <RiCAllocator_getMemory>:
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d806      	bhi.n	8001304 <RiCAllocator_getMemory+0x1c>
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <RiCAllocator_getMemory+0x58>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f92a 	bl	8001554 <RiCMemoryPool_getMemory>
 8001300:	4603      	mov	r3, r0
 8001302:	e019      	b.n	8001338 <RiCAllocator_getMemory+0x50>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b20      	cmp	r3, #32
 8001308:	d806      	bhi.n	8001318 <RiCAllocator_getMemory+0x30>
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <RiCAllocator_getMemory+0x58>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f920 	bl	8001554 <RiCMemoryPool_getMemory>
 8001314:	4603      	mov	r3, r0
 8001316:	e00f      	b.n	8001338 <RiCAllocator_getMemory+0x50>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b40      	cmp	r3, #64	; 0x40
 800131c:	d806      	bhi.n	800132c <RiCAllocator_getMemory+0x44>
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <RiCAllocator_getMemory+0x58>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f916 	bl	8001554 <RiCMemoryPool_getMemory>
 8001328:	4603      	mov	r3, r0
 800132a:	e005      	b.n	8001338 <RiCAllocator_getMemory+0x50>
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <RiCAllocator_getMemory+0x5c>)
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <RiCAllocator_getMemory+0x60>)
 8001330:	2167      	movs	r1, #103	; 0x67
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <RiCAllocator_getMemory+0x64>)
 8001334:	f00b ffe2 	bl	800d2fc <__assert_func>
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000924 	.word	0x20000924
 8001344:	080103ec 	.word	0x080103ec
 8001348:	08010484 	.word	0x08010484
 800134c:	080103f4 	.word	0x080103f4

08001350 <RiCAllocator_returnMemory>:
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d806      	bhi.n	800136e <RiCAllocator_returnMemory+0x1e>
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <RiCAllocator_returnMemory+0x58>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f93e 	bl	80015e8 <RiCMemoryPool_returnMemory>
 800136c:	e019      	b.n	80013a2 <RiCAllocator_returnMemory+0x52>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b20      	cmp	r3, #32
 8001372:	d806      	bhi.n	8001382 <RiCAllocator_returnMemory+0x32>
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <RiCAllocator_returnMemory+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f934 	bl	80015e8 <RiCMemoryPool_returnMemory>
 8001380:	e00f      	b.n	80013a2 <RiCAllocator_returnMemory+0x52>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b40      	cmp	r3, #64	; 0x40
 8001386:	d806      	bhi.n	8001396 <RiCAllocator_returnMemory+0x46>
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <RiCAllocator_returnMemory+0x58>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f92a 	bl	80015e8 <RiCMemoryPool_returnMemory>
 8001394:	e005      	b.n	80013a2 <RiCAllocator_returnMemory+0x52>
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <RiCAllocator_returnMemory+0x5c>)
 8001398:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <RiCAllocator_returnMemory+0x60>)
 800139a:	2179      	movs	r1, #121	; 0x79
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <RiCAllocator_returnMemory+0x64>)
 800139e:	f00b ffad 	bl	800d2fc <__assert_func>
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000924 	.word	0x20000924
 80013ac:	080103ec 	.word	0x080103ec
 80013b0:	0801049c 	.word	0x0801049c
 80013b4:	080103f4 	.word	0x080103f4

080013b8 <RiCAllocator_usage>:
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <RiCAllocator_usage+0x28>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f957 	bl	8001674 <RiCMemoryPool_usage>
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <RiCAllocator_usage+0x28>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f952 	bl	8001674 <RiCMemoryPool_usage>
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <RiCAllocator_usage+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f94d 	bl	8001674 <RiCMemoryPool_usage>
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000924 	.word	0x20000924

080013e4 <RiCAllocator_getItsLargePool>:
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <RiCAllocator_getItsLargePool+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000924 	.word	0x20000924

080013fc <RiCAllocator_setItsLargePool>:
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <RiCAllocator_setItsLargePool+0x1c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000924 	.word	0x20000924

0800141c <RiCAllocator_getItsMediumPool>:
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <RiCAllocator_getItsMediumPool+0x14>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000924 	.word	0x20000924

08001434 <RiCAllocator_setItsMediumPool>:
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	4a04      	ldr	r2, [pc, #16]	; (8001450 <RiCAllocator_setItsMediumPool+0x1c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6053      	str	r3, [r2, #4]
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000924 	.word	0x20000924

08001454 <RiCAllocator_getItsSmallPool>:
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <RiCAllocator_getItsSmallPool+0x14>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000924 	.word	0x20000924

0800146c <RiCAllocator_setItsSmallPool>:
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <RiCAllocator_setItsSmallPool+0x1c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6093      	str	r3, [r2, #8]
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000924 	.word	0x20000924

0800148c <cleanUpRelations>:
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <cleanUpRelations+0x38>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <cleanUpRelations+0x12>
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <cleanUpRelations+0x38>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <cleanUpRelations+0x38>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <cleanUpRelations+0x20>
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <cleanUpRelations+0x38>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <cleanUpRelations+0x38>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <cleanUpRelations+0x2e>
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <cleanUpRelations+0x38>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20000924 	.word	0x20000924

080014c8 <RiCMemoryPool_Init>:
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e013      	b.n	8001524 <RiCMemoryPool_Init+0x5c>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbe7      	blt.n	80014fc <RiCMemoryPool_Init+0x34>
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <RiCMemoryPool_Cleanup>:
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <RiCMemoryPool_getMemory>:
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <RiCMemoryPool_getMemory+0x1a>
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <RiCMemoryPool_getMemory+0x84>)
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <RiCMemoryPool_getMemory+0x88>)
 8001566:	21ec      	movs	r1, #236	; 0xec
 8001568:	481d      	ldr	r0, [pc, #116]	; (80015e0 <RiCMemoryPool_getMemory+0x8c>)
 800156a:	f00b fec7 	bl	800d2fc <__assert_func>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	dd03      	ble.n	800157e <RiCMemoryPool_getMemory+0x2a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b40      	cmp	r3, #64	; 0x40
 800157c:	dd05      	ble.n	800158a <RiCMemoryPool_getMemory+0x36>
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <RiCMemoryPool_getMemory+0x90>)
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <RiCMemoryPool_getMemory+0x88>)
 8001582:	21ed      	movs	r1, #237	; 0xed
 8001584:	4816      	ldr	r0, [pc, #88]	; (80015e0 <RiCMemoryPool_getMemory+0x8c>)
 8001586:	f00b feb9 	bl	800d2fc <__assert_func>
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f88a 	bl	80016a4 <isEmpty>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00f      	beq.n	80015b6 <RiCMemoryPool_getMemory+0x62>
 8001596:	200a      	movs	r0, #10
 8001598:	f000 fb38 	bl	8001c0c <RiCErrorManager_log>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00b ff05 	bl	800d3b0 <malloc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e006      	b.n	80015c4 <RiCMemoryPool_getMemory+0x70>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08010400 	.word	0x08010400
 80015dc:	080104b8 	.word	0x080104b8
 80015e0:	080103f4 	.word	0x080103f4
 80015e4:	0801040c 	.word	0x0801040c

080015e8 <RiCMemoryPool_returnMemory>:
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d106      	bne.n	8001606 <RiCMemoryPool_returnMemory+0x1e>
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <RiCMemoryPool_returnMemory+0x7c>)
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <RiCMemoryPool_returnMemory+0x80>)
 80015fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001600:	481a      	ldr	r0, [pc, #104]	; (800166c <RiCMemoryPool_returnMemory+0x84>)
 8001602:	f00b fe7b 	bl	800d2fc <__assert_func>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d106      	bne.n	800161a <RiCMemoryPool_returnMemory+0x32>
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <RiCMemoryPool_returnMemory+0x88>)
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <RiCMemoryPool_returnMemory+0x80>)
 8001610:	f240 1107 	movw	r1, #263	; 0x107
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <RiCMemoryPool_returnMemory+0x84>)
 8001616:	f00b fe71 	bl	800d2fc <__assert_func>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <RiCMemoryPool_returnMemory+0x42>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	e012      	b.n	8001650 <RiCMemoryPool_returnMemory+0x68>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e006      	b.n	8001640 <RiCMemoryPool_returnMemory+0x58>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <RiCMemoryPool_returnMemory+0x60>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f5      	bne.n	8001632 <RiCMemoryPool_returnMemory+0x4a>
 8001646:	e000      	b.n	800164a <RiCMemoryPool_returnMemory+0x62>
 8001648:	bf00      	nop
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08010400 	.word	0x08010400
 8001668:	080104d0 	.word	0x080104d0
 800166c:	080103f4 	.word	0x080103f4
 8001670:	08010448 	.word	0x08010448

08001674 <RiCMemoryPool_usage>:
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <RiCMemoryPool_usage+0x22>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <RiCMemoryPool_usage+0x2c>)
 8001690:	f00c fcea 	bl	800e068 <iprintf>
 8001694:	e000      	b.n	8001698 <RiCMemoryPool_usage+0x24>
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	08010458 	.word	0x08010458

080016a4 <isEmpty>:
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <isEmpty+0x14>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <isEmpty+0x16>
 80016b8:	2300      	movs	r3, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <RiC_RPkg_OMInitializer_Init>:
struct RiCTmManager_t RiCTmManager;

/*## classInstance theMainTask */
struct theMainTask_t theMainTask;

void RiC_RPkg_OMInitializer_Init() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
    RiC_RPkg_initRelations();
 80016cc:	f000 f826 	bl	800171c <RiC_RPkg_initRelations>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <RiC_RPkg_OMInitializer_Cleanup>:

void RiC_RPkg_OMInitializer_Cleanup() {
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <RiCMainTask>:

/*## operation RiCMainTask() */
struct RiCTask* RiCMainTask() {
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
    /*#[ operation RiCMainTask() */
    return theMainTask_getItsRiCTask();
 80016e6:	f000 fc41 	bl	8001f6c <theMainTask_getItsRiCTask>
 80016ea:	4603      	mov	r3, r0
    /*#]*/
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <RiCTicksToTime>:

/*## operation RiCTicksToTime(timeUnit) */
timeUnit RiCTicksToTime(timeUnit aTicks) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCTicksToTime(timeUnit) */
    return ( aTicks * RIC_MS_PER_TICK );
 80016f8:	687b      	ldr	r3, [r7, #4]
    /*#]*/
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <RiCTimeToTicks>:

/*## operation RiCTimeToTicks(timeUnit) */
timeUnit RiCTimeToTicks(timeUnit aTime) {
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCTimeToTicks(timeUnit) */
    return ( aTime / RIC_MS_PER_TICK );
 800170e:	687b      	ldr	r3, [r7, #4]
    /*#]*/
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <RiC_RPkg_initRelations>:

void RiC_RPkg_initRelations() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
    RiCErrorManager_Init();
 8001720:	f000 fa64 	bl	8001bec <RiCErrorManager_Init>
    RiCTmManager_Init();
 8001724:	f000 f8ac 	bl	8001880 <RiCTmManager_Init>
    theMainTask_Init();
 8001728:	f000 fb22 	bl	8001d70 <theMainTask_Init>
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <RiCEnterCriticalRegion>:

/*#]*/


/*## operation RiCEnterCriticalRegion() */
void RiCEnterCriticalRegion() {
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
    asm("	mtspr	EID,r0");
    #endif
    
    
    /*#]*/
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <RiCExitCriticalRegion>:

/*## operation RiCExitCriticalRegion() */
void RiCExitCriticalRegion() {
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
    #endif
    
    
    
    /*#]*/
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <RiCGetSystemTick>:

/*## operation RiCGetSystemTick() */
timeUnit RiCGetSystemTick() {
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
      // Use the Windows Tick Count (updated about every 15ms?)
      return GetTickCount();
    #elif GREEN_IDF  
      return (0 - (getDecrementer()/1250));
    #else
      return RiCTicks;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <RiCGetSystemTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
    #endif
    
    /*#]*/
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000968 	.word	0x20000968

08001764 <RiCInitTimer>:

/*## operation RiCInitTimer() */
void RiCInitTimer() {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
    /*#[ operation RiCInitTimer() */
    #ifdef ARM_IDF
    /* ARMEvaluator_configure(); */  
    Init_Timer();
 8001768:	f001 feee 	bl	8003548 <Init_Timer>
    #endif
    
    
    
    /*#]*/
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <RiCNotifyToOutput>:

/*## operation RiCNotifyToOutput(const char*) */
void RiCNotifyToOutput(const char* aMsg) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCNotifyToOutput(const char*) */
    if ( aMsg == NULL ) return;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <RiCNotifyToOutput+0x18>
    #ifndef NO_PRINT
    printf ( "%s", aMsg );
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <RiCNotifyToOutput+0x20>)
 8001782:	f00c fc71 	bl	800e068 <iprintf>
 8001786:	e000      	b.n	800178a <RiCNotifyToOutput+0x1a>
    if ( aMsg == NULL ) return;
 8001788:	bf00      	nop
    #endif
    /*#]*/
}
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	080104ec 	.word	0x080104ec

08001794 <RiCOXFInit>:

/*## operation RiCOXFInit(int,char **,unsigned int,char*,unsigned int,RiCBoolean,unsigned int) */
int RiCOXFInit(int numProgArgs, char ** progArgs, unsigned int defaultPort, char* defaultHost, unsigned int tickTime, RiCBoolean b, unsigned int maxTm) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
    /*#[ operation RiCOXFInit(int,char **,unsigned int,char*,unsigned int,RiCBoolean,unsigned int) */
    /* Initialise all the objects */
    RiC_RPkg_OMInitializer_Init();
 80017a2:	f7ff ff91 	bl	80016c8 <RiC_RPkg_OMInitializer_Init>
    #ifndef NO_POOLS
    RiC_MemoryAllocationPkg_OMInitializer_Init();
 80017a6:	f7ff fd4d 	bl	8001244 <RiC_MemoryAllocationPkg_OMInitializer_Init>
    #endif
    #ifdef ARM_IDF
    /* ArmEvaluatorPkg_OMInitializer_Init(); */
    #endif
    /* Initialise the timer, either a separate thread or a periodic interrupt */
    RiCInitTimer();
 80017aa:	f7ff ffdb 	bl	8001764 <RiCInitTimer>
    
    /* Do something with the non used arguments */
    if ( (numProgArgs == 0) ||
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d011      	beq.n	80017d8 <RiCOXFInit+0x44>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00e      	beq.n	80017d8 <RiCOXFInit+0x44>
         (progArgs == NULL) ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00b      	beq.n	80017d8 <RiCOXFInit+0x44>
         (defaultPort == 0) ||
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <RiCOXFInit+0x44>
         (defaultHost == NULL) ||
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <RiCOXFInit+0x44>
         (tickTime == 0) || 
 80017cc:	7f3b      	ldrb	r3, [r7, #28]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d002      	beq.n	80017d8 <RiCOXFInit+0x44>
         (b == TRUE) ||
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <RiCOXFInit+0x48>
         (maxTm == 0) ) 
      return TRUE;
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <RiCOXFInit+0x4a>
      
    return TRUE;
 80017dc:	2301      	movs	r3, #1
    
    
    
    /*#]*/
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <RiCOXFSchedule>:

/*## operation RiCOXFSchedule() */
void RiCOXFSchedule() {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
    /*#[ operation RiCOXFSchedule() */
    theMainTask_schedule();
 80017ea:	f000 faf5 	bl	8001dd8 <theMainTask_schedule>
    /*#]*/
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <RiCOXFStart>:

/*## operation RiCOXFStart(int) */
void RiCOXFStart(int doFork) {
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
    /*#[ operation RiCOXFStart(int) */
    theMainTask_execute ( doFork );
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 facb 	bl	8001d96 <theMainTask_execute>
    /*#]*/
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <RiCOXF_pre71Settings>:

/*## operation RiCOXF_pre71Settings() */
void RiCOXF_pre71Settings() {
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    /*#[ operation RiCOXF_pre71Settings() */
    /*#]*/
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <RiCSleep>:

/*## operation RiCSleep(unsigned long) */
void RiCSleep(unsigned long aTime) {
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
    /* The "wait" seems lethal to the I2C UART operation! */
    /* __asm("wait"); */
    #endif
    
    /*#]*/
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <RiCTick>:
#ifdef M16C_IDF
__interrupt(26)
#endif

/*#]*/
void RiCTick() {
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
    /*#[ operation RiCTick() */
    RiCTicks++;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <RiCTick+0x1a>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <RiCTick+0x1a>)
 8001836:	6013      	str	r3, [r2, #0]
    /*#]*/
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000968 	.word	0x20000968

08001848 <RiCTickThread>:

/*## operation RiCTickThread() */
void RiCTickThread() {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    /*#[ operation RiCTickThread() */
    while ( TRUE ) {
    #ifdef VxWorks
      taskDelay( RIC_MS_PER_TICK / 20 );
    #endif
      RiCTick();
 800184c:	f7ff ffed 	bl	800182a <RiCTick>
 8001850:	e7fc      	b.n	800184c <RiCTickThread+0x4>

08001852 <RiCUsage>:
    }
    /*#]*/
}

/*## operation RiCUsage() */
void RiCUsage() {
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
    /*#[ operation RiCUsage() */
    #ifndef NO_PRINT
    printf ( "\n===== Resource Usage  IDF V %s =====\n", RIC_VERSION );
 8001856:	4907      	ldr	r1, [pc, #28]	; (8001874 <RiCUsage+0x22>)
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <RiCUsage+0x26>)
 800185a:	f00c fc05 	bl	800e068 <iprintf>
    #ifndef NO_POOLS
    RiCAllocator_usage();
 800185e:	f7ff fdab 	bl	80013b8 <RiCAllocator_usage>
    #endif
    RiCTmManager_usage();
 8001862:	f000 f9b3 	bl	8001bcc <RiCTmManager_usage>
    /*RiCEvtQueue_usage();*/
    RiCErrorManager_usage();
 8001866:	f000 f9f5 	bl	8001c54 <RiCErrorManager_usage>
    printf ( "==================================================\n\n" );
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <RiCUsage+0x2a>)
 800186c:	f00c fc84 	bl	800e178 <puts>
    #endif
    /*#]*/
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	080104f0 	.word	0x080104f0
 8001878:	08010508 	.word	0x08010508
 800187c:	08010530 	.word	0x08010530

08001880 <RiCTmManager_Init>:

/*#]*/


/*## operation Init() */
void RiCTmManager_Init() {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
    RiCTmManager.count=0;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <RiCTmManager_Init+0x70>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
    RiCTmManager.maxCount=0;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <RiCTmManager_Init+0x70>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
    RiCTmManager.itsBusyList = NULL;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <RiCTmManager_Init+0x70>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
    RiCTmManager.itsFreeList = NULL;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <RiCTmManager_Init+0x70>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    {
        /*#[ operation Init() */
        int i;
        for ( i=0; i<RIC_MAX_TIMEOUTS-1; i++ ) {
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	e014      	b.n	80018ce <RiCTmManager_Init+0x4e>
          RiCTimeout_setItsNextTimeout( &itsTimeout[i], &itsTimeout[i+1] );
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <RiCTmManager_Init+0x74>)
 80018b0:	1898      	adds	r0, r3, r2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <RiCTmManager_Init+0x74>)
 80018c0:	4413      	add	r3, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f000 fc02 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        for ( i=0; i<RIC_MAX_TIMEOUTS-1; i++ ) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b06      	cmp	r3, #6
 80018d2:	dde7      	ble.n	80018a4 <RiCTmManager_Init+0x24>
        }
        RiCTimeout_setItsNextTimeout( &itsTimeout[RIC_MAX_TIMEOUTS-1], NULL );
 80018d4:	2100      	movs	r1, #0
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <RiCTmManager_Init+0x78>)
 80018d8:	f000 fbf8 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        RiCTmManager.itsFreeList = &itsTimeout[0];
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <RiCTmManager_Init+0x70>)
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <RiCTmManager_Init+0x74>)
 80018e0:	60da      	str	r2, [r3, #12]
        RiCTmManager.itsBusyList = NULL;
 80018e2:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <RiCTmManager_Init+0x70>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
        /*#]*/
    }
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000974 	.word	0x20000974
 80018f4:	20000ae0 	.word	0x20000ae0
 80018f8:	20000b6c 	.word	0x20000b6c

080018fc <RiCTmManager_add>:

/*## operation add(timeUnit,short,RiCReactive) */
void RiCTmManager_add(timeUnit aTime, short anId, struct RiCReactive* aDestination) {
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	460b      	mov	r3, r1
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	817b      	strh	r3, [r7, #10]
    /*#[ operation add(timeUnit,short,RiCReactive) */
    struct RiCTimeout* aTimeout;
    timeUnit ticks;
    
    /* Do we have a timeout available? */
    if ( RiCTmManager.itsFreeList == NULL ) {
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <RiCTmManager_add+0xa0>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <RiCTmManager_add+0x1e>
      NOTIFY ( RIC_TIMEOUT_HEAP_FULL );
 8001912:	2003      	movs	r0, #3
 8001914:	f000 f97a 	bl	8001c0c <RiCErrorManager_log>
      RiCTmManager.count++;
      if ( RiCTmManager.count > RiCTmManager.maxCount )
        RiCTmManager.maxCount = RiCTmManager.count;
    }
    /*#]*/
}
 8001918:	e03c      	b.n	8001994 <RiCTmManager_add+0x98>
      aTimeout = RiCTmManager.itsFreeList;
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <RiCTmManager_add+0xa0>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	617b      	str	r3, [r7, #20]
      RiCTmManager.itsFreeList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f000 fbc7 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <RiCTmManager_add+0xa0>)
 800192a:	60d3      	str	r3, [r2, #12]
      ticks = RiCTimeToTicks( aTime ) + RiCGetSystemTick();
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7ff feea 	bl	8001706 <RiCTimeToTicks>
 8001932:	4604      	mov	r4, r0
 8001934:	f7ff ff0a 	bl	800174c <RiCGetSystemTick>
 8001938:	4603      	mov	r3, r0
 800193a:	4423      	add	r3, r4
 800193c:	613b      	str	r3, [r7, #16]
      RiCTimeout_setLId( aTimeout, RiCTimeout_id );
 800193e:	f06f 0101 	mvn.w	r1, #1
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f000 fb71 	bl	800202a <RiCTimeout_setLId>
      RiCTimeout_setTimeoutId( aTimeout, anId );
 8001948:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800194c:	4619      	mov	r1, r3
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f000 fb87 	bl	8002062 <RiCTimeout_setTimeoutId>
      RiCTimeout_setDestination( aTimeout, aDestination );
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f000 fb59 	bl	800200e <RiCTimeout_setDestination>
      RiCTimeout_setDeliveryTicks( aTimeout, ticks );
 800195c:	6939      	ldr	r1, [r7, #16]
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f000 fb9a 	bl	8002098 <RiCTimeout_setDeliveryTicks>
      RiCTimeout_setItsNextTimeout( aTimeout, RiCTmManager.itsBusyList );
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <RiCTmManager_add+0xa0>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4619      	mov	r1, r3
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f000 fbae 	bl	80020cc <RiCTimeout_setItsNextTimeout>
      RiCTmManager.itsBusyList = aTimeout; 
 8001970:	4a0a      	ldr	r2, [pc, #40]	; (800199c <RiCTmManager_add+0xa0>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	6093      	str	r3, [r2, #8]
      RiCTmManager.count++;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <RiCTmManager_add+0xa0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3301      	adds	r3, #1
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <RiCTmManager_add+0xa0>)
 800197e:	6013      	str	r3, [r2, #0]
      if ( RiCTmManager.count > RiCTmManager.maxCount )
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <RiCTmManager_add+0xa0>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <RiCTmManager_add+0xa0>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dd03      	ble.n	8001994 <RiCTmManager_add+0x98>
        RiCTmManager.maxCount = RiCTmManager.count;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <RiCTmManager_add+0xa0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a02      	ldr	r2, [pc, #8]	; (800199c <RiCTmManager_add+0xa0>)
 8001992:	6053      	str	r3, [r2, #4]
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}
 800199c:	20000974 	.word	0x20000974

080019a0 <RiCTmManager_cancelEvents>:

/*## operation cancelEvents(RiCReactive) */
void RiCTmManager_cancelEvents(const struct RiCReactive* aDestination) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    /*#[ operation cancelEvents(RiCReactive) */
    /* Iterate down the busy list looking for any timeouts with this destination */
    struct RiCTimeout* aTimeout = RiCTmManager.itsBusyList;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <RiCTmManager_cancelEvents+0x88>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	60fb      	str	r3, [r7, #12]
    struct RiCTimeout* parent = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
    
    while ( aTimeout != NULL ) {
 80019b2:	e030      	b.n	8001a16 <RiCTmManager_cancelEvents+0x76>
      if ( ( RiCTimeout_getDestination( aTimeout ) == aDestination ) ) {
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fb1e 	bl	8001ff6 <RiCTimeout_getDestination>
 80019ba:	4602      	mov	r2, r0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4293      	cmp	r3, r2
 80019c0:	d123      	bne.n	8001a0a <RiCTmManager_cancelEvents+0x6a>
        /* Found one so remove it */
        DEBUG_NOTIFY ( "Cancelling a timeout\n" );
        RiCTmManager.count--;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <RiCTmManager_cancelEvents+0x88>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <RiCTmManager_cancelEvents+0x88>)
 80019ca:	6013      	str	r3, [r2, #0]
        if ( parent == NULL ) {
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <RiCTmManager_cancelEvents+0x40>
          RiCTmManager.itsBusyList = RiCTimeout_getItsNextTimeout( aTimeout );
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fb6e 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <RiCTmManager_cancelEvents+0x88>)
 80019dc:	6093      	str	r3, [r2, #8]
 80019de:	e007      	b.n	80019f0 <RiCTmManager_cancelEvents+0x50>
        } else {
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fb67 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	f000 fb6e 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        }
        /* And add it to the free list */ 
        RiCTimeout_setItsNextTimeout( aTimeout, RiCTmManager.itsFreeList );
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <RiCTmManager_cancelEvents+0x88>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb68 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        RiCTmManager.itsFreeList = aTimeout;
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <RiCTmManager_cancelEvents+0x88>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	60d3      	str	r3, [r2, #12]
        /* Recursive call to remove any other timeouts */
        RiCTmManager_cancelEvents( aDestination );
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffcc 	bl	80019a0 <RiCTmManager_cancelEvents>
        break;
 8001a08:	e009      	b.n	8001a1e <RiCTmManager_cancelEvents+0x7e>
      }
      parent = aTimeout;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
      aTimeout = RiCTimeout_getItsNextTimeout( aTimeout );
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fb50 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001a14:	60f8      	str	r0, [r7, #12]
    while ( aTimeout != NULL ) {
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1cb      	bne.n	80019b4 <RiCTmManager_cancelEvents+0x14>
    }
    /*#]*/
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000974 	.word	0x20000974

08001a2c <RiCTmManager_getExpiredTimeout>:

/*## operation getExpiredTimeout() */
struct RiCTimeout* RiCTmManager_getExpiredTimeout() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
    /*#[ operation getExpiredTimeout() */
    struct RiCTimeout* aTimeout;
    struct RiCTimeout* parent;              
    struct RiCTimeout* t;
    timeUnit currentTicks = RiCGetSystemTick();
 8001a32:	f7ff fe8b 	bl	800174c <RiCGetSystemTick>
 8001a36:	6038      	str	r0, [r7, #0]
    
    aTimeout = RiCTmManager.itsBusyList;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <RiCTmManager_getExpiredTimeout+0xcc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	60fb      	str	r3, [r7, #12]
    parent = NULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
    
    while ( aTimeout != NULL ) {
 8001a42:	e01e      	b.n	8001a82 <RiCTmManager_getExpiredTimeout+0x56>
      if ( RiCTimeout_isExpired( aTimeout ) ) {
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fac3 	bl	8001fd0 <RiCTimeout_isExpired>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d012      	beq.n	8001a76 <RiCTmManager_getExpiredTimeout+0x4a>
        /* remove from the busy list */
        if ( NULL == parent ) {
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <RiCTmManager_getExpiredTimeout+0x38>
          RiCTmManager.itsBusyList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fb2c 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <RiCTmManager_getExpiredTimeout+0xcc>)
 8001a60:	6093      	str	r3, [r2, #8]
        } else {
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
        }
        /* But don't add it to the free list until it has been processed ! */
        break;
 8001a62:	e011      	b.n	8001a88 <RiCTmManager_getExpiredTimeout+0x5c>
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fb25 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	68b8      	ldr	r0, [r7, #8]
 8001a70:	f000 fb2c 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        break;
 8001a74:	e008      	b.n	8001a88 <RiCTmManager_getExpiredTimeout+0x5c>
      }
      parent = aTimeout;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
      aTimeout = RiCTimeout_getItsNextTimeout( aTimeout );  
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fb1a 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001a80:	60f8      	str	r0, [r7, #12]
    while ( aTimeout != NULL ) {
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1dd      	bne.n	8001a44 <RiCTmManager_getExpiredTimeout+0x18>
    }
    
    // Now find the next timeout that will expire and set OXFShortestTimer to the
    // relative time before then. If no timeouts exist, then set to 0.
    if ( aTimeout == NULL ) {
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d12f      	bne.n	8001aee <RiCTmManager_getExpiredTimeout+0xc2>
      t = RiCTmManager.itsBusyList;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <RiCTmManager_getExpiredTimeout+0xcc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	607b      	str	r3, [r7, #4]
      if ( t == NULL ) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d103      	bne.n	8001aa2 <RiCTmManager_getExpiredTimeout+0x76>
        RiCShortestTimer = 0;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <RiCTmManager_getExpiredTimeout+0xd0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e025      	b.n	8001aee <RiCTmManager_getExpiredTimeout+0xc2>
      } else {
        RiCShortestTimer = RiCTimeout_getDeliveryTicks(t) - currentTicks;
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 faec 	bl	8002080 <RiCTimeout_getDeliveryTicks>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <RiCTmManager_getExpiredTimeout+0xd0>)
 8001ab0:	6013      	str	r3, [r2, #0]
        t = RiCTimeout_getItsNextTimeout(t);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fafe 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001ab8:	6078      	str	r0, [r7, #4]
        while ( t != NULL ) {
 8001aba:	e015      	b.n	8001ae8 <RiCTmManager_getExpiredTimeout+0xbc>
          if ( RiCTimeout_getDeliveryTicks(t) - currentTicks < RiCShortestTimer ) {
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fadf 	bl	8002080 <RiCTimeout_getDeliveryTicks>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <RiCTmManager_getExpiredTimeout+0xd0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <RiCTmManager_getExpiredTimeout+0xb4>
            RiCShortestTimer = RiCTimeout_getDeliveryTicks(t) - currentTicks;
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fad5 	bl	8002080 <RiCTimeout_getDeliveryTicks>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <RiCTmManager_getExpiredTimeout+0xd0>)
 8001ade:	6013      	str	r3, [r2, #0]
          }
          t = RiCTimeout_getItsNextTimeout(t);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fae7 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001ae6:	6078      	str	r0, [r7, #4]
        while ( t != NULL ) {
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1e6      	bne.n	8001abc <RiCTmManager_getExpiredTimeout+0x90>
        }  
      }
    }
      
    return aTimeout;
 8001aee:	68fb      	ldr	r3, [r7, #12]
    /*#]*/
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000974 	.word	0x20000974
 8001afc:	20000964 	.word	0x20000964

08001b00 <RiCTmManager_putBack>:

/*## operation putBack(RiCTimeout) */
void RiCTmManager_putBack(struct RiCTimeout* aTimeout) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    /*#[ operation putBack(RiCTimeout) */
    RiCTimeout_setItsNextTimeout ( aTimeout, RiCTmManager.itsFreeList );
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <RiCTmManager_putBack+0x2c>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fadc 	bl	80020cc <RiCTimeout_setItsNextTimeout>
    RiCTmManager.itsFreeList = aTimeout;
 8001b14:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <RiCTmManager_putBack+0x2c>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60d3      	str	r3, [r2, #12]
    RiCTmManager.count--;
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <RiCTmManager_putBack+0x2c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	4a02      	ldr	r2, [pc, #8]	; (8001b2c <RiCTmManager_putBack+0x2c>)
 8001b22:	6013      	str	r3, [r2, #0]
    /*#]*/
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000974 	.word	0x20000974

08001b30 <RiCTmManager_remove>:

/*## operation remove(short,RiCReactive) */
void RiCTmManager_remove(short anId, const struct RiCReactive* aDestination) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	80fb      	strh	r3, [r7, #6]
    /*#[ operation remove(short,RiCReactive) */
    /* Iterate down the busy list looking for the requested timeout */
    struct RiCTimeout* aTimeout = RiCTmManager.itsBusyList;
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <RiCTmManager_remove+0x98>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	60fb      	str	r3, [r7, #12]
    struct RiCTimeout* parent = NULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
    
    while ( aTimeout != NULL ) {
 8001b46:	e036      	b.n	8001bb6 <RiCTmManager_remove+0x86>
      if ( ( RiCTimeout_getDestination( aTimeout ) == aDestination ) &&
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fa54 	bl	8001ff6 <RiCTimeout_getDestination>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d129      	bne.n	8001baa <RiCTmManager_remove+0x7a>
           ( RiCTimeout_getTimeoutId( aTimeout ) == anId ) ) {
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fa76 	bl	8002048 <RiCTimeout_getTimeoutId>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
      if ( ( RiCTimeout_getDestination( aTimeout ) == aDestination ) &&
 8001b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d120      	bne.n	8001baa <RiCTmManager_remove+0x7a>
        /* Found it so remove it */
        RiCTmManager.count--;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <RiCTmManager_remove+0x98>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <RiCTmManager_remove+0x98>)
 8001b70:	6013      	str	r3, [r2, #0]
        if ( parent == NULL ) {
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <RiCTmManager_remove+0x56>
          RiCTmManager.itsBusyList = RiCTimeout_getItsNextTimeout( aTimeout );
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fa9b 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <RiCTmManager_remove+0x98>)
 8001b82:	6093      	str	r3, [r2, #8]
 8001b84:	e007      	b.n	8001b96 <RiCTmManager_remove+0x66>
        } else {
          RiCTimeout_setItsNextTimeout( parent, RiCTimeout_getItsNextTimeout( aTimeout ) );
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fa94 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f000 fa9b 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        }
        /* And add it to the free list */ 
        RiCTimeout_setItsNextTimeout( aTimeout, RiCTmManager.itsFreeList );
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <RiCTmManager_remove+0x98>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 fa95 	bl	80020cc <RiCTimeout_setItsNextTimeout>
        RiCTmManager.itsFreeList = aTimeout;
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <RiCTmManager_remove+0x98>)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	60d3      	str	r3, [r2, #12]
        break;
 8001ba8:	e009      	b.n	8001bbe <RiCTmManager_remove+0x8e>
      }
      parent = aTimeout;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
      aTimeout = RiCTimeout_getItsNextTimeout( aTimeout );
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fa80 	bl	80020b4 <RiCTimeout_getItsNextTimeout>
 8001bb4:	60f8      	str	r0, [r7, #12]
    while ( aTimeout != NULL ) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1c5      	bne.n	8001b48 <RiCTmManager_remove+0x18>
    }
    /*#]*/
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000974 	.word	0x20000974

08001bcc <RiCTmManager_usage>:

/*#[ ignore */
#ifndef NO_PRINT

/*#]*/
void RiCTmManager_usage() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    /*#[ operation usage() const */
    printf ( "Max timeouts in Timeout Manager : %d  Current usage : %d\n", RiCTmManager.maxCount, RiCTmManager.count );
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <RiCTmManager_usage+0x18>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <RiCTmManager_usage+0x18>)
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <RiCTmManager_usage+0x1c>)
 8001bdc:	f00c fa44 	bl	800e068 <iprintf>
    /*#]*/
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000974 	.word	0x20000974
 8001be8:	08010564 	.word	0x08010564

08001bec <RiCErrorManager_Init>:
#endif

/*#]*/


void RiCErrorManager_Init() {
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
    RiCErrorManager.count = 0;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <RiCErrorManager_Init+0x1c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    RiCErrorManager.lastError = RIC_NO_ERROR;
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <RiCErrorManager_Init+0x1c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	711a      	strb	r2, [r3, #4]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2000096c 	.word	0x2000096c

08001c0c <RiCErrorManager_log>:

/*## operation log(RIC_ERRORS) */
void RiCErrorManager_log(RIC_ERRORS anError) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
    /*#[ operation log(RIC_ERRORS) */
    RiCErrorManager.count++;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <RiCErrorManager_log+0x3c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <RiCErrorManager_log+0x3c>)
 8001c1e:	6013      	str	r3, [r2, #0]
    RiCErrorManager.lastError = anError;
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <RiCErrorManager_log+0x3c>)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	7113      	strb	r3, [r2, #4]
    #ifndef NO_PRINT
    printf ( "<<<<<<  RIC ERROR %d : ", RiCErrorManager.count );
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <RiCErrorManager_log+0x3c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <RiCErrorManager_log+0x40>)
 8001c2e:	f00c fa1b 	bl	800e068 <iprintf>
    print ( anError );
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f82d 	bl	8001c94 <print>
    printf ( " >>>>>>\n" );
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <RiCErrorManager_log+0x44>)
 8001c3c:	f00c fa9c 	bl	800e178 <puts>
    #endif
    /*#]*/
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000096c 	.word	0x2000096c
 8001c4c:	080105a0 	.word	0x080105a0
 8001c50:	080105b8 	.word	0x080105b8

08001c54 <RiCErrorManager_usage>:

/*#[ ignore */
#ifndef NO_PRINT

/*#]*/
void RiCErrorManager_usage() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    /*#[ operation usage() const */
    printf ( "%d framework errors", RiCErrorManager.count );
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <RiCErrorManager_usage+0x34>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480b      	ldr	r0, [pc, #44]	; (8001c8c <RiCErrorManager_usage+0x38>)
 8001c60:	f00c fa02 	bl	800e068 <iprintf>
    if ( RiCErrorManager.count > 0 ) {
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <RiCErrorManager_usage+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dd07      	ble.n	8001c7c <RiCErrorManager_usage+0x28>
      printf ( "  last error : " );
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <RiCErrorManager_usage+0x3c>)
 8001c6e:	f00c f9fb 	bl	800e068 <iprintf>
      print ( RiCErrorManager.lastError );
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <RiCErrorManager_usage+0x34>)
 8001c74:	791b      	ldrb	r3, [r3, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f80c 	bl	8001c94 <print>
    }
    printf ( "\n" );
 8001c7c:	200a      	movs	r0, #10
 8001c7e:	f00c fa0b 	bl	800e098 <putchar>
    /*#]*/
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000096c 	.word	0x2000096c
 8001c8c:	080105c0 	.word	0x080105c0
 8001c90:	080105d4 	.word	0x080105d4

08001c94 <print>:

/*#[ ignore */
#ifndef NO_PRINT

/*#]*/
static void print(RIC_ERRORS anError) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    /*#[ operation print(RIC_ERRORS) */
    switch ( anError ) { 
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b0a      	cmp	r3, #10
 8001ca2:	d845      	bhi.n	8001d30 <print+0x9c>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <print+0x18>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001cd9 	.word	0x08001cd9
 8001cb0:	08001ce1 	.word	0x08001ce1
 8001cb4:	08001ce9 	.word	0x08001ce9
 8001cb8:	08001cf1 	.word	0x08001cf1
 8001cbc:	08001cf9 	.word	0x08001cf9
 8001cc0:	08001d01 	.word	0x08001d01
 8001cc4:	08001d09 	.word	0x08001d09
 8001cc8:	08001d11 	.word	0x08001d11
 8001ccc:	08001d19 	.word	0x08001d19
 8001cd0:	08001d21 	.word	0x08001d21
 8001cd4:	08001d29 	.word	0x08001d29
      case RIC_NO_ERROR                      : printf ( "No Error" );                       break;
 8001cd8:	4819      	ldr	r0, [pc, #100]	; (8001d40 <print+0xac>)
 8001cda:	f00c f9c5 	bl	800e068 <iprintf>
 8001cde:	e02b      	b.n	8001d38 <print+0xa4>
      case RIC_EVENT_QUEUE_FULL              : printf ( "Event queue is full" );            break;
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <print+0xb0>)
 8001ce2:	f00c f9c1 	bl	800e068 <iprintf>
 8001ce6:	e027      	b.n	8001d38 <print+0xa4>
      case RIC_EVENT_QUEUE_EMPTY             : printf ( "Event queue is empty" );           break;
 8001ce8:	4817      	ldr	r0, [pc, #92]	; (8001d48 <print+0xb4>)
 8001cea:	f00c f9bd 	bl	800e068 <iprintf>
 8001cee:	e023      	b.n	8001d38 <print+0xa4>
      case RIC_TIMEOUT_HEAP_FULL             : printf ( "Timeout heap full" );              break;
 8001cf0:	4816      	ldr	r0, [pc, #88]	; (8001d4c <print+0xb8>)
 8001cf2:	f00c f9b9 	bl	800e068 <iprintf>
 8001cf6:	e01f      	b.n	8001d38 <print+0xa4>
      case RIC_TIMEOUT_NOT_FOUND             : printf ( "Timeout not found" );              break;
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <print+0xbc>)
 8001cfa:	f00c f9b5 	bl	800e068 <iprintf>
 8001cfe:	e01b      	b.n	8001d38 <print+0xa4>
      case RIC_INFINITE_NULL_TRANSITIONS     : printf ( "Infinite null transitions" );      break;
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <print+0xc0>)
 8001d02:	f00c f9b1 	bl	800e068 <iprintf>
 8001d06:	e017      	b.n	8001d38 <print+0xa4>
      case RIC_TOO_MANY_NULL_CONFIGS         : printf ( "Too many null configs" );          break;
 8001d08:	4813      	ldr	r0, [pc, #76]	; (8001d58 <print+0xc4>)
 8001d0a:	f00c f9ad 	bl	800e068 <iprintf>
 8001d0e:	e013      	b.n	8001d38 <print+0xa4>
      case RIC_TOO_FEW_NULL_CONFIGS          : printf ( "Too few null configs" );           break;
 8001d10:	4812      	ldr	r0, [pc, #72]	; (8001d5c <print+0xc8>)
 8001d12:	f00c f9a9 	bl	800e068 <iprintf>
 8001d16:	e00f      	b.n	8001d38 <print+0xa4>
      case RIC_NULL_DESTINATION              : printf ( "Null destination" );               break;
 8001d18:	4811      	ldr	r0, [pc, #68]	; (8001d60 <print+0xcc>)
 8001d1a:	f00c f9a5 	bl	800e068 <iprintf>
 8001d1e:	e00b      	b.n	8001d38 <print+0xa4>
      case RIC_EVENT_DISCARDED               : printf ( "Event discarded" );                break;
 8001d20:	4810      	ldr	r0, [pc, #64]	; (8001d64 <print+0xd0>)
 8001d22:	f00c f9a1 	bl	800e068 <iprintf>
 8001d26:	e007      	b.n	8001d38 <print+0xa4>
      case RIC_ALLOCATING_ANOTHER_MEMORYPOOL : printf ( "Allocating another memory pool" ); break;
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <print+0xd4>)
 8001d2a:	f00c f99d 	bl	800e068 <iprintf>
 8001d2e:	e003      	b.n	8001d38 <print+0xa4>
      default                                : printf ( "Unknown error" );                  break;
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <print+0xd8>)
 8001d32:	f00c f999 	bl	800e068 <iprintf>
 8001d36:	bf00      	nop
    }
    /*#]*/
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	080105e4 	.word	0x080105e4
 8001d44:	080105f0 	.word	0x080105f0
 8001d48:	08010604 	.word	0x08010604
 8001d4c:	0801061c 	.word	0x0801061c
 8001d50:	08010630 	.word	0x08010630
 8001d54:	08010644 	.word	0x08010644
 8001d58:	08010660 	.word	0x08010660
 8001d5c:	08010678 	.word	0x08010678
 8001d60:	08010690 	.word	0x08010690
 8001d64:	080106a4 	.word	0x080106a4
 8001d68:	080106b4 	.word	0x080106b4
 8001d6c:	080106d4 	.word	0x080106d4

08001d70 <theMainTask_Init>:
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <theMainTask_Init+0x14>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000984 	.word	0x20000984

08001d88 <theMainTask_Cleanup>:
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <theMainTask_execute>:
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	e001      	b.n	8001da4 <theMainTask_execute+0xe>
 8001da0:	f000 f81a 	bl	8001dd8 <theMainTask_schedule>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0fa      	beq.n	8001da0 <theMainTask_execute+0xa>
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <theMainTask_schedTm>:
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	817b      	strh	r3, [r7, #10]
 8001dc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fd96 	bl	80018fc <RiCTmManager_add>
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <theMainTask_schedule>:
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	2302      	movs	r3, #2
 8001de4:	76fb      	strb	r3, [r7, #27]
 8001de6:	f7ff fc7c 	bl	80016e2 <RiCMainTask>
 8001dea:	6178      	str	r0, [r7, #20]
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff f81e 	bl	8000e2e <RiCTask_getItsRiCEvtQueue>
 8001df2:	6138      	str	r0, [r7, #16]
 8001df4:	f7ff fcaa 	bl	800174c <RiCGetSystemTick>
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <theMainTask_schedule+0x108>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <theMainTask_schedule+0x3e>
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f000 f87c 	bl	8001f08 <tick>
 8001e10:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <theMainTask_schedule+0x108>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	6938      	ldr	r0, [r7, #16]
 8001e18:	f7ff f914 	bl	8001044 <RiCEvtQueue_isEmpty>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d14f      	bne.n	8001ec2 <theMainTask_schedule+0xea>
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f7ff f8cf 	bl	8000fc6 <RiCEvtQueue_get>
 8001e28:	61f8      	str	r0, [r7, #28]
 8001e2a:	69f8      	ldr	r0, [r7, #28]
 8001e2c:	f7fe fa6a 	bl	8000304 <RiCEvent_getlId>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f113 0f03 	cmn.w	r3, #3
 8001e36:	d031      	beq.n	8001e9c <theMainTask_schedule+0xc4>
 8001e38:	69f8      	ldr	r0, [r7, #28]
 8001e3a:	f7fe fa63 	bl	8000304 <RiCEvent_getlId>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f113 0f06 	cmn.w	r3, #6
 8001e44:	d02a      	beq.n	8001e9c <theMainTask_schedule+0xc4>
 8001e46:	69f8      	ldr	r0, [r7, #28]
 8001e48:	f7fe fa3e 	bl	80002c8 <RiCEvent_getDestination>
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d103      	bne.n	8001e5c <theMainTask_schedule+0x84>
 8001e54:	2008      	movs	r0, #8
 8001e56:	f7ff fed9 	bl	8001c0c <RiCErrorManager_log>
 8001e5a:	e01f      	b.n	8001e9c <theMainTask_schedule+0xc4>
 8001e5c:	69f9      	ldr	r1, [r7, #28]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fcca 	bl	80007f8 <RiCReactive_takeEvent>
 8001e64:	4603      	mov	r3, r0
 8001e66:	76fb      	strb	r3, [r7, #27]
 8001e68:	7efb      	ldrb	r3, [r7, #27]
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d116      	bne.n	8001e9c <theMainTask_schedule+0xc4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <theMainTask_schedule+0xbe>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <theMainTask_schedule+0xbe>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <theMainTask_schedule+0xbe>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68d2      	ldr	r2, [r2, #12]
 8001e90:	4610      	mov	r0, r2
 8001e92:	4798      	blx	r3
 8001e94:	e002      	b.n	8001e9c <theMainTask_schedule+0xc4>
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fb3e 	bl	8000518 <RiCReactive_destroy>
 8001e9c:	69f8      	ldr	r0, [r7, #28]
 8001e9e:	f7fe fa91 	bl	80003c4 <RiCEvent_isTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <theMainTask_schedule+0xd8>
 8001ea8:	69f8      	ldr	r0, [r7, #28]
 8001eaa:	f7ff fe29 	bl	8001b00 <RiCTmManager_putBack>
 8001eae:	e008      	b.n	8001ec2 <theMainTask_schedule+0xea>
 8001eb0:	69f8      	ldr	r0, [r7, #28]
 8001eb2:	f7fe fa6d 	bl	8000390 <RiCEvent_isDeleteAfterConsume>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <theMainTask_schedule+0xea>
 8001ebc:	69f8      	ldr	r0, [r7, #28]
 8001ebe:	f7fe f9d9 	bl	8000274 <RiCEvent_destroy>
 8001ec2:	6938      	ldr	r0, [r7, #16]
 8001ec4:	f7ff f8be 	bl	8001044 <RiCEvtQueue_isEmpty>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d004      	beq.n	8001ed8 <theMainTask_schedule+0x100>
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <theMainTask_schedule+0x10c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fc9f 	bl	8001816 <RiCSleep>
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000960 	.word	0x20000960
 8001ee4:	20000964 	.word	0x20000964

08001ee8 <theMainTask_unschedTm>:
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	80fb      	strh	r3, [r7, #6]
 8001ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fe18 	bl	8001b30 <RiCTmManager_remove>
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <tick>:
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	f7ff fd8c 	bl	8001a2c <RiCTmManager_getExpiredTimeout>
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	e006      	b.n	8001f26 <tick+0x1e>
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe ff39 	bl	8000d92 <RiCTask_queueEvent>
 8001f20:	f7ff fd84 	bl	8001a2c <RiCTmManager_getExpiredTimeout>
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f5      	bne.n	8001f18 <tick+0x10>
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <theMainTask_getHead>:
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <theMainTask_getHead+0x12>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20000984 	.word	0x20000984

08001f4c <theMainTask_setHead>:
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <theMainTask_setHead+0x1c>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000984 	.word	0x20000984

08001f6c <theMainTask_getItsRiCTask>:
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <theMainTask_getItsRiCTask+0x10>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	20000988 	.word	0x20000988

08001f80 <RiCTimeout_Init>:
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f9a:	811a      	strh	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	815a      	strh	r2, [r3, #10]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <RiCTimeout_Cleanup>:
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f890 	bl	80020e8 <cleanUpRelations>
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <RiCTimeout_isExpired>:
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68dc      	ldr	r4, [r3, #12]
 8001fdc:	f7ff fbb6 	bl	800174c <RiCGetSystemTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	1ae3      	subs	r3, r4, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bfd4      	ite	le
 8001fe8:	2301      	movle	r3, #1
 8001fea:	2300      	movgt	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}

08001ff6 <RiCTimeout_getDestination>:
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <RiCTimeout_setDestination>:
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <RiCTimeout_setLId>:
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	887a      	ldrh	r2, [r7, #2]
 800203a:	811a      	strh	r2, [r3, #8]
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <RiCTimeout_getTimeoutId>:
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <RiCTimeout_setTimeoutId>:
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	815a      	strh	r2, [r3, #10]
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <RiCTimeout_getDeliveryTicks>:
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <RiCTimeout_setDeliveryTicks>:
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <RiCTimeout_getItsNextTimeout>:
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <RiCTimeout_setItsNextTimeout>:
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	611a      	str	r2, [r3, #16]
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <cleanUpRelations>:
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <cleanUpRelations+0x16>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <strlen>:
 800210a:	4603      	mov	r3, r0
 800210c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002110:	2a00      	cmp	r2, #0
 8002112:	d1fb      	bne.n	800210c <strlen+0x2>
 8002114:	1a18      	subs	r0, r3, r0
 8002116:	3801      	subs	r0, #1
 8002118:	4770      	bx	lr
 800211a:	0000      	movs	r0, r0
 800211c:	0000      	movs	r0, r0
	...

08002120 <memchr>:
 8002120:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002124:	2a10      	cmp	r2, #16
 8002126:	db2b      	blt.n	8002180 <memchr+0x60>
 8002128:	f010 0f07 	tst.w	r0, #7
 800212c:	d008      	beq.n	8002140 <memchr+0x20>
 800212e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002132:	3a01      	subs	r2, #1
 8002134:	428b      	cmp	r3, r1
 8002136:	d02d      	beq.n	8002194 <memchr+0x74>
 8002138:	f010 0f07 	tst.w	r0, #7
 800213c:	b342      	cbz	r2, 8002190 <memchr+0x70>
 800213e:	d1f6      	bne.n	800212e <memchr+0xe>
 8002140:	b4f0      	push	{r4, r5, r6, r7}
 8002142:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002146:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800214a:	f022 0407 	bic.w	r4, r2, #7
 800214e:	f07f 0700 	mvns.w	r7, #0
 8002152:	2300      	movs	r3, #0
 8002154:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002158:	3c08      	subs	r4, #8
 800215a:	ea85 0501 	eor.w	r5, r5, r1
 800215e:	ea86 0601 	eor.w	r6, r6, r1
 8002162:	fa85 f547 	uadd8	r5, r5, r7
 8002166:	faa3 f587 	sel	r5, r3, r7
 800216a:	fa86 f647 	uadd8	r6, r6, r7
 800216e:	faa5 f687 	sel	r6, r5, r7
 8002172:	b98e      	cbnz	r6, 8002198 <memchr+0x78>
 8002174:	d1ee      	bne.n	8002154 <memchr+0x34>
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800217c:	f002 0207 	and.w	r2, r2, #7
 8002180:	b132      	cbz	r2, 8002190 <memchr+0x70>
 8002182:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002186:	3a01      	subs	r2, #1
 8002188:	ea83 0301 	eor.w	r3, r3, r1
 800218c:	b113      	cbz	r3, 8002194 <memchr+0x74>
 800218e:	d1f8      	bne.n	8002182 <memchr+0x62>
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr
 8002194:	3801      	subs	r0, #1
 8002196:	4770      	bx	lr
 8002198:	2d00      	cmp	r5, #0
 800219a:	bf06      	itte	eq
 800219c:	4635      	moveq	r5, r6
 800219e:	3803      	subeq	r0, #3
 80021a0:	3807      	subne	r0, #7
 80021a2:	f015 0f01 	tst.w	r5, #1
 80021a6:	d107      	bne.n	80021b8 <memchr+0x98>
 80021a8:	3001      	adds	r0, #1
 80021aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80021ae:	bf02      	ittt	eq
 80021b0:	3001      	addeq	r0, #1
 80021b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80021b6:	3001      	addeq	r0, #1
 80021b8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ba:	3801      	subs	r0, #1
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <__aeabi_drsub>:
 80021c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80021c4:	e002      	b.n	80021cc <__adddf3>
 80021c6:	bf00      	nop

080021c8 <__aeabi_dsub>:
 80021c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080021cc <__adddf3>:
 80021cc:	b530      	push	{r4, r5, lr}
 80021ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80021d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80021d6:	ea94 0f05 	teq	r4, r5
 80021da:	bf08      	it	eq
 80021dc:	ea90 0f02 	teqeq	r0, r2
 80021e0:	bf1f      	itttt	ne
 80021e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80021e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80021ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80021ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80021f2:	f000 80e2 	beq.w	80023ba <__adddf3+0x1ee>
 80021f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80021fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80021fe:	bfb8      	it	lt
 8002200:	426d      	neglt	r5, r5
 8002202:	dd0c      	ble.n	800221e <__adddf3+0x52>
 8002204:	442c      	add	r4, r5
 8002206:	ea80 0202 	eor.w	r2, r0, r2
 800220a:	ea81 0303 	eor.w	r3, r1, r3
 800220e:	ea82 0000 	eor.w	r0, r2, r0
 8002212:	ea83 0101 	eor.w	r1, r3, r1
 8002216:	ea80 0202 	eor.w	r2, r0, r2
 800221a:	ea81 0303 	eor.w	r3, r1, r3
 800221e:	2d36      	cmp	r5, #54	; 0x36
 8002220:	bf88      	it	hi
 8002222:	bd30      	pophi	{r4, r5, pc}
 8002224:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002228:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800222c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002230:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002234:	d002      	beq.n	800223c <__adddf3+0x70>
 8002236:	4240      	negs	r0, r0
 8002238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800223c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002240:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002244:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002248:	d002      	beq.n	8002250 <__adddf3+0x84>
 800224a:	4252      	negs	r2, r2
 800224c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002250:	ea94 0f05 	teq	r4, r5
 8002254:	f000 80a7 	beq.w	80023a6 <__adddf3+0x1da>
 8002258:	f1a4 0401 	sub.w	r4, r4, #1
 800225c:	f1d5 0e20 	rsbs	lr, r5, #32
 8002260:	db0d      	blt.n	800227e <__adddf3+0xb2>
 8002262:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002266:	fa22 f205 	lsr.w	r2, r2, r5
 800226a:	1880      	adds	r0, r0, r2
 800226c:	f141 0100 	adc.w	r1, r1, #0
 8002270:	fa03 f20e 	lsl.w	r2, r3, lr
 8002274:	1880      	adds	r0, r0, r2
 8002276:	fa43 f305 	asr.w	r3, r3, r5
 800227a:	4159      	adcs	r1, r3
 800227c:	e00e      	b.n	800229c <__adddf3+0xd0>
 800227e:	f1a5 0520 	sub.w	r5, r5, #32
 8002282:	f10e 0e20 	add.w	lr, lr, #32
 8002286:	2a01      	cmp	r2, #1
 8002288:	fa03 fc0e 	lsl.w	ip, r3, lr
 800228c:	bf28      	it	cs
 800228e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002292:	fa43 f305 	asr.w	r3, r3, r5
 8002296:	18c0      	adds	r0, r0, r3
 8002298:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800229c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80022a0:	d507      	bpl.n	80022b2 <__adddf3+0xe6>
 80022a2:	f04f 0e00 	mov.w	lr, #0
 80022a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80022aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80022ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80022b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80022b6:	d31b      	bcc.n	80022f0 <__adddf3+0x124>
 80022b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80022bc:	d30c      	bcc.n	80022d8 <__adddf3+0x10c>
 80022be:	0849      	lsrs	r1, r1, #1
 80022c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80022c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80022c8:	f104 0401 	add.w	r4, r4, #1
 80022cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80022d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80022d4:	f080 809a 	bcs.w	800240c <__adddf3+0x240>
 80022d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80022dc:	bf08      	it	eq
 80022de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80022e2:	f150 0000 	adcs.w	r0, r0, #0
 80022e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80022ea:	ea41 0105 	orr.w	r1, r1, r5
 80022ee:	bd30      	pop	{r4, r5, pc}
 80022f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80022f4:	4140      	adcs	r0, r0
 80022f6:	eb41 0101 	adc.w	r1, r1, r1
 80022fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80022fe:	f1a4 0401 	sub.w	r4, r4, #1
 8002302:	d1e9      	bne.n	80022d8 <__adddf3+0x10c>
 8002304:	f091 0f00 	teq	r1, #0
 8002308:	bf04      	itt	eq
 800230a:	4601      	moveq	r1, r0
 800230c:	2000      	moveq	r0, #0
 800230e:	fab1 f381 	clz	r3, r1
 8002312:	bf08      	it	eq
 8002314:	3320      	addeq	r3, #32
 8002316:	f1a3 030b 	sub.w	r3, r3, #11
 800231a:	f1b3 0220 	subs.w	r2, r3, #32
 800231e:	da0c      	bge.n	800233a <__adddf3+0x16e>
 8002320:	320c      	adds	r2, #12
 8002322:	dd08      	ble.n	8002336 <__adddf3+0x16a>
 8002324:	f102 0c14 	add.w	ip, r2, #20
 8002328:	f1c2 020c 	rsb	r2, r2, #12
 800232c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002330:	fa21 f102 	lsr.w	r1, r1, r2
 8002334:	e00c      	b.n	8002350 <__adddf3+0x184>
 8002336:	f102 0214 	add.w	r2, r2, #20
 800233a:	bfd8      	it	le
 800233c:	f1c2 0c20 	rsble	ip, r2, #32
 8002340:	fa01 f102 	lsl.w	r1, r1, r2
 8002344:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002348:	bfdc      	itt	le
 800234a:	ea41 010c 	orrle.w	r1, r1, ip
 800234e:	4090      	lslle	r0, r2
 8002350:	1ae4      	subs	r4, r4, r3
 8002352:	bfa2      	ittt	ge
 8002354:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002358:	4329      	orrge	r1, r5
 800235a:	bd30      	popge	{r4, r5, pc}
 800235c:	ea6f 0404 	mvn.w	r4, r4
 8002360:	3c1f      	subs	r4, #31
 8002362:	da1c      	bge.n	800239e <__adddf3+0x1d2>
 8002364:	340c      	adds	r4, #12
 8002366:	dc0e      	bgt.n	8002386 <__adddf3+0x1ba>
 8002368:	f104 0414 	add.w	r4, r4, #20
 800236c:	f1c4 0220 	rsb	r2, r4, #32
 8002370:	fa20 f004 	lsr.w	r0, r0, r4
 8002374:	fa01 f302 	lsl.w	r3, r1, r2
 8002378:	ea40 0003 	orr.w	r0, r0, r3
 800237c:	fa21 f304 	lsr.w	r3, r1, r4
 8002380:	ea45 0103 	orr.w	r1, r5, r3
 8002384:	bd30      	pop	{r4, r5, pc}
 8002386:	f1c4 040c 	rsb	r4, r4, #12
 800238a:	f1c4 0220 	rsb	r2, r4, #32
 800238e:	fa20 f002 	lsr.w	r0, r0, r2
 8002392:	fa01 f304 	lsl.w	r3, r1, r4
 8002396:	ea40 0003 	orr.w	r0, r0, r3
 800239a:	4629      	mov	r1, r5
 800239c:	bd30      	pop	{r4, r5, pc}
 800239e:	fa21 f004 	lsr.w	r0, r1, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	bd30      	pop	{r4, r5, pc}
 80023a6:	f094 0f00 	teq	r4, #0
 80023aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80023ae:	bf06      	itte	eq
 80023b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80023b4:	3401      	addeq	r4, #1
 80023b6:	3d01      	subne	r5, #1
 80023b8:	e74e      	b.n	8002258 <__adddf3+0x8c>
 80023ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80023be:	bf18      	it	ne
 80023c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80023c4:	d029      	beq.n	800241a <__adddf3+0x24e>
 80023c6:	ea94 0f05 	teq	r4, r5
 80023ca:	bf08      	it	eq
 80023cc:	ea90 0f02 	teqeq	r0, r2
 80023d0:	d005      	beq.n	80023de <__adddf3+0x212>
 80023d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80023d6:	bf04      	itt	eq
 80023d8:	4619      	moveq	r1, r3
 80023da:	4610      	moveq	r0, r2
 80023dc:	bd30      	pop	{r4, r5, pc}
 80023de:	ea91 0f03 	teq	r1, r3
 80023e2:	bf1e      	ittt	ne
 80023e4:	2100      	movne	r1, #0
 80023e6:	2000      	movne	r0, #0
 80023e8:	bd30      	popne	{r4, r5, pc}
 80023ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80023ee:	d105      	bne.n	80023fc <__adddf3+0x230>
 80023f0:	0040      	lsls	r0, r0, #1
 80023f2:	4149      	adcs	r1, r1
 80023f4:	bf28      	it	cs
 80023f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80023fa:	bd30      	pop	{r4, r5, pc}
 80023fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002400:	bf3c      	itt	cc
 8002402:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002406:	bd30      	popcc	{r4, r5, pc}
 8002408:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800240c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	bd30      	pop	{r4, r5, pc}
 800241a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800241e:	bf1a      	itte	ne
 8002420:	4619      	movne	r1, r3
 8002422:	4610      	movne	r0, r2
 8002424:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002428:	bf1c      	itt	ne
 800242a:	460b      	movne	r3, r1
 800242c:	4602      	movne	r2, r0
 800242e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002432:	bf06      	itte	eq
 8002434:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002438:	ea91 0f03 	teqeq	r1, r3
 800243c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002440:	bd30      	pop	{r4, r5, pc}
 8002442:	bf00      	nop

08002444 <__aeabi_ui2d>:
 8002444:	f090 0f00 	teq	r0, #0
 8002448:	bf04      	itt	eq
 800244a:	2100      	moveq	r1, #0
 800244c:	4770      	bxeq	lr
 800244e:	b530      	push	{r4, r5, lr}
 8002450:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002454:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002458:	f04f 0500 	mov.w	r5, #0
 800245c:	f04f 0100 	mov.w	r1, #0
 8002460:	e750      	b.n	8002304 <__adddf3+0x138>
 8002462:	bf00      	nop

08002464 <__aeabi_i2d>:
 8002464:	f090 0f00 	teq	r0, #0
 8002468:	bf04      	itt	eq
 800246a:	2100      	moveq	r1, #0
 800246c:	4770      	bxeq	lr
 800246e:	b530      	push	{r4, r5, lr}
 8002470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002478:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800247c:	bf48      	it	mi
 800247e:	4240      	negmi	r0, r0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	e73e      	b.n	8002304 <__adddf3+0x138>
 8002486:	bf00      	nop

08002488 <__aeabi_f2d>:
 8002488:	0042      	lsls	r2, r0, #1
 800248a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800248e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002492:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002496:	bf1f      	itttt	ne
 8002498:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800249c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80024a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80024a4:	4770      	bxne	lr
 80024a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80024aa:	bf08      	it	eq
 80024ac:	4770      	bxeq	lr
 80024ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80024b2:	bf04      	itt	eq
 80024b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80024b8:	4770      	bxeq	lr
 80024ba:	b530      	push	{r4, r5, lr}
 80024bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80024c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80024c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80024c8:	e71c      	b.n	8002304 <__adddf3+0x138>
 80024ca:	bf00      	nop

080024cc <__aeabi_ul2d>:
 80024cc:	ea50 0201 	orrs.w	r2, r0, r1
 80024d0:	bf08      	it	eq
 80024d2:	4770      	bxeq	lr
 80024d4:	b530      	push	{r4, r5, lr}
 80024d6:	f04f 0500 	mov.w	r5, #0
 80024da:	e00a      	b.n	80024f2 <__aeabi_l2d+0x16>

080024dc <__aeabi_l2d>:
 80024dc:	ea50 0201 	orrs.w	r2, r0, r1
 80024e0:	bf08      	it	eq
 80024e2:	4770      	bxeq	lr
 80024e4:	b530      	push	{r4, r5, lr}
 80024e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80024ea:	d502      	bpl.n	80024f2 <__aeabi_l2d+0x16>
 80024ec:	4240      	negs	r0, r0
 80024ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80024f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80024f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80024fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80024fe:	f43f aed8 	beq.w	80022b2 <__adddf3+0xe6>
 8002502:	f04f 0203 	mov.w	r2, #3
 8002506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800250a:	bf18      	it	ne
 800250c:	3203      	addne	r2, #3
 800250e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002512:	bf18      	it	ne
 8002514:	3203      	addne	r2, #3
 8002516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800251a:	f1c2 0320 	rsb	r3, r2, #32
 800251e:	fa00 fc03 	lsl.w	ip, r0, r3
 8002522:	fa20 f002 	lsr.w	r0, r0, r2
 8002526:	fa01 fe03 	lsl.w	lr, r1, r3
 800252a:	ea40 000e 	orr.w	r0, r0, lr
 800252e:	fa21 f102 	lsr.w	r1, r1, r2
 8002532:	4414      	add	r4, r2
 8002534:	e6bd      	b.n	80022b2 <__adddf3+0xe6>
 8002536:	bf00      	nop

08002538 <__aeabi_dmul>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800253e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002546:	bf1d      	ittte	ne
 8002548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800254c:	ea94 0f0c 	teqne	r4, ip
 8002550:	ea95 0f0c 	teqne	r5, ip
 8002554:	f000 f8de 	bleq	8002714 <__aeabi_dmul+0x1dc>
 8002558:	442c      	add	r4, r5
 800255a:	ea81 0603 	eor.w	r6, r1, r3
 800255e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800256a:	bf18      	it	ne
 800256c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002578:	d038      	beq.n	80025ec <__aeabi_dmul+0xb4>
 800257a:	fba0 ce02 	umull	ip, lr, r0, r2
 800257e:	f04f 0500 	mov.w	r5, #0
 8002582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800258a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800258e:	f04f 0600 	mov.w	r6, #0
 8002592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002596:	f09c 0f00 	teq	ip, #0
 800259a:	bf18      	it	ne
 800259c:	f04e 0e01 	orrne.w	lr, lr, #1
 80025a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80025a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80025a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80025ac:	d204      	bcs.n	80025b8 <__aeabi_dmul+0x80>
 80025ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80025b2:	416d      	adcs	r5, r5
 80025b4:	eb46 0606 	adc.w	r6, r6, r6
 80025b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80025bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80025c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80025c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80025c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80025cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80025d0:	bf88      	it	hi
 80025d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80025d6:	d81e      	bhi.n	8002616 <__aeabi_dmul+0xde>
 80025d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80025dc:	bf08      	it	eq
 80025de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80025e2:	f150 0000 	adcs.w	r0, r0, #0
 80025e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80025f0:	ea46 0101 	orr.w	r1, r6, r1
 80025f4:	ea40 0002 	orr.w	r0, r0, r2
 80025f8:	ea81 0103 	eor.w	r1, r1, r3
 80025fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002600:	bfc2      	ittt	gt
 8002602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800260a:	bd70      	popgt	{r4, r5, r6, pc}
 800260c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002610:	f04f 0e00 	mov.w	lr, #0
 8002614:	3c01      	subs	r4, #1
 8002616:	f300 80ab 	bgt.w	8002770 <__aeabi_dmul+0x238>
 800261a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800261e:	bfde      	ittt	le
 8002620:	2000      	movle	r0, #0
 8002622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002626:	bd70      	pople	{r4, r5, r6, pc}
 8002628:	f1c4 0400 	rsb	r4, r4, #0
 800262c:	3c20      	subs	r4, #32
 800262e:	da35      	bge.n	800269c <__aeabi_dmul+0x164>
 8002630:	340c      	adds	r4, #12
 8002632:	dc1b      	bgt.n	800266c <__aeabi_dmul+0x134>
 8002634:	f104 0414 	add.w	r4, r4, #20
 8002638:	f1c4 0520 	rsb	r5, r4, #32
 800263c:	fa00 f305 	lsl.w	r3, r0, r5
 8002640:	fa20 f004 	lsr.w	r0, r0, r4
 8002644:	fa01 f205 	lsl.w	r2, r1, r5
 8002648:	ea40 0002 	orr.w	r0, r0, r2
 800264c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002658:	fa21 f604 	lsr.w	r6, r1, r4
 800265c:	eb42 0106 	adc.w	r1, r2, r6
 8002660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002664:	bf08      	it	eq
 8002666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	f1c4 040c 	rsb	r4, r4, #12
 8002670:	f1c4 0520 	rsb	r5, r4, #32
 8002674:	fa00 f304 	lsl.w	r3, r0, r4
 8002678:	fa20 f005 	lsr.w	r0, r0, r5
 800267c:	fa01 f204 	lsl.w	r2, r1, r4
 8002680:	ea40 0002 	orr.w	r0, r0, r2
 8002684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800268c:	f141 0100 	adc.w	r1, r1, #0
 8002690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002694:	bf08      	it	eq
 8002696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	f1c4 0520 	rsb	r5, r4, #32
 80026a0:	fa00 f205 	lsl.w	r2, r0, r5
 80026a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80026a8:	fa20 f304 	lsr.w	r3, r0, r4
 80026ac:	fa01 f205 	lsl.w	r2, r1, r5
 80026b0:	ea43 0302 	orr.w	r3, r3, r2
 80026b4:	fa21 f004 	lsr.w	r0, r1, r4
 80026b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80026bc:	fa21 f204 	lsr.w	r2, r1, r4
 80026c0:	ea20 0002 	bic.w	r0, r0, r2
 80026c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80026c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80026cc:	bf08      	it	eq
 80026ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	f094 0f00 	teq	r4, #0
 80026d8:	d10f      	bne.n	80026fa <__aeabi_dmul+0x1c2>
 80026da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80026de:	0040      	lsls	r0, r0, #1
 80026e0:	eb41 0101 	adc.w	r1, r1, r1
 80026e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80026e8:	bf08      	it	eq
 80026ea:	3c01      	subeq	r4, #1
 80026ec:	d0f7      	beq.n	80026de <__aeabi_dmul+0x1a6>
 80026ee:	ea41 0106 	orr.w	r1, r1, r6
 80026f2:	f095 0f00 	teq	r5, #0
 80026f6:	bf18      	it	ne
 80026f8:	4770      	bxne	lr
 80026fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	eb43 0303 	adc.w	r3, r3, r3
 8002704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002708:	bf08      	it	eq
 800270a:	3d01      	subeq	r5, #1
 800270c:	d0f7      	beq.n	80026fe <__aeabi_dmul+0x1c6>
 800270e:	ea43 0306 	orr.w	r3, r3, r6
 8002712:	4770      	bx	lr
 8002714:	ea94 0f0c 	teq	r4, ip
 8002718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800271c:	bf18      	it	ne
 800271e:	ea95 0f0c 	teqne	r5, ip
 8002722:	d00c      	beq.n	800273e <__aeabi_dmul+0x206>
 8002724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002728:	bf18      	it	ne
 800272a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800272e:	d1d1      	bne.n	80026d4 <__aeabi_dmul+0x19c>
 8002730:	ea81 0103 	eor.w	r1, r1, r3
 8002734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002742:	bf06      	itte	eq
 8002744:	4610      	moveq	r0, r2
 8002746:	4619      	moveq	r1, r3
 8002748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800274c:	d019      	beq.n	8002782 <__aeabi_dmul+0x24a>
 800274e:	ea94 0f0c 	teq	r4, ip
 8002752:	d102      	bne.n	800275a <__aeabi_dmul+0x222>
 8002754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002758:	d113      	bne.n	8002782 <__aeabi_dmul+0x24a>
 800275a:	ea95 0f0c 	teq	r5, ip
 800275e:	d105      	bne.n	800276c <__aeabi_dmul+0x234>
 8002760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002764:	bf1c      	itt	ne
 8002766:	4610      	movne	r0, r2
 8002768:	4619      	movne	r1, r3
 800276a:	d10a      	bne.n	8002782 <__aeabi_dmul+0x24a>
 800276c:	ea81 0103 	eor.w	r1, r1, r3
 8002770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800277c:	f04f 0000 	mov.w	r0, #0
 8002780:	bd70      	pop	{r4, r5, r6, pc}
 8002782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800278a:	bd70      	pop	{r4, r5, r6, pc}

0800278c <__aeabi_ddiv>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800279a:	bf1d      	ittte	ne
 800279c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80027a0:	ea94 0f0c 	teqne	r4, ip
 80027a4:	ea95 0f0c 	teqne	r5, ip
 80027a8:	f000 f8a7 	bleq	80028fa <__aeabi_ddiv+0x16e>
 80027ac:	eba4 0405 	sub.w	r4, r4, r5
 80027b0:	ea81 0e03 	eor.w	lr, r1, r3
 80027b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80027b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80027bc:	f000 8088 	beq.w	80028d0 <__aeabi_ddiv+0x144>
 80027c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80027c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80027c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80027cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80027d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80027d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80027d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80027dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80027e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80027e4:	429d      	cmp	r5, r3
 80027e6:	bf08      	it	eq
 80027e8:	4296      	cmpeq	r6, r2
 80027ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80027ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80027f2:	d202      	bcs.n	80027fa <__aeabi_ddiv+0x6e>
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80027fa:	1ab6      	subs	r6, r6, r2
 80027fc:	eb65 0503 	sbc.w	r5, r5, r3
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	ea4f 0232 	mov.w	r2, r2, rrx
 8002806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800280a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800280e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002816:	bf22      	ittt	cs
 8002818:	1ab6      	subcs	r6, r6, r2
 800281a:	4675      	movcs	r5, lr
 800281c:	ea40 000c 	orrcs.w	r0, r0, ip
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	ea4f 0232 	mov.w	r2, r2, rrx
 8002826:	ebb6 0e02 	subs.w	lr, r6, r2
 800282a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800282e:	bf22      	ittt	cs
 8002830:	1ab6      	subcs	r6, r6, r2
 8002832:	4675      	movcs	r5, lr
 8002834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	ea4f 0232 	mov.w	r2, r2, rrx
 800283e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002846:	bf22      	ittt	cs
 8002848:	1ab6      	subcs	r6, r6, r2
 800284a:	4675      	movcs	r5, lr
 800284c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	ea4f 0232 	mov.w	r2, r2, rrx
 8002856:	ebb6 0e02 	subs.w	lr, r6, r2
 800285a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800285e:	bf22      	ittt	cs
 8002860:	1ab6      	subcs	r6, r6, r2
 8002862:	4675      	movcs	r5, lr
 8002864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002868:	ea55 0e06 	orrs.w	lr, r5, r6
 800286c:	d018      	beq.n	80028a0 <__aeabi_ddiv+0x114>
 800286e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800287a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800287e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800288a:	d1c0      	bne.n	800280e <__aeabi_ddiv+0x82>
 800288c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002890:	d10b      	bne.n	80028aa <__aeabi_ddiv+0x11e>
 8002892:	ea41 0100 	orr.w	r1, r1, r0
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800289e:	e7b6      	b.n	800280e <__aeabi_ddiv+0x82>
 80028a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80028a4:	bf04      	itt	eq
 80028a6:	4301      	orreq	r1, r0
 80028a8:	2000      	moveq	r0, #0
 80028aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80028ae:	bf88      	it	hi
 80028b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80028b4:	f63f aeaf 	bhi.w	8002616 <__aeabi_dmul+0xde>
 80028b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80028bc:	bf04      	itt	eq
 80028be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80028c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80028c6:	f150 0000 	adcs.w	r0, r0, #0
 80028ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80028d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80028d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80028dc:	bfc2      	ittt	gt
 80028de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80028e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80028e6:	bd70      	popgt	{r4, r5, r6, pc}
 80028e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80028ec:	f04f 0e00 	mov.w	lr, #0
 80028f0:	3c01      	subs	r4, #1
 80028f2:	e690      	b.n	8002616 <__aeabi_dmul+0xde>
 80028f4:	ea45 0e06 	orr.w	lr, r5, r6
 80028f8:	e68d      	b.n	8002616 <__aeabi_dmul+0xde>
 80028fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80028fe:	ea94 0f0c 	teq	r4, ip
 8002902:	bf08      	it	eq
 8002904:	ea95 0f0c 	teqeq	r5, ip
 8002908:	f43f af3b 	beq.w	8002782 <__aeabi_dmul+0x24a>
 800290c:	ea94 0f0c 	teq	r4, ip
 8002910:	d10a      	bne.n	8002928 <__aeabi_ddiv+0x19c>
 8002912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002916:	f47f af34 	bne.w	8002782 <__aeabi_dmul+0x24a>
 800291a:	ea95 0f0c 	teq	r5, ip
 800291e:	f47f af25 	bne.w	800276c <__aeabi_dmul+0x234>
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	e72c      	b.n	8002782 <__aeabi_dmul+0x24a>
 8002928:	ea95 0f0c 	teq	r5, ip
 800292c:	d106      	bne.n	800293c <__aeabi_ddiv+0x1b0>
 800292e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002932:	f43f aefd 	beq.w	8002730 <__aeabi_dmul+0x1f8>
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	e722      	b.n	8002782 <__aeabi_dmul+0x24a>
 800293c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002940:	bf18      	it	ne
 8002942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002946:	f47f aec5 	bne.w	80026d4 <__aeabi_dmul+0x19c>
 800294a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800294e:	f47f af0d 	bne.w	800276c <__aeabi_dmul+0x234>
 8002952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002956:	f47f aeeb 	bne.w	8002730 <__aeabi_dmul+0x1f8>
 800295a:	e712      	b.n	8002782 <__aeabi_dmul+0x24a>

0800295c <__gedf2>:
 800295c:	f04f 3cff 	mov.w	ip, #4294967295
 8002960:	e006      	b.n	8002970 <__cmpdf2+0x4>
 8002962:	bf00      	nop

08002964 <__ledf2>:
 8002964:	f04f 0c01 	mov.w	ip, #1
 8002968:	e002      	b.n	8002970 <__cmpdf2+0x4>
 800296a:	bf00      	nop

0800296c <__cmpdf2>:
 800296c:	f04f 0c01 	mov.w	ip, #1
 8002970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800297c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002980:	bf18      	it	ne
 8002982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002986:	d01b      	beq.n	80029c0 <__cmpdf2+0x54>
 8002988:	b001      	add	sp, #4
 800298a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800298e:	bf0c      	ite	eq
 8002990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002994:	ea91 0f03 	teqne	r1, r3
 8002998:	bf02      	ittt	eq
 800299a:	ea90 0f02 	teqeq	r0, r2
 800299e:	2000      	moveq	r0, #0
 80029a0:	4770      	bxeq	lr
 80029a2:	f110 0f00 	cmn.w	r0, #0
 80029a6:	ea91 0f03 	teq	r1, r3
 80029aa:	bf58      	it	pl
 80029ac:	4299      	cmppl	r1, r3
 80029ae:	bf08      	it	eq
 80029b0:	4290      	cmpeq	r0, r2
 80029b2:	bf2c      	ite	cs
 80029b4:	17d8      	asrcs	r0, r3, #31
 80029b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80029ba:	f040 0001 	orr.w	r0, r0, #1
 80029be:	4770      	bx	lr
 80029c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80029c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80029c8:	d102      	bne.n	80029d0 <__cmpdf2+0x64>
 80029ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80029ce:	d107      	bne.n	80029e0 <__cmpdf2+0x74>
 80029d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80029d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80029d8:	d1d6      	bne.n	8002988 <__cmpdf2+0x1c>
 80029da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80029de:	d0d3      	beq.n	8002988 <__cmpdf2+0x1c>
 80029e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <__aeabi_cdrcmple>:
 80029e8:	4684      	mov	ip, r0
 80029ea:	4610      	mov	r0, r2
 80029ec:	4662      	mov	r2, ip
 80029ee:	468c      	mov	ip, r1
 80029f0:	4619      	mov	r1, r3
 80029f2:	4663      	mov	r3, ip
 80029f4:	e000      	b.n	80029f8 <__aeabi_cdcmpeq>
 80029f6:	bf00      	nop

080029f8 <__aeabi_cdcmpeq>:
 80029f8:	b501      	push	{r0, lr}
 80029fa:	f7ff ffb7 	bl	800296c <__cmpdf2>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	bf48      	it	mi
 8002a02:	f110 0f00 	cmnmi.w	r0, #0
 8002a06:	bd01      	pop	{r0, pc}

08002a08 <__aeabi_dcmpeq>:
 8002a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a0c:	f7ff fff4 	bl	80029f8 <__aeabi_cdcmpeq>
 8002a10:	bf0c      	ite	eq
 8002a12:	2001      	moveq	r0, #1
 8002a14:	2000      	movne	r0, #0
 8002a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a1a:	bf00      	nop

08002a1c <__aeabi_dcmplt>:
 8002a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a20:	f7ff ffea 	bl	80029f8 <__aeabi_cdcmpeq>
 8002a24:	bf34      	ite	cc
 8002a26:	2001      	movcc	r0, #1
 8002a28:	2000      	movcs	r0, #0
 8002a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a2e:	bf00      	nop

08002a30 <__aeabi_dcmple>:
 8002a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a34:	f7ff ffe0 	bl	80029f8 <__aeabi_cdcmpeq>
 8002a38:	bf94      	ite	ls
 8002a3a:	2001      	movls	r0, #1
 8002a3c:	2000      	movhi	r0, #0
 8002a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a42:	bf00      	nop

08002a44 <__aeabi_dcmpge>:
 8002a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a48:	f7ff ffce 	bl	80029e8 <__aeabi_cdrcmple>
 8002a4c:	bf94      	ite	ls
 8002a4e:	2001      	movls	r0, #1
 8002a50:	2000      	movhi	r0, #0
 8002a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a56:	bf00      	nop

08002a58 <__aeabi_dcmpgt>:
 8002a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a5c:	f7ff ffc4 	bl	80029e8 <__aeabi_cdrcmple>
 8002a60:	bf34      	ite	cc
 8002a62:	2001      	movcc	r0, #1
 8002a64:	2000      	movcs	r0, #0
 8002a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a6a:	bf00      	nop

08002a6c <__aeabi_dcmpun>:
 8002a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002a74:	d102      	bne.n	8002a7c <__aeabi_dcmpun+0x10>
 8002a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002a7a:	d10a      	bne.n	8002a92 <__aeabi_dcmpun+0x26>
 8002a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002a84:	d102      	bne.n	8002a8c <__aeabi_dcmpun+0x20>
 8002a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002a8a:	d102      	bne.n	8002a92 <__aeabi_dcmpun+0x26>
 8002a8c:	f04f 0000 	mov.w	r0, #0
 8002a90:	4770      	bx	lr
 8002a92:	f04f 0001 	mov.w	r0, #1
 8002a96:	4770      	bx	lr

08002a98 <__aeabi_d2iz>:
 8002a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002aa0:	d215      	bcs.n	8002ace <__aeabi_d2iz+0x36>
 8002aa2:	d511      	bpl.n	8002ac8 <__aeabi_d2iz+0x30>
 8002aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002aac:	d912      	bls.n	8002ad4 <__aeabi_d2iz+0x3c>
 8002aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002abe:	fa23 f002 	lsr.w	r0, r3, r2
 8002ac2:	bf18      	it	ne
 8002ac4:	4240      	negne	r0, r0
 8002ac6:	4770      	bx	lr
 8002ac8:	f04f 0000 	mov.w	r0, #0
 8002acc:	4770      	bx	lr
 8002ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002ad2:	d105      	bne.n	8002ae0 <__aeabi_d2iz+0x48>
 8002ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002ad8:	bf08      	it	eq
 8002ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002ade:	4770      	bx	lr
 8002ae0:	f04f 0000 	mov.w	r0, #0
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop

08002ae8 <__aeabi_uldivmod>:
 8002ae8:	b953      	cbnz	r3, 8002b00 <__aeabi_uldivmod+0x18>
 8002aea:	b94a      	cbnz	r2, 8002b00 <__aeabi_uldivmod+0x18>
 8002aec:	2900      	cmp	r1, #0
 8002aee:	bf08      	it	eq
 8002af0:	2800      	cmpeq	r0, #0
 8002af2:	bf1c      	itt	ne
 8002af4:	f04f 31ff 	movne.w	r1, #4294967295
 8002af8:	f04f 30ff 	movne.w	r0, #4294967295
 8002afc:	f000 b972 	b.w	8002de4 <__aeabi_idiv0>
 8002b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8002b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002b08:	f000 f806 	bl	8002b18 <__udivmoddi4>
 8002b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b14:	b004      	add	sp, #16
 8002b16:	4770      	bx	lr

08002b18 <__udivmoddi4>:
 8002b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b1c:	9e08      	ldr	r6, [sp, #32]
 8002b1e:	4604      	mov	r4, r0
 8002b20:	4688      	mov	r8, r1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d14b      	bne.n	8002bbe <__udivmoddi4+0xa6>
 8002b26:	428a      	cmp	r2, r1
 8002b28:	4615      	mov	r5, r2
 8002b2a:	d967      	bls.n	8002bfc <__udivmoddi4+0xe4>
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b14a      	cbz	r2, 8002b46 <__udivmoddi4+0x2e>
 8002b32:	f1c2 0720 	rsb	r7, r2, #32
 8002b36:	fa01 f302 	lsl.w	r3, r1, r2
 8002b3a:	fa20 f707 	lsr.w	r7, r0, r7
 8002b3e:	4095      	lsls	r5, r2
 8002b40:	ea47 0803 	orr.w	r8, r7, r3
 8002b44:	4094      	lsls	r4, r2
 8002b46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002b4a:	0c23      	lsrs	r3, r4, #16
 8002b4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8002b50:	fa1f fc85 	uxth.w	ip, r5
 8002b54:	fb0e 8817 	mls	r8, lr, r7, r8
 8002b58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8002b5c:	fb07 f10c 	mul.w	r1, r7, ip
 8002b60:	4299      	cmp	r1, r3
 8002b62:	d909      	bls.n	8002b78 <__udivmoddi4+0x60>
 8002b64:	18eb      	adds	r3, r5, r3
 8002b66:	f107 30ff 	add.w	r0, r7, #4294967295
 8002b6a:	f080 811b 	bcs.w	8002da4 <__udivmoddi4+0x28c>
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	f240 8118 	bls.w	8002da4 <__udivmoddi4+0x28c>
 8002b74:	3f02      	subs	r7, #2
 8002b76:	442b      	add	r3, r5
 8002b78:	1a5b      	subs	r3, r3, r1
 8002b7a:	b2a4      	uxth	r4, r4
 8002b7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8002b80:	fb0e 3310 	mls	r3, lr, r0, r3
 8002b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002b88:	fb00 fc0c 	mul.w	ip, r0, ip
 8002b8c:	45a4      	cmp	ip, r4
 8002b8e:	d909      	bls.n	8002ba4 <__udivmoddi4+0x8c>
 8002b90:	192c      	adds	r4, r5, r4
 8002b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b96:	f080 8107 	bcs.w	8002da8 <__udivmoddi4+0x290>
 8002b9a:	45a4      	cmp	ip, r4
 8002b9c:	f240 8104 	bls.w	8002da8 <__udivmoddi4+0x290>
 8002ba0:	3802      	subs	r0, #2
 8002ba2:	442c      	add	r4, r5
 8002ba4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002ba8:	eba4 040c 	sub.w	r4, r4, ip
 8002bac:	2700      	movs	r7, #0
 8002bae:	b11e      	cbz	r6, 8002bb8 <__udivmoddi4+0xa0>
 8002bb0:	40d4      	lsrs	r4, r2
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e9c6 4300 	strd	r4, r3, [r6]
 8002bb8:	4639      	mov	r1, r7
 8002bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bbe:	428b      	cmp	r3, r1
 8002bc0:	d909      	bls.n	8002bd6 <__udivmoddi4+0xbe>
 8002bc2:	2e00      	cmp	r6, #0
 8002bc4:	f000 80eb 	beq.w	8002d9e <__udivmoddi4+0x286>
 8002bc8:	2700      	movs	r7, #0
 8002bca:	e9c6 0100 	strd	r0, r1, [r6]
 8002bce:	4638      	mov	r0, r7
 8002bd0:	4639      	mov	r1, r7
 8002bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd6:	fab3 f783 	clz	r7, r3
 8002bda:	2f00      	cmp	r7, #0
 8002bdc:	d147      	bne.n	8002c6e <__udivmoddi4+0x156>
 8002bde:	428b      	cmp	r3, r1
 8002be0:	d302      	bcc.n	8002be8 <__udivmoddi4+0xd0>
 8002be2:	4282      	cmp	r2, r0
 8002be4:	f200 80fa 	bhi.w	8002ddc <__udivmoddi4+0x2c4>
 8002be8:	1a84      	subs	r4, r0, r2
 8002bea:	eb61 0303 	sbc.w	r3, r1, r3
 8002bee:	2001      	movs	r0, #1
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	d0e0      	beq.n	8002bb8 <__udivmoddi4+0xa0>
 8002bf6:	e9c6 4800 	strd	r4, r8, [r6]
 8002bfa:	e7dd      	b.n	8002bb8 <__udivmoddi4+0xa0>
 8002bfc:	b902      	cbnz	r2, 8002c00 <__udivmoddi4+0xe8>
 8002bfe:	deff      	udf	#255	; 0xff
 8002c00:	fab2 f282 	clz	r2, r2
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	f040 808f 	bne.w	8002d28 <__udivmoddi4+0x210>
 8002c0a:	1b49      	subs	r1, r1, r5
 8002c0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002c10:	fa1f f885 	uxth.w	r8, r5
 8002c14:	2701      	movs	r7, #1
 8002c16:	fbb1 fcfe 	udiv	ip, r1, lr
 8002c1a:	0c23      	lsrs	r3, r4, #16
 8002c1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8002c20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c24:	fb08 f10c 	mul.w	r1, r8, ip
 8002c28:	4299      	cmp	r1, r3
 8002c2a:	d907      	bls.n	8002c3c <__udivmoddi4+0x124>
 8002c2c:	18eb      	adds	r3, r5, r3
 8002c2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8002c32:	d202      	bcs.n	8002c3a <__udivmoddi4+0x122>
 8002c34:	4299      	cmp	r1, r3
 8002c36:	f200 80cd 	bhi.w	8002dd4 <__udivmoddi4+0x2bc>
 8002c3a:	4684      	mov	ip, r0
 8002c3c:	1a59      	subs	r1, r3, r1
 8002c3e:	b2a3      	uxth	r3, r4
 8002c40:	fbb1 f0fe 	udiv	r0, r1, lr
 8002c44:	fb0e 1410 	mls	r4, lr, r0, r1
 8002c48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8002c4c:	fb08 f800 	mul.w	r8, r8, r0
 8002c50:	45a0      	cmp	r8, r4
 8002c52:	d907      	bls.n	8002c64 <__udivmoddi4+0x14c>
 8002c54:	192c      	adds	r4, r5, r4
 8002c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c5a:	d202      	bcs.n	8002c62 <__udivmoddi4+0x14a>
 8002c5c:	45a0      	cmp	r8, r4
 8002c5e:	f200 80b6 	bhi.w	8002dce <__udivmoddi4+0x2b6>
 8002c62:	4618      	mov	r0, r3
 8002c64:	eba4 0408 	sub.w	r4, r4, r8
 8002c68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8002c6c:	e79f      	b.n	8002bae <__udivmoddi4+0x96>
 8002c6e:	f1c7 0c20 	rsb	ip, r7, #32
 8002c72:	40bb      	lsls	r3, r7
 8002c74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8002c78:	ea4e 0e03 	orr.w	lr, lr, r3
 8002c7c:	fa01 f407 	lsl.w	r4, r1, r7
 8002c80:	fa20 f50c 	lsr.w	r5, r0, ip
 8002c84:	fa21 f30c 	lsr.w	r3, r1, ip
 8002c88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8002c8c:	4325      	orrs	r5, r4
 8002c8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8002c92:	0c2c      	lsrs	r4, r5, #16
 8002c94:	fb08 3319 	mls	r3, r8, r9, r3
 8002c98:	fa1f fa8e 	uxth.w	sl, lr
 8002c9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8002ca0:	fb09 f40a 	mul.w	r4, r9, sl
 8002ca4:	429c      	cmp	r4, r3
 8002ca6:	fa02 f207 	lsl.w	r2, r2, r7
 8002caa:	fa00 f107 	lsl.w	r1, r0, r7
 8002cae:	d90b      	bls.n	8002cc8 <__udivmoddi4+0x1b0>
 8002cb0:	eb1e 0303 	adds.w	r3, lr, r3
 8002cb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8002cb8:	f080 8087 	bcs.w	8002dca <__udivmoddi4+0x2b2>
 8002cbc:	429c      	cmp	r4, r3
 8002cbe:	f240 8084 	bls.w	8002dca <__udivmoddi4+0x2b2>
 8002cc2:	f1a9 0902 	sub.w	r9, r9, #2
 8002cc6:	4473      	add	r3, lr
 8002cc8:	1b1b      	subs	r3, r3, r4
 8002cca:	b2ad      	uxth	r5, r5
 8002ccc:	fbb3 f0f8 	udiv	r0, r3, r8
 8002cd0:	fb08 3310 	mls	r3, r8, r0, r3
 8002cd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8002cd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8002cdc:	45a2      	cmp	sl, r4
 8002cde:	d908      	bls.n	8002cf2 <__udivmoddi4+0x1da>
 8002ce0:	eb1e 0404 	adds.w	r4, lr, r4
 8002ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002ce8:	d26b      	bcs.n	8002dc2 <__udivmoddi4+0x2aa>
 8002cea:	45a2      	cmp	sl, r4
 8002cec:	d969      	bls.n	8002dc2 <__udivmoddi4+0x2aa>
 8002cee:	3802      	subs	r0, #2
 8002cf0:	4474      	add	r4, lr
 8002cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8002cf6:	fba0 8902 	umull	r8, r9, r0, r2
 8002cfa:	eba4 040a 	sub.w	r4, r4, sl
 8002cfe:	454c      	cmp	r4, r9
 8002d00:	46c2      	mov	sl, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	d354      	bcc.n	8002db0 <__udivmoddi4+0x298>
 8002d06:	d051      	beq.n	8002dac <__udivmoddi4+0x294>
 8002d08:	2e00      	cmp	r6, #0
 8002d0a:	d069      	beq.n	8002de0 <__udivmoddi4+0x2c8>
 8002d0c:	ebb1 050a 	subs.w	r5, r1, sl
 8002d10:	eb64 0403 	sbc.w	r4, r4, r3
 8002d14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8002d18:	40fd      	lsrs	r5, r7
 8002d1a:	40fc      	lsrs	r4, r7
 8002d1c:	ea4c 0505 	orr.w	r5, ip, r5
 8002d20:	e9c6 5400 	strd	r5, r4, [r6]
 8002d24:	2700      	movs	r7, #0
 8002d26:	e747      	b.n	8002bb8 <__udivmoddi4+0xa0>
 8002d28:	f1c2 0320 	rsb	r3, r2, #32
 8002d2c:	fa20 f703 	lsr.w	r7, r0, r3
 8002d30:	4095      	lsls	r5, r2
 8002d32:	fa01 f002 	lsl.w	r0, r1, r2
 8002d36:	fa21 f303 	lsr.w	r3, r1, r3
 8002d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002d3e:	4338      	orrs	r0, r7
 8002d40:	0c01      	lsrs	r1, r0, #16
 8002d42:	fbb3 f7fe 	udiv	r7, r3, lr
 8002d46:	fa1f f885 	uxth.w	r8, r5
 8002d4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8002d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002d52:	fb07 f308 	mul.w	r3, r7, r8
 8002d56:	428b      	cmp	r3, r1
 8002d58:	fa04 f402 	lsl.w	r4, r4, r2
 8002d5c:	d907      	bls.n	8002d6e <__udivmoddi4+0x256>
 8002d5e:	1869      	adds	r1, r5, r1
 8002d60:	f107 3cff 	add.w	ip, r7, #4294967295
 8002d64:	d22f      	bcs.n	8002dc6 <__udivmoddi4+0x2ae>
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d92d      	bls.n	8002dc6 <__udivmoddi4+0x2ae>
 8002d6a:	3f02      	subs	r7, #2
 8002d6c:	4429      	add	r1, r5
 8002d6e:	1acb      	subs	r3, r1, r3
 8002d70:	b281      	uxth	r1, r0
 8002d72:	fbb3 f0fe 	udiv	r0, r3, lr
 8002d76:	fb0e 3310 	mls	r3, lr, r0, r3
 8002d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002d7e:	fb00 f308 	mul.w	r3, r0, r8
 8002d82:	428b      	cmp	r3, r1
 8002d84:	d907      	bls.n	8002d96 <__udivmoddi4+0x27e>
 8002d86:	1869      	adds	r1, r5, r1
 8002d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8002d8c:	d217      	bcs.n	8002dbe <__udivmoddi4+0x2a6>
 8002d8e:	428b      	cmp	r3, r1
 8002d90:	d915      	bls.n	8002dbe <__udivmoddi4+0x2a6>
 8002d92:	3802      	subs	r0, #2
 8002d94:	4429      	add	r1, r5
 8002d96:	1ac9      	subs	r1, r1, r3
 8002d98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8002d9c:	e73b      	b.n	8002c16 <__udivmoddi4+0xfe>
 8002d9e:	4637      	mov	r7, r6
 8002da0:	4630      	mov	r0, r6
 8002da2:	e709      	b.n	8002bb8 <__udivmoddi4+0xa0>
 8002da4:	4607      	mov	r7, r0
 8002da6:	e6e7      	b.n	8002b78 <__udivmoddi4+0x60>
 8002da8:	4618      	mov	r0, r3
 8002daa:	e6fb      	b.n	8002ba4 <__udivmoddi4+0x8c>
 8002dac:	4541      	cmp	r1, r8
 8002dae:	d2ab      	bcs.n	8002d08 <__udivmoddi4+0x1f0>
 8002db0:	ebb8 0a02 	subs.w	sl, r8, r2
 8002db4:	eb69 020e 	sbc.w	r2, r9, lr
 8002db8:	3801      	subs	r0, #1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	e7a4      	b.n	8002d08 <__udivmoddi4+0x1f0>
 8002dbe:	4660      	mov	r0, ip
 8002dc0:	e7e9      	b.n	8002d96 <__udivmoddi4+0x27e>
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	e795      	b.n	8002cf2 <__udivmoddi4+0x1da>
 8002dc6:	4667      	mov	r7, ip
 8002dc8:	e7d1      	b.n	8002d6e <__udivmoddi4+0x256>
 8002dca:	4681      	mov	r9, r0
 8002dcc:	e77c      	b.n	8002cc8 <__udivmoddi4+0x1b0>
 8002dce:	3802      	subs	r0, #2
 8002dd0:	442c      	add	r4, r5
 8002dd2:	e747      	b.n	8002c64 <__udivmoddi4+0x14c>
 8002dd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8002dd8:	442b      	add	r3, r5
 8002dda:	e72f      	b.n	8002c3c <__udivmoddi4+0x124>
 8002ddc:	4638      	mov	r0, r7
 8002dde:	e708      	b.n	8002bf2 <__udivmoddi4+0xda>
 8002de0:	4637      	mov	r7, r6
 8002de2:	e6e9      	b.n	8002bb8 <__udivmoddi4+0xa0>

08002de4 <__aeabi_idiv0>:
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop

08002de8 <CANSPI_Transmit>:
  return true;
}

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8002dfa:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8002e00:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8002e06:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8002e0c:	f000 f9fc 	bl	8003208 <MCP2515_ReadStatus>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <CANSPI_Transmit+0xec>)
 8002e16:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <CANSPI_Transmit+0xec>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d115      	bne.n	8002e52 <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6858      	ldr	r0, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002e30:	4619      	mov	r1, r3
 8002e32:	f000 f928 	bl	8003086 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7a1a      	ldrb	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3309      	adds	r3, #9
 8002e3e:	4924      	ldr	r1, [pc, #144]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002e40:	2040      	movs	r0, #64	; 0x40
 8002e42:	f000 f999 	bl	8003178 <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8002e46:	2081      	movs	r0, #129	; 0x81
 8002e48:	f000 f9c2 	bl	80031d0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e038      	b.n	8002ec4 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <CANSPI_Transmit+0xec>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d115      	bne.n	8002e8c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6858      	ldr	r0, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f000 f90b 	bl	8003086 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7a1a      	ldrb	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3309      	adds	r3, #9
 8002e78:	4915      	ldr	r1, [pc, #84]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002e7a:	2042      	movs	r0, #66	; 0x42
 8002e7c:	f000 f97c 	bl	8003178 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8002e80:	2082      	movs	r0, #130	; 0x82
 8002e82:	f000 f9a5 	bl	80031d0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e01b      	b.n	8002ec4 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <CANSPI_Transmit+0xec>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d114      	bne.n	8002ec4 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6858      	ldr	r0, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f000 f8ee 	bl	8003086 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7a1a      	ldrb	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3309      	adds	r3, #9
 8002eb2:	4907      	ldr	r1, [pc, #28]	; (8002ed0 <CANSPI_Transmit+0xe8>)
 8002eb4:	2044      	movs	r0, #68	; 0x44
 8002eb6:	f000 f95f 	bl	8003178 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8002eba:	2084      	movs	r0, #132	; 0x84
 8002ebc:	f000 f988 	bl	80031d0 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000b9c 	.word	0x20000b9c
 8002ed4:	20000b98 	.word	0x20000b98

08002ed8 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8002ee4:	f000 f9ae 	bl	8003244 <MCP2515_GetRxStatus>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	733b      	strb	r3, [r7, #12]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8002eec:	7b3b      	ldrb	r3, [r7, #12]
 8002eee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d066      	beq.n	8002fc6 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8002ef8:	7b3b      	ldrb	r3, [r7, #12]
 8002efa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	7b3b      	ldrb	r3, [r7, #12]
 8002f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2bc0      	cmp	r3, #192	; 0xc0
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	220d      	movs	r2, #13
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	2090      	movs	r0, #144	; 0x90
 8002f2e:	f000 f8ff 	bl	8003130 <MCP2515_ReadRxSequence>
 8002f32:	e00c      	b.n	8002f4e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8002f34:	7b3b      	ldrb	r3, [r7, #12]
 8002f36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b80      	cmp	r3, #128	; 0x80
 8002f3e:	d106      	bne.n	8002f4e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8002f40:	f107 0310 	add.w	r3, r7, #16
 8002f44:	220d      	movs	r2, #13
 8002f46:	4619      	mov	r1, r3
 8002f48:	2094      	movs	r0, #148	; 0x94
 8002f4a:	f000 f8f1 	bl	8003130 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8002f4e:	7b3b      	ldrb	r3, [r7, #12]
 8002f50:	f003 0318 	and.w	r3, r3, #24
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d10c      	bne.n	8002f74 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8002f60:	7cb8      	ldrb	r0, [r7, #18]
 8002f62:	7cf9      	ldrb	r1, [r7, #19]
 8002f64:	7c3a      	ldrb	r2, [r7, #16]
 8002f66:	7c7b      	ldrb	r3, [r7, #17]
 8002f68:	f000 f832 	bl	8002fd0 <convertReg2ExtendedCANid>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	e00b      	b.n	8002f8c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8002f7a:	7c3b      	ldrb	r3, [r7, #16]
 8002f7c:	7c7a      	ldrb	r2, [r7, #17]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f863 	bl	800304c <convertReg2StandardCANid>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8002f8c:	7d3a      	ldrb	r2, [r7, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8002f92:	7d7a      	ldrb	r2, [r7, #21]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8002f98:	7dba      	ldrb	r2, [r7, #22]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8002f9e:	7dfa      	ldrb	r2, [r7, #23]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8002fa4:	7e3a      	ldrb	r2, [r7, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8002faa:	7e7a      	ldrb	r2, [r7, #25]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8002fb0:	7eba      	ldrb	r2, [r7, #26]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8002fb6:	7efa      	ldrb	r2, [r7, #27]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8002fbc:	7f3a      	ldrb	r2, [r7, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8002fd0:	b490      	push	{r4, r7}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	71fb      	strb	r3, [r7, #7]
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71bb      	strb	r3, [r7, #6]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	717b      	strb	r3, [r7, #5]
 8002fea:	4613      	mov	r3, r2
 8002fec:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8002ff6:	793b      	ldrb	r3, [r7, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8002ffe:	793b      	ldrb	r3, [r7, #4]
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8003004:	797b      	ldrb	r3, [r7, #5]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8003040:	697b      	ldr	r3, [r7, #20]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bc90      	pop	{r4, r7}
 800304a:	4770      	bx	lr

0800304c <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	460a      	mov	r2, r1
 8003056:	71fb      	strb	r3, [r7, #7]
 8003058:	4613      	mov	r3, r2
 800305a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8003066:	79bb      	ldrb	r3, [r7, #6]
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8003078:	68fb      	ldr	r3, [r7, #12]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8003086:	b480      	push	{r7}
 8003088:	b087      	sub	sp, #28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	460b      	mov	r3, r1
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d12e      	bne.n	80030fc <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f023 031f 	bic.w	r3, r3, #31
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	4413      	add	r3, r2
 80030d8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	3308      	adds	r3, #8
 80030de:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	f023 0314 	bic.w	r3, r3, #20
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	0a1b      	lsrs	r3, r3, #8
 80030f0:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80030fa:	e013      	b.n	8003124 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	701a      	strb	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <MCP2515_ReadRxSequence>:
  return retVal;
}

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	71fb      	strb	r3, [r7, #7]
 800313c:	4613      	mov	r3, r2
 800313e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003146:	480b      	ldr	r0, [pc, #44]	; (8003174 <MCP2515_ReadRxSequence+0x44>)
 8003148:	f002 fa2e 	bl	80055a8 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f896 	bl	8003280 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	4619      	mov	r1, r3
 8003158:	6838      	ldr	r0, [r7, #0]
 800315a:	f000 f8c7 	bl	80032ec <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 800315e:	2201      	movs	r2, #1
 8003160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <MCP2515_ReadRxSequence+0x44>)
 8003166:	f002 fa1f 	bl	80055a8 <HAL_GPIO_WritePin>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40020400 	.word	0x40020400

08003178 <MCP2515_LoadTxSequence>:
  MCP2515_CS_HIGH();
}

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
 8003186:	4613      	mov	r3, r2
 8003188:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 800318a:	2200      	movs	r2, #0
 800318c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003190:	480e      	ldr	r0, [pc, #56]	; (80031cc <MCP2515_LoadTxSequence+0x54>)
 8003192:	f002 fa09 	bl	80055a8 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f871 	bl	8003280 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 800319e:	2104      	movs	r1, #4
 80031a0:	68b8      	ldr	r0, [r7, #8]
 80031a2:	f000 f87f 	bl	80032a4 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f869 	bl	8003280 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 80031ae:	7bbb      	ldrb	r3, [r7, #14]
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f876 	bl	80032a4 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 80031b8:	2201      	movs	r2, #1
 80031ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <MCP2515_LoadTxSequence+0x54>)
 80031c0:	f002 f9f2 	bl	80055a8 <HAL_GPIO_WritePin>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40020400 	.word	0x40020400

080031d0 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 80031da:	2200      	movs	r2, #0
 80031dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031e0:	4808      	ldr	r0, [pc, #32]	; (8003204 <MCP2515_RequestToSend+0x34>)
 80031e2:	f002 f9e1 	bl	80055a8 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f849 	bl	8003280 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 80031ee:	2201      	movs	r2, #1
 80031f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f4:	4803      	ldr	r0, [pc, #12]	; (8003204 <MCP2515_RequestToSend+0x34>)
 80031f6:	f002 f9d7 	bl	80055a8 <HAL_GPIO_WritePin>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40020400 	.word	0x40020400

08003208 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800320e:	2200      	movs	r2, #0
 8003210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <MCP2515_ReadStatus+0x38>)
 8003216:	f002 f9c7 	bl	80055a8 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 800321a:	20a0      	movs	r0, #160	; 0xa0
 800321c:	f000 f830 	bl	8003280 <SPI_Tx>
  retVal = SPI_Rx();
 8003220:	f000 f854 	bl	80032cc <SPI_Rx>
 8003224:	4603      	mov	r3, r0
 8003226:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8003228:	2201      	movs	r2, #1
 800322a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800322e:	4804      	ldr	r0, [pc, #16]	; (8003240 <MCP2515_ReadStatus+0x38>)
 8003230:	f002 f9ba 	bl	80055a8 <HAL_GPIO_WritePin>
  
  return retVal;
 8003234:	79fb      	ldrb	r3, [r7, #7]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40020400 	.word	0x40020400

08003244 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800324a:	2200      	movs	r2, #0
 800324c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003250:	480a      	ldr	r0, [pc, #40]	; (800327c <MCP2515_GetRxStatus+0x38>)
 8003252:	f002 f9a9 	bl	80055a8 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8003256:	20b0      	movs	r0, #176	; 0xb0
 8003258:	f000 f812 	bl	8003280 <SPI_Tx>
  retVal = SPI_Rx();
 800325c:	f000 f836 	bl	80032cc <SPI_Rx>
 8003260:	4603      	mov	r3, r0
 8003262:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8003264:	2201      	movs	r2, #1
 8003266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800326a:	4804      	ldr	r0, [pc, #16]	; (800327c <MCP2515_GetRxStatus+0x38>)
 800326c:	f002 f99c 	bl	80055a8 <HAL_GPIO_WritePin>
  
  return retVal;
 8003270:	79fb      	ldrb	r3, [r7, #7]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020400 	.word	0x40020400

08003280 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800328a:	1df9      	adds	r1, r7, #7
 800328c:	230a      	movs	r3, #10
 800328e:	2201      	movs	r2, #1
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <SPI_Tx+0x20>)
 8003292:	f005 fa6f 	bl	8008774 <HAL_SPI_Transmit>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000ba0 	.word	0x20000ba0

080032a4 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	230a      	movs	r3, #10
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4803      	ldr	r0, [pc, #12]	; (80032c8 <SPI_TxBuffer+0x24>)
 80032ba:	f005 fa5b 	bl	8008774 <HAL_SPI_Transmit>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000ba0 	.word	0x20000ba0

080032cc <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80032d2:	1df9      	adds	r1, r7, #7
 80032d4:	230a      	movs	r3, #10
 80032d6:	2201      	movs	r2, #1
 80032d8:	4803      	ldr	r0, [pc, #12]	; (80032e8 <SPI_Rx+0x1c>)
 80032da:	f005 fb7f 	bl	80089dc <HAL_SPI_Receive>
  return retVal;
 80032de:	79fb      	ldrb	r3, [r7, #7]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000ba0 	.word	0x20000ba0

080032ec <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	230a      	movs	r3, #10
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <SPI_RxBuffer+0x24>)
 8003302:	f005 fb6b 	bl	80089dc <HAL_SPI_Receive>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000ba0 	.word	0x20000ba0

08003314 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	while((USART2->SR&(1<<7)) == 0);
 800331c:	bf00      	nop
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <__io_putchar+0x2c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f9      	beq.n	800331e <__io_putchar+0xa>
	USART2->DR = ch;
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <__io_putchar+0x2c>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6053      	str	r3, [r2, #4]
  return ch;
 8003330:	687b      	ldr	r3, [r7, #4]
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40004400 	.word	0x40004400
 8003344:	00000000 	.word	0x00000000

08003348 <CANopen>:

uint32_t RPM;
float torque;
float temp;

void CANopen(void){
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
	txMessage.frame.id=0x80;//0x81
 800334e:	4b6c      	ldr	r3, [pc, #432]	; (8003500 <CANopen+0x1b8>)
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	605a      	str	r2, [r3, #4]
	txMessage.frame.idType=0x00;
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <CANopen+0x1b8>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
	txMessage.frame.dlc=8;
 800335a:	4b69      	ldr	r3, [pc, #420]	; (8003500 <CANopen+0x1b8>)
 800335c:	2208      	movs	r2, #8
 800335e:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0=0x00;
 8003360:	4b67      	ldr	r3, [pc, #412]	; (8003500 <CANopen+0x1b8>)
 8003362:	2200      	movs	r2, #0
 8003364:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1=0x00;
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <CANopen+0x1b8>)
 8003368:	2200      	movs	r2, #0
 800336a:	729a      	strb	r2, [r3, #10]
	txMessage.frame.data2=0x00;
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <CANopen+0x1b8>)
 800336e:	2200      	movs	r2, #0
 8003370:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3=0x00;
 8003372:	4b63      	ldr	r3, [pc, #396]	; (8003500 <CANopen+0x1b8>)
 8003374:	2200      	movs	r2, #0
 8003376:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4=0x00;
 8003378:	4b61      	ldr	r3, [pc, #388]	; (8003500 <CANopen+0x1b8>)
 800337a:	2200      	movs	r2, #0
 800337c:	735a      	strb	r2, [r3, #13]
	txMessage.frame.data5=0x00;
 800337e:	4b60      	ldr	r3, [pc, #384]	; (8003500 <CANopen+0x1b8>)
 8003380:	2200      	movs	r2, #0
 8003382:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6=0x00;
 8003384:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <CANopen+0x1b8>)
 8003386:	2200      	movs	r2, #0
 8003388:	73da      	strb	r2, [r3, #15]
	txMessage.frame.data7=0x00;
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <CANopen+0x1b8>)
 800338c:	2200      	movs	r2, #0
 800338e:	741a      	strb	r2, [r3, #16]
	CANSPI_Transmit(&txMessage);
 8003390:	485b      	ldr	r0, [pc, #364]	; (8003500 <CANopen+0x1b8>)
 8003392:	f7ff fd29 	bl	8002de8 <CANSPI_Transmit>
	HAL_Delay(50);
 8003396:	2032      	movs	r0, #50	; 0x32
 8003398:	f001 fe38 	bl	800500c <HAL_Delay>

	if(CANSPI_Receive(&rxMessage))
 800339c:	4859      	ldr	r0, [pc, #356]	; (8003504 <CANopen+0x1bc>)
 800339e:	f7ff fd9b 	bl	8002ed8 <CANSPI_Receive>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <CANopen+0x1a4>
	{
		uint16_t RPM_1= ((uint16_t)rxMessage.frame.data1 << 8) | rxMessage.frame.data0;
 80033aa:	4b56      	ldr	r3, [pc, #344]	; (8003504 <CANopen+0x1bc>)
 80033ac:	7a9b      	ldrb	r3, [r3, #10]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	4b54      	ldr	r3, [pc, #336]	; (8003504 <CANopen+0x1bc>)
 80033b4:	7a5b      	ldrb	r3, [r3, #9]
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	80fb      	strh	r3, [r7, #6]
		uint16_t RPM_2= ((uint16_t)rxMessage.frame.data3 << 8) | rxMessage.frame.data2;
 80033be:	4b51      	ldr	r3, [pc, #324]	; (8003504 <CANopen+0x1bc>)
 80033c0:	7b1b      	ldrb	r3, [r3, #12]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	b21a      	sxth	r2, r3
 80033c6:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <CANopen+0x1bc>)
 80033c8:	7adb      	ldrb	r3, [r3, #11]
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	80bb      	strh	r3, [r7, #4]
		RPM=	((uint32_t)RPM_2 << 16) | RPM_1;
 80033d2:	88bb      	ldrh	r3, [r7, #4]
 80033d4:	041a      	lsls	r2, r3, #16
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	4313      	orrs	r3, r2
 80033da:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <CANopen+0x1c0>)
 80033dc:	6013      	str	r3, [r2, #0]

		// if(torque_buff!=0)PrintString("torque is not zero!\r\n");
		// TX torque doesn't work
		torque= ((uint16_t)rxMessage.frame.data7 << 8) | rxMessage.frame.data6;
 80033de:	4b49      	ldr	r3, [pc, #292]	; (8003504 <CANopen+0x1bc>)
 80033e0:	7c1b      	ldrb	r3, [r3, #16]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	4a47      	ldr	r2, [pc, #284]	; (8003504 <CANopen+0x1bc>)
 80033e6:	7bd2      	ldrb	r2, [r2, #15]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <CANopen+0x1c4>)
 80033f4:	edc3 7a00 	vstr	s15, [r3]
		temp= ((uint16_t)rxMessage.frame.data5 << 8) | rxMessage.frame.data4;
 80033f8:	4b42      	ldr	r3, [pc, #264]	; (8003504 <CANopen+0x1bc>)
 80033fa:	7b9b      	ldrb	r3, [r3, #14]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	4a41      	ldr	r2, [pc, #260]	; (8003504 <CANopen+0x1bc>)
 8003400:	7b52      	ldrb	r2, [r2, #13]
 8003402:	4313      	orrs	r3, r2
 8003404:	ee07 3a90 	vmov	s15, r3
 8003408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800340c:	4b40      	ldr	r3, [pc, #256]	; (8003510 <CANopen+0x1c8>)
 800340e:	edc3 7a00 	vstr	s15, [r3]
		//   	uint16_t torque_buff= ((uint16_t)rxMessage.frame.data5 << 8) | rxMessage.frame.data4;
		//		uint16_t temp_buff= ((uint16_t)rxMessage.frame.data1 << 8) | rxMessage.frame.data0;

		sprintf(Rbuff,"RPM: %ld\r\n",RPM);
 8003412:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <CANopen+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	493e      	ldr	r1, [pc, #248]	; (8003514 <CANopen+0x1cc>)
 800341a:	483f      	ldr	r0, [pc, #252]	; (8003518 <CANopen+0x1d0>)
 800341c:	f00a fec4 	bl	800e1a8 <siprintf>
		sprintf(Tbuff,"Torque: %.2f \r\n",(float)torque*0.1);
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <CANopen+0x1c4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f82f 	bl	8002488 <__aeabi_f2d>
 800342a:	a333      	add	r3, pc, #204	; (adr r3, 80034f8 <CANopen+0x1b0>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7ff f882 	bl	8002538 <__aeabi_dmul>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	461a      	mov	r2, r3
 800343a:	4623      	mov	r3, r4
 800343c:	4937      	ldr	r1, [pc, #220]	; (800351c <CANopen+0x1d4>)
 800343e:	4838      	ldr	r0, [pc, #224]	; (8003520 <CANopen+0x1d8>)
 8003440:	f00a feb2 	bl	800e1a8 <siprintf>
		sprintf(TempBuff,"Temp:%.2f \r\n",temp);
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <CANopen+0x1c8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff f81d 	bl	8002488 <__aeabi_f2d>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	461a      	mov	r2, r3
 8003454:	4623      	mov	r3, r4
 8003456:	4933      	ldr	r1, [pc, #204]	; (8003524 <CANopen+0x1dc>)
 8003458:	4833      	ldr	r0, [pc, #204]	; (8003528 <CANopen+0x1e0>)
 800345a:	f00a fea5 	bl	800e1a8 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)Rbuff, sizeof(Rbuff), 100);
 800345e:	2364      	movs	r3, #100	; 0x64
 8003460:	2264      	movs	r2, #100	; 0x64
 8003462:	492d      	ldr	r1, [pc, #180]	; (8003518 <CANopen+0x1d0>)
 8003464:	4831      	ldr	r0, [pc, #196]	; (800352c <CANopen+0x1e4>)
 8003466:	f006 f8f6 	bl	8009656 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)TempBuff, sizeof(TempBuff), 100);
 800346a:	2364      	movs	r3, #100	; 0x64
 800346c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003470:	492d      	ldr	r1, [pc, #180]	; (8003528 <CANopen+0x1e0>)
 8003472:	482e      	ldr	r0, [pc, #184]	; (800352c <CANopen+0x1e4>)
 8003474:	f006 f8ef 	bl	8009656 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)Tbuff, sizeof(Tbuff), 100);
 8003478:	2364      	movs	r3, #100	; 0x64
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	4928      	ldr	r1, [pc, #160]	; (8003520 <CANopen+0x1d8>)
 8003480:	482a      	ldr	r0, [pc, #168]	; (800352c <CANopen+0x1e4>)
 8003482:	f006 f8e8 	bl	8009656 <HAL_UART_Transmit>

		if(RPM>=1000){
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <CANopen+0x1c0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800348e:	d306      	bcc.n	800349e <CANopen+0x156>
			HAL_UART_Transmit(&huart2, (uint8_t*)"RPM : warning\r\n", sizeof("RPM : warning\r\n"), 100);
 8003490:	2364      	movs	r3, #100	; 0x64
 8003492:	2210      	movs	r2, #16
 8003494:	4926      	ldr	r1, [pc, #152]	; (8003530 <CANopen+0x1e8>)
 8003496:	4825      	ldr	r0, [pc, #148]	; (800352c <CANopen+0x1e4>)
 8003498:	f006 f8dd 	bl	8009656 <HAL_UART_Transmit>
 800349c:	e005      	b.n	80034aa <CANopen+0x162>
		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t*)"RPM : normal\r\n", sizeof("RPM : normal\r\n"), 100);
 800349e:	2364      	movs	r3, #100	; 0x64
 80034a0:	220f      	movs	r2, #15
 80034a2:	4924      	ldr	r1, [pc, #144]	; (8003534 <CANopen+0x1ec>)
 80034a4:	4821      	ldr	r0, [pc, #132]	; (800352c <CANopen+0x1e4>)
 80034a6:	f006 f8d6 	bl	8009656 <HAL_UART_Transmit>
		}

		if(temp>=80){
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <CANopen+0x1c8>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003538 <CANopen+0x1f0>
 80034b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	db06      	blt.n	80034cc <CANopen+0x184>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Temperature : over-heat\r\n", sizeof("Temperature : over-heat\r\n"), 100);
 80034be:	2364      	movs	r3, #100	; 0x64
 80034c0:	221a      	movs	r2, #26
 80034c2:	491e      	ldr	r1, [pc, #120]	; (800353c <CANopen+0x1f4>)
 80034c4:	4819      	ldr	r0, [pc, #100]	; (800352c <CANopen+0x1e4>)
 80034c6:	f006 f8c6 	bl	8009656 <HAL_UART_Transmit>
 80034ca:	e005      	b.n	80034d8 <CANopen+0x190>
		}
		else{
			HAL_UART_Transmit(&huart2, (uint8_t*)"Temperature : normal\r\n", sizeof("Temperature : normal\r\n"), 100);
 80034cc:	2364      	movs	r3, #100	; 0x64
 80034ce:	2217      	movs	r2, #23
 80034d0:	491b      	ldr	r1, [pc, #108]	; (8003540 <CANopen+0x1f8>)
 80034d2:	4816      	ldr	r0, [pc, #88]	; (800352c <CANopen+0x1e4>)
 80034d4:	f006 f8bf 	bl	8009656 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), 100);
 80034d8:	2364      	movs	r3, #100	; 0x64
 80034da:	2202      	movs	r2, #2
 80034dc:	4919      	ldr	r1, [pc, #100]	; (8003544 <CANopen+0x1fc>)
 80034de:	4813      	ldr	r0, [pc, #76]	; (800352c <CANopen+0x1e4>)
 80034e0:	f006 f8b9 	bl	8009656 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80034e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80034e8:	f001 fd90 	bl	800500c <HAL_Delay>
	}
//	else{
//		HAL_UART_Transmit(&huart2, (uint8_t*)"No CAN connection\r\n", sizeof("No CAN connection\r\n"), 100);
//	}
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	f3af 8000 	nop.w
 80034f8:	9999999a 	.word	0x9999999a
 80034fc:	3fb99999 	.word	0x3fb99999
 8003500:	20000e3c 	.word	0x20000e3c
 8003504:	200010e8 	.word	0x200010e8
 8003508:	20000e38 	.word	0x20000e38
 800350c:	20000e34 	.word	0x20000e34
 8003510:	20000e30 	.word	0x20000e30
 8003514:	0800ffd8 	.word	0x0800ffd8
 8003518:	20000c38 	.word	0x20000c38
 800351c:	0800ffe4 	.word	0x0800ffe4
 8003520:	20000f50 	.word	0x20000f50
 8003524:	0800fff4 	.word	0x0800fff4
 8003528:	20000e50 	.word	0x20000e50
 800352c:	200010a8 	.word	0x200010a8
 8003530:	08010004 	.word	0x08010004
 8003534:	08010014 	.word	0x08010014
 8003538:	42a00000 	.word	0x42a00000
 800353c:	08010024 	.word	0x08010024
 8003540:	08010040 	.word	0x08010040
 8003544:	08010058 	.word	0x08010058

08003548 <Init_Timer>:

void Init_Timer(){
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim10);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <Init_Timer+0x10>)
 800354e:	f005 fe2c 	bl	80091aa <HAL_TIM_Base_Start_IT>
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000cf0 	.word	0x20000cf0

0800355c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003560:	f001 fce2 	bl	8004f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003564:	f000 f81a 	bl	800359c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003568:	f000 f9dc 	bl	8003924 <MX_GPIO_Init>
  MX_I2C1_Init();
 800356c:	f000 f898 	bl	80036a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8003570:	f000 f8c4 	bl	80036fc <MX_I2S3_Init>
  MX_SPI1_Init();
 8003574:	f000 f8f2 	bl	800375c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8003578:	f009 fbb8 	bl	800ccec <MX_USB_HOST_Init>
  MX_SPI2_Init();
 800357c:	f000 f924 	bl	80037c8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8003580:	f000 f97c 	bl	800387c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003584:	f000 f9a4 	bl	80038d0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003588:	f000 f954 	bl	8003834 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  Cortex_main(0, NULL);
 800358c:	2100      	movs	r1, #0
 800358e:	2000      	movs	r0, #0
 8003590:	f001 fa8c 	bl	8004aac <Cortex_main>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8003594:	f009 fbd0 	bl	800cd38 <MX_USB_HOST_Process>
 8003598:	e7fc      	b.n	8003594 <main+0x38>
	...

0800359c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b098      	sub	sp, #96	; 0x60
 80035a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035a6:	2230      	movs	r2, #48	; 0x30
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f009 ff10 	bl	800d3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b31      	ldr	r3, [pc, #196]	; (8003698 <SystemClock_Config+0xfc>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a30      	ldr	r2, [pc, #192]	; (8003698 <SystemClock_Config+0xfc>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <SystemClock_Config+0xfc>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <SystemClock_Config+0x100>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2a      	ldr	r2, [pc, #168]	; (800369c <SystemClock_Config+0x100>)
 80035f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b28      	ldr	r3, [pc, #160]	; (800369c <SystemClock_Config+0x100>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003606:	2301      	movs	r3, #1
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800360a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003610:	2302      	movs	r3, #2
 8003612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003614:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800361a:	2308      	movs	r3, #8
 800361c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800361e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003622:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003624:	2302      	movs	r3, #2
 8003626:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003628:	2307      	movs	r3, #7
 800362a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800362c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003630:	4618      	mov	r0, r3
 8003632:	f004 fa9b 	bl	8007b6c <HAL_RCC_OscConfig>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800363c:	f000 fa96 	bl	8003b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003640:	230f      	movs	r3, #15
 8003642:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003644:	2302      	movs	r3, #2
 8003646:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800364c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003658:	f107 031c 	add.w	r3, r7, #28
 800365c:	2105      	movs	r1, #5
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fcf4 	bl	800804c <HAL_RCC_ClockConfig>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800366a:	f000 fa7f 	bl	8003b6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800366e:	2301      	movs	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003672:	23c0      	movs	r3, #192	; 0xc0
 8003674:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003676:	2302      	movs	r3, #2
 8003678:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	4618      	mov	r0, r3
 8003680:	f004 fed6 	bl	8008430 <HAL_RCCEx_PeriphCLKConfig>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800368a:	f000 fa6f 	bl	8003b6c <Error_Handler>
  }
}
 800368e:	bf00      	nop
 8003690:	3760      	adds	r7, #96	; 0x60
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000

080036a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <MX_I2C1_Init+0x54>)
 80036a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036ac:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <MX_I2C1_Init+0x58>)
 80036ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036de:	f003 fc6d 	bl	8006fbc <HAL_I2C_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80036e8:	f000 fa40 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000c9c 	.word	0x20000c9c
 80036f4:	40005400 	.word	0x40005400
 80036f8:	000186a0 	.word	0x000186a0

080036fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <MX_I2S3_Init+0x54>)
 8003702:	4a14      	ldr	r2, [pc, #80]	; (8003754 <MX_I2S3_Init+0x58>)
 8003704:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <MX_I2S3_Init+0x54>)
 8003708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800370c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <MX_I2S3_Init+0x54>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <MX_I2S3_Init+0x54>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <MX_I2S3_Init+0x54>)
 800371c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003720:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <MX_I2S3_Init+0x54>)
 8003724:	4a0c      	ldr	r2, [pc, #48]	; (8003758 <MX_I2S3_Init+0x5c>)
 8003726:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003728:	4b09      	ldr	r3, [pc, #36]	; (8003750 <MX_I2S3_Init+0x54>)
 800372a:	2200      	movs	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <MX_I2S3_Init+0x54>)
 8003730:	2200      	movs	r2, #0
 8003732:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <MX_I2S3_Init+0x54>)
 8003736:	2200      	movs	r2, #0
 8003738:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800373a:	4805      	ldr	r0, [pc, #20]	; (8003750 <MX_I2S3_Init+0x54>)
 800373c:	f003 fd76 	bl	800722c <HAL_I2S_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8003746:	f000 fa11 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200010fc 	.word	0x200010fc
 8003754:	40003c00 	.word	0x40003c00
 8003758:	00017700 	.word	0x00017700

0800375c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <MX_SPI1_Init+0x68>)
 8003764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800376c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <MX_SPI1_Init+0x64>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003790:	2200      	movs	r2, #0
 8003792:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <MX_SPI1_Init+0x64>)
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <MX_SPI1_Init+0x64>)
 800379c:	2200      	movs	r2, #0
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <MX_SPI1_Init+0x64>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <MX_SPI1_Init+0x64>)
 80037a8:	220a      	movs	r2, #10
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037ac:	4804      	ldr	r0, [pc, #16]	; (80037c0 <MX_SPI1_Init+0x64>)
 80037ae:	f004 ff7d 	bl	80086ac <HAL_SPI_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80037b8:	f000 f9d8 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20001050 	.word	0x20001050
 80037c4:	40013000 	.word	0x40013000

080037c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <MX_SPI2_Init+0x64>)
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <MX_SPI2_Init+0x68>)
 80037d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <MX_SPI2_Init+0x64>)
 80037d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <MX_SPI2_Init+0x64>)
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <MX_SPI2_Init+0x64>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <MX_SPI2_Init+0x64>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_SPI2_Init+0x64>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <MX_SPI2_Init+0x64>)
 80037f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MX_SPI2_Init+0x64>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <MX_SPI2_Init+0x64>)
 8003802:	2200      	movs	r2, #0
 8003804:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <MX_SPI2_Init+0x64>)
 8003808:	2200      	movs	r2, #0
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380c:	4b07      	ldr	r3, [pc, #28]	; (800382c <MX_SPI2_Init+0x64>)
 800380e:	2200      	movs	r2, #0
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <MX_SPI2_Init+0x64>)
 8003814:	220a      	movs	r2, #10
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <MX_SPI2_Init+0x64>)
 800381a:	f004 ff47 	bl	80086ac <HAL_SPI_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003824:	f000 f9a2 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000ba0 	.word	0x20000ba0
 8003830:	40003800 	.word	0x40003800

08003834 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <MX_TIM10_Init+0x40>)
 800383a:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <MX_TIM10_Init+0x44>)
 800383c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <MX_TIM10_Init+0x40>)
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <MX_TIM10_Init+0x40>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <MX_TIM10_Init+0x40>)
 800384c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003850:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <MX_TIM10_Init+0x40>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <MX_TIM10_Init+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800385e:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_TIM10_Init+0x40>)
 8003860:	f005 fc78 	bl	8009154 <HAL_TIM_Base_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800386a:	f000 f97f 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000cf0 	.word	0x20000cf0
 8003878:	40014400 	.word	0x40014400

0800387c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 8003882:	4a12      	ldr	r2, [pc, #72]	; (80038cc <MX_USART2_UART_Init+0x50>)
 8003884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 8003888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800388c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038b2:	4805      	ldr	r0, [pc, #20]	; (80038c8 <MX_USART2_UART_Init+0x4c>)
 80038b4:	f005 fe82 	bl	80095bc <HAL_UART_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038be:	f000 f955 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200010a8 	.word	0x200010a8
 80038cc:	40004400 	.word	0x40004400

080038d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <MX_USART3_UART_Init+0x50>)
 80038d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038f6:	220c      	movs	r2, #12
 80038f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <MX_USART3_UART_Init+0x4c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <MX_USART3_UART_Init+0x4c>)
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_USART3_UART_Init+0x4c>)
 8003908:	f005 fe58 	bl	80095bc <HAL_UART_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003912:	f000 f92b 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000bf8 	.word	0x20000bf8
 8003920:	40004800 	.word	0x40004800

08003924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392a:	f107 031c 	add.w	r3, r7, #28
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a7a      	ldr	r2, [pc, #488]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b78      	ldr	r3, [pc, #480]	; (8003b2c <MX_GPIO_Init+0x208>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <MX_GPIO_Init+0x208>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a73      	ldr	r2, [pc, #460]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a6c      	ldr	r2, [pc, #432]	; (8003b2c <MX_GPIO_Init+0x208>)
 800397c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b6a      	ldr	r3, [pc, #424]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a65      	ldr	r2, [pc, #404]	; (8003b2c <MX_GPIO_Init+0x208>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	4b58      	ldr	r3, [pc, #352]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a57      	ldr	r2, [pc, #348]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039d0:	f043 0308 	orr.w	r3, r3, #8
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <MX_GPIO_Init+0x208>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2108      	movs	r1, #8
 80039e6:	4852      	ldr	r0, [pc, #328]	; (8003b30 <MX_GPIO_Init+0x20c>)
 80039e8:	f001 fdde 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2101      	movs	r1, #1
 80039f0:	4850      	ldr	r0, [pc, #320]	; (8003b34 <MX_GPIO_Init+0x210>)
 80039f2:	f001 fdd9 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039fc:	484e      	ldr	r0, [pc, #312]	; (8003b38 <MX_GPIO_Init+0x214>)
 80039fe:	f001 fdd3 	bl	80055a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003a02:	2200      	movs	r2, #0
 8003a04:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003a08:	484c      	ldr	r0, [pc, #304]	; (8003b3c <MX_GPIO_Init+0x218>)
 8003a0a:	f001 fdcd 	bl	80055a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003a0e:	2308      	movs	r3, #8
 8003a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a12:	2301      	movs	r3, #1
 8003a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	4619      	mov	r1, r3
 8003a24:	4842      	ldr	r0, [pc, #264]	; (8003b30 <MX_GPIO_Init+0x20c>)
 8003a26:	f001 fc25 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003a3a:	f107 031c 	add.w	r3, r7, #28
 8003a3e:	4619      	mov	r1, r3
 8003a40:	483c      	ldr	r0, [pc, #240]	; (8003b34 <MX_GPIO_Init+0x210>)
 8003a42:	f001 fc17 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003a46:	2308      	movs	r3, #8
 8003a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a56:	2305      	movs	r3, #5
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4834      	ldr	r0, [pc, #208]	; (8003b34 <MX_GPIO_Init+0x210>)
 8003a62:	f001 fc07 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a66:	2301      	movs	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003a6a:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <MX_GPIO_Init+0x21c>)
 8003a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a72:	f107 031c 	add.w	r3, r7, #28
 8003a76:	4619      	mov	r1, r3
 8003a78:	4832      	ldr	r0, [pc, #200]	; (8003b44 <MX_GPIO_Init+0x220>)
 8003a7a:	f001 fbfb 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003a7e:	2304      	movs	r3, #4
 8003a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a82:	2300      	movs	r3, #0
 8003a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003a8a:	f107 031c 	add.w	r3, r7, #28
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4829      	ldr	r0, [pc, #164]	; (8003b38 <MX_GPIO_Init+0x214>)
 8003a92:	f001 fbef 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aa8:	2305      	movs	r3, #5
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003aac:	f107 031c 	add.w	r3, r7, #28
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4821      	ldr	r0, [pc, #132]	; (8003b38 <MX_GPIO_Init+0x214>)
 8003ab4:	f001 fbde 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8003ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4819      	ldr	r0, [pc, #100]	; (8003b38 <MX_GPIO_Init+0x214>)
 8003ad2:	f001 fbcf 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003ad6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003ada:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	2301      	movs	r3, #1
 8003ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ae8:	f107 031c 	add.w	r3, r7, #28
 8003aec:	4619      	mov	r1, r3
 8003aee:	4813      	ldr	r0, [pc, #76]	; (8003b3c <MX_GPIO_Init+0x218>)
 8003af0:	f001 fbc0 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003af4:	2320      	movs	r3, #32
 8003af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af8:	2300      	movs	r3, #0
 8003afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4619      	mov	r1, r3
 8003b06:	480d      	ldr	r0, [pc, #52]	; (8003b3c <MX_GPIO_Init+0x218>)
 8003b08:	f001 fbb4 	bl	8005274 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <MX_GPIO_Init+0x21c>)
 8003b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4804      	ldr	r0, [pc, #16]	; (8003b30 <MX_GPIO_Init+0x20c>)
 8003b20:	f001 fba8 	bl	8005274 <HAL_GPIO_Init>

}
 8003b24:	bf00      	nop
 8003b26:	3730      	adds	r7, #48	; 0x30
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40020800 	.word	0x40020800
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	10120000 	.word	0x10120000
 8003b44:	40020000 	.word	0x40020000

08003b48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_PeriodElapsedCallback+0x16>
		RiCTick();
 8003b5a:	f7fd fe66 	bl	800182a <RiCTick>
	  }
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40014400 	.word	0x40014400

08003b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b90:	6453      	str	r3, [r2, #68]	; 0x44
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003bba:	2007      	movs	r0, #7
 8003bbc:	f001 fb18 	bl	80051f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800

08003bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <HAL_I2C_MspInit+0x84>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d12c      	bne.n	8003c48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003c0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c10:	2312      	movs	r3, #18
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c14:	2301      	movs	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <HAL_I2C_MspInit+0x8c>)
 8003c28:	f001 fb24 	bl	8005274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_I2C_MspInit+0x88>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c48:	bf00      	nop
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40005400 	.word	0x40005400
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020400 	.word	0x40020400

08003c5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_I2S_MspInit+0xc0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d14a      	bne.n	8003d14 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_I2S_MspInit+0xc4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ce2:	2306      	movs	r3, #6
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <HAL_I2S_MspInit+0xc8>)
 8003cee:	f001 fac1 	bl	8005274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003cf2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003d04:	2306      	movs	r3, #6
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4806      	ldr	r0, [pc, #24]	; (8003d28 <HAL_I2S_MspInit+0xcc>)
 8003d10:	f001 fab0 	bl	8005274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003d14:	bf00      	nop
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40003c00 	.word	0x40003c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40020800 	.word	0x40020800

08003d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_SPI_MspInit+0x124>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d12c      	bne.n	8003da8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5e:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7a:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003d86:	23e0      	movs	r3, #224	; 0xe0
 8003d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d92:	2300      	movs	r3, #0
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d96:	2305      	movs	r3, #5
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	4619      	mov	r1, r3
 8003da0:	482d      	ldr	r0, [pc, #180]	; (8003e58 <HAL_SPI_MspInit+0x12c>)
 8003da2:	f001 fa67 	bl	8005274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003da6:	e04f      	b.n	8003e48 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <HAL_SPI_MspInit+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d14a      	bne.n	8003e48 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc2:	4b24      	ldr	r3, [pc, #144]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <HAL_SPI_MspInit+0x128>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e06:	2304      	movs	r3, #4
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e16:	2305      	movs	r3, #5
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	4619      	mov	r1, r3
 8003e20:	480f      	ldr	r0, [pc, #60]	; (8003e60 <HAL_SPI_MspInit+0x134>)
 8003e22:	f001 fa27 	bl	8005274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003e26:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e34:	2303      	movs	r3, #3
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e38:	2305      	movs	r3, #5
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	4619      	mov	r1, r3
 8003e42:	4808      	ldr	r0, [pc, #32]	; (8003e64 <HAL_SPI_MspInit+0x138>)
 8003e44:	f001 fa16 	bl	8005274 <HAL_GPIO_Init>
}
 8003e48:	bf00      	nop
 8003e4a:	3730      	adds	r7, #48	; 0x30
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40013000 	.word	0x40013000
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020000 	.word	0x40020000
 8003e5c:	40003800 	.word	0x40003800
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020400 	.word	0x40020400

08003e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0e      	ldr	r2, [pc, #56]	; (8003eb0 <HAL_TIM_Base_MspInit+0x48>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d115      	bne.n	8003ea6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_TIM_Base_MspInit+0x4c>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <HAL_TIM_Base_MspInit+0x4c>)
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_TIM_Base_MspInit+0x4c>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2019      	movs	r0, #25
 8003e9c:	f001 f9b3 	bl	8005206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ea0:	2019      	movs	r0, #25
 8003ea2:	f001 f9cc 	bl	800523e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08c      	sub	sp, #48	; 0x30
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 031c 	add.w	r3, r7, #28
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a42      	ldr	r2, [pc, #264]	; (8003fe0 <HAL_UART_MspInit+0x128>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12c      	bne.n	8003f34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	4b3a      	ldr	r3, [pc, #232]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a39      	ldr	r2, [pc, #228]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f12:	230c      	movs	r3, #12
 8003f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f22:	2307      	movs	r3, #7
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f26:	f107 031c 	add.w	r3, r7, #28
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	482e      	ldr	r0, [pc, #184]	; (8003fe8 <HAL_UART_MspInit+0x130>)
 8003f2e:	f001 f9a1 	bl	8005274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f32:	e050      	b.n	8003fd6 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <HAL_UART_MspInit+0x134>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d14b      	bne.n	8003fd6 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f80:	f043 0308 	orr.w	r3, r3, #8
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <HAL_UART_MspInit+0x12c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fa4:	2307      	movs	r3, #7
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	4619      	mov	r1, r3
 8003fae:	4810      	ldr	r0, [pc, #64]	; (8003ff0 <HAL_UART_MspInit+0x138>)
 8003fb0:	f001 f960 	bl	8005274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fc6:	2307      	movs	r3, #7
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fca:	f107 031c 	add.w	r3, r7, #28
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4808      	ldr	r0, [pc, #32]	; (8003ff4 <HAL_UART_MspInit+0x13c>)
 8003fd2:	f001 f94f 	bl	8005274 <HAL_GPIO_Init>
}
 8003fd6:	bf00      	nop
 8003fd8:	3730      	adds	r7, #48	; 0x30
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	40004800 	.word	0x40004800
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	40020c00 	.word	0x40020c00

08003ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800400a:	e7fe      	b.n	800400a <HardFault_Handler+0x4>

0800400c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <MemManage_Handler+0x4>

08004012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004016:	e7fe      	b.n	8004016 <BusFault_Handler+0x4>

08004018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800401c:	e7fe      	b.n	800401c <UsageFault_Handler+0x4>

0800401e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800404c:	f000 ffbe 	bl	8004fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004050:	bf00      	nop
 8004052:	bd80      	pop	{r7, pc}

08004054 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004058:	4802      	ldr	r0, [pc, #8]	; (8004064 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800405a:	f005 f8ca 	bl	80091f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000cf0 	.word	0x20000cf0

08004068 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <OTG_FS_IRQHandler+0x10>)
 800406e:	f001 fd43 	bl	8005af8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	2000159c 	.word	0x2000159c

0800407c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
	return 1;
 8004080:	2301      	movs	r3, #1
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <_kill>:

int _kill(int pid, int sig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004096:	f009 f94f 	bl	800d338 <__errno>
 800409a:	4602      	mov	r2, r0
 800409c:	2316      	movs	r3, #22
 800409e:	6013      	str	r3, [r2, #0]
	return -1;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_exit>:

void _exit (int status)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040b4:	f04f 31ff 	mov.w	r1, #4294967295
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ffe7 	bl	800408c <_kill>
	while (1) {}		/* Make sure we hang here */
 80040be:	e7fe      	b.n	80040be <_exit+0x12>

080040c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e00a      	b.n	80040e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040d2:	f3af 8000 	nop.w
 80040d6:	4601      	mov	r1, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	60ba      	str	r2, [r7, #8]
 80040de:	b2ca      	uxtb	r2, r1
 80040e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dbf0      	blt.n	80040d2 <_read+0x12>
	}

return len;
 80040f0:	687b      	ldr	r3, [r7, #4]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	e009      	b.n	8004120 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	60ba      	str	r2, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f8fd 	bl	8003314 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3301      	adds	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	dbf1      	blt.n	800410c <_write+0x12>
	}
	return len;
 8004128:	687b      	ldr	r3, [r7, #4]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <_close>:

int _close(int file)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
	return -1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800415a:	605a      	str	r2, [r3, #4]
	return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <_isatty>:

int _isatty(int file)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	return 1;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
	return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <_sbrk+0x5c>)
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <_sbrk+0x60>)
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d102      	bne.n	80041be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <_sbrk+0x64>)
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <_sbrk+0x68>)
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <_sbrk+0x64>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d207      	bcs.n	80041dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041cc:	f009 f8b4 	bl	800d338 <__errno>
 80041d0:	4602      	mov	r2, r0
 80041d2:	230c      	movs	r3, #12
 80041d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	e009      	b.n	80041f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <_sbrk+0x64>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	4a05      	ldr	r2, [pc, #20]	; (8004200 <_sbrk+0x64>)
 80041ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20020000 	.word	0x20020000
 80041fc:	00000400 	.word	0x00000400
 8004200:	20000b80 	.word	0x20000b80
 8004204:	20001868 	.word	0x20001868

08004208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <SystemInit+0x28>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <SystemInit+0x28>)
 8004214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <SystemInit+0x28>)
 800421e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004222:	609a      	str	r2, [r3, #8]
#endif
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <my_itoa>:

#define UBIDOTS_TOKEN   "BBFF-WeWEmnH1dQ1qd8Dtbk2DzKCCIaXiKQ"
#define UBIDOTS_DEVICE  "STM32F407"

void my_itoa(uint32_t val, uint8_t* str, uint8_t len)	// integer to array
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 1; i <= len; i++)
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
 8004246:	e01c      	b.n	8004282 <my_itoa+0x4e>
	{
		str[len - i] = (uint8_t)((val % 10UL) + '0');
 8004248:	68f9      	ldr	r1, [r7, #12]
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <my_itoa+0x70>)
 800424c:	fba3 2301 	umull	r2, r3, r3, r1
 8004250:	08da      	lsrs	r2, r3, #3
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	1aca      	subs	r2, r1, r3
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	79f9      	ldrb	r1, [r7, #7]
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	1acb      	subs	r3, r1, r3
 8004264:	4619      	mov	r1, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	440b      	add	r3, r1
 800426a:	3230      	adds	r2, #48	; 0x30
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
		val /= 10;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <my_itoa+0x70>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	60fb      	str	r3, [r7, #12]
	for (i = 1; i <= len; i++)
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	3301      	adds	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
 8004282:	7dfa      	ldrb	r2, [r7, #23]
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	429a      	cmp	r2, r3
 8004288:	d9de      	bls.n	8004248 <my_itoa+0x14>
	}
	str[i - 1] = '\0';
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	3b01      	subs	r3, #1
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	cccccccd 	.word	0xcccccccd

080042a8 <FloatToString>:
void FloatToString(uint8_t *str, float f, char size, char after_point) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80042b4:	460b      	mov	r3, r1
 80042b6:	71fb      	strb	r3, [r7, #7]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71bb      	strb	r3, [r7, #6]
	int count;
	uint8_t* curr;
	int value;
	
	size++; /* to include NULL */
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	3301      	adds	r3, #1
 80042c0:	71fb      	strb	r3, [r7, #7]
	value = (int)f;
 80042c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80042c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ca:	ee17 3a90 	vmov	r3, s15
 80042ce:	617b      	str	r3, [r7, #20]
	my_itoa(value, str, size-after_point-2);
 80042d0:	6978      	ldr	r0, [r7, #20]
 80042d2:	79fa      	ldrb	r2, [r7, #7]
 80042d4:	79bb      	ldrb	r3, [r7, #6]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	3b02      	subs	r3, #2
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	68f9      	ldr	r1, [r7, #12]
 80042e2:	f7ff ffa7 	bl	8004234 <my_itoa>
	count = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
	curr = str;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 80042ee:	e005      	b.n	80042fc <FloatToString+0x54>
		++count;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	3301      	adds	r3, #1
 80042f4:	61fb      	str	r3, [r7, #28]
		++curr;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3301      	adds	r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f5      	bne.n	80042f0 <FloatToString+0x48>
	}
 
	if (count + 1 >= size) {
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	79fb      	ldrb	r3, [r7, #7]
 800430a:	429a      	cmp	r2, r3
 800430c:	db06      	blt.n	800431c <FloatToString+0x74>
		str[size - 1] = 0;
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	3b01      	subs	r3, #1
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
		return;	
 800431a:	e04b      	b.n	80043b4 <FloatToString+0x10c>
	}
 	
	str[count++] = '.';
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	61fa      	str	r2, [r7, #28]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	222e      	movs	r2, #46	; 0x2e
 800432a:	701a      	strb	r2, [r3, #0]
	++curr;
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	3301      	adds	r3, #1
 8004330:	61bb      	str	r3, [r7, #24]
	f = f - (float)value;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800433c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004344:	edc7 7a02 	vstr	s15, [r7, #8]
 	
	while (count + 1 < size) {
 8004348:	e00a      	b.n	8004360 <FloatToString+0xb8>
		f *= 10;
 800434a:	edd7 7a02 	vldr	s15, [r7, #8]
 800434e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004356:	edc7 7a02 	vstr	s15, [r7, #8]
		++count;	
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3301      	adds	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
	while (count + 1 < size) {
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	429a      	cmp	r2, r3
 8004368:	dbef      	blt.n	800434a <FloatToString+0xa2>
	}
 	
	value = (int)f;
 800436a:	edd7 7a02 	vldr	s15, [r7, #8]
 800436e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004372:	ee17 3a90 	vmov	r3, s15
 8004376:	617b      	str	r3, [r7, #20]
	my_itoa(value, curr, after_point);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	79ba      	ldrb	r2, [r7, #6]
 800437c:	69b9      	ldr	r1, [r7, #24]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff ff58 	bl	8004234 <my_itoa>
	str[size - 1] = 0;
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	3b01      	subs	r3, #1
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
	
	count = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 8004394:	e007      	b.n	80043a6 <FloatToString+0xfe>
	{
		*(str + count) = ' ';
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	2220      	movs	r2, #32
 800439e:	701a      	strb	r2, [r3, #0]
		count++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b30      	cmp	r3, #48	; 0x30
 80043b0:	d0f1      	beq.n	8004396 <FloatToString+0xee>
	}
	return;
 80043b2:	bf00      	nop
}
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <WifiSetup>:
 
void WifiSetup(void)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b0e6      	sub	sp, #408	; 0x198
 80043c0:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80043c8:	e00a      	b.n	80043e0 <WifiSetup+0x24>
 80043ca:	463a      	mov	r2, r7
 80043cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043d0:	4413      	add	r3, r2
 80043d2:	2220      	movs	r2, #32
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043da:	3301      	adds	r3, #1
 80043dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80043e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80043e4:	2bc7      	cmp	r3, #199	; 0xc7
 80043e6:	ddf0      	ble.n	80043ca <WifiSetup+0xe>
	strcpy((char *)string, "AT+CWMODE=3");
 80043e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80043ec:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <WifiSetup+0x15c>)
 80043ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80043f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 80043f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fd fe86 	bl	800210a <strlen>
 80043fe:	4603      	mov	r3, r0
 8004400:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8004404:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004408:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800440c:	4413      	add	r3, r2
 800440e:	220d      	movs	r2, #13
 8004410:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 8004412:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004416:	3301      	adds	r3, #1
 8004418:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800441c:	4413      	add	r3, r2
 800441e:	220a      	movs	r2, #10
 8004420:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 8004424:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004428:	3302      	adds	r3, #2
 800442a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800442e:	4413      	add	r3, r2
 8004430:	2200      	movs	r2, #0
 8004432:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 8004436:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800443a:	b29b      	uxth	r3, r3
 800443c:	3302      	adds	r3, #2
 800443e:	b29a      	uxth	r2, r3
 8004440:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8004444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004448:	4834      	ldr	r0, [pc, #208]	; (800451c <WifiSetup+0x160>)
 800444a:	f005 f904 	bl	8009656 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 1000);
 800444e:	4639      	mov	r1, r7
 8004450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004454:	2264      	movs	r2, #100	; 0x64
 8004456:	4831      	ldr	r0, [pc, #196]	; (800451c <WifiSetup+0x160>)
 8004458:	f005 f996 	bl	8009788 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 800445c:	4639      	mov	r1, r7
 800445e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004462:	2264      	movs	r2, #100	; 0x64
 8004464:	482e      	ldr	r0, [pc, #184]	; (8004520 <WifiSetup+0x164>)
 8004466:	f005 f8f6 	bl	8009656 <HAL_UART_Transmit>
	string[0] = 0x0D;
 800446a:	230d      	movs	r3, #13
 800446c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8004470:	230a      	movs	r3, #10
 8004472:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8004476:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800447a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800447e:	2202      	movs	r2, #2
 8004480:	4827      	ldr	r0, [pc, #156]	; (8004520 <WifiSetup+0x164>)
 8004482:	f005 f8e8 	bl	8009656 <HAL_UART_Transmit>
	
	strcpy((char *)string, (char *)"AT+CWJAP=\"FOURTOR\",""");
 8004486:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800448a:	4a26      	ldr	r2, [pc, #152]	; (8004524 <WifiSetup+0x168>)
 800448c:	461c      	mov	r4, r3
 800448e:	4615      	mov	r5, r2
 8004490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	6023      	str	r3, [r4, #0]
//	strcpy((char *)string, (char *)"AT+CWJAP=\"iPhone (3)\",\"gkdus713\"");
	length = strlen((char *)string);
 8004498:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800449c:	4618      	mov	r0, r3
 800449e:	f7fd fe34 	bl	800210a <strlen>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 80044a8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80044ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80044b0:	4413      	add	r3, r2
 80044b2:	220d      	movs	r2, #13
 80044b4:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 80044b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80044ba:	3301      	adds	r3, #1
 80044bc:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80044c0:	4413      	add	r3, r2
 80044c2:	220a      	movs	r2, #10
 80044c4:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 80044c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80044cc:	3302      	adds	r3, #2
 80044ce:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80044d2:	4413      	add	r3, r2
 80044d4:	2200      	movs	r2, #0
 80044d6:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 80044da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3302      	adds	r3, #2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80044e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ec:	480b      	ldr	r0, [pc, #44]	; (800451c <WifiSetup+0x160>)
 80044ee:	f005 f8b2 	bl	8009656 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000);
 80044f2:	4639      	mov	r1, r7
 80044f4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80044f8:	2264      	movs	r2, #100	; 0x64
 80044fa:	4808      	ldr	r0, [pc, #32]	; (800451c <WifiSetup+0x160>)
 80044fc:	f005 f944 	bl	8009788 <HAL_UART_Receive>
//	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
	string[0] = 0x0D;
 8004500:	230d      	movs	r3, #13
 8004502:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8004506:	230a      	movs	r3, #10
 8004508:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
//	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
}
 800450c:	bf00      	nop
 800450e:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8004512:	46bd      	mov	sp, r7
 8004514:	bdb0      	pop	{r4, r5, r7, pc}
 8004516:	bf00      	nop
 8004518:	0801005c 	.word	0x0801005c
 800451c:	20000bf8 	.word	0x20000bf8
 8004520:	200010a8 	.word	0x200010a8
 8004524:	08010068 	.word	0x08010068

08004528 <OpenUbidots>:
void OpenUbidots(void)
{
 8004528:	b5b0      	push	{r4, r5, r7, lr}
 800452a:	b0e8      	sub	sp, #416	; 0x1a0
 800452c:	af00      	add	r7, sp, #0
	int length;
	int ret;
	
	do
	{
		for (int i = 0; i < 200; i++)buffer[i] = ' ';
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004534:	e00a      	b.n	800454c <OpenUbidots+0x24>
 8004536:	1d3a      	adds	r2, r7, #4
 8004538:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800453c:	4413      	add	r3, r2
 800453e:	2220      	movs	r2, #32
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004546:	3301      	adds	r3, #1
 8004548:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800454c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004550:	2bc7      	cmp	r3, #199	; 0xc7
 8004552:	ddf0      	ble.n	8004536 <OpenUbidots+0xe>
		strcpy((char *)string, (char *)"AT+CIPSTART=\"TCP\",\"things.ubidots.com\",80");
 8004554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004558:	4a32      	ldr	r2, [pc, #200]	; (8004624 <OpenUbidots+0xfc>)
 800455a:	461c      	mov	r4, r3
 800455c:	4615      	mov	r5, r2
 800455e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800456a:	c403      	stmia	r4!, {r0, r1}
 800456c:	8022      	strh	r2, [r4, #0]
		length = strlen((char *)string);
 800456e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fdc9 	bl	800210a <strlen>
 8004578:	4603      	mov	r3, r0
 800457a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		string[length] = 0x0D;
 800457e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8004582:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004586:	4413      	add	r3, r2
 8004588:	220d      	movs	r2, #13
 800458a:	701a      	strb	r2, [r3, #0]
		string[length + 1] = 0x0A;
 800458c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004590:	3301      	adds	r3, #1
 8004592:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8004596:	4413      	add	r3, r2
 8004598:	220a      	movs	r2, #10
 800459a:	f803 2cd4 	strb.w	r2, [r3, #-212]
		string[length + 2] = 0;
 800459e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80045a2:	3302      	adds	r3, #2
 80045a4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80045a8:	4413      	add	r3, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	f803 2cd4 	strb.w	r2, [r3, #-212]
		HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 80045b0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3302      	adds	r3, #2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80045be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045c2:	4819      	ldr	r0, [pc, #100]	; (8004628 <OpenUbidots+0x100>)
 80045c4:	f005 f847 	bl	8009656 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 80045c8:	1d39      	adds	r1, r7, #4
 80045ca:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80045ce:	2264      	movs	r2, #100	; 0x64
 80045d0:	4815      	ldr	r0, [pc, #84]	; (8004628 <OpenUbidots+0x100>)
 80045d2:	f005 f8d9 	bl	8009788 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 80045d6:	1d39      	adds	r1, r7, #4
 80045d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045dc:	2264      	movs	r2, #100	; 0x64
 80045de:	4813      	ldr	r0, [pc, #76]	; (800462c <OpenUbidots+0x104>)
 80045e0:	f005 f839 	bl	8009656 <HAL_UART_Transmit>
		string[0] = 0x0D;
 80045e4:	230d      	movs	r3, #13
 80045e6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		string[1] = 0x0A;
 80045ea:	230a      	movs	r3, #10
 80045ec:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 80045f0:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80045f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045f8:	2202      	movs	r2, #2
 80045fa:	480c      	ldr	r0, [pc, #48]	; (800462c <OpenUbidots+0x104>)
 80045fc:	f005 f82b 	bl	8009656 <HAL_UART_Transmit>
		ret = (int)strstr((char *)buffer, (char *)"CONNECT");
 8004600:	1d3b      	adds	r3, r7, #4
 8004602:	490b      	ldr	r1, [pc, #44]	; (8004630 <OpenUbidots+0x108>)
 8004604:	4618      	mov	r0, r3
 8004606:	f009 fdef 	bl	800e1e8 <strstr>
 800460a:	4603      	mov	r3, r0
 800460c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	} while (ret == 0);
 8004610:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004614:	2b00      	cmp	r3, #0
 8004616:	d08a      	beq.n	800452e <OpenUbidots+0x6>
}
 8004618:	bf00      	nop
 800461a:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 800461e:	46bd      	mov	sp, r7
 8004620:	bdb0      	pop	{r4, r5, r7, pc}
 8004622:	bf00      	nop
 8004624:	0801007c 	.word	0x0801007c
 8004628:	20000bf8 	.word	0x20000bf8
 800462c:	200010a8 	.word	0x200010a8
 8004630:	080100a8 	.word	0x080100a8

08004634 <CloseUbidots>:
void CloseUbidots(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0e6      	sub	sp, #408	; 0x198
 8004638:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8004640:	e00a      	b.n	8004658 <CloseUbidots+0x24>
 8004642:	463a      	mov	r2, r7
 8004644:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004648:	4413      	add	r3, r2
 800464a:	2220      	movs	r2, #32
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004652:	3301      	adds	r3, #1
 8004654:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8004658:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800465c:	2bc7      	cmp	r3, #199	; 0xc7
 800465e:	ddf0      	ble.n	8004642 <CloseUbidots+0xe>
	strcpy((char *)string, (char *)"AT+CIPCLOSE");
 8004660:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004664:	4a28      	ldr	r2, [pc, #160]	; (8004708 <CloseUbidots+0xd4>)
 8004666:	ca07      	ldmia	r2, {r0, r1, r2}
 8004668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 800466c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd fd4a 	bl	800210a <strlen>
 8004676:	4603      	mov	r3, r0
 8004678:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 800467c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004680:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004684:	4413      	add	r3, r2
 8004686:	220d      	movs	r2, #13
 8004688:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 800468a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800468e:	3301      	adds	r3, #1
 8004690:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8004694:	4413      	add	r3, r2
 8004696:	220a      	movs	r2, #10
 8004698:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 800469c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80046a0:	3302      	adds	r3, #2
 80046a2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80046a6:	4413      	add	r3, r2
 80046a8:	2200      	movs	r2, #0
 80046aa:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 80046ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3302      	adds	r3, #2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80046bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046c0:	4812      	ldr	r0, [pc, #72]	; (800470c <CloseUbidots+0xd8>)
 80046c2:	f004 ffc8 	bl	8009656 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 80046c6:	4639      	mov	r1, r7
 80046c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80046cc:	2264      	movs	r2, #100	; 0x64
 80046ce:	480f      	ldr	r0, [pc, #60]	; (800470c <CloseUbidots+0xd8>)
 80046d0:	f005 f85a 	bl	8009788 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 80046d4:	4639      	mov	r1, r7
 80046d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046da:	2264      	movs	r2, #100	; 0x64
 80046dc:	480c      	ldr	r0, [pc, #48]	; (8004710 <CloseUbidots+0xdc>)
 80046de:	f004 ffba 	bl	8009656 <HAL_UART_Transmit>
	string[0] = 0x0D;
 80046e2:	230d      	movs	r3, #13
 80046e4:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 80046e8:	230a      	movs	r3, #10
 80046ea:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 80046ee:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80046f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f6:	2202      	movs	r2, #2
 80046f8:	4805      	ldr	r0, [pc, #20]	; (8004710 <CloseUbidots+0xdc>)
 80046fa:	f004 ffac 	bl	8009656 <HAL_UART_Transmit>
}
 80046fe:	bf00      	nop
 8004700:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	080100b0 	.word	0x080100b0
 800470c:	20000bf8 	.word	0x20000bf8
 8004710:	200010a8 	.word	0x200010a8

08004714 <WifiUbidots>:
// uint32_t rpm,uint16_t torque,uint16_t temperature
void WifiUbidots(void)
{
 8004714:	b5b0      	push	{r4, r5, r7, lr}
 8004716:	f6ad 3d28 	subw	sp, sp, #2856	; 0xb28
 800471a:	af02      	add	r7, sp, #8
	int length;
	int ret;
	
	for (;;)
	{
		OpenUbidots();
 800471c:	f7ff ff04 	bl	8004528 <OpenUbidots>
		do
		{
			CANopen();
 8004720:	f7fe fe12 	bl	8003348 <CANopen>
			FloatToString(rpm_string, RPM, sizeof(rpm_string), 1);
 8004724:	4b85      	ldr	r3, [pc, #532]	; (800493c <WifiUbidots+0x228>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004734:	2201      	movs	r2, #1
 8004736:	2164      	movs	r1, #100	; 0x64
 8004738:	eeb0 0a67 	vmov.f32	s0, s15
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fdb3 	bl	80042a8 <FloatToString>
			FloatToString(torque_string, torque, sizeof(rpm_string), 1);
 8004742:	4b7f      	ldr	r3, [pc, #508]	; (8004940 <WifiUbidots+0x22c>)
 8004744:	edd3 7a00 	vldr	s15, [r3]
 8004748:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800474c:	2201      	movs	r2, #1
 800474e:	2164      	movs	r1, #100	; 0x64
 8004750:	eeb0 0a67 	vmov.f32	s0, s15
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fda7 	bl	80042a8 <FloatToString>
			FloatToString(temp_string, temp, sizeof(rpm_string), 1);
 800475a:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <WifiUbidots+0x230>)
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004764:	2201      	movs	r2, #1
 8004766:	2164      	movs	r1, #100	; 0x64
 8004768:	eeb0 0a67 	vmov.f32	s0, s15
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fd9b 	bl	80042a8 <FloatToString>
//			sprintf(message, "{\"RPM\": %ld,\"torque\": %.2f,\"temperature\": %.2f}",RPM,torque,temp);
			sprintf(message, "{\"RPM\": %ld,\"torque\": %.2f}",RPM,torque);
 8004772:	4b72      	ldr	r3, [pc, #456]	; (800493c <WifiUbidots+0x228>)
 8004774:	681d      	ldr	r5, [r3, #0]
 8004776:	4b72      	ldr	r3, [pc, #456]	; (8004940 <WifiUbidots+0x22c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fd fe84 	bl	8002488 <__aeabi_f2d>
 8004780:	4603      	mov	r3, r0
 8004782:	460c      	mov	r4, r1
 8004784:	4638      	mov	r0, r7
 8004786:	e9cd 3400 	strd	r3, r4, [sp]
 800478a:	462a      	mov	r2, r5
 800478c:	496e      	ldr	r1, [pc, #440]	; (8004948 <WifiUbidots+0x234>)
 800478e:	f009 fd0b 	bl	800e1a8 <siprintf>
			// rpm_string,torque_string,temp_string
			// rpm,torque,temperature
			HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 0xFFFF);
 8004792:	463b      	mov	r3, r7
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd fcb8 	bl	800210a <strlen>
 800479a:	4603      	mov	r3, r0
 800479c:	b29a      	uxth	r2, r3
 800479e:	4639      	mov	r1, r7
 80047a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047a4:	4869      	ldr	r0, [pc, #420]	; (800494c <WifiUbidots+0x238>)
 80047a6:	f004 ff56 	bl	8009656 <HAL_UART_Transmit>
			sprintf(sendBuffer, "POST /api/v1.6/devices/%s/?token=%s HTTP/1.1\r\nHost: things.ubidots.com\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s", UBIDOTS_DEVICE, UBIDOTS_TOKEN, (int)strlen(message), message); 
 80047aa:	463b      	mov	r3, r7
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fd fcac 	bl	800210a <strlen>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	f507 70ba 	add.w	r0, r7, #372	; 0x174
 80047ba:	463b      	mov	r3, r7
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	9200      	str	r2, [sp, #0]
 80047c0:	4b63      	ldr	r3, [pc, #396]	; (8004950 <WifiUbidots+0x23c>)
 80047c2:	4a64      	ldr	r2, [pc, #400]	; (8004954 <WifiUbidots+0x240>)
 80047c4:	4964      	ldr	r1, [pc, #400]	; (8004958 <WifiUbidots+0x244>)
 80047c6:	f009 fcef 	bl	800e1a8 <siprintf>
			sendBufferLength = strlen((char *)sendBuffer);
 80047ca:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fd fc9b 	bl	800210a <strlen>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3b17 	strb.w	r3, [r7, #2839]	; 0xb17
			for (int i = 0; i < 50; i++)buffer[i] = ' ';
 80047da:	2300      	movs	r3, #0
 80047dc:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80047e0:	e00b      	b.n	80047fa <WifiUbidots+0xe6>
 80047e2:	f507 721d 	add.w	r2, r7, #628	; 0x274
 80047e6:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80047ea:	4413      	add	r3, r2
 80047ec:	2220      	movs	r2, #32
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80047f4:	3301      	adds	r3, #1
 80047f6:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80047fa:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80047fe:	2b31      	cmp	r3, #49	; 0x31
 8004800:	ddef      	ble.n	80047e2 <WifiUbidots+0xce>
			my_itoa(sendBufferLength, sendBufferLengthString, 3);
 8004802:	f897 3b17 	ldrb.w	r3, [r7, #2839]	; 0xb17
 8004806:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 800480a:	2203      	movs	r2, #3
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fd11 	bl	8004234 <my_itoa>
			sprintf((char *)string, "AT+CIPSEND=%s", sendBufferLengthString);
 8004812:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8004816:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800481a:	4950      	ldr	r1, [pc, #320]	; (800495c <WifiUbidots+0x248>)
 800481c:	4618      	mov	r0, r3
 800481e:	f009 fcc3 	bl	800e1a8 <siprintf>
			length = strlen((char *)string);
 8004822:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8004826:	4618      	mov	r0, r3
 8004828:	f7fd fc6f 	bl	800210a <strlen>
 800482c:	4603      	mov	r3, r0
 800482e:	f8c7 3b10 	str.w	r3, [r7, #2832]	; 0xb10
			string[length] = 0x0D;
 8004832:	f607 2244 	addw	r2, r7, #2628	; 0xa44
 8004836:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800483a:	4413      	add	r3, r2
 800483c:	220d      	movs	r2, #13
 800483e:	701a      	strb	r2, [r3, #0]
			string[length + 1] = 0x0A;
 8004840:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004844:	3301      	adds	r3, #1
 8004846:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800484a:	4413      	add	r3, r2
 800484c:	220a      	movs	r2, #10
 800484e:	f803 2cdc 	strb.w	r2, [r3, #-220]
			string[length + 2] = 0;
 8004852:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004856:	3302      	adds	r3, #2
 8004858:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800485c:	4413      	add	r3, r2
 800485e:	2200      	movs	r2, #0
 8004860:	f803 2cdc 	strb.w	r2, [r3, #-220]
			HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8004864:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004868:	b29b      	uxth	r3, r3
 800486a:	3302      	adds	r3, #2
 800486c:	b29a      	uxth	r2, r3
 800486e:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 8004872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004876:	483a      	ldr	r0, [pc, #232]	; (8004960 <WifiUbidots+0x24c>)
 8004878:	f004 feed 	bl	8009656 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 24, 4000);	
 800487c:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8004880:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004884:	2218      	movs	r2, #24
 8004886:	4836      	ldr	r0, [pc, #216]	; (8004960 <WifiUbidots+0x24c>)
 8004888:	f004 ff7e 	bl	8009788 <HAL_UART_Receive>
		
			for (int i = 0; i < 2000; i++)buffer[i] = ' ';
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 8004892:	e00b      	b.n	80048ac <WifiUbidots+0x198>
 8004894:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8004898:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 800489c:	4413      	add	r3, r2
 800489e:	2220      	movs	r2, #32
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80048a6:	3301      	adds	r3, #1
 80048a8:	f8c7 3b18 	str.w	r3, [r7, #2840]	; 0xb18
 80048ac:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80048b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048b4:	dbee      	blt.n	8004894 <WifiUbidots+0x180>
			HAL_Delay(1);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f000 fba8 	bl	800500c <HAL_Delay>
			HAL_UART_Transmit(&huart3, (uint8_t *)(sendBuffer), sendBufferLength, 0xFFFF);
 80048bc:	f897 3b17 	ldrb.w	r3, [r7, #2839]	; 0xb17
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 80048c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ca:	4825      	ldr	r0, [pc, #148]	; (8004960 <WifiUbidots+0x24c>)
 80048cc:	f004 fec3 	bl	8009656 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 500, 4000);
 80048d0:	f507 711d 	add.w	r1, r7, #628	; 0x274
 80048d4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80048d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048dc:	4820      	ldr	r0, [pc, #128]	; (8004960 <WifiUbidots+0x24c>)
 80048de:	f004 ff53 	bl	8009788 <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 500, 0xFFFF);
 80048e2:	f507 711d 	add.w	r1, r7, #628	; 0x274
 80048e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048ee:	4817      	ldr	r0, [pc, #92]	; (800494c <WifiUbidots+0x238>)
 80048f0:	f004 feb1 	bl	8009656 <HAL_UART_Transmit>
			string[0] = 0x0D;
 80048f4:	230d      	movs	r3, #13
 80048f6:	f887 3a44 	strb.w	r3, [r7, #2628]	; 0xa44
			string[1] = 0x0A;
 80048fa:	230a      	movs	r3, #10
 80048fc:	f887 3a45 	strb.w	r3, [r7, #2629]	; 0xa45
			HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 8004900:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 8004904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004908:	2202      	movs	r2, #2
 800490a:	4810      	ldr	r0, [pc, #64]	; (800494c <WifiUbidots+0x238>)
 800490c:	f004 fea3 	bl	8009656 <HAL_UART_Transmit>
			ret = (int)strstr((char *)buffer, (char *)"ERROR");
 8004910:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8004914:	4913      	ldr	r1, [pc, #76]	; (8004964 <WifiUbidots+0x250>)
 8004916:	4618      	mov	r0, r3
 8004918:	f009 fc66 	bl	800e1e8 <strstr>
 800491c:	4603      	mov	r3, r0
 800491e:	f8c7 3b0c 	str.w	r3, [r7, #2828]	; 0xb0c
			/* wait for a while to slow down */    
			HAL_Delay(20000);
 8004922:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004926:	f000 fb71 	bl	800500c <HAL_Delay>
		} while (ret == 0);
 800492a:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800492e:	2b00      	cmp	r3, #0
 8004930:	f43f aef6 	beq.w	8004720 <WifiUbidots+0xc>
		CloseUbidots();
 8004934:	f7ff fe7e 	bl	8004634 <CloseUbidots>
		OpenUbidots();
 8004938:	e6f0      	b.n	800471c <WifiUbidots+0x8>
 800493a:	bf00      	nop
 800493c:	20000e38 	.word	0x20000e38
 8004940:	20000e34 	.word	0x20000e34
 8004944:	20000e30 	.word	0x20000e30
 8004948:	080100bc 	.word	0x080100bc
 800494c:	200010a8 	.word	0x200010a8
 8004950:	080100d8 	.word	0x080100d8
 8004954:	080100fc 	.word	0x080100fc
 8004958:	08010108 	.word	0x08010108
 800495c:	0801018c 	.word	0x0801018c
 8004960:	20000bf8 	.word	0x20000bf8
 8004964:	0801019c 	.word	0x0801019c

08004968 <CANtranscevier_Init>:
static void rootState_entDef(void * const void_me);

/*## statechart_method */
static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id);

void CANtranscevier_Init(struct CANtranscevier_t* const me, RiCTask * p_task) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
    static const RiCReactive_Vtbl CANtranscevier_reactiveVtbl = {
        rootState_dispatchEvent,
        rootState_entDef,
        NULL
    };
    RiCReactive_init(&(me->ric_reactive), (void*)me, p_task, &CANtranscevier_reactiveVtbl);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <CANtranscevier_Init+0x3c>)
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	f7fb fe0f 	bl	800059c <RiCReactive_init>
    RiCReactive_setActive(&(me->ric_reactive), RiCFALSE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f7fb fe5a 	bl	800063c <RiCReactive_setActive>
    me->itsMonitor = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	625a      	str	r2, [r3, #36]	; 0x24
    me->itsUbidots = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
    initStatechart(me);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f834 	bl	8004a02 <initStatechart>
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	080106fc 	.word	0x080106fc

080049a8 <CANtranscevier_setItsMonitor>:

struct Monitor_t* CANtranscevier_getItsMonitor(const struct CANtranscevier_t* const me) {
    return (struct Monitor_t*)me->itsMonitor;
}

void CANtranscevier_setItsMonitor(struct CANtranscevier_t* const me, struct Monitor_t* p_Monitor) {
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
    me->itsMonitor = p_Monitor;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <CANtranscevier_setItsUbidots>:

struct Ubidots_t* CANtranscevier_getItsUbidots(const struct CANtranscevier_t* const me) {
    return (struct Ubidots_t*)me->itsUbidots;
}

void CANtranscevier_setItsUbidots(struct CANtranscevier_t* const me, struct Ubidots_t* p_Ubidots) {
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
    me->itsUbidots = p_Ubidots;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <CANtranscevier_startBehavior>:

RiCBoolean CANtranscevier_startBehavior(struct CANtranscevier_t* const me) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
    RiCBoolean done = RiCFALSE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	73fb      	strb	r3, [r7, #15]
    done = RiCReactive_startBehavior(&(me->ric_reactive));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fb fe96 	bl	8000720 <RiCReactive_startBehavior>
 80049f4:	4603      	mov	r3, r0
 80049f6:	73fb      	strb	r3, [r7, #15]
    return done;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <initStatechart>:

static void initStatechart(struct CANtranscevier_t* const me) {
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
    me->rootState_subState = CANtranscevier_RiCNonState;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    me->rootState_active = CANtranscevier_RiCNonState;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <rootState_entDef>:
    /*#[ operation initCAN() */
    CANopen();
    /*#]*/
}

static void rootState_entDef(void * const void_me) {
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b086      	sub	sp, #24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
    
    struct CANtranscevier_t * const me = (struct CANtranscevier_t *)void_me;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	617b      	str	r3, [r7, #20]
    {
        {
            /*#[ transition 0 */
            CGEN(me->itsMonitor,evStart())
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <rootState_entDef+0x2a>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	f000 f96e 	bl	8004d20 <RiC_Create_evStart>
 8004a44:	4603      	mov	r3, r0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68f9      	ldr	r1, [r7, #12]
 8004a4a:	6938      	ldr	r0, [r7, #16]
 8004a4c:	f7fb fd75 	bl	800053a <RiCReactive_gen>
			CANopen();
 8004a50:	f7fe fc7a 	bl	8003348 <CANopen>
            /*#]*/
        }
        me->rootState_subState = CANtranscevier_read;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        me->rootState_active = CANtranscevier_read;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
}
 8004a64:	bf00      	nop
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <rootState_dispatchEvent>:

static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
    
    struct CANtranscevier_t * const me = (struct CANtranscevier_t *)void_me;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]
    RiCTakeEventStatus res = eventNotConsumed;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	72fb      	strb	r3, [r7, #11]
    return res;
 8004a80:	7afb      	ldrb	r3, [r7, #11]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <DefaultComponent_Init>:

/*## auto_generated */
#include "MainDefaultComponent.h"
/*## auto_generated */
#include "PBLPkg.h"
void DefaultComponent_Init(void) {
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	af00      	add	r7, sp, #0
    PBLPkg_initRelations();
 8004a92:	f000 f8d1 	bl	8004c38 <PBLPkg_initRelations>
    PBLPkg_startBehavior();
 8004a96:	f000 f8fb 	bl	8004c90 <PBLPkg_startBehavior>
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <DefaultComponent_Cleanup>:

void DefaultComponent_Cleanup(void) {
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	af00      	add	r7, sp, #0
    PBLPkg_OMInitializer_Cleanup();
 8004aa2:	f000 f8c1 	bl	8004c28 <PBLPkg_OMInitializer_Cleanup>
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <Cortex_main>:

int Cortex_main(int argc, char* argv[]) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
    int status = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
    if(RiCOXFInit(argc, argv, 6423, "", 0, 0, RiCTRUE))
 8004aba:	2301      	movs	r3, #1
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <Cortex_main+0x50>)
 8004ac8:	f641 1217 	movw	r2, #6423	; 0x1917
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fc fe60 	bl	8001794 <RiCOXFInit>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <Cortex_main+0x42>
        {
            DefaultComponent_Init();
 8004ada:	f7ff ffd8 	bl	8004a8e <DefaultComponent_Init>
            /*#[ configuration DefaultComponent::Arm-cortex */
            /*#]*/
            RiCOXFStart(FALSE);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fc fe87 	bl	80017f2 <RiCOXFStart>
            DefaultComponent_Cleanup();
 8004ae4:	f7ff ffdb 	bl	8004a9e <DefaultComponent_Cleanup>
            status = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e001      	b.n	8004af2 <Cortex_main+0x46>
        }
    else
        {
            status = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
        }
    return status;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	080101a4 	.word	0x080101a4

08004b00 <Monitor_Init>:
static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id);

/*## operation display(unsigned int,float) */
static void display(struct Monitor_t* const me, unsigned int RPM, float torque);

void Monitor_Init(struct Monitor_t* const me, RiCTask * p_task) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
    static const RiCReactive_Vtbl Monitor_reactiveVtbl = {
        rootState_dispatchEvent,
        rootState_entDef,
        NULL
    };
    RiCReactive_init(&(me->ric_reactive), (void*)me, p_task, &Monitor_reactiveVtbl);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <Monitor_Init+0x34>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	f7fb fd43 	bl	800059c <RiCReactive_init>
    RiCReactive_setActive(&(me->ric_reactive), RiCFALSE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fb fd8e 	bl	800063c <RiCReactive_setActive>
    me->itsUbidots = NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    initStatechart(me);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f825 	bl	8004b76 <initStatechart>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08010708 	.word	0x08010708

08004b38 <Monitor_setItsUbidots>:

struct Ubidots_t* Monitor_getItsUbidots(const struct Monitor_t* const me) {
    return (struct Ubidots_t*)me->itsUbidots;
}

void Monitor_setItsUbidots(struct Monitor_t* const me, struct Ubidots_t* p_Ubidots) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
    me->itsUbidots = p_Ubidots;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <Monitor_startBehavior>:

RiCBoolean Monitor_startBehavior(struct Monitor_t* const me) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
    RiCBoolean done = RiCFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	73fb      	strb	r3, [r7, #15]
    done = RiCReactive_startBehavior(&(me->ric_reactive));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fb fddc 	bl	8000720 <RiCReactive_startBehavior>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]
    return done;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <initStatechart>:

static void initStatechart(struct Monitor_t* const me) {
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
    me->rootState_subState = Monitor_RiCNonState;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    me->rootState_active = Monitor_RiCNonState;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <rootState_entDef>:
        {
            me->itsUbidots = NULL;
        }
}

static void rootState_entDef(void * const void_me) {
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
    
    struct Monitor_t * const me = (struct Monitor_t *)void_me;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
    {
        me->rootState_subState = Monitor_idel;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        me->rootState_active = Monitor_idel;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <rootState_dispatchEvent>:

static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id) {
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	807b      	strh	r3, [r7, #2]
    
    struct Monitor_t * const me = (struct Monitor_t *)void_me;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	613b      	str	r3, [r7, #16]
    RiCTakeEventStatus res = eventNotConsumed;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]
    if(me->rootState_active == Monitor_idel)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d11e      	bne.n	8004c1e <rootState_dispatchEvent+0x5c>
        {
            if(id == evStart_PBLPkg_id)
 8004be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004be4:	f242 7213 	movw	r2, #10003	; 0x2713
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d118      	bne.n	8004c1e <rootState_dispatchEvent+0x5c>
                {
                    {
                        /*#[ transition 0 */
                        
                        CGEN(me->itsUbidots,evStartWiFi());
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <rootState_dispatchEvent+0x48>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	f000 f8d5 	bl	8004da8 <RiC_Create_evStartWiFi>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7fb fc98 	bl	800053a <RiCReactive_gen>
                        /*#]*/
                    }
                    me->rootState_subState = Monitor_SmarTTY;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    me->rootState_active = Monitor_SmarTTY;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                    res = eventConsumed;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
                }
        }
    return res;
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <PBLPkg_OMInitializer_Cleanup>:
void PBLPkg_OMInitializer_Init(void) {
    PBLPkg_initRelations();
    PBLPkg_startBehavior();
}

void PBLPkg_OMInitializer_Cleanup(void) {
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <PBLPkg_initRelations>:

void PBLPkg_initRelations(void) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
    CANtranscevier_Init(&(CANtranscevier), RiCMainTask());
 8004c3c:	f7fc fd51 	bl	80016e2 <RiCMainTask>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4619      	mov	r1, r3
 8004c44:	480f      	ldr	r0, [pc, #60]	; (8004c84 <PBLPkg_initRelations+0x4c>)
 8004c46:	f7ff fe8f 	bl	8004968 <CANtranscevier_Init>
    Monitor_Init(&(Monitor), RiCMainTask());
 8004c4a:	f7fc fd4a 	bl	80016e2 <RiCMainTask>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4619      	mov	r1, r3
 8004c52:	480d      	ldr	r0, [pc, #52]	; (8004c88 <PBLPkg_initRelations+0x50>)
 8004c54:	f7ff ff54 	bl	8004b00 <Monitor_Init>
    Ubidots_Init(&(Ubidots), RiCMainTask());
 8004c58:	f7fc fd43 	bl	80016e2 <RiCMainTask>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4619      	mov	r1, r3
 8004c60:	480a      	ldr	r0, [pc, #40]	; (8004c8c <PBLPkg_initRelations+0x54>)
 8004c62:	f000 f8c5 	bl	8004df0 <Ubidots_Init>
    CANtranscevier_setItsMonitor(&(CANtranscevier), &(Monitor));
 8004c66:	4908      	ldr	r1, [pc, #32]	; (8004c88 <PBLPkg_initRelations+0x50>)
 8004c68:	4806      	ldr	r0, [pc, #24]	; (8004c84 <PBLPkg_initRelations+0x4c>)
 8004c6a:	f7ff fe9d 	bl	80049a8 <CANtranscevier_setItsMonitor>
    CANtranscevier_setItsUbidots(&(CANtranscevier), &(Ubidots));
 8004c6e:	4907      	ldr	r1, [pc, #28]	; (8004c8c <PBLPkg_initRelations+0x54>)
 8004c70:	4804      	ldr	r0, [pc, #16]	; (8004c84 <PBLPkg_initRelations+0x4c>)
 8004c72:	f7ff fea7 	bl	80049c4 <CANtranscevier_setItsUbidots>
    Monitor_setItsUbidots(&(Monitor), &(Ubidots));
 8004c76:	4905      	ldr	r1, [pc, #20]	; (8004c8c <PBLPkg_initRelations+0x54>)
 8004c78:	4803      	ldr	r0, [pc, #12]	; (8004c88 <PBLPkg_initRelations+0x50>)
 8004c7a:	f7ff ff5d 	bl	8004b38 <Monitor_setItsUbidots>
}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20001190 	.word	0x20001190
 8004c88:	20001164 	.word	0x20001164
 8004c8c:	20001144 	.word	0x20001144

08004c90 <PBLPkg_startBehavior>:

RiCBoolean PBLPkg_startBehavior(void) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
    RiCBoolean done = RiCTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	71fb      	strb	r3, [r7, #7]
    done &= CANtranscevier_startBehavior(&(CANtranscevier));
 8004c9a:	480e      	ldr	r0, [pc, #56]	; (8004cd4 <PBLPkg_startBehavior+0x44>)
 8004c9c:	f7ff fea0 	bl	80049e0 <CANtranscevier_startBehavior>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
    done &= Monitor_startBehavior(&(Monitor));
 8004caa:	480b      	ldr	r0, [pc, #44]	; (8004cd8 <PBLPkg_startBehavior+0x48>)
 8004cac:	f7ff ff52 	bl	8004b54 <Monitor_startBehavior>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	71fb      	strb	r3, [r7, #7]
    done &= Ubidots_startBehavior(&(Ubidots));
 8004cba:	4808      	ldr	r0, [pc, #32]	; (8004cdc <PBLPkg_startBehavior+0x4c>)
 8004cbc:	f000 f8b2 	bl	8004e24 <Ubidots_startBehavior>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
    return done;
 8004cca:	79fb      	ldrb	r3, [r7, #7]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20001190 	.word	0x20001190
 8004cd8:	20001164 	.word	0x20001164
 8004cdc:	20001144 	.word	0x20001144

08004ce0 <evStart_Init>:
}
/*#]*/

RIC_IMPLEMENT_MEMORY_ALLOCATOR(evStart, 9, 0, TRUE)

void evStart_Init(evStart* const me) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
    RiCEvent_init(&(me->ric_event), evStart_PBLPkg_id, NULL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f242 7113 	movw	r1, #10003	; 0x2713
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fb27 	bl	8000344 <RiCEvent_init>
    RIC_SET_EVENT_DESTROY_OP(me, evStart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a02      	ldr	r2, [pc, #8]	; (8004d04 <evStart_Init+0x24>)
 8004cfa:	605a      	str	r2, [r3, #4]
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	08004d45 	.word	0x08004d45

08004d08 <evStart_Cleanup>:

void evStart_Cleanup(evStart* const me) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
    RiCEvent_cleanup(&(me->ric_event));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fa8c 	bl	8000230 <RiCEvent_cleanup>
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <RiC_Create_evStart>:

/*#[ ignore */
evStart * RiC_Create_evStart(void) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
    evStart* me = RIC_MEMORY_ALLOCATOR_GET(evStart);
 8004d26:	200c      	movs	r0, #12
 8004d28:	f7fc fade 	bl	80012e8 <RiCAllocator_getMemory>
 8004d2c:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <RiC_Create_evStart+0x1a>
        {
            evStart_Init(me);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ffd3 	bl	8004ce0 <evStart_Init>
        }
    return me;
 8004d3a:	687b      	ldr	r3, [r7, #4]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <RiC_Destroy_evStart>:

void RiC_Destroy_evStart(evStart* const me) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <RiC_Destroy_evStart+0x14>
        {
            evStart_Cleanup(me);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff ffd8 	bl	8004d08 <evStart_Cleanup>
        }
    RIC_MEMORY_ALLOCATOR_RETURN(me, evStart);
 8004d58:	210c      	movs	r1, #12
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc faf8 	bl	8001350 <RiCAllocator_returnMemory>
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <evStartWiFi_Init>:
/*#]*/

RIC_IMPLEMENT_MEMORY_ALLOCATOR(evStartWiFi, 9, 0, TRUE)

void evStartWiFi_Init(evStartWiFi* const me) {
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
    RiCEvent_init(&(me->ric_event), evStartWiFi_PBLPkg_id, NULL);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f242 7114 	movw	r1, #10004	; 0x2714
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb fae3 	bl	8000344 <RiCEvent_init>
    RIC_SET_EVENT_DESTROY_OP(me, evStartWiFi);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a02      	ldr	r2, [pc, #8]	; (8004d8c <evStartWiFi_Init+0x24>)
 8004d82:	605a      	str	r2, [r3, #4]
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	08004dcd 	.word	0x08004dcd

08004d90 <evStartWiFi_Cleanup>:

void evStartWiFi_Cleanup(evStartWiFi* const me) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
    RiCEvent_cleanup(&(me->ric_event));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fa48 	bl	8000230 <RiCEvent_cleanup>
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <RiC_Create_evStartWiFi>:

/*#[ ignore */
evStartWiFi * RiC_Create_evStartWiFi(void) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
    evStartWiFi* me = RIC_MEMORY_ALLOCATOR_GET(evStartWiFi);
 8004dae:	200c      	movs	r0, #12
 8004db0:	f7fc fa9a 	bl	80012e8 <RiCAllocator_getMemory>
 8004db4:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <RiC_Create_evStartWiFi+0x1a>
        {
            evStartWiFi_Init(me);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ffd3 	bl	8004d68 <evStartWiFi_Init>
        }
    return me;
 8004dc2:	687b      	ldr	r3, [r7, #4]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <RiC_Destroy_evStartWiFi>:

void RiC_Destroy_evStartWiFi(evStartWiFi* const me) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    if(me!=NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <RiC_Destroy_evStartWiFi+0x14>
        {
            evStartWiFi_Cleanup(me);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff ffd8 	bl	8004d90 <evStartWiFi_Cleanup>
        }
    RIC_MEMORY_ALLOCATOR_RETURN(me, evStartWiFi);
 8004de0:	210c      	movs	r1, #12
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc fab4 	bl	8001350 <RiCAllocator_returnMemory>
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <Ubidots_Init>:
static void rootState_entDef(void * const void_me);

/*## statechart_method */
static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id);

void Ubidots_Init(struct Ubidots_t* const me, RiCTask * p_task) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
    static const RiCReactive_Vtbl Ubidots_reactiveVtbl = {
        rootState_dispatchEvent,
        rootState_entDef,
        NULL
    };
    RiCReactive_init(&(me->ric_reactive), (void*)me, p_task, &Ubidots_reactiveVtbl);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <Ubidots_Init+0x30>)
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	f7fb fbcb 	bl	800059c <RiCReactive_init>
    RiCReactive_setActive(&(me->ric_reactive), RiCFALSE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb fc16 	bl	800063c <RiCReactive_setActive>
    initStatechart(me);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f818 	bl	8004e46 <initStatechart>
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	08010714 	.word	0x08010714

08004e24 <Ubidots_startBehavior>:
    WifiSetup();
    WifiUbidots();
    /*#]*/
}

RiCBoolean Ubidots_startBehavior(struct Ubidots_t* const me) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
    RiCBoolean done = RiCFALSE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]
    done = RiCReactive_startBehavior(&(me->ric_reactive));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb fc74 	bl	8000720 <RiCReactive_startBehavior>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
    return done;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <initStatechart>:

static void initStatechart(struct Ubidots_t* const me) {
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
    me->rootState_subState = Ubidots_RiCNonState;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    me->rootState_active = Ubidots_RiCNonState;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	775a      	strb	r2, [r3, #29]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <rootState_entDef>:

static void rootState_entDef(void * const void_me) {
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
    
    struct Ubidots_t * const me = (struct Ubidots_t *)void_me;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
    {
        me->rootState_subState = Ubidots_idle;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2202      	movs	r2, #2
 8004e76:	771a      	strb	r2, [r3, #28]
        me->rootState_active = Ubidots_idle;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	775a      	strb	r2, [r3, #29]
    }
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <rootState_dispatchEvent>:

static RiCTakeEventStatus rootState_dispatchEvent(void * const void_me, short id) {
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	807b      	strh	r3, [r7, #2]
    
    struct Ubidots_t * const me = (struct Ubidots_t *)void_me;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60bb      	str	r3, [r7, #8]
    RiCTakeEventStatus res = eventNotConsumed;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
    if(me->rootState_active == Ubidots_idle)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	7f5b      	ldrb	r3, [r3, #29]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d111      	bne.n	8004eca <rootState_dispatchEvent+0x40>
        {
            if(id == evStartWiFi_PBLPkg_id)
 8004ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eaa:	f242 7214 	movw	r2, #10004	; 0x2714
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10b      	bne.n	8004eca <rootState_dispatchEvent+0x40>
                {
                    {
                        /*#[ transition 1 */
                        WifiSetup();
 8004eb2:	f7ff fa83 	bl	80043bc <WifiSetup>
                        WifiUbidots();
 8004eb6:	f7ff fc2d 	bl	8004714 <WifiUbidots>
                        /*#]*/
                    }
                    me->rootState_subState = Ubidots_wifi;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	771a      	strb	r2, [r3, #28]
                    me->rootState_active = Ubidots_wifi;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	775a      	strb	r2, [r3, #29]
                    res = eventConsumed;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
                }
        }
    return res;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004eda:	e003      	b.n	8004ee4 <LoopCopyDataInit>

08004edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ee2:	3104      	adds	r1, #4

08004ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ee4:	480b      	ldr	r0, [pc, #44]	; (8004f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004eec:	d3f6      	bcc.n	8004edc <CopyDataInit>
  ldr  r2, =_sbss
 8004eee:	4a0b      	ldr	r2, [pc, #44]	; (8004f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ef0:	e002      	b.n	8004ef8 <LoopFillZerobss>

08004ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ef4:	f842 3b04 	str.w	r3, [r2], #4

08004ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004efc:	d3f9      	bcc.n	8004ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004efe:	f7ff f983 	bl	8004208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f02:	f008 fa31 	bl	800d368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f06:	f7fe fb29 	bl	800355c <main>
  bx  lr    
 8004f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004f10:	08010a30 	.word	0x08010a30
  ldr  r0, =_sdata
 8004f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f18:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8004f1c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8004f20:	20001864 	.word	0x20001864

08004f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f24:	e7fe      	b.n	8004f24 <ADC_IRQHandler>
	...

08004f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_Init+0x40>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <HAL_Init+0x40>)
 8004f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_Init+0x40>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <HAL_Init+0x40>)
 8004f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f44:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_Init+0x40>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a07      	ldr	r2, [pc, #28]	; (8004f68 <HAL_Init+0x40>)
 8004f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f50:	2003      	movs	r0, #3
 8004f52:	f000 f94d 	bl	80051f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f56:	2000      	movs	r0, #0
 8004f58:	f000 f808 	bl	8004f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f5c:	f7fe fe0e 	bl	8003b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40023c00 	.word	0x40023c00

08004f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f74:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_InitTick+0x54>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_InitTick+0x58>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f965 	bl	800525a <HAL_SYSTICK_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00e      	b.n	8004fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d80a      	bhi.n	8004fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	f000 f92d 	bl	8005206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <HAL_InitTick+0x5c>)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000000 	.word	0x20000000
 8004fc4:	20000008 	.word	0x20000008
 8004fc8:	20000004 	.word	0x20000004

08004fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_IncTick+0x20>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_IncTick+0x24>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4413      	add	r3, r2
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_IncTick+0x24>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	20000008 	.word	0x20000008
 8004ff0:	200011c0 	.word	0x200011c0

08004ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	; (8005008 <HAL_GetTick+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	200011c0 	.word	0x200011c0

0800500c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005014:	f7ff ffee 	bl	8004ff4 <HAL_GetTick>
 8005018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d005      	beq.n	8005032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <HAL_Delay+0x40>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005032:	bf00      	nop
 8005034:	f7ff ffde 	bl	8004ff4 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	429a      	cmp	r2, r3
 8005042:	d8f7      	bhi.n	8005034 <HAL_Delay+0x28>
  {
  }
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000008 	.word	0x20000008

08005050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <__NVIC_SetPriorityGrouping+0x44>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800506c:	4013      	ands	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800507c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005082:	4a04      	ldr	r2, [pc, #16]	; (8005094 <__NVIC_SetPriorityGrouping+0x44>)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	60d3      	str	r3, [r2, #12]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <__NVIC_GetPriorityGrouping+0x18>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	f003 0307 	and.w	r3, r3, #7
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	e000ed00 	.word	0xe000ed00

080050b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	db0b      	blt.n	80050de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	f003 021f 	and.w	r2, r3, #31
 80050cc:	4907      	ldr	r1, [pc, #28]	; (80050ec <__NVIC_EnableIRQ+0x38>)
 80050ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2001      	movs	r0, #1
 80050d6:	fa00 f202 	lsl.w	r2, r0, r2
 80050da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000e100 	.word	0xe000e100

080050f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	6039      	str	r1, [r7, #0]
 80050fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005100:	2b00      	cmp	r3, #0
 8005102:	db0a      	blt.n	800511a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	b2da      	uxtb	r2, r3
 8005108:	490c      	ldr	r1, [pc, #48]	; (800513c <__NVIC_SetPriority+0x4c>)
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	0112      	lsls	r2, r2, #4
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	440b      	add	r3, r1
 8005114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005118:	e00a      	b.n	8005130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4908      	ldr	r1, [pc, #32]	; (8005140 <__NVIC_SetPriority+0x50>)
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	3b04      	subs	r3, #4
 8005128:	0112      	lsls	r2, r2, #4
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	440b      	add	r3, r1
 800512e:	761a      	strb	r2, [r3, #24]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000e100 	.word	0xe000e100
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f1c3 0307 	rsb	r3, r3, #7
 800515e:	2b04      	cmp	r3, #4
 8005160:	bf28      	it	cs
 8005162:	2304      	movcs	r3, #4
 8005164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3304      	adds	r3, #4
 800516a:	2b06      	cmp	r3, #6
 800516c:	d902      	bls.n	8005174 <NVIC_EncodePriority+0x30>
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3b03      	subs	r3, #3
 8005172:	e000      	b.n	8005176 <NVIC_EncodePriority+0x32>
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005178:	f04f 32ff 	mov.w	r2, #4294967295
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	401a      	ands	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800518c:	f04f 31ff 	mov.w	r1, #4294967295
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	fa01 f303 	lsl.w	r3, r1, r3
 8005196:	43d9      	mvns	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800519c:	4313      	orrs	r3, r2
         );
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3724      	adds	r7, #36	; 0x24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051bc:	d301      	bcc.n	80051c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051be:	2301      	movs	r3, #1
 80051c0:	e00f      	b.n	80051e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <SysTick_Config+0x40>)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ca:	210f      	movs	r1, #15
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	f7ff ff8e 	bl	80050f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <SysTick_Config+0x40>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051da:	4b04      	ldr	r3, [pc, #16]	; (80051ec <SysTick_Config+0x40>)
 80051dc:	2207      	movs	r2, #7
 80051de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	e000e010 	.word	0xe000e010

080051f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ff29 	bl	8005050 <__NVIC_SetPriorityGrouping>
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005206:	b580      	push	{r7, lr}
 8005208:	b086      	sub	sp, #24
 800520a:	af00      	add	r7, sp, #0
 800520c:	4603      	mov	r3, r0
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005218:	f7ff ff3e 	bl	8005098 <__NVIC_GetPriorityGrouping>
 800521c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	6978      	ldr	r0, [r7, #20]
 8005224:	f7ff ff8e 	bl	8005144 <NVIC_EncodePriority>
 8005228:	4602      	mov	r2, r0
 800522a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff5d 	bl	80050f0 <__NVIC_SetPriority>
}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b082      	sub	sp, #8
 8005242:	af00      	add	r7, sp, #0
 8005244:	4603      	mov	r3, r0
 8005246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff31 	bl	80050b4 <__NVIC_EnableIRQ>
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff ffa2 	bl	80051ac <SysTick_Config>
 8005268:	4603      	mov	r3, r0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005274:	b480      	push	{r7}
 8005276:	b089      	sub	sp, #36	; 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e16b      	b.n	8005568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005290:	2201      	movs	r2, #1
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4013      	ands	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	f040 815a 	bne.w	8005562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d00b      	beq.n	80052ce <HAL_GPIO_Init+0x5a>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d007      	beq.n	80052ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052c2:	2b11      	cmp	r3, #17
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b12      	cmp	r3, #18
 80052cc:	d130      	bne.n	8005330 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	2203      	movs	r2, #3
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005304:	2201      	movs	r2, #1
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 0201 	and.w	r2, r3, #1
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	2203      	movs	r2, #3
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0xfc>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b12      	cmp	r3, #18
 800536e:	d123      	bne.n	80053b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	08da      	lsrs	r2, r3, #3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3208      	adds	r2, #8
 8005378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	220f      	movs	r2, #15
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	08da      	lsrs	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3208      	adds	r2, #8
 80053b2:	69b9      	ldr	r1, [r7, #24]
 80053b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	2203      	movs	r2, #3
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	43db      	mvns	r3, r3
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4013      	ands	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 0203 	and.w	r2, r3, #3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80b4 	beq.w	8005562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	4b5f      	ldr	r3, [pc, #380]	; (800557c <HAL_GPIO_Init+0x308>)
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	4a5e      	ldr	r2, [pc, #376]	; (800557c <HAL_GPIO_Init+0x308>)
 8005404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005408:	6453      	str	r3, [r2, #68]	; 0x44
 800540a:	4b5c      	ldr	r3, [pc, #368]	; (800557c <HAL_GPIO_Init+0x308>)
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005416:	4a5a      	ldr	r2, [pc, #360]	; (8005580 <HAL_GPIO_Init+0x30c>)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	3302      	adds	r3, #2
 800541e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	220f      	movs	r2, #15
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43db      	mvns	r3, r3
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	4013      	ands	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a51      	ldr	r2, [pc, #324]	; (8005584 <HAL_GPIO_Init+0x310>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02b      	beq.n	800549a <HAL_GPIO_Init+0x226>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a50      	ldr	r2, [pc, #320]	; (8005588 <HAL_GPIO_Init+0x314>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d025      	beq.n	8005496 <HAL_GPIO_Init+0x222>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a4f      	ldr	r2, [pc, #316]	; (800558c <HAL_GPIO_Init+0x318>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <HAL_GPIO_Init+0x21e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a4e      	ldr	r2, [pc, #312]	; (8005590 <HAL_GPIO_Init+0x31c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d019      	beq.n	800548e <HAL_GPIO_Init+0x21a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a4d      	ldr	r2, [pc, #308]	; (8005594 <HAL_GPIO_Init+0x320>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <HAL_GPIO_Init+0x216>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a4c      	ldr	r2, [pc, #304]	; (8005598 <HAL_GPIO_Init+0x324>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00d      	beq.n	8005486 <HAL_GPIO_Init+0x212>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a4b      	ldr	r2, [pc, #300]	; (800559c <HAL_GPIO_Init+0x328>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d007      	beq.n	8005482 <HAL_GPIO_Init+0x20e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a4a      	ldr	r2, [pc, #296]	; (80055a0 <HAL_GPIO_Init+0x32c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_GPIO_Init+0x20a>
 800547a:	2307      	movs	r3, #7
 800547c:	e00e      	b.n	800549c <HAL_GPIO_Init+0x228>
 800547e:	2308      	movs	r3, #8
 8005480:	e00c      	b.n	800549c <HAL_GPIO_Init+0x228>
 8005482:	2306      	movs	r3, #6
 8005484:	e00a      	b.n	800549c <HAL_GPIO_Init+0x228>
 8005486:	2305      	movs	r3, #5
 8005488:	e008      	b.n	800549c <HAL_GPIO_Init+0x228>
 800548a:	2304      	movs	r3, #4
 800548c:	e006      	b.n	800549c <HAL_GPIO_Init+0x228>
 800548e:	2303      	movs	r3, #3
 8005490:	e004      	b.n	800549c <HAL_GPIO_Init+0x228>
 8005492:	2302      	movs	r3, #2
 8005494:	e002      	b.n	800549c <HAL_GPIO_Init+0x228>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_GPIO_Init+0x228>
 800549a:	2300      	movs	r3, #0
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	f002 0203 	and.w	r2, r2, #3
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	4093      	lsls	r3, r2
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ac:	4934      	ldr	r1, [pc, #208]	; (8005580 <HAL_GPIO_Init+0x30c>)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	3302      	adds	r3, #2
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ba:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <HAL_GPIO_Init+0x330>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054de:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_GPIO_Init+0x330>)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80054e4:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <HAL_GPIO_Init+0x330>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4013      	ands	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <HAL_GPIO_Init+0x330>)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800550e:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <HAL_GPIO_Init+0x330>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005532:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_GPIO_Init+0x330>)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005538:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <HAL_GPIO_Init+0x330>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <HAL_GPIO_Init+0x330>)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3301      	adds	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	f67f ae90 	bls.w	8005290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005570:	bf00      	nop
 8005572:	3724      	adds	r7, #36	; 0x24
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40023800 	.word	0x40023800
 8005580:	40013800 	.word	0x40013800
 8005584:	40020000 	.word	0x40020000
 8005588:	40020400 	.word	0x40020400
 800558c:	40020800 	.word	0x40020800
 8005590:	40020c00 	.word	0x40020c00
 8005594:	40021000 	.word	0x40021000
 8005598:	40021400 	.word	0x40021400
 800559c:	40021800 	.word	0x40021800
 80055a0:	40021c00 	.word	0x40021c00
 80055a4:	40013c00 	.word	0x40013c00

080055a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
 80055b4:	4613      	mov	r3, r2
 80055b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055b8:	787b      	ldrb	r3, [r7, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055c4:	e003      	b.n	80055ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055c6:	887b      	ldrh	r3, [r7, #2]
 80055c8:	041a      	lsls	r2, r3, #16
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	619a      	str	r2, [r3, #24]
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80055da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055dc:	b08f      	sub	sp, #60	; 0x3c
 80055de:	af0a      	add	r7, sp, #40	; 0x28
 80055e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e054      	b.n	8005696 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f007 fbce 	bl	800cda8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2203      	movs	r2, #3
 8005610:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f004 fd8a 	bl	800a144 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	687e      	ldr	r6, [r7, #4]
 8005638:	466d      	mov	r5, sp
 800563a:	f106 0410 	add.w	r4, r6, #16
 800563e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005646:	e894 0003 	ldmia.w	r4, {r0, r1}
 800564a:	e885 0003 	stmia.w	r5, {r0, r1}
 800564e:	1d33      	adds	r3, r6, #4
 8005650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005652:	6838      	ldr	r0, [r7, #0]
 8005654:	f004 fd04 	bl	800a060 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2101      	movs	r1, #1
 800565e:	4618      	mov	r0, r3
 8005660:	f004 fd81 	bl	800a166 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	687e      	ldr	r6, [r7, #4]
 800566c:	466d      	mov	r5, sp
 800566e:	f106 0410 	add.w	r4, r6, #16
 8005672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800567a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800567e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005682:	1d33      	adds	r3, r6, #4
 8005684:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005686:	6838      	ldr	r0, [r7, #0]
 8005688:	f004 fe94 	bl	800a3b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800569e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800569e:	b590      	push	{r4, r7, lr}
 80056a0:	b089      	sub	sp, #36	; 0x24
 80056a2:	af04      	add	r7, sp, #16
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	4608      	mov	r0, r1
 80056a8:	4611      	mov	r1, r2
 80056aa:	461a      	mov	r2, r3
 80056ac:	4603      	mov	r3, r0
 80056ae:	70fb      	strb	r3, [r7, #3]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70bb      	strb	r3, [r7, #2]
 80056b4:	4613      	mov	r3, r2
 80056b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_HCD_HC_Init+0x28>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e07f      	b.n	80057c6 <HAL_HCD_HC_Init+0x128>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	333d      	adds	r3, #61	; 0x3d
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3338      	adds	r3, #56	; 0x38
 80056f2:	787a      	ldrb	r2, [r7, #1]
 80056f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	440b      	add	r3, r1
 8005704:	3340      	adds	r3, #64	; 0x40
 8005706:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005708:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3339      	adds	r3, #57	; 0x39
 800571a:	78fa      	ldrb	r2, [r7, #3]
 800571c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	333f      	adds	r3, #63	; 0x3f
 800572e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005732:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	78bb      	ldrb	r3, [r7, #2]
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	b2d8      	uxtb	r0, r3
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	333a      	adds	r3, #58	; 0x3a
 800574c:	4602      	mov	r2, r0
 800574e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005750:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005754:	2b00      	cmp	r3, #0
 8005756:	da0a      	bge.n	800576e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	440b      	add	r3, r1
 8005766:	333b      	adds	r3, #59	; 0x3b
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e009      	b.n	8005782 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800576e:	78fa      	ldrb	r2, [r7, #3]
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	440b      	add	r3, r1
 800577c:	333b      	adds	r3, #59	; 0x3b
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	440b      	add	r3, r1
 8005790:	333c      	adds	r3, #60	; 0x3c
 8005792:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005796:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	787c      	ldrb	r4, [r7, #1]
 800579e:	78ba      	ldrb	r2, [r7, #2]
 80057a0:	78f9      	ldrb	r1, [r7, #3]
 80057a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80057a4:	9302      	str	r3, [sp, #8]
 80057a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	4623      	mov	r3, r4
 80057b4:	f004 ff80 	bl	800a6b8 <USB_HC_Init>
 80057b8:	4603      	mov	r3, r0
 80057ba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd90      	pop	{r4, r7, pc}

080057ce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_HCD_HC_Halt+0x1e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00f      	b.n	800580c <HAL_HCD_HC_Halt+0x3e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f005 f9bc 	bl	800ab7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	461a      	mov	r2, r3
 8005822:	4603      	mov	r3, r0
 8005824:	70fb      	strb	r3, [r7, #3]
 8005826:	460b      	mov	r3, r1
 8005828:	70bb      	strb	r3, [r7, #2]
 800582a:	4613      	mov	r3, r2
 800582c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	440b      	add	r3, r1
 800583c:	333b      	adds	r3, #59	; 0x3b
 800583e:	78ba      	ldrb	r2, [r7, #2]
 8005840:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	333f      	adds	r3, #63	; 0x3f
 8005852:	787a      	ldrb	r2, [r7, #1]
 8005854:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005856:	7c3b      	ldrb	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d114      	bne.n	8005886 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	3342      	adds	r3, #66	; 0x42
 800586c:	2203      	movs	r2, #3
 800586e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005870:	78fa      	ldrb	r2, [r7, #3]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	440b      	add	r3, r1
 800587e:	333d      	adds	r3, #61	; 0x3d
 8005880:	7f3a      	ldrb	r2, [r7, #28]
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e009      	b.n	800589a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	440b      	add	r3, r1
 8005894:	3342      	adds	r3, #66	; 0x42
 8005896:	2202      	movs	r2, #2
 8005898:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800589a:	787b      	ldrb	r3, [r7, #1]
 800589c:	2b03      	cmp	r3, #3
 800589e:	f200 80d6 	bhi.w	8005a4e <HAL_HCD_HC_SubmitRequest+0x23a>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	08005a39 	.word	0x08005a39
 80058b0:	08005925 	.word	0x08005925
 80058b4:	080059af 	.word	0x080059af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80058b8:	7c3b      	ldrb	r3, [r7, #16]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	f040 80c9 	bne.w	8005a52 <HAL_HCD_HC_SubmitRequest+0x23e>
 80058c0:	78bb      	ldrb	r3, [r7, #2]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 80c5 	bne.w	8005a52 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80058c8:	8b3b      	ldrh	r3, [r7, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	440b      	add	r3, r1
 80058dc:	3351      	adds	r3, #81	; 0x51
 80058de:	2201      	movs	r2, #1
 80058e0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	3351      	adds	r3, #81	; 0x51
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	440b      	add	r3, r1
 8005906:	3342      	adds	r3, #66	; 0x42
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800590c:	e0a1      	b.n	8005a52 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	3342      	adds	r3, #66	; 0x42
 800591e:	2202      	movs	r2, #2
 8005920:	701a      	strb	r2, [r3, #0]
      break;
 8005922:	e096      	b.n	8005a52 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005924:	78bb      	ldrb	r3, [r7, #2]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d120      	bne.n	800596c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	3351      	adds	r3, #81	; 0x51
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005940:	78fa      	ldrb	r2, [r7, #3]
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	440b      	add	r3, r1
 800594e:	3342      	adds	r3, #66	; 0x42
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005954:	e07e      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	3342      	adds	r3, #66	; 0x42
 8005966:	2202      	movs	r2, #2
 8005968:	701a      	strb	r2, [r3, #0]
      break;
 800596a:	e073      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	440b      	add	r3, r1
 800597a:	3350      	adds	r3, #80	; 0x50
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10a      	bne.n	8005998 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	440b      	add	r3, r1
 8005990:	3342      	adds	r3, #66	; 0x42
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
      break;
 8005996:	e05d      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	440b      	add	r3, r1
 80059a6:	3342      	adds	r3, #66	; 0x42
 80059a8:	2202      	movs	r2, #2
 80059aa:	701a      	strb	r2, [r3, #0]
      break;
 80059ac:	e052      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80059ae:	78bb      	ldrb	r3, [r7, #2]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d120      	bne.n	80059f6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	440b      	add	r3, r1
 80059c2:	3351      	adds	r3, #81	; 0x51
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	440b      	add	r3, r1
 80059d8:	3342      	adds	r3, #66	; 0x42
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80059de:	e039      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	440b      	add	r3, r1
 80059ee:	3342      	adds	r3, #66	; 0x42
 80059f0:	2202      	movs	r2, #2
 80059f2:	701a      	strb	r2, [r3, #0]
      break;
 80059f4:	e02e      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80059f6:	78fa      	ldrb	r2, [r7, #3]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	3350      	adds	r3, #80	; 0x50
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	440b      	add	r3, r1
 8005a1a:	3342      	adds	r3, #66	; 0x42
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
      break;
 8005a20:	e018      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	3342      	adds	r3, #66	; 0x42
 8005a32:	2202      	movs	r2, #2
 8005a34:	701a      	strb	r2, [r3, #0]
      break;
 8005a36:	e00d      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	440b      	add	r3, r1
 8005a46:	3342      	adds	r3, #66	; 0x42
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
      break;
 8005a4c:	e002      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005a52:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	3344      	adds	r3, #68	; 0x44
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005a68:	78fa      	ldrb	r2, [r7, #3]
 8005a6a:	8b39      	ldrh	r1, [r7, #24]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4403      	add	r3, r0
 8005a78:	3348      	adds	r3, #72	; 0x48
 8005a7a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	440b      	add	r3, r1
 8005a8a:	335c      	adds	r3, #92	; 0x5c
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	334c      	adds	r3, #76	; 0x4c
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	440b      	add	r3, r1
 8005ab2:	3339      	adds	r3, #57	; 0x39
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	440b      	add	r3, r1
 8005ac6:	335d      	adds	r3, #93	; 0x5d
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	3338      	adds	r3, #56	; 0x38
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	18d1      	adds	r1, r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f004 fef0 	bl	800a8cc <USB_HC_StartXfer>
 8005aec:	4603      	mov	r3, r0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop

08005af8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f004 fc0d 	bl	800a32e <USB_GetMode>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	f040 80ef 	bne.w	8005cfa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f004 fbf1 	bl	800a308 <USB_ReadInterrupts>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80e5 	beq.w	8005cf8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 fbe8 	bl	800a308 <USB_ReadInterrupts>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b42:	d104      	bne.n	8005b4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f004 fbd8 	bl	800a308 <USB_ReadInterrupts>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b62:	d104      	bne.n	8005b6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 fbc8 	bl	800a308 <USB_ReadInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b82:	d104      	bne.n	8005b8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005b8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f004 fbb8 	bl	800a308 <USB_ReadInterrupts>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d103      	bne.n	8005baa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f004 fbaa 	bl	800a308 <USB_ReadInterrupts>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbe:	d115      	bne.n	8005bec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005bc8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d108      	bne.n	8005bec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f007 f962 	bl	800cea4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2101      	movs	r1, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f004 fca0 	bl	800a52c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f004 fb89 	bl	800a308 <USB_ReadInterrupts>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c00:	d102      	bne.n	8005c08 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f966 	bl	8006ed4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f004 fb7b 	bl	800a308 <USB_ReadInterrupts>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d106      	bne.n	8005c2a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f007 f925 	bl	800ce6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2208      	movs	r2, #8
 8005c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f004 fb6a 	bl	800a308 <USB_ReadInterrupts>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c3e:	d138      	bne.n	8005cb2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f004 ff87 	bl	800ab58 <USB_HC_ReadInterrupt>
 8005c4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e025      	b.n	8005c9e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d018      	beq.n	8005c98 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7c:	d106      	bne.n	8005c8c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f8cf 	bl	8005e28 <HCD_HC_IN_IRQHandler>
 8005c8a:	e005      	b.n	8005c98 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fcfd 	bl	8006692 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3d4      	bcc.n	8005c52 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f004 fb26 	bl	800a308 <USB_ReadInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d101      	bne.n	8005cca <HAL_HCD_IRQHandler+0x1d2>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <HAL_HCD_IRQHandler+0x1d4>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d014      	beq.n	8005cfa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0210 	bic.w	r2, r2, #16
 8005cde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 f84b 	bl	8006d7c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0210 	orr.w	r2, r2, #16
 8005cf4:	619a      	str	r2, [r3, #24]
 8005cf6:	e000      	b.n	8005cfa <HAL_HCD_IRQHandler+0x202>
      return;
 8005cf8:	bf00      	nop
    }
  }
}
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_HCD_Start+0x16>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e013      	b.n	8005d3e <HAL_HCD_Start+0x3e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f004 f9fd 	bl	800a122 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f004 fc60 	bl	800a5f4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_HCD_Stop+0x16>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e00d      	b.n	8005d78 <HAL_HCD_Stop+0x32>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f005 f841 	bl	800adf0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f004 fc07 	bl	800a5a0 <USB_ResetPort>
 8005d92:	4603      	mov	r3, r0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	440b      	add	r3, r1
 8005db6:	335c      	adds	r3, #92	; 0x5c
 8005db8:	781b      	ldrb	r3, [r3, #0]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	440b      	add	r3, r1
 8005de0:	334c      	adds	r3, #76	; 0x4c
 8005de2:	681b      	ldr	r3, [r3, #0]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f004 fc49 	bl	800a694 <USB_GetCurrentFrame>
 8005e02:	4603      	mov	r3, r0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f004 fc24 	bl	800a666 <USB_GetHostSpeed>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d119      	bne.n	8005e8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	461a      	mov	r2, r3
 8005e66:	2304      	movs	r3, #4
 8005e68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e84:	f043 0302 	orr.w	r3, r3, #2
 8005e88:	60d3      	str	r3, [r2, #12]
 8005e8a:	e0ce      	b.n	800602a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea2:	d12c      	bne.n	8005efe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	335d      	adds	r3, #93	; 0x5d
 8005ec8:	2207      	movs	r2, #7
 8005eca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee6:	f043 0302 	orr.w	r3, r3, #2
 8005eea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f004 fe3f 	bl	800ab7a <USB_HC_Halt>
 8005efc:	e095      	b.n	800602a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d109      	bne.n	8005f28 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	461a      	mov	r2, r3
 8005f22:	2320      	movs	r3, #32
 8005f24:	6093      	str	r3, [r2, #8]
 8005f26:	e080      	b.n	800602a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d134      	bne.n	8005fa8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	440b      	add	r3, r1
 8005f6c:	335d      	adds	r3, #93	; 0x5d
 8005f6e:	2205      	movs	r2, #5
 8005f70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2310      	movs	r3, #16
 8005f82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	461a      	mov	r2, r3
 8005f92:	2308      	movs	r3, #8
 8005f94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f004 fdea 	bl	800ab7a <USB_HC_Halt>
 8005fa6:	e040      	b.n	800602a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbe:	d134      	bne.n	800602a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	0151      	lsls	r1, r2, #5
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	440a      	add	r2, r1
 8005fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fda:	f043 0302 	orr.w	r3, r3, #2
 8005fde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f004 fdc5 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2310      	movs	r3, #16
 8006000:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	335d      	adds	r3, #93	; 0x5d
 8006012:	2208      	movs	r2, #8
 8006014:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	4413      	add	r3, r2
 800601e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006022:	461a      	mov	r2, r3
 8006024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006028:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800603c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006040:	d122      	bne.n	8006088 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800605c:	f043 0302 	orr.w	r3, r3, #2
 8006060:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f004 fd84 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	461a      	mov	r2, r3
 8006080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006084:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006086:	e300      	b.n	800668a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	4413      	add	r3, r2
 8006090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b01      	cmp	r3, #1
 800609c:	f040 80fd 	bne.w	800629a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01b      	beq.n	80060e0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	3348      	adds	r3, #72	; 0x48
 80060b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	0159      	lsls	r1, r3, #5
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	440b      	add	r3, r1
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80060cc:	1ad1      	subs	r1, r2, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4403      	add	r3, r0
 80060dc:	334c      	adds	r3, #76	; 0x4c
 80060de:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	440b      	add	r3, r1
 80060ee:	335d      	adds	r3, #93	; 0x5d
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	440b      	add	r3, r1
 8006102:	3358      	adds	r3, #88	; 0x58
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006114:	461a      	mov	r2, r3
 8006116:	2301      	movs	r3, #1
 8006118:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	440b      	add	r3, r1
 8006128:	333f      	adds	r3, #63	; 0x3f
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	333f      	adds	r3, #63	; 0x3f
 8006140:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006142:	2b02      	cmp	r3, #2
 8006144:	d121      	bne.n	800618a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4413      	add	r3, r2
 800614e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	440a      	add	r2, r1
 800615c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f004 fd02 	bl	800ab7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	461a      	mov	r2, r3
 8006184:	2310      	movs	r3, #16
 8006186:	6093      	str	r3, [r2, #8]
 8006188:	e070      	b.n	800626c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	440b      	add	r3, r1
 8006198:	333f      	adds	r3, #63	; 0x3f
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d12a      	bne.n	80061f6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	440b      	add	r3, r1
 80061ce:	335c      	adds	r3, #92	; 0x5c
 80061d0:	2201      	movs	r2, #1
 80061d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	b2d8      	uxtb	r0, r3
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	440b      	add	r3, r1
 80061e6:	335c      	adds	r3, #92	; 0x5c
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	4601      	mov	r1, r0
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f006 fe66 	bl	800cec0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80061f4:	e03a      	b.n	800626c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	440b      	add	r3, r1
 8006204:	333f      	adds	r3, #63	; 0x3f
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d12f      	bne.n	800626c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	440b      	add	r3, r1
 800621a:	335c      	adds	r3, #92	; 0x5c
 800621c:	2201      	movs	r2, #1
 800621e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	440b      	add	r3, r1
 800622e:	3350      	adds	r3, #80	; 0x50
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2d8      	uxtb	r0, r3
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	440b      	add	r3, r1
 8006246:	3350      	adds	r3, #80	; 0x50
 8006248:	4602      	mov	r2, r0
 800624a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	b2d8      	uxtb	r0, r3
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	440b      	add	r3, r1
 800625e:	335c      	adds	r3, #92	; 0x5c
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	4601      	mov	r1, r0
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f006 fe2a 	bl	800cec0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	440b      	add	r3, r1
 800627a:	3350      	adds	r3, #80	; 0x50
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f083 0301 	eor.w	r3, r3, #1
 8006282:	b2d8      	uxtb	r0, r3
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	440b      	add	r3, r1
 8006292:	3350      	adds	r3, #80	; 0x50
 8006294:	4602      	mov	r2, r0
 8006296:	701a      	strb	r2, [r3, #0]
}
 8006298:	e1f7      	b.n	800668a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	f040 811a 	bne.w	80064e6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062cc:	f023 0302 	bic.w	r3, r3, #2
 80062d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	440b      	add	r3, r1
 80062e0:	335d      	adds	r3, #93	; 0x5d
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10a      	bne.n	80062fe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	440b      	add	r3, r1
 80062f6:	335c      	adds	r3, #92	; 0x5c
 80062f8:	2201      	movs	r2, #1
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	e0d9      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	440b      	add	r3, r1
 800630c:	335d      	adds	r3, #93	; 0x5d
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b05      	cmp	r3, #5
 8006312:	d10a      	bne.n	800632a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	440b      	add	r3, r1
 8006322:	335c      	adds	r3, #92	; 0x5c
 8006324:	2205      	movs	r2, #5
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e0c3      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	440b      	add	r3, r1
 8006338:	335d      	adds	r3, #93	; 0x5d
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b06      	cmp	r3, #6
 800633e:	d00a      	beq.n	8006356 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	440b      	add	r3, r1
 800634e:	335d      	adds	r3, #93	; 0x5d
 8006350:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006352:	2b08      	cmp	r3, #8
 8006354:	d156      	bne.n	8006404 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	440b      	add	r3, r1
 8006364:	3358      	adds	r3, #88	; 0x58
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4403      	add	r3, r0
 8006378:	3358      	adds	r3, #88	; 0x58
 800637a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	3358      	adds	r3, #88	; 0x58
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d914      	bls.n	80063bc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	3358      	adds	r3, #88	; 0x58
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	440b      	add	r3, r1
 80063b4:	335c      	adds	r3, #92	; 0x5c
 80063b6:	2204      	movs	r2, #4
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	e009      	b.n	80063d0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	440b      	add	r3, r1
 80063ca:	335c      	adds	r3, #92	; 0x5c
 80063cc:	2202      	movs	r2, #2
 80063ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	461a      	mov	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e056      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	440b      	add	r3, r1
 8006412:	335d      	adds	r3, #93	; 0x5d
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d123      	bne.n	8006462 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	440b      	add	r3, r1
 8006428:	335c      	adds	r3, #92	; 0x5c
 800642a:	2202      	movs	r2, #2
 800642c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006444:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800644c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e027      	b.n	80064b2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	440b      	add	r3, r1
 8006470:	335d      	adds	r3, #93	; 0x5d
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b07      	cmp	r3, #7
 8006476:	d11c      	bne.n	80064b2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	3358      	adds	r3, #88	; 0x58
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4403      	add	r3, r0
 800649a:	3358      	adds	r3, #88	; 0x58
 800649c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	440b      	add	r3, r1
 80064ac:	335c      	adds	r3, #92	; 0x5c
 80064ae:	2204      	movs	r2, #4
 80064b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064be:	461a      	mov	r2, r3
 80064c0:	2302      	movs	r3, #2
 80064c2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	b2d8      	uxtb	r0, r3
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	440b      	add	r3, r1
 80064d6:	335c      	adds	r3, #92	; 0x5c
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	4601      	mov	r1, r0
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f006 fcee 	bl	800cec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80064e4:	e0d1      	b.n	800668a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d13e      	bne.n	800657a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	440a      	add	r2, r1
 8006512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006516:	f043 0302 	orr.w	r3, r3, #2
 800651a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	440b      	add	r3, r1
 800652a:	3358      	adds	r3, #88	; 0x58
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	1c59      	adds	r1, r3, #1
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4403      	add	r3, r0
 800653e:	3358      	adds	r3, #88	; 0x58
 8006540:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	440b      	add	r3, r1
 8006550:	335d      	adds	r3, #93	; 0x5d
 8006552:	2206      	movs	r2, #6
 8006554:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	4611      	mov	r1, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f004 fb0a 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	461a      	mov	r2, r3
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	6093      	str	r3, [r2, #8]
}
 8006578:	e087      	b.n	800668a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	4413      	add	r3, r2
 8006582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b10      	cmp	r3, #16
 800658e:	d17c      	bne.n	800668a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	440b      	add	r3, r1
 800659e:	333f      	adds	r3, #63	; 0x3f
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d122      	bne.n	80065ec <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	440b      	add	r3, r1
 80065b4:	3358      	adds	r3, #88	; 0x58
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f004 fac8 	bl	800ab7a <USB_HC_Halt>
 80065ea:	e045      	b.n	8006678 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	440b      	add	r3, r1
 80065fa:	333f      	adds	r3, #63	; 0x3f
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	333f      	adds	r3, #63	; 0x3f
 8006612:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006614:	2b02      	cmp	r3, #2
 8006616:	d12f      	bne.n	8006678 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	440b      	add	r3, r1
 8006626:	3358      	adds	r3, #88	; 0x58
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d121      	bne.n	8006678 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	440b      	add	r3, r1
 8006642:	335d      	adds	r3, #93	; 0x5d
 8006644:	2203      	movs	r2, #3
 8006646:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	0151      	lsls	r1, r2, #5
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	440a      	add	r2, r1
 800665e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f004 fa81 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006684:	461a      	mov	r2, r3
 8006686:	2310      	movs	r3, #16
 8006688:	6093      	str	r3, [r2, #8]
}
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b086      	sub	sp, #24
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0304 	and.w	r3, r3, #4
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d119      	bne.n	80066f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	461a      	mov	r2, r3
 80066d0:	2304      	movs	r3, #4
 80066d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ee:	f043 0302 	orr.w	r3, r3, #2
 80066f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80066f4:	e33e      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b20      	cmp	r3, #32
 800670a:	d141      	bne.n	8006790 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	461a      	mov	r2, r3
 800671a:	2320      	movs	r3, #32
 800671c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	333d      	adds	r3, #61	; 0x3d
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	f040 831f 	bne.w	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	440b      	add	r3, r1
 8006744:	333d      	adds	r3, #61	; 0x3d
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	335c      	adds	r3, #92	; 0x5c
 800675a:	2202      	movs	r2, #2
 800675c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	440a      	add	r2, r1
 8006774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006778:	f043 0302 	orr.w	r3, r3, #2
 800677c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f004 f9f6 	bl	800ab7a <USB_HC_Halt>
}
 800678e:	e2f1      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d13f      	bne.n	8006826 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	440b      	add	r3, r1
 80067b4:	335d      	adds	r3, #93	; 0x5d
 80067b6:	2204      	movs	r2, #4
 80067b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	440b      	add	r3, r1
 80067c8:	333d      	adds	r3, #61	; 0x3d
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	440b      	add	r3, r1
 80067dc:	3358      	adds	r3, #88	; 0x58
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fc:	f043 0302 	orr.w	r3, r3, #2
 8006800:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	4611      	mov	r1, r2
 800680c:	4618      	mov	r0, r3
 800680e:	f004 f9b4 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	461a      	mov	r2, r3
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	6093      	str	r3, [r2, #8]
}
 8006824:	e2a6      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683c:	d122      	bne.n	8006884 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006858:	f043 0302 	orr.w	r3, r3, #2
 800685c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f004 f986 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687a:	461a      	mov	r2, r3
 800687c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006880:	6093      	str	r3, [r2, #8]
}
 8006882:	e277      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b01      	cmp	r3, #1
 8006898:	d135      	bne.n	8006906 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	440b      	add	r3, r1
 80068a8:	3358      	adds	r3, #88	; 0x58
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	4611      	mov	r1, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f004 f94e 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ea:	461a      	mov	r2, r3
 80068ec:	2301      	movs	r3, #1
 80068ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	440b      	add	r3, r1
 80068fe:	335d      	adds	r3, #93	; 0x5d
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]
}
 8006904:	e236      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4413      	add	r3, r2
 800690e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b08      	cmp	r3, #8
 800691a:	d12b      	bne.n	8006974 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006928:	461a      	mov	r2, r3
 800692a:	2308      	movs	r3, #8
 800692c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	440a      	add	r2, r1
 8006944:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006948:	f043 0302 	orr.w	r3, r3, #2
 800694c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	4611      	mov	r1, r2
 8006958:	4618      	mov	r0, r3
 800695a:	f004 f90e 	bl	800ab7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	440b      	add	r3, r1
 800696c:	335d      	adds	r3, #93	; 0x5d
 800696e:	2205      	movs	r2, #5
 8006970:	701a      	strb	r2, [r3, #0]
}
 8006972:	e1ff      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d155      	bne.n	8006a36 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	440b      	add	r3, r1
 8006998:	3358      	adds	r3, #88	; 0x58
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	440b      	add	r3, r1
 80069ac:	335d      	adds	r3, #93	; 0x5d
 80069ae:	2203      	movs	r2, #3
 80069b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	440b      	add	r3, r1
 80069c0:	333d      	adds	r3, #61	; 0x3d
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d114      	bne.n	80069f2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	440b      	add	r3, r1
 80069d6:	333c      	adds	r3, #60	; 0x3c
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	440b      	add	r3, r1
 80069ec:	333d      	adds	r3, #61	; 0x3d
 80069ee:	2201      	movs	r2, #1
 80069f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f004 f8ac 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	461a      	mov	r2, r3
 8006a30:	2310      	movs	r3, #16
 8006a32:	6093      	str	r3, [r2, #8]
}
 8006a34:	e19e      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a48:	2b80      	cmp	r3, #128	; 0x80
 8006a4a:	d12b      	bne.n	8006aa4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f004 f87f 	bl	800ab7a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	440b      	add	r3, r1
 8006a8a:	335d      	adds	r3, #93	; 0x5d
 8006a8c:	2206      	movs	r2, #6
 8006a8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	6093      	str	r3, [r2, #8]
}
 8006aa2:	e167      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aba:	d135      	bne.n	8006b28 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f004 f847 	bl	800ab7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af8:	461a      	mov	r2, r3
 8006afa:	2310      	movs	r3, #16
 8006afc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	440b      	add	r3, r1
 8006b20:	335d      	adds	r3, #93	; 0x5d
 8006b22:	2208      	movs	r2, #8
 8006b24:	701a      	strb	r2, [r3, #0]
}
 8006b26:	e125      	b.n	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	f040 811a 	bne.w	8006d74 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5a:	f023 0302 	bic.w	r3, r3, #2
 8006b5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	440b      	add	r3, r1
 8006b6e:	335d      	adds	r3, #93	; 0x5d
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d137      	bne.n	8006be6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	440b      	add	r3, r1
 8006b84:	335c      	adds	r3, #92	; 0x5c
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	440b      	add	r3, r1
 8006b98:	333f      	adds	r3, #63	; 0x3f
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d00b      	beq.n	8006bb8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	440b      	add	r3, r1
 8006bae:	333f      	adds	r3, #63	; 0x3f
 8006bb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	f040 80c5 	bne.w	8006d42 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	440b      	add	r3, r1
 8006bc6:	3351      	adds	r3, #81	; 0x51
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f083 0301 	eor.w	r3, r3, #1
 8006bce:	b2d8      	uxtb	r0, r3
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	440b      	add	r3, r1
 8006bde:	3351      	adds	r3, #81	; 0x51
 8006be0:	4602      	mov	r2, r0
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e0ad      	b.n	8006d42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	440b      	add	r3, r1
 8006bf4:	335d      	adds	r3, #93	; 0x5d
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d10a      	bne.n	8006c12 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	440b      	add	r3, r1
 8006c0a:	335c      	adds	r3, #92	; 0x5c
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e097      	b.n	8006d42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4613      	mov	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	440b      	add	r3, r1
 8006c20:	335d      	adds	r3, #93	; 0x5d
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d10a      	bne.n	8006c3e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	440b      	add	r3, r1
 8006c36:	335c      	adds	r3, #92	; 0x5c
 8006c38:	2202      	movs	r2, #2
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e081      	b.n	8006d42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	440b      	add	r3, r1
 8006c4c:	335d      	adds	r3, #93	; 0x5d
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	d10a      	bne.n	8006c6a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	440b      	add	r3, r1
 8006c62:	335c      	adds	r3, #92	; 0x5c
 8006c64:	2205      	movs	r2, #5
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e06b      	b.n	8006d42 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	440b      	add	r3, r1
 8006c78:	335d      	adds	r3, #93	; 0x5d
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b06      	cmp	r3, #6
 8006c7e:	d00a      	beq.n	8006c96 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	440b      	add	r3, r1
 8006c8e:	335d      	adds	r3, #93	; 0x5d
 8006c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c92:	2b08      	cmp	r3, #8
 8006c94:	d155      	bne.n	8006d42 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3358      	adds	r3, #88	; 0x58
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4403      	add	r3, r0
 8006cb8:	3358      	adds	r3, #88	; 0x58
 8006cba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	440b      	add	r3, r1
 8006cca:	3358      	adds	r3, #88	; 0x58
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d914      	bls.n	8006cfc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	440b      	add	r3, r1
 8006ce0:	3358      	adds	r3, #88	; 0x58
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	440b      	add	r3, r1
 8006cf4:	335c      	adds	r3, #92	; 0x5c
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e009      	b.n	8006d10 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	440b      	add	r3, r1
 8006d0a:	335c      	adds	r3, #92	; 0x5c
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d26:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d2e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2302      	movs	r3, #2
 8006d52:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	b2d8      	uxtb	r0, r3
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	440b      	add	r3, r1
 8006d66:	335c      	adds	r3, #92	; 0x5c
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f006 f8a6 	bl	800cec0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006d74:	bf00      	nop
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	0c5b      	lsrs	r3, r3, #17
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006db0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d003      	beq.n	8006dc0 <HCD_RXQLVL_IRQHandler+0x44>
 8006db8:	2b05      	cmp	r3, #5
 8006dba:	f000 8082 	beq.w	8006ec2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006dbe:	e083      	b.n	8006ec8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d07f      	beq.n	8006ec6 <HCD_RXQLVL_IRQHandler+0x14a>
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3344      	adds	r3, #68	; 0x44
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d074      	beq.n	8006ec6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6818      	ldr	r0, [r3, #0]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	440b      	add	r3, r1
 8006dee:	3344      	adds	r3, #68	; 0x44
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	b292      	uxth	r2, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	f003 fa5d 	bl	800a2b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	440b      	add	r3, r1
 8006e0a:	3344      	adds	r3, #68	; 0x44
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	18d1      	adds	r1, r2, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	4403      	add	r3, r0
 8006e20:	3344      	adds	r3, #68	; 0x44
 8006e22:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	440b      	add	r3, r1
 8006e32:	334c      	adds	r3, #76	; 0x4c
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	18d1      	adds	r1, r2, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	4403      	add	r3, r0
 8006e48:	334c      	adds	r3, #76	; 0x4c
 8006e4a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <HCD_RXQLVL_IRQHandler+0x154>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d031      	beq.n	8006ec6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e80:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3350      	adds	r3, #80	; 0x50
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	f083 0301 	eor.w	r3, r3, #1
 8006eaa:	b2d8      	uxtb	r0, r3
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	440b      	add	r3, r1
 8006eba:	3350      	adds	r3, #80	; 0x50
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	701a      	strb	r2, [r3, #0]
      break;
 8006ec0:	e001      	b.n	8006ec6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006ec6:	bf00      	nop
  }
}
 8006ec8:	bf00      	nop
 8006eca:	3728      	adds	r7, #40	; 0x28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	1ff80000 	.word	0x1ff80000

08006ed4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f00:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d10b      	bne.n	8006f24 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d102      	bne.n	8006f1c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f005 ffb6 	bl	800ce88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f043 0302 	orr.w	r3, r3, #2
 8006f22:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d132      	bne.n	8006f94 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f043 0308 	orr.w	r3, r3, #8
 8006f34:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d126      	bne.n	8006f8e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d113      	bne.n	8006f70 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f52:	d106      	bne.n	8006f62 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f003 fae6 	bl	800a52c <USB_InitFSLSPClkSel>
 8006f60:	e011      	b.n	8006f86 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2101      	movs	r1, #1
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f003 fadf 	bl	800a52c <USB_InitFSLSPClkSel>
 8006f6e:	e00a      	b.n	8006f86 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d106      	bne.n	8006f86 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006f84:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f005 ffa8 	bl	800cedc <HAL_HCD_PortEnabled_Callback>
 8006f8c:	e002      	b.n	8006f94 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f005 ffb2 	bl	800cef8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d103      	bne.n	8006fa6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f043 0320 	orr.w	r3, r3, #32
 8006fa4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fac:	461a      	mov	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6013      	str	r3, [r2, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e11f      	b.n	800720e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fc fdf2 	bl	8003bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	; 0x24
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800700e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800701e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007020:	f001 f9de 	bl	80083e0 <HAL_RCC_GetPCLK1Freq>
 8007024:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4a7b      	ldr	r2, [pc, #492]	; (8007218 <HAL_I2C_Init+0x25c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d807      	bhi.n	8007040 <HAL_I2C_Init+0x84>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a7a      	ldr	r2, [pc, #488]	; (800721c <HAL_I2C_Init+0x260>)
 8007034:	4293      	cmp	r3, r2
 8007036:	bf94      	ite	ls
 8007038:	2301      	movls	r3, #1
 800703a:	2300      	movhi	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	e006      	b.n	800704e <HAL_I2C_Init+0x92>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a77      	ldr	r2, [pc, #476]	; (8007220 <HAL_I2C_Init+0x264>)
 8007044:	4293      	cmp	r3, r2
 8007046:	bf94      	ite	ls
 8007048:	2301      	movls	r3, #1
 800704a:	2300      	movhi	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e0db      	b.n	800720e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a72      	ldr	r2, [pc, #456]	; (8007224 <HAL_I2C_Init+0x268>)
 800705a:	fba2 2303 	umull	r2, r3, r2, r3
 800705e:	0c9b      	lsrs	r3, r3, #18
 8007060:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a64      	ldr	r2, [pc, #400]	; (8007218 <HAL_I2C_Init+0x25c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d802      	bhi.n	8007090 <HAL_I2C_Init+0xd4>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3301      	adds	r3, #1
 800708e:	e009      	b.n	80070a4 <HAL_I2C_Init+0xe8>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	4a63      	ldr	r2, [pc, #396]	; (8007228 <HAL_I2C_Init+0x26c>)
 800709c:	fba2 2303 	umull	r2, r3, r2, r3
 80070a0:	099b      	lsrs	r3, r3, #6
 80070a2:	3301      	adds	r3, #1
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80070b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4956      	ldr	r1, [pc, #344]	; (8007218 <HAL_I2C_Init+0x25c>)
 80070c0:	428b      	cmp	r3, r1
 80070c2:	d80d      	bhi.n	80070e0 <HAL_I2C_Init+0x124>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	1e59      	subs	r1, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80070d2:	3301      	adds	r3, #1
 80070d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d8:	2b04      	cmp	r3, #4
 80070da:	bf38      	it	cc
 80070dc:	2304      	movcc	r3, #4
 80070de:	e04f      	b.n	8007180 <HAL_I2C_Init+0x1c4>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d111      	bne.n	800710c <HAL_I2C_Init+0x150>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	1e58      	subs	r0, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	440b      	add	r3, r1
 80070f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070fa:	3301      	adds	r3, #1
 80070fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007100:	2b00      	cmp	r3, #0
 8007102:	bf0c      	ite	eq
 8007104:	2301      	moveq	r3, #1
 8007106:	2300      	movne	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	e012      	b.n	8007132 <HAL_I2C_Init+0x176>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	1e58      	subs	r0, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6859      	ldr	r1, [r3, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	0099      	lsls	r1, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007122:	3301      	adds	r3, #1
 8007124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_I2C_Init+0x17e>
 8007136:	2301      	movs	r3, #1
 8007138:	e022      	b.n	8007180 <HAL_I2C_Init+0x1c4>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10e      	bne.n	8007160 <HAL_I2C_Init+0x1a4>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1e58      	subs	r0, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6859      	ldr	r1, [r3, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	440b      	add	r3, r1
 8007150:	fbb0 f3f3 	udiv	r3, r0, r3
 8007154:	3301      	adds	r3, #1
 8007156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800715a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800715e:	e00f      	b.n	8007180 <HAL_I2C_Init+0x1c4>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1e58      	subs	r0, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	440b      	add	r3, r1
 800716e:	0099      	lsls	r1, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	fbb0 f3f3 	udiv	r3, r0, r3
 8007176:	3301      	adds	r3, #1
 8007178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800717c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	6809      	ldr	r1, [r1, #0]
 8007184:	4313      	orrs	r3, r2
 8007186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69da      	ldr	r2, [r3, #28]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6911      	ldr	r1, [r2, #16]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	68d2      	ldr	r2, [r2, #12]
 80071ba:	4311      	orrs	r1, r2
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695a      	ldr	r2, [r3, #20]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	000186a0 	.word	0x000186a0
 800721c:	001e847f 	.word	0x001e847f
 8007220:	003d08ff 	.word	0x003d08ff
 8007224:	431bde83 	.word	0x431bde83
 8007228:	10624dd3 	.word	0x10624dd3

0800722c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e128      	b.n	8007490 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a90      	ldr	r2, [pc, #576]	; (8007498 <HAL_I2S_Init+0x26c>)
 8007256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fc fcff 	bl	8003c5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8007274:	f023 030f 	bic.w	r3, r3, #15
 8007278:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2202      	movs	r2, #2
 8007280:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b02      	cmp	r3, #2
 8007288:	d060      	beq.n	800734c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007292:	2310      	movs	r3, #16
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	e001      	b.n	800729c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007298:	2320      	movs	r3, #32
 800729a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d802      	bhi.n	80072aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80072aa:	2001      	movs	r0, #1
 80072ac:	f001 f9a2 	bl	80085f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80072b0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ba:	d125      	bne.n	8007308 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	3305      	adds	r3, #5
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	e01f      	b.n	8007326 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007302:	3305      	adds	r3, #5
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e00e      	b.n	8007326 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	461a      	mov	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	3305      	adds	r3, #5
 8007324:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	4a5c      	ldr	r2, [pc, #368]	; (800749c <HAL_I2S_Init+0x270>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	08db      	lsrs	r3, r3, #3
 8007330:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e003      	b.n	8007354 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800734c:	2302      	movs	r3, #2
 800734e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d902      	bls.n	8007360 <HAL_I2S_Init+0x134>
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2bff      	cmp	r3, #255	; 0xff
 800735e:	d907      	bls.n	8007370 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007364:	f043 0210 	orr.w	r2, r3, #16
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e08f      	b.n	8007490 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	ea42 0103 	orr.w	r1, r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	430a      	orrs	r2, r1
 8007382:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800738e:	f023 030f 	bic.w	r3, r3, #15
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6851      	ldr	r1, [r2, #4]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	6892      	ldr	r2, [r2, #8]
 800739a:	4311      	orrs	r1, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68d2      	ldr	r2, [r2, #12]
 80073a0:	4311      	orrs	r1, r2
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6992      	ldr	r2, [r2, #24]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d161      	bne.n	8007480 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a38      	ldr	r2, [pc, #224]	; (80074a0 <HAL_I2S_Init+0x274>)
 80073c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a37      	ldr	r2, [pc, #220]	; (80074a4 <HAL_I2S_Init+0x278>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d101      	bne.n	80073d0 <HAL_I2S_Init+0x1a4>
 80073cc:	4b36      	ldr	r3, [pc, #216]	; (80074a8 <HAL_I2S_Init+0x27c>)
 80073ce:	e001      	b.n	80073d4 <HAL_I2S_Init+0x1a8>
 80073d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	4932      	ldr	r1, [pc, #200]	; (80074a4 <HAL_I2S_Init+0x278>)
 80073dc:	428a      	cmp	r2, r1
 80073de:	d101      	bne.n	80073e4 <HAL_I2S_Init+0x1b8>
 80073e0:	4a31      	ldr	r2, [pc, #196]	; (80074a8 <HAL_I2S_Init+0x27c>)
 80073e2:	e001      	b.n	80073e8 <HAL_I2S_Init+0x1bc>
 80073e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80073e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80073ec:	f023 030f 	bic.w	r3, r3, #15
 80073f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	; (80074a4 <HAL_I2S_Init+0x278>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d101      	bne.n	8007400 <HAL_I2S_Init+0x1d4>
 80073fc:	4b2a      	ldr	r3, [pc, #168]	; (80074a8 <HAL_I2S_Init+0x27c>)
 80073fe:	e001      	b.n	8007404 <HAL_I2S_Init+0x1d8>
 8007400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007404:	2202      	movs	r2, #2
 8007406:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a25      	ldr	r2, [pc, #148]	; (80074a4 <HAL_I2S_Init+0x278>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d101      	bne.n	8007416 <HAL_I2S_Init+0x1ea>
 8007412:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <HAL_I2S_Init+0x27c>)
 8007414:	e001      	b.n	800741a <HAL_I2S_Init+0x1ee>
 8007416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007426:	d003      	beq.n	8007430 <HAL_I2S_Init+0x204>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8007430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	e001      	b.n	800743c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8007438:	2300      	movs	r3, #0
 800743a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	b299      	uxth	r1, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8007452:	4303      	orrs	r3, r0
 8007454:	b29b      	uxth	r3, r3
 8007456:	430b      	orrs	r3, r1
 8007458:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800745a:	4313      	orrs	r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	897b      	ldrh	r3, [r7, #10]
 8007460:	4313      	orrs	r3, r2
 8007462:	b29b      	uxth	r3, r3
 8007464:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007468:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a0d      	ldr	r2, [pc, #52]	; (80074a4 <HAL_I2S_Init+0x278>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <HAL_I2S_Init+0x24c>
 8007474:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <HAL_I2S_Init+0x27c>)
 8007476:	e001      	b.n	800747c <HAL_I2S_Init+0x250>
 8007478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747c:	897a      	ldrh	r2, [r7, #10]
 800747e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	080075a3 	.word	0x080075a3
 800749c:	cccccccd 	.word	0xcccccccd
 80074a0:	080076b9 	.word	0x080076b9
 80074a4:	40003800 	.word	0x40003800
 80074a8:	40003400 	.word	0x40003400

080074ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	881a      	ldrh	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	1c9a      	adds	r2, r3, #2
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10e      	bne.n	800753c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800752c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ffb8 	bl	80074ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	b292      	uxth	r2, r2
 8007558:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	1c9a      	adds	r2, r3, #2
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10e      	bne.n	800759a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800758a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff ff93 	bl	80074c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d13a      	bne.n	8007634 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d109      	bne.n	80075dc <I2S_IRQHandler+0x3a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d102      	bne.n	80075dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff ffb4 	bl	8007544 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d126      	bne.n	8007634 <I2S_IRQHandler+0x92>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d11f      	bne.n	8007634 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007602:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007604:	2300      	movs	r3, #0
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	f043 0202 	orr.w	r2, r3, #2
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff ff50 	bl	80074d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b03      	cmp	r3, #3
 800763e:	d136      	bne.n	80076ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b02      	cmp	r3, #2
 8007648:	d109      	bne.n	800765e <I2S_IRQHandler+0xbc>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007654:	2b80      	cmp	r3, #128	; 0x80
 8007656:	d102      	bne.n	800765e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff45 	bl	80074e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d122      	bne.n	80076ae <I2S_IRQHandler+0x10c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b20      	cmp	r3, #32
 8007674:	d11b      	bne.n	80076ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007684:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	f043 0204 	orr.w	r2, r3, #4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ff13 	bl	80074d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076ae:	bf00      	nop
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4aa2      	ldr	r2, [pc, #648]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d101      	bne.n	80076d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80076d2:	4ba2      	ldr	r3, [pc, #648]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80076d4:	e001      	b.n	80076da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80076d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a9b      	ldr	r2, [pc, #620]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d101      	bne.n	80076f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80076f0:	4b9a      	ldr	r3, [pc, #616]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80076f2:	e001      	b.n	80076f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80076f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007704:	d004      	beq.n	8007710 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 8099 	bne.w	8007842 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d107      	bne.n	800772a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f925 	bl	8007974 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b01      	cmp	r3, #1
 8007732:	d107      	bne.n	8007744 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9c8 	bl	8007ad4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	2b40      	cmp	r3, #64	; 0x40
 800774c:	d13a      	bne.n	80077c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d035      	beq.n	80077c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a7e      	ldr	r2, [pc, #504]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d101      	bne.n	8007766 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8007762:	4b7e      	ldr	r3, [pc, #504]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007764:	e001      	b.n	800776a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4979      	ldr	r1, [pc, #484]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007772:	428b      	cmp	r3, r1
 8007774:	d101      	bne.n	800777a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007776:	4b79      	ldr	r3, [pc, #484]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007778:	e001      	b.n	800777e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800777a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800777e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007782:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007792:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	f043 0202 	orr.w	r2, r3, #2
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff fe88 	bl	80074d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	f040 80be 	bne.w	800794c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80b8 	beq.w	800794c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a59      	ldr	r2, [pc, #356]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d101      	bne.n	80077fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80077f6:	4b59      	ldr	r3, [pc, #356]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80077f8:	e001      	b.n	80077fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80077fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4954      	ldr	r1, [pc, #336]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007806:	428b      	cmp	r3, r1
 8007808:	d101      	bne.n	800780e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800780a:	4b54      	ldr	r3, [pc, #336]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800780c:	e001      	b.n	8007812 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800780e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007812:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007816:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007818:	2300      	movs	r3, #0
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	60bb      	str	r3, [r7, #8]
 8007824:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	f043 0204 	orr.w	r2, r3, #4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fe4a 	bl	80074d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007840:	e084      	b.n	800794c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d107      	bne.n	800785c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8be 	bl	80079d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b01      	cmp	r3, #1
 8007864:	d107      	bne.n	8007876 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8fd 	bl	8007a70 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d12f      	bne.n	80078e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d02a      	beq.n	80078e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007898:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a2e      	ldr	r2, [pc, #184]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d101      	bne.n	80078a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80078a4:	4b2d      	ldr	r3, [pc, #180]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078a6:	e001      	b.n	80078ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80078a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4929      	ldr	r1, [pc, #164]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078b4:	428b      	cmp	r3, r1
 80078b6:	d101      	bne.n	80078bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80078b8:	4b28      	ldr	r3, [pc, #160]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80078ba:	e001      	b.n	80078c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80078bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80078c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	f043 0202 	orr.w	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fdfa 	bl	80074d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d131      	bne.n	800794e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02c      	beq.n	800794e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a17      	ldr	r2, [pc, #92]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80078fe:	4b17      	ldr	r3, [pc, #92]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007900:	e001      	b.n	8007906 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4912      	ldr	r1, [pc, #72]	; (8007958 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800790e:	428b      	cmp	r3, r1
 8007910:	d101      	bne.n	8007916 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007912:	4b12      	ldr	r3, [pc, #72]	; (800795c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007914:	e001      	b.n	800791a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800791a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800791e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800792e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793c:	f043 0204 	orr.w	r2, r3, #4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fdc5 	bl	80074d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800794a:	e000      	b.n	800794e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800794c:	bf00      	nop
}
 800794e:	bf00      	nop
 8007950:	3720      	adds	r7, #32
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	40003800 	.word	0x40003800
 800795c:	40003400 	.word	0x40003400

08007960 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	1c99      	adds	r1, r3, #2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6251      	str	r1, [r2, #36]	; 0x24
 8007986:	881a      	ldrh	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d113      	bne.n	80079ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ffc9 	bl	8007960 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	1c99      	adds	r1, r3, #2
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	6251      	str	r1, [r2, #36]	; 0x24
 80079ea:	8819      	ldrh	r1, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <I2SEx_TxISR_I2SExt+0x90>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d101      	bne.n	80079fa <I2SEx_TxISR_I2SExt+0x22>
 80079f6:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <I2SEx_TxISR_I2SExt+0x94>)
 80079f8:	e001      	b.n	80079fe <I2SEx_TxISR_I2SExt+0x26>
 80079fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80079fe:	460a      	mov	r2, r1
 8007a00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d121      	bne.n	8007a5e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a12      	ldr	r2, [pc, #72]	; (8007a68 <I2SEx_TxISR_I2SExt+0x90>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d101      	bne.n	8007a28 <I2SEx_TxISR_I2SExt+0x50>
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <I2SEx_TxISR_I2SExt+0x94>)
 8007a26:	e001      	b.n	8007a2c <I2SEx_TxISR_I2SExt+0x54>
 8007a28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	490d      	ldr	r1, [pc, #52]	; (8007a68 <I2SEx_TxISR_I2SExt+0x90>)
 8007a34:	428b      	cmp	r3, r1
 8007a36:	d101      	bne.n	8007a3c <I2SEx_TxISR_I2SExt+0x64>
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <I2SEx_TxISR_I2SExt+0x94>)
 8007a3a:	e001      	b.n	8007a40 <I2SEx_TxISR_I2SExt+0x68>
 8007a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff81 	bl	8007960 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40003800 	.word	0x40003800
 8007a6c:	40003400 	.word	0x40003400

08007a70 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68d8      	ldr	r0, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	1c99      	adds	r1, r3, #2
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007a88:	b282      	uxth	r2, r0
 8007a8a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d113      	bne.n	8007acc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ab2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff ff4a 	bl	8007960 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a20      	ldr	r2, [pc, #128]	; (8007b64 <I2SEx_RxISR_I2SExt+0x90>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d101      	bne.n	8007aea <I2SEx_RxISR_I2SExt+0x16>
 8007ae6:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <I2SEx_RxISR_I2SExt+0x94>)
 8007ae8:	e001      	b.n	8007aee <I2SEx_RxISR_I2SExt+0x1a>
 8007aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007aee:	68d8      	ldr	r0, [r3, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	1c99      	adds	r1, r3, #2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007afa:	b282      	uxth	r2, r0
 8007afc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d121      	bne.n	8007b5a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a12      	ldr	r2, [pc, #72]	; (8007b64 <I2SEx_RxISR_I2SExt+0x90>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d101      	bne.n	8007b24 <I2SEx_RxISR_I2SExt+0x50>
 8007b20:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <I2SEx_RxISR_I2SExt+0x94>)
 8007b22:	e001      	b.n	8007b28 <I2SEx_RxISR_I2SExt+0x54>
 8007b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	490d      	ldr	r1, [pc, #52]	; (8007b64 <I2SEx_RxISR_I2SExt+0x90>)
 8007b30:	428b      	cmp	r3, r1
 8007b32:	d101      	bne.n	8007b38 <I2SEx_RxISR_I2SExt+0x64>
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <I2SEx_RxISR_I2SExt+0x94>)
 8007b36:	e001      	b.n	8007b3c <I2SEx_RxISR_I2SExt+0x68>
 8007b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007b3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b40:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff03 	bl	8007960 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40003800 	.word	0x40003800
 8007b68:	40003400 	.word	0x40003400

08007b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e25b      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d075      	beq.n	8007c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b8a:	4ba3      	ldr	r3, [pc, #652]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 030c 	and.w	r3, r3, #12
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	d00c      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b96:	4ba0      	ldr	r3, [pc, #640]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d112      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ba2:	4b9d      	ldr	r3, [pc, #628]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bae:	d10b      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bb0:	4b99      	ldr	r3, [pc, #612]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d05b      	beq.n	8007c74 <HAL_RCC_OscConfig+0x108>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d157      	bne.n	8007c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e236      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd0:	d106      	bne.n	8007be0 <HAL_RCC_OscConfig+0x74>
 8007bd2:	4b91      	ldr	r3, [pc, #580]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a90      	ldr	r2, [pc, #576]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	e01d      	b.n	8007c1c <HAL_RCC_OscConfig+0xb0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be8:	d10c      	bne.n	8007c04 <HAL_RCC_OscConfig+0x98>
 8007bea:	4b8b      	ldr	r3, [pc, #556]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a8a      	ldr	r2, [pc, #552]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	4b88      	ldr	r3, [pc, #544]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a87      	ldr	r2, [pc, #540]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	e00b      	b.n	8007c1c <HAL_RCC_OscConfig+0xb0>
 8007c04:	4b84      	ldr	r3, [pc, #528]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a83      	ldr	r2, [pc, #524]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	4b81      	ldr	r3, [pc, #516]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a80      	ldr	r2, [pc, #512]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d013      	beq.n	8007c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c24:	f7fd f9e6 	bl	8004ff4 <HAL_GetTick>
 8007c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c2c:	f7fd f9e2 	bl	8004ff4 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b64      	cmp	r3, #100	; 0x64
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e1fb      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c3e:	4b76      	ldr	r3, [pc, #472]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0f0      	beq.n	8007c2c <HAL_RCC_OscConfig+0xc0>
 8007c4a:	e014      	b.n	8007c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c4c:	f7fd f9d2 	bl	8004ff4 <HAL_GetTick>
 8007c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c54:	f7fd f9ce 	bl	8004ff4 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b64      	cmp	r3, #100	; 0x64
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e1e7      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c66:	4b6c      	ldr	r3, [pc, #432]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f0      	bne.n	8007c54 <HAL_RCC_OscConfig+0xe8>
 8007c72:	e000      	b.n	8007c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d063      	beq.n	8007d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c82:	4b65      	ldr	r3, [pc, #404]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 030c 	and.w	r3, r3, #12
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00b      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c8e:	4b62      	ldr	r3, [pc, #392]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d11c      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c9a:	4b5f      	ldr	r3, [pc, #380]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d116      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ca6:	4b5c      	ldr	r3, [pc, #368]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_RCC_OscConfig+0x152>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d001      	beq.n	8007cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e1bb      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cbe:	4b56      	ldr	r3, [pc, #344]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4952      	ldr	r1, [pc, #328]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cd2:	e03a      	b.n	8007d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cdc:	4b4f      	ldr	r3, [pc, #316]	; (8007e1c <HAL_RCC_OscConfig+0x2b0>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce2:	f7fd f987 	bl	8004ff4 <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce8:	e008      	b.n	8007cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cea:	f7fd f983 	bl	8004ff4 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e19c      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cfc:	4b46      	ldr	r3, [pc, #280]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0f0      	beq.n	8007cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d08:	4b43      	ldr	r3, [pc, #268]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4940      	ldr	r1, [pc, #256]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	600b      	str	r3, [r1, #0]
 8007d1c:	e015      	b.n	8007d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d1e:	4b3f      	ldr	r3, [pc, #252]	; (8007e1c <HAL_RCC_OscConfig+0x2b0>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d24:	f7fd f966 	bl	8004ff4 <HAL_GetTick>
 8007d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d2a:	e008      	b.n	8007d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d2c:	f7fd f962 	bl	8004ff4 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e17b      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d3e:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f0      	bne.n	8007d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d030      	beq.n	8007db8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d016      	beq.n	8007d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d5e:	4b30      	ldr	r3, [pc, #192]	; (8007e20 <HAL_RCC_OscConfig+0x2b4>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d64:	f7fd f946 	bl	8004ff4 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d6c:	f7fd f942 	bl	8004ff4 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e15b      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d7e:	4b26      	ldr	r3, [pc, #152]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x200>
 8007d8a:	e015      	b.n	8007db8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d8c:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <HAL_RCC_OscConfig+0x2b4>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d92:	f7fd f92f 	bl	8004ff4 <HAL_GetTick>
 8007d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d98:	e008      	b.n	8007dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d9a:	f7fd f92b 	bl	8004ff4 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e144      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80a0 	beq.w	8007f06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10f      	bne.n	8007df6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60bb      	str	r3, [r7, #8]
 8007dda:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	4a0e      	ldr	r2, [pc, #56]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de4:	6413      	str	r3, [r2, #64]	; 0x40
 8007de6:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <HAL_RCC_OscConfig+0x2ac>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dee:	60bb      	str	r3, [r7, #8]
 8007df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007df2:	2301      	movs	r3, #1
 8007df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007df6:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <HAL_RCC_OscConfig+0x2b8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d121      	bne.n	8007e46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HAL_RCC_OscConfig+0x2b8>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a07      	ldr	r2, [pc, #28]	; (8007e24 <HAL_RCC_OscConfig+0x2b8>)
 8007e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e0e:	f7fd f8f1 	bl	8004ff4 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e14:	e011      	b.n	8007e3a <HAL_RCC_OscConfig+0x2ce>
 8007e16:	bf00      	nop
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	42470000 	.word	0x42470000
 8007e20:	42470e80 	.word	0x42470e80
 8007e24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e28:	f7fd f8e4 	bl	8004ff4 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e0fd      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3a:	4b81      	ldr	r3, [pc, #516]	; (8008040 <HAL_RCC_OscConfig+0x4d4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d106      	bne.n	8007e5c <HAL_RCC_OscConfig+0x2f0>
 8007e4e:	4b7d      	ldr	r3, [pc, #500]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e52:	4a7c      	ldr	r2, [pc, #496]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e54:	f043 0301 	orr.w	r3, r3, #1
 8007e58:	6713      	str	r3, [r2, #112]	; 0x70
 8007e5a:	e01c      	b.n	8007e96 <HAL_RCC_OscConfig+0x32a>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d10c      	bne.n	8007e7e <HAL_RCC_OscConfig+0x312>
 8007e64:	4b77      	ldr	r3, [pc, #476]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	4a76      	ldr	r2, [pc, #472]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e6a:	f043 0304 	orr.w	r3, r3, #4
 8007e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e70:	4b74      	ldr	r3, [pc, #464]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e74:	4a73      	ldr	r2, [pc, #460]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e7c:	e00b      	b.n	8007e96 <HAL_RCC_OscConfig+0x32a>
 8007e7e:	4b71      	ldr	r3, [pc, #452]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	4a70      	ldr	r2, [pc, #448]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8a:	4b6e      	ldr	r3, [pc, #440]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8e:	4a6d      	ldr	r2, [pc, #436]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007e90:	f023 0304 	bic.w	r3, r3, #4
 8007e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d015      	beq.n	8007eca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9e:	f7fd f8a9 	bl	8004ff4 <HAL_GetTick>
 8007ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea4:	e00a      	b.n	8007ebc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ea6:	f7fd f8a5 	bl	8004ff4 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e0bc      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ebc:	4b61      	ldr	r3, [pc, #388]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0ee      	beq.n	8007ea6 <HAL_RCC_OscConfig+0x33a>
 8007ec8:	e014      	b.n	8007ef4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eca:	f7fd f893 	bl	8004ff4 <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ed0:	e00a      	b.n	8007ee8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed2:	f7fd f88f 	bl	8004ff4 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e0a6      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ee8:	4b56      	ldr	r3, [pc, #344]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1ee      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d105      	bne.n	8007f06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007efa:	4b52      	ldr	r3, [pc, #328]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	4a51      	ldr	r2, [pc, #324]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8092 	beq.w	8008034 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f10:	4b4c      	ldr	r3, [pc, #304]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 030c 	and.w	r3, r3, #12
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d05c      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d141      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f24:	4b48      	ldr	r3, [pc, #288]	; (8008048 <HAL_RCC_OscConfig+0x4dc>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2a:	f7fd f863 	bl	8004ff4 <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f32:	f7fd f85f 	bl	8004ff4 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e078      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f44:	4b3f      	ldr	r3, [pc, #252]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69da      	ldr	r2, [r3, #28]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a1b      	ldr	r3, [r3, #32]
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	019b      	lsls	r3, r3, #6
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	085b      	lsrs	r3, r3, #1
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	041b      	lsls	r3, r3, #16
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	061b      	lsls	r3, r3, #24
 8007f74:	4933      	ldr	r1, [pc, #204]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f7a:	4b33      	ldr	r3, [pc, #204]	; (8008048 <HAL_RCC_OscConfig+0x4dc>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f80:	f7fd f838 	bl	8004ff4 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f88:	f7fd f834 	bl	8004ff4 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e04d      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f9a:	4b2a      	ldr	r3, [pc, #168]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0f0      	beq.n	8007f88 <HAL_RCC_OscConfig+0x41c>
 8007fa6:	e045      	b.n	8008034 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa8:	4b27      	ldr	r3, [pc, #156]	; (8008048 <HAL_RCC_OscConfig+0x4dc>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fae:	f7fd f821 	bl	8004ff4 <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fb6:	f7fd f81d 	bl	8004ff4 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e036      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fc8:	4b1e      	ldr	r3, [pc, #120]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1f0      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x44a>
 8007fd4:	e02e      	b.n	8008034 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e029      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <HAL_RCC_OscConfig+0x4d8>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d11c      	bne.n	8008030 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008000:	429a      	cmp	r2, r3
 8008002:	d115      	bne.n	8008030 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800800a:	4013      	ands	r3, r2
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008010:	4293      	cmp	r3, r2
 8008012:	d10d      	bne.n	8008030 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800801e:	429a      	cmp	r2, r3
 8008020:	d106      	bne.n	8008030 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800802c:	429a      	cmp	r2, r3
 800802e:	d001      	beq.n	8008034 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	40007000 	.word	0x40007000
 8008044:	40023800 	.word	0x40023800
 8008048:	42470060 	.word	0x42470060

0800804c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0cc      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008060:	4b68      	ldr	r3, [pc, #416]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d90c      	bls.n	8008088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806e:	4b65      	ldr	r3, [pc, #404]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008076:	4b63      	ldr	r3, [pc, #396]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d001      	beq.n	8008088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e0b8      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d020      	beq.n	80080d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	d005      	beq.n	80080ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080a0:	4b59      	ldr	r3, [pc, #356]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4a58      	ldr	r2, [pc, #352]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0308 	and.w	r3, r3, #8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080b8:	4b53      	ldr	r3, [pc, #332]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	4a52      	ldr	r2, [pc, #328]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080c4:	4b50      	ldr	r3, [pc, #320]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	494d      	ldr	r1, [pc, #308]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d044      	beq.n	800816c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d107      	bne.n	80080fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ea:	4b47      	ldr	r3, [pc, #284]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d119      	bne.n	800812a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e07f      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d003      	beq.n	800810a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008106:	2b03      	cmp	r3, #3
 8008108:	d107      	bne.n	800811a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800810a:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e06f      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800811a:	4b3b      	ldr	r3, [pc, #236]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e067      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800812a:	4b37      	ldr	r3, [pc, #220]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 0203 	bic.w	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4934      	ldr	r1, [pc, #208]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 8008138:	4313      	orrs	r3, r2
 800813a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800813c:	f7fc ff5a 	bl	8004ff4 <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008142:	e00a      	b.n	800815a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008144:	f7fc ff56 	bl	8004ff4 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008152:	4293      	cmp	r3, r2
 8008154:	d901      	bls.n	800815a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e04f      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800815a:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f003 020c 	and.w	r2, r3, #12
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	429a      	cmp	r2, r3
 800816a:	d1eb      	bne.n	8008144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800816c:	4b25      	ldr	r3, [pc, #148]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d20c      	bcs.n	8008194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800817a:	4b22      	ldr	r3, [pc, #136]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008182:	4b20      	ldr	r3, [pc, #128]	; (8008204 <HAL_RCC_ClockConfig+0x1b8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d001      	beq.n	8008194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e032      	b.n	80081fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	4916      	ldr	r1, [pc, #88]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	490e      	ldr	r1, [pc, #56]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081d2:	f000 f821 	bl	8008218 <HAL_RCC_GetSysClockFreq>
 80081d6:	4601      	mov	r1, r0
 80081d8:	4b0b      	ldr	r3, [pc, #44]	; (8008208 <HAL_RCC_ClockConfig+0x1bc>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	4a0a      	ldr	r2, [pc, #40]	; (800820c <HAL_RCC_ClockConfig+0x1c0>)
 80081e4:	5cd3      	ldrb	r3, [r2, r3]
 80081e6:	fa21 f303 	lsr.w	r3, r1, r3
 80081ea:	4a09      	ldr	r2, [pc, #36]	; (8008210 <HAL_RCC_ClockConfig+0x1c4>)
 80081ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80081ee:	4b09      	ldr	r3, [pc, #36]	; (8008214 <HAL_RCC_ClockConfig+0x1c8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fc feba 	bl	8004f6c <HAL_InitTick>

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	40023c00 	.word	0x40023c00
 8008208:	40023800 	.word	0x40023800
 800820c:	080106e4 	.word	0x080106e4
 8008210:	20000000 	.word	0x20000000
 8008214:	20000004 	.word	0x20000004

08008218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	607b      	str	r3, [r7, #4]
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	2300      	movs	r3, #0
 8008228:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800822e:	4b63      	ldr	r3, [pc, #396]	; (80083bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 030c 	and.w	r3, r3, #12
 8008236:	2b04      	cmp	r3, #4
 8008238:	d007      	beq.n	800824a <HAL_RCC_GetSysClockFreq+0x32>
 800823a:	2b08      	cmp	r3, #8
 800823c:	d008      	beq.n	8008250 <HAL_RCC_GetSysClockFreq+0x38>
 800823e:	2b00      	cmp	r3, #0
 8008240:	f040 80b4 	bne.w	80083ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008244:	4b5e      	ldr	r3, [pc, #376]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008246:	60bb      	str	r3, [r7, #8]
       break;
 8008248:	e0b3      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800824a:	4b5e      	ldr	r3, [pc, #376]	; (80083c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800824c:	60bb      	str	r3, [r7, #8]
      break;
 800824e:	e0b0      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008250:	4b5a      	ldr	r3, [pc, #360]	; (80083bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008258:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800825a:	4b58      	ldr	r3, [pc, #352]	; (80083bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d04a      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008266:	4b55      	ldr	r3, [pc, #340]	; (80083bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	099b      	lsrs	r3, r3, #6
 800826c:	f04f 0400 	mov.w	r4, #0
 8008270:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	ea03 0501 	and.w	r5, r3, r1
 800827c:	ea04 0602 	and.w	r6, r4, r2
 8008280:	4629      	mov	r1, r5
 8008282:	4632      	mov	r2, r6
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	f04f 0400 	mov.w	r4, #0
 800828c:	0154      	lsls	r4, r2, #5
 800828e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008292:	014b      	lsls	r3, r1, #5
 8008294:	4619      	mov	r1, r3
 8008296:	4622      	mov	r2, r4
 8008298:	1b49      	subs	r1, r1, r5
 800829a:	eb62 0206 	sbc.w	r2, r2, r6
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	f04f 0400 	mov.w	r4, #0
 80082a6:	0194      	lsls	r4, r2, #6
 80082a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082ac:	018b      	lsls	r3, r1, #6
 80082ae:	1a5b      	subs	r3, r3, r1
 80082b0:	eb64 0402 	sbc.w	r4, r4, r2
 80082b4:	f04f 0100 	mov.w	r1, #0
 80082b8:	f04f 0200 	mov.w	r2, #0
 80082bc:	00e2      	lsls	r2, r4, #3
 80082be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80082c2:	00d9      	lsls	r1, r3, #3
 80082c4:	460b      	mov	r3, r1
 80082c6:	4614      	mov	r4, r2
 80082c8:	195b      	adds	r3, r3, r5
 80082ca:	eb44 0406 	adc.w	r4, r4, r6
 80082ce:	f04f 0100 	mov.w	r1, #0
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	0262      	lsls	r2, r4, #9
 80082d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80082dc:	0259      	lsls	r1, r3, #9
 80082de:	460b      	mov	r3, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	4621      	mov	r1, r4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f04f 0400 	mov.w	r4, #0
 80082ec:	461a      	mov	r2, r3
 80082ee:	4623      	mov	r3, r4
 80082f0:	f7fa fbfa 	bl	8002ae8 <__aeabi_uldivmod>
 80082f4:	4603      	mov	r3, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	e049      	b.n	8008390 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082fc:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	099b      	lsrs	r3, r3, #6
 8008302:	f04f 0400 	mov.w	r4, #0
 8008306:	f240 11ff 	movw	r1, #511	; 0x1ff
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	ea03 0501 	and.w	r5, r3, r1
 8008312:	ea04 0602 	and.w	r6, r4, r2
 8008316:	4629      	mov	r1, r5
 8008318:	4632      	mov	r2, r6
 800831a:	f04f 0300 	mov.w	r3, #0
 800831e:	f04f 0400 	mov.w	r4, #0
 8008322:	0154      	lsls	r4, r2, #5
 8008324:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008328:	014b      	lsls	r3, r1, #5
 800832a:	4619      	mov	r1, r3
 800832c:	4622      	mov	r2, r4
 800832e:	1b49      	subs	r1, r1, r5
 8008330:	eb62 0206 	sbc.w	r2, r2, r6
 8008334:	f04f 0300 	mov.w	r3, #0
 8008338:	f04f 0400 	mov.w	r4, #0
 800833c:	0194      	lsls	r4, r2, #6
 800833e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008342:	018b      	lsls	r3, r1, #6
 8008344:	1a5b      	subs	r3, r3, r1
 8008346:	eb64 0402 	sbc.w	r4, r4, r2
 800834a:	f04f 0100 	mov.w	r1, #0
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	00e2      	lsls	r2, r4, #3
 8008354:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008358:	00d9      	lsls	r1, r3, #3
 800835a:	460b      	mov	r3, r1
 800835c:	4614      	mov	r4, r2
 800835e:	195b      	adds	r3, r3, r5
 8008360:	eb44 0406 	adc.w	r4, r4, r6
 8008364:	f04f 0100 	mov.w	r1, #0
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	02a2      	lsls	r2, r4, #10
 800836e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008372:	0299      	lsls	r1, r3, #10
 8008374:	460b      	mov	r3, r1
 8008376:	4614      	mov	r4, r2
 8008378:	4618      	mov	r0, r3
 800837a:	4621      	mov	r1, r4
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f04f 0400 	mov.w	r4, #0
 8008382:	461a      	mov	r2, r3
 8008384:	4623      	mov	r3, r4
 8008386:	f7fa fbaf 	bl	8002ae8 <__aeabi_uldivmod>
 800838a:	4603      	mov	r3, r0
 800838c:	460c      	mov	r4, r1
 800838e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	0c1b      	lsrs	r3, r3, #16
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	3301      	adds	r3, #1
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a8:	60bb      	str	r3, [r7, #8]
      break;
 80083aa:	e002      	b.n	80083b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083ac:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80083ae:	60bb      	str	r3, [r7, #8]
      break;
 80083b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083b2:	68bb      	ldr	r3, [r7, #8]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083bc:	40023800 	.word	0x40023800
 80083c0:	00f42400 	.word	0x00f42400
 80083c4:	007a1200 	.word	0x007a1200

080083c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083cc:	4b03      	ldr	r3, [pc, #12]	; (80083dc <HAL_RCC_GetHCLKFreq+0x14>)
 80083ce:	681b      	ldr	r3, [r3, #0]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000000 	.word	0x20000000

080083e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083e4:	f7ff fff0 	bl	80083c8 <HAL_RCC_GetHCLKFreq>
 80083e8:	4601      	mov	r1, r0
 80083ea:	4b05      	ldr	r3, [pc, #20]	; (8008400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	0a9b      	lsrs	r3, r3, #10
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	4a03      	ldr	r2, [pc, #12]	; (8008404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083f6:	5cd3      	ldrb	r3, [r2, r3]
 80083f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40023800 	.word	0x40023800
 8008404:	080106f4 	.word	0x080106f4

08008408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800840c:	f7ff ffdc 	bl	80083c8 <HAL_RCC_GetHCLKFreq>
 8008410:	4601      	mov	r1, r0
 8008412:	4b05      	ldr	r3, [pc, #20]	; (8008428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	0b5b      	lsrs	r3, r3, #13
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	4a03      	ldr	r2, [pc, #12]	; (800842c <HAL_RCC_GetPCLK2Freq+0x24>)
 800841e:	5cd3      	ldrb	r3, [r2, r3]
 8008420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008424:	4618      	mov	r0, r3
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40023800 	.word	0x40023800
 800842c:	080106f4 	.word	0x080106f4

08008430 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d105      	bne.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008454:	2b00      	cmp	r3, #0
 8008456:	d035      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008458:	4b62      	ldr	r3, [pc, #392]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800845e:	f7fc fdc9 	bl	8004ff4 <HAL_GetTick>
 8008462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008464:	e008      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008466:	f7fc fdc5 	bl	8004ff4 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e0b0      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008478:	4b5b      	ldr	r3, [pc, #364]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1f0      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	019a      	lsls	r2, r3, #6
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	071b      	lsls	r3, r3, #28
 8008490:	4955      	ldr	r1, [pc, #340]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008498:	4b52      	ldr	r3, [pc, #328]	; (80085e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800849e:	f7fc fda9 	bl	8004ff4 <HAL_GetTick>
 80084a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084a4:	e008      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80084a6:	f7fc fda5 	bl	8004ff4 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e090      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084b8:	4b4b      	ldr	r3, [pc, #300]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8083 	beq.w	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084d2:	2300      	movs	r3, #0
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	4b44      	ldr	r3, [pc, #272]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	4a43      	ldr	r2, [pc, #268]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e0:	6413      	str	r3, [r2, #64]	; 0x40
 80084e2:	4b41      	ldr	r3, [pc, #260]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80084ee:	4b3f      	ldr	r3, [pc, #252]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a3e      	ldr	r2, [pc, #248]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80084f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084fa:	f7fc fd7b 	bl	8004ff4 <HAL_GetTick>
 80084fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008500:	e008      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008502:	f7fc fd77 	bl	8004ff4 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e062      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008514:	4b35      	ldr	r3, [pc, #212]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0f0      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008520:	4b31      	ldr	r3, [pc, #196]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008528:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d02f      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008538:	693a      	ldr	r2, [r7, #16]
 800853a:	429a      	cmp	r2, r3
 800853c:	d028      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800853e:	4b2a      	ldr	r3, [pc, #168]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008546:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008548:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800854e:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008554:	4a24      	ldr	r2, [pc, #144]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800855a:	4b23      	ldr	r3, [pc, #140]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b01      	cmp	r3, #1
 8008564:	d114      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008566:	f7fc fd45 	bl	8004ff4 <HAL_GetTick>
 800856a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800856c:	e00a      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800856e:	f7fc fd41 	bl	8004ff4 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	f241 3288 	movw	r2, #5000	; 0x1388
 800857c:	4293      	cmp	r3, r2
 800857e:	d901      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e02a      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008584:	4b18      	ldr	r3, [pc, #96]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0ee      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800859c:	d10d      	bne.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800859e:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b2:	490d      	ldr	r1, [pc, #52]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	608b      	str	r3, [r1, #8]
 80085b8:	e005      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80085ba:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	4a0a      	ldr	r2, [pc, #40]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085c0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085c4:	6093      	str	r3, [r2, #8]
 80085c6:	4b08      	ldr	r3, [pc, #32]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085d2:	4905      	ldr	r1, [pc, #20]	; (80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	42470068 	.word	0x42470068
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40007000 	.word	0x40007000
 80085f0:	42470e40 	.word	0x42470e40

080085f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d13d      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008612:	4b22      	ldr	r3, [pc, #136]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8008622:	2b01      	cmp	r3, #1
 8008624:	d12f      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008626:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008628:	617b      	str	r3, [r7, #20]
          break;
 800862a:	e02f      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008638:	d108      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800863a:	4b18      	ldr	r3, [pc, #96]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008642:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008644:	fbb2 f3f3 	udiv	r3, r2, r3
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	e007      	b.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800864c:	4b13      	ldr	r3, [pc, #76]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008654:	4a14      	ldr	r2, [pc, #80]	; (80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008656:	fbb2 f3f3 	udiv	r3, r2, r3
 800865a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800865e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008662:	099b      	lsrs	r3, r3, #6
 8008664:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	fb02 f303 	mul.w	r3, r2, r3
 800866e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008676:	0f1b      	lsrs	r3, r3, #28
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008682:	617b      	str	r3, [r7, #20]
          break;
 8008684:	e002      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	617b      	str	r3, [r7, #20]
          break;
 800868a:	bf00      	nop
        }
      }
      break;
 800868c:	bf00      	nop
    }
  }
  return frequency;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	40023800 	.word	0x40023800
 80086a0:	00bb8000 	.word	0x00bb8000
 80086a4:	007a1200 	.word	0x007a1200
 80086a8:	00f42400 	.word	0x00f42400

080086ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e056      	b.n	800876c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7fb fb27 	bl	8003d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2202      	movs	r2, #2
 80086e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	431a      	orrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	431a      	orrs	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	ea42 0103 	orr.w	r1, r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	f003 0104 	and.w	r1, r3, #4
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69da      	ldr	r2, [r3, #28]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800875a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800878e:	2b01      	cmp	r3, #1
 8008790:	d101      	bne.n	8008796 <HAL_SPI_Transmit+0x22>
 8008792:	2302      	movs	r3, #2
 8008794:	e11e      	b.n	80089d4 <HAL_SPI_Transmit+0x260>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800879e:	f7fc fc29 	bl	8004ff4 <HAL_GetTick>
 80087a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d002      	beq.n	80087ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087b4:	2302      	movs	r3, #2
 80087b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087b8:	e103      	b.n	80089c2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <HAL_SPI_Transmit+0x52>
 80087c0:	88fb      	ldrh	r3, [r7, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d102      	bne.n	80087cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087ca:	e0fa      	b.n	80089c2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2203      	movs	r2, #3
 80087d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	88fa      	ldrh	r2, [r7, #6]
 80087ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008812:	d107      	bne.n	8008824 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008822:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d007      	beq.n	8008842 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800884a:	d14b      	bne.n	80088e4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <HAL_SPI_Transmit+0xe6>
 8008854:	8afb      	ldrh	r3, [r7, #22]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d13e      	bne.n	80088d8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	881a      	ldrh	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	1c9a      	adds	r2, r3, #2
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800887e:	e02b      	b.n	80088d8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b02      	cmp	r3, #2
 800888c:	d112      	bne.n	80088b4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	1c9a      	adds	r2, r3, #2
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80088b2:	e011      	b.n	80088d8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088b4:	f7fc fb9e 	bl	8004ff4 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d803      	bhi.n	80088cc <HAL_SPI_Transmit+0x158>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ca:	d102      	bne.n	80088d2 <HAL_SPI_Transmit+0x15e>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d102      	bne.n	80088d8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80088d6:	e074      	b.n	80089c2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088dc:	b29b      	uxth	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1ce      	bne.n	8008880 <HAL_SPI_Transmit+0x10c>
 80088e2:	e04c      	b.n	800897e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <HAL_SPI_Transmit+0x17e>
 80088ec:	8afb      	ldrh	r3, [r7, #22]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d140      	bne.n	8008974 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	330c      	adds	r3, #12
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008918:	e02c      	b.n	8008974 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b02      	cmp	r3, #2
 8008926:	d113      	bne.n	8008950 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	330c      	adds	r3, #12
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008944:	b29b      	uxth	r3, r3
 8008946:	3b01      	subs	r3, #1
 8008948:	b29a      	uxth	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	86da      	strh	r2, [r3, #54]	; 0x36
 800894e:	e011      	b.n	8008974 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008950:	f7fc fb50 	bl	8004ff4 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d803      	bhi.n	8008968 <HAL_SPI_Transmit+0x1f4>
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008966:	d102      	bne.n	800896e <HAL_SPI_Transmit+0x1fa>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d102      	bne.n	8008974 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008972:	e026      	b.n	80089c2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008978:	b29b      	uxth	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1cd      	bne.n	800891a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fba4 	bl	80090d0 <SPI_EndRxTxTransaction>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d002      	beq.n	8008994 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2220      	movs	r2, #32
 8008992:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	77fb      	strb	r3, [r7, #31]
 80089be:	e000      	b.n	80089c2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80089c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f8:	d112      	bne.n	8008a20 <HAL_SPI_Receive+0x44>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10e      	bne.n	8008a20 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2204      	movs	r2, #4
 8008a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a0a:	88fa      	ldrh	r2, [r7, #6]
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	4613      	mov	r3, r2
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 f8e9 	bl	8008bee <HAL_SPI_TransmitReceive>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	e0e2      	b.n	8008be6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <HAL_SPI_Receive+0x52>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e0db      	b.n	8008be6 <HAL_SPI_Receive+0x20a>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a36:	f7fc fadd 	bl	8004ff4 <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d002      	beq.n	8008a4e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a4c:	e0c2      	b.n	8008bd4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <HAL_SPI_Receive+0x7e>
 8008a54:	88fb      	ldrh	r3, [r7, #6]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a5e:	e0b9      	b.n	8008bd4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2204      	movs	r2, #4
 8008a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	88fa      	ldrh	r2, [r7, #6]
 8008a7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa6:	d107      	bne.n	8008ab8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ab6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac2:	2b40      	cmp	r3, #64	; 0x40
 8008ac4:	d007      	beq.n	8008ad6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ad4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d162      	bne.n	8008ba4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ade:	e02e      	b.n	8008b3e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d115      	bne.n	8008b1a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f103 020c 	add.w	r2, r3, #12
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b18:	e011      	b.n	8008b3e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b1a:	f7fc fa6b 	bl	8004ff4 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d803      	bhi.n	8008b32 <HAL_SPI_Receive+0x156>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d102      	bne.n	8008b38 <HAL_SPI_Receive+0x15c>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b3c:	e04a      	b.n	8008bd4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1cb      	bne.n	8008ae0 <HAL_SPI_Receive+0x104>
 8008b48:	e031      	b.n	8008bae <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d113      	bne.n	8008b80 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	b292      	uxth	r2, r2
 8008b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	1c9a      	adds	r2, r3, #2
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b7e:	e011      	b.n	8008ba4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b80:	f7fc fa38 	bl	8004ff4 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d803      	bhi.n	8008b98 <HAL_SPI_Receive+0x1bc>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b96:	d102      	bne.n	8008b9e <HAL_SPI_Receive+0x1c2>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ba2:	e017      	b.n	8008bd4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1cd      	bne.n	8008b4a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fa27 	bl	8009006 <SPI_EndRxTransaction>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]
 8008bd0:	e000      	b.n	8008bd4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b08c      	sub	sp, #48	; 0x30
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_SPI_TransmitReceive+0x26>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e18a      	b.n	8008f2a <HAL_SPI_TransmitReceive+0x33c>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c1c:	f7fc f9ea 	bl	8004ff4 <HAL_GetTick>
 8008c20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c32:	887b      	ldrh	r3, [r7, #2]
 8008c34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d00f      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0x70>
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c44:	d107      	bne.n	8008c56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <HAL_SPI_TransmitReceive+0x68>
 8008c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d003      	beq.n	8008c5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c56:	2302      	movs	r3, #2
 8008c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c5c:	e15b      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <HAL_SPI_TransmitReceive+0x82>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <HAL_SPI_TransmitReceive+0x82>
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d103      	bne.n	8008c78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c76:	e14e      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d003      	beq.n	8008c8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2205      	movs	r2, #5
 8008c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	887a      	ldrh	r2, [r7, #2]
 8008c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	887a      	ldrh	r2, [r7, #2]
 8008ca2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	887a      	ldrh	r2, [r7, #2]
 8008cae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	887a      	ldrh	r2, [r7, #2]
 8008cb4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ccc:	2b40      	cmp	r3, #64	; 0x40
 8008cce:	d007      	beq.n	8008ce0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce8:	d178      	bne.n	8008ddc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_SPI_TransmitReceive+0x10a>
 8008cf2:	8b7b      	ldrh	r3, [r7, #26]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d166      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfc:	881a      	ldrh	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	1c9a      	adds	r2, r3, #2
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	3b01      	subs	r3, #1
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d1c:	e053      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d11b      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x176>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d016      	beq.n	8008d64 <HAL_SPI_TransmitReceive+0x176>
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d113      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d40:	881a      	ldrh	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	1c9a      	adds	r2, r3, #2
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d119      	bne.n	8008da6 <HAL_SPI_TransmitReceive+0x1b8>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d014      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68da      	ldr	r2, [r3, #12]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d86:	b292      	uxth	r2, r2
 8008d88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	1c9a      	adds	r2, r3, #2
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008da2:	2301      	movs	r3, #1
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008da6:	f7fc f925 	bl	8004ff4 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d807      	bhi.n	8008dc6 <HAL_SPI_TransmitReceive+0x1d8>
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d003      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dc4:	e0a7      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1a6      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x130>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1a1      	bne.n	8008d1e <HAL_SPI_TransmitReceive+0x130>
 8008dda:	e07c      	b.n	8008ed6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <HAL_SPI_TransmitReceive+0x1fc>
 8008de4:	8b7b      	ldrh	r3, [r7, #26]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d16b      	bne.n	8008ec2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e10:	e057      	b.n	8008ec2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d11c      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x26c>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d017      	beq.n	8008e5a <HAL_SPI_TransmitReceive+0x26c>
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d114      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d119      	bne.n	8008e9c <HAL_SPI_TransmitReceive+0x2ae>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d014      	beq.n	8008e9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	b2d2      	uxtb	r2, r2
 8008e7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	1c5a      	adds	r2, r3, #1
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008e9c:	f7fc f8aa 	bl	8004ff4 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d803      	bhi.n	8008eb4 <HAL_SPI_TransmitReceive+0x2c6>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d102      	bne.n	8008eba <HAL_SPI_TransmitReceive+0x2cc>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ec0:	e029      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1a2      	bne.n	8008e12 <HAL_SPI_TransmitReceive+0x224>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d19d      	bne.n	8008e12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 f8f8 	bl	80090d0 <SPI_EndRxTxTransaction>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d006      	beq.n	8008ef4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ef2:	e010      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	e000      	b.n	8008f16 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3730      	adds	r7, #48	; 0x30
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	603b      	str	r3, [r7, #0]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f42:	e04c      	b.n	8008fde <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d048      	beq.n	8008fde <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f4c:	f7fc f852 	bl	8004ff4 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d902      	bls.n	8008f62 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d13d      	bne.n	8008fde <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f7a:	d111      	bne.n	8008fa0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f84:	d004      	beq.n	8008f90 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8e:	d107      	bne.n	8008fa0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa8:	d10f      	bne.n	8008fca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e00f      	b.n	8008ffe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d1a3      	bne.n	8008f44 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b086      	sub	sp, #24
 800900a:	af02      	add	r7, sp, #8
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800901a:	d111      	bne.n	8009040 <SPI_EndRxTransaction+0x3a>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009024:	d004      	beq.n	8009030 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800902e:	d107      	bne.n	8009040 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800903e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009048:	d12a      	bne.n	80090a0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009052:	d012      	beq.n	800907a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	2180      	movs	r1, #128	; 0x80
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff ff67 	bl	8008f32 <SPI_WaitFlagStateUntilTimeout>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d02d      	beq.n	80090c6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800906e:	f043 0220 	orr.w	r2, r3, #32
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e026      	b.n	80090c8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2200      	movs	r2, #0
 8009082:	2101      	movs	r1, #1
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff ff54 	bl	8008f32 <SPI_WaitFlagStateUntilTimeout>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01a      	beq.n	80090c6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009094:	f043 0220 	orr.w	r2, r3, #32
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e013      	b.n	80090c8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2200      	movs	r2, #0
 80090a8:	2101      	movs	r1, #1
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff ff41 	bl	8008f32 <SPI_WaitFlagStateUntilTimeout>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d007      	beq.n	80090c6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ba:	f043 0220 	orr.w	r2, r3, #32
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090c2:	2303      	movs	r3, #3
 80090c4:	e000      	b.n	80090c8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090dc:	4b1b      	ldr	r3, [pc, #108]	; (800914c <SPI_EndRxTxTransaction+0x7c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a1b      	ldr	r2, [pc, #108]	; (8009150 <SPI_EndRxTxTransaction+0x80>)
 80090e2:	fba2 2303 	umull	r2, r3, r2, r3
 80090e6:	0d5b      	lsrs	r3, r3, #21
 80090e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090ec:	fb02 f303 	mul.w	r3, r2, r3
 80090f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090fa:	d112      	bne.n	8009122 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2200      	movs	r2, #0
 8009104:	2180      	movs	r1, #128	; 0x80
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7ff ff13 	bl	8008f32 <SPI_WaitFlagStateUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d016      	beq.n	8009140 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009116:	f043 0220 	orr.w	r2, r3, #32
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e00f      	b.n	8009142 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	3b01      	subs	r3, #1
 800912c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d0f2      	beq.n	8009122 <SPI_EndRxTxTransaction+0x52>
 800913c:	e000      	b.n	8009140 <SPI_EndRxTxTransaction+0x70>
        break;
 800913e:	bf00      	nop
  }

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000000 	.word	0x20000000
 8009150:	165e9f81 	.word	0x165e9f81

08009154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e01d      	b.n	80091a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d106      	bne.n	8009180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fa fe74 	bl	8003e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f000 f95e 	bl	8009454 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0201 	orr.w	r2, r2, #1
 80091c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b06      	cmp	r3, #6
 80091d2:	d007      	beq.n	80091e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0201 	orr.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d122      	bne.n	800924e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d11b      	bne.n	800924e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f06f 0202 	mvn.w	r2, #2
 800921e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f8ee 	bl	8009416 <HAL_TIM_IC_CaptureCallback>
 800923a:	e005      	b.n	8009248 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f8e0 	bl	8009402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f8f1 	bl	800942a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d122      	bne.n	80092a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b04      	cmp	r3, #4
 8009268:	d11b      	bne.n	80092a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f06f 0204 	mvn.w	r2, #4
 8009272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	699b      	ldr	r3, [r3, #24]
 8009280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f8c4 	bl	8009416 <HAL_TIM_IC_CaptureCallback>
 800928e:	e005      	b.n	800929c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f8b6 	bl	8009402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8c7 	bl	800942a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d122      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d11b      	bne.n	80092f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f06f 0208 	mvn.w	r2, #8
 80092c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2204      	movs	r2, #4
 80092cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f89a 	bl	8009416 <HAL_TIM_IC_CaptureCallback>
 80092e2:	e005      	b.n	80092f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f88c 	bl	8009402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f89d 	bl	800942a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d122      	bne.n	800934a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	2b10      	cmp	r3, #16
 8009310:	d11b      	bne.n	800934a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f06f 0210 	mvn.w	r2, #16
 800931a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2208      	movs	r2, #8
 8009320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f870 	bl	8009416 <HAL_TIM_IC_CaptureCallback>
 8009336:	e005      	b.n	8009344 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f862 	bl	8009402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f873 	bl	800942a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	d10e      	bne.n	8009376 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b01      	cmp	r3, #1
 8009364:	d107      	bne.n	8009376 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f06f 0201 	mvn.w	r2, #1
 800936e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7fa fbe9 	bl	8003b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009380:	2b80      	cmp	r3, #128	; 0x80
 8009382:	d10e      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d107      	bne.n	80093a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800939a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f903 	bl	80095a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d10e      	bne.n	80093ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ba:	2b40      	cmp	r3, #64	; 0x40
 80093bc:	d107      	bne.n	80093ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f838 	bl	800943e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b20      	cmp	r3, #32
 80093da:	d10e      	bne.n	80093fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f06f 0220 	mvn.w	r2, #32
 80093f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8cd 	bl	8009594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
	...

08009454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a40      	ldr	r2, [pc, #256]	; (8009568 <TIM_Base_SetConfig+0x114>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d013      	beq.n	8009494 <TIM_Base_SetConfig+0x40>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009472:	d00f      	beq.n	8009494 <TIM_Base_SetConfig+0x40>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a3d      	ldr	r2, [pc, #244]	; (800956c <TIM_Base_SetConfig+0x118>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00b      	beq.n	8009494 <TIM_Base_SetConfig+0x40>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a3c      	ldr	r2, [pc, #240]	; (8009570 <TIM_Base_SetConfig+0x11c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d007      	beq.n	8009494 <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a3b      	ldr	r2, [pc, #236]	; (8009574 <TIM_Base_SetConfig+0x120>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d003      	beq.n	8009494 <TIM_Base_SetConfig+0x40>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a3a      	ldr	r2, [pc, #232]	; (8009578 <TIM_Base_SetConfig+0x124>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d108      	bne.n	80094a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800949a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a2f      	ldr	r2, [pc, #188]	; (8009568 <TIM_Base_SetConfig+0x114>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d02b      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b4:	d027      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2c      	ldr	r2, [pc, #176]	; (800956c <TIM_Base_SetConfig+0x118>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d023      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2b      	ldr	r2, [pc, #172]	; (8009570 <TIM_Base_SetConfig+0x11c>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01f      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a2a      	ldr	r2, [pc, #168]	; (8009574 <TIM_Base_SetConfig+0x120>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d01b      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a29      	ldr	r2, [pc, #164]	; (8009578 <TIM_Base_SetConfig+0x124>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d017      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a28      	ldr	r2, [pc, #160]	; (800957c <TIM_Base_SetConfig+0x128>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d013      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a27      	ldr	r2, [pc, #156]	; (8009580 <TIM_Base_SetConfig+0x12c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00f      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a26      	ldr	r2, [pc, #152]	; (8009584 <TIM_Base_SetConfig+0x130>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d00b      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a25      	ldr	r2, [pc, #148]	; (8009588 <TIM_Base_SetConfig+0x134>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d007      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a24      	ldr	r2, [pc, #144]	; (800958c <TIM_Base_SetConfig+0x138>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d003      	beq.n	8009506 <TIM_Base_SetConfig+0xb2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a23      	ldr	r2, [pc, #140]	; (8009590 <TIM_Base_SetConfig+0x13c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d108      	bne.n	8009518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800950c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4313      	orrs	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	689a      	ldr	r2, [r3, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a0a      	ldr	r2, [pc, #40]	; (8009568 <TIM_Base_SetConfig+0x114>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d003      	beq.n	800954c <TIM_Base_SetConfig+0xf8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <TIM_Base_SetConfig+0x124>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d103      	bne.n	8009554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	615a      	str	r2, [r3, #20]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40010000 	.word	0x40010000
 800956c:	40000400 	.word	0x40000400
 8009570:	40000800 	.word	0x40000800
 8009574:	40000c00 	.word	0x40000c00
 8009578:	40010400 	.word	0x40010400
 800957c:	40014000 	.word	0x40014000
 8009580:	40014400 	.word	0x40014400
 8009584:	40014800 	.word	0x40014800
 8009588:	40001800 	.word	0x40001800
 800958c:	40001c00 	.word	0x40001c00
 8009590:	40002000 	.word	0x40002000

08009594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e03f      	b.n	800964e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fa fc68 	bl	8003eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2224      	movs	r2, #36	; 0x24
 80095ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f9b1 	bl	8009968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691a      	ldr	r2, [r3, #16]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695a      	ldr	r2, [r3, #20]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b088      	sub	sp, #32
 800965a:	af02      	add	r7, sp, #8
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b20      	cmp	r3, #32
 8009674:	f040 8083 	bne.w	800977e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <HAL_UART_Transmit+0x2e>
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e07b      	b.n	8009780 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800968e:	2b01      	cmp	r3, #1
 8009690:	d101      	bne.n	8009696 <HAL_UART_Transmit+0x40>
 8009692:	2302      	movs	r3, #2
 8009694:	e074      	b.n	8009780 <HAL_UART_Transmit+0x12a>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2221      	movs	r2, #33	; 0x21
 80096a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80096ac:	f7fb fca2 	bl	8004ff4 <HAL_GetTick>
 80096b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	88fa      	ldrh	r2, [r7, #6]
 80096b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	88fa      	ldrh	r2, [r7, #6]
 80096bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80096c6:	e042      	b.n	800974e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096de:	d122      	bne.n	8009726 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2200      	movs	r2, #0
 80096e8:	2180      	movs	r1, #128	; 0x80
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 f8f2 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e042      	b.n	8009780 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800970c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d103      	bne.n	800971e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	3302      	adds	r3, #2
 800971a:	60bb      	str	r3, [r7, #8]
 800971c:	e017      	b.n	800974e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	3301      	adds	r3, #1
 8009722:	60bb      	str	r3, [r7, #8]
 8009724:	e013      	b.n	800974e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2200      	movs	r2, #0
 800972e:	2180      	movs	r1, #128	; 0x80
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f8cf 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e01f      	b.n	8009780 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	60ba      	str	r2, [r7, #8]
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009752:	b29b      	uxth	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1b7      	bne.n	80096c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2200      	movs	r2, #0
 8009760:	2140      	movs	r1, #64	; 0x40
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f8b6 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e006      	b.n	8009780 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	e000      	b.n	8009780 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800977e:	2302      	movs	r3, #2
  }
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af02      	add	r7, sp, #8
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	4613      	mov	r3, r2
 8009796:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b20      	cmp	r3, #32
 80097a6:	f040 8090 	bne.w	80098ca <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <HAL_UART_Receive+0x2e>
 80097b0:	88fb      	ldrh	r3, [r7, #6]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e088      	b.n	80098cc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_UART_Receive+0x40>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e081      	b.n	80098cc <HAL_UART_Receive+0x144>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2222      	movs	r2, #34	; 0x22
 80097da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80097de:	f7fb fc09 	bl	8004ff4 <HAL_GetTick>
 80097e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80097f8:	e05c      	b.n	80098b4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80097fe:	b29b      	uxth	r3, r3
 8009800:	3b01      	subs	r3, #1
 8009802:	b29a      	uxth	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009810:	d12b      	bne.n	800986a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2200      	movs	r2, #0
 800981a:	2120      	movs	r1, #32
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f859 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e04f      	b.n	80098cc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10c      	bne.n	8009852 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b29b      	uxth	r3, r3
 8009840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009844:	b29a      	uxth	r2, r3
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	3302      	adds	r3, #2
 800984e:	60bb      	str	r3, [r7, #8]
 8009850:	e030      	b.n	80098b4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	b29b      	uxth	r3, r3
 800985a:	b2db      	uxtb	r3, r3
 800985c:	b29a      	uxth	r2, r3
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3301      	adds	r3, #1
 8009866:	60bb      	str	r3, [r7, #8]
 8009868:	e024      	b.n	80098b4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2200      	movs	r2, #0
 8009872:	2120      	movs	r1, #32
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 f82d 	bl	80098d4 <UART_WaitOnFlagUntilTimeout>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e023      	b.n	80098cc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d108      	bne.n	800989e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6859      	ldr	r1, [r3, #4]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	60ba      	str	r2, [r7, #8]
 8009898:	b2ca      	uxtb	r2, r1
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e00a      	b.n	80098b4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80098b0:	b2d2      	uxtb	r2, r2
 80098b2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d19d      	bne.n	80097fa <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e000      	b.n	80098cc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80098ca:	2302      	movs	r3, #2
  }
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	4613      	mov	r3, r2
 80098e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e4:	e02c      	b.n	8009940 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ec:	d028      	beq.n	8009940 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d007      	beq.n	8009904 <UART_WaitOnFlagUntilTimeout+0x30>
 80098f4:	f7fb fb7e 	bl	8004ff4 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	429a      	cmp	r2, r3
 8009902:	d21d      	bcs.n	8009940 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009912:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695a      	ldr	r2, [r3, #20]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2220      	movs	r2, #32
 8009928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2220      	movs	r2, #32
 8009930:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e00f      	b.n	8009960 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	4013      	ands	r3, r2
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	429a      	cmp	r2, r3
 800994e:	bf0c      	ite	eq
 8009950:	2301      	moveq	r3, #1
 8009952:	2300      	movne	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	429a      	cmp	r2, r3
 800995c:	d0c3      	beq.n	80098e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	b085      	sub	sp, #20
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	431a      	orrs	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80099aa:	f023 030c 	bic.w	r3, r3, #12
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6812      	ldr	r2, [r2, #0]
 80099b2:	68f9      	ldr	r1, [r7, #12]
 80099b4:	430b      	orrs	r3, r1
 80099b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699a      	ldr	r2, [r3, #24]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d6:	f040 818b 	bne.w	8009cf0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4ac1      	ldr	r2, [pc, #772]	; (8009ce4 <UART_SetConfig+0x37c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d005      	beq.n	80099f0 <UART_SetConfig+0x88>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4abf      	ldr	r2, [pc, #764]	; (8009ce8 <UART_SetConfig+0x380>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	f040 80bd 	bne.w	8009b6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80099f0:	f7fe fd0a 	bl	8008408 <HAL_RCC_GetPCLK2Freq>
 80099f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	461d      	mov	r5, r3
 80099fa:	f04f 0600 	mov.w	r6, #0
 80099fe:	46a8      	mov	r8, r5
 8009a00:	46b1      	mov	r9, r6
 8009a02:	eb18 0308 	adds.w	r3, r8, r8
 8009a06:	eb49 0409 	adc.w	r4, r9, r9
 8009a0a:	4698      	mov	r8, r3
 8009a0c:	46a1      	mov	r9, r4
 8009a0e:	eb18 0805 	adds.w	r8, r8, r5
 8009a12:	eb49 0906 	adc.w	r9, r9, r6
 8009a16:	f04f 0100 	mov.w	r1, #0
 8009a1a:	f04f 0200 	mov.w	r2, #0
 8009a1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a2a:	4688      	mov	r8, r1
 8009a2c:	4691      	mov	r9, r2
 8009a2e:	eb18 0005 	adds.w	r0, r8, r5
 8009a32:	eb49 0106 	adc.w	r1, r9, r6
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	461d      	mov	r5, r3
 8009a3c:	f04f 0600 	mov.w	r6, #0
 8009a40:	196b      	adds	r3, r5, r5
 8009a42:	eb46 0406 	adc.w	r4, r6, r6
 8009a46:	461a      	mov	r2, r3
 8009a48:	4623      	mov	r3, r4
 8009a4a:	f7f9 f84d 	bl	8002ae8 <__aeabi_uldivmod>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	461a      	mov	r2, r3
 8009a54:	4ba5      	ldr	r3, [pc, #660]	; (8009cec <UART_SetConfig+0x384>)
 8009a56:	fba3 2302 	umull	r2, r3, r3, r2
 8009a5a:	095b      	lsrs	r3, r3, #5
 8009a5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	461d      	mov	r5, r3
 8009a64:	f04f 0600 	mov.w	r6, #0
 8009a68:	46a9      	mov	r9, r5
 8009a6a:	46b2      	mov	sl, r6
 8009a6c:	eb19 0309 	adds.w	r3, r9, r9
 8009a70:	eb4a 040a 	adc.w	r4, sl, sl
 8009a74:	4699      	mov	r9, r3
 8009a76:	46a2      	mov	sl, r4
 8009a78:	eb19 0905 	adds.w	r9, r9, r5
 8009a7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009a80:	f04f 0100 	mov.w	r1, #0
 8009a84:	f04f 0200 	mov.w	r2, #0
 8009a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009a90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009a94:	4689      	mov	r9, r1
 8009a96:	4692      	mov	sl, r2
 8009a98:	eb19 0005 	adds.w	r0, r9, r5
 8009a9c:	eb4a 0106 	adc.w	r1, sl, r6
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	461d      	mov	r5, r3
 8009aa6:	f04f 0600 	mov.w	r6, #0
 8009aaa:	196b      	adds	r3, r5, r5
 8009aac:	eb46 0406 	adc.w	r4, r6, r6
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	f7f9 f818 	bl	8002ae8 <__aeabi_uldivmod>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b8b      	ldr	r3, [pc, #556]	; (8009cec <UART_SetConfig+0x384>)
 8009ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ac4:	095b      	lsrs	r3, r3, #5
 8009ac6:	2164      	movs	r1, #100	; 0x64
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	3332      	adds	r3, #50	; 0x32
 8009ad2:	4a86      	ldr	r2, [pc, #536]	; (8009cec <UART_SetConfig+0x384>)
 8009ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad8:	095b      	lsrs	r3, r3, #5
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ae0:	4498      	add	r8, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	461d      	mov	r5, r3
 8009ae6:	f04f 0600 	mov.w	r6, #0
 8009aea:	46a9      	mov	r9, r5
 8009aec:	46b2      	mov	sl, r6
 8009aee:	eb19 0309 	adds.w	r3, r9, r9
 8009af2:	eb4a 040a 	adc.w	r4, sl, sl
 8009af6:	4699      	mov	r9, r3
 8009af8:	46a2      	mov	sl, r4
 8009afa:	eb19 0905 	adds.w	r9, r9, r5
 8009afe:	eb4a 0a06 	adc.w	sl, sl, r6
 8009b02:	f04f 0100 	mov.w	r1, #0
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b16:	4689      	mov	r9, r1
 8009b18:	4692      	mov	sl, r2
 8009b1a:	eb19 0005 	adds.w	r0, r9, r5
 8009b1e:	eb4a 0106 	adc.w	r1, sl, r6
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	461d      	mov	r5, r3
 8009b28:	f04f 0600 	mov.w	r6, #0
 8009b2c:	196b      	adds	r3, r5, r5
 8009b2e:	eb46 0406 	adc.w	r4, r6, r6
 8009b32:	461a      	mov	r2, r3
 8009b34:	4623      	mov	r3, r4
 8009b36:	f7f8 ffd7 	bl	8002ae8 <__aeabi_uldivmod>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	461a      	mov	r2, r3
 8009b40:	4b6a      	ldr	r3, [pc, #424]	; (8009cec <UART_SetConfig+0x384>)
 8009b42:	fba3 1302 	umull	r1, r3, r3, r2
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	2164      	movs	r1, #100	; 0x64
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	00db      	lsls	r3, r3, #3
 8009b52:	3332      	adds	r3, #50	; 0x32
 8009b54:	4a65      	ldr	r2, [pc, #404]	; (8009cec <UART_SetConfig+0x384>)
 8009b56:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5a:	095b      	lsrs	r3, r3, #5
 8009b5c:	f003 0207 	and.w	r2, r3, #7
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4442      	add	r2, r8
 8009b66:	609a      	str	r2, [r3, #8]
 8009b68:	e26f      	b.n	800a04a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b6a:	f7fe fc39 	bl	80083e0 <HAL_RCC_GetPCLK1Freq>
 8009b6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	461d      	mov	r5, r3
 8009b74:	f04f 0600 	mov.w	r6, #0
 8009b78:	46a8      	mov	r8, r5
 8009b7a:	46b1      	mov	r9, r6
 8009b7c:	eb18 0308 	adds.w	r3, r8, r8
 8009b80:	eb49 0409 	adc.w	r4, r9, r9
 8009b84:	4698      	mov	r8, r3
 8009b86:	46a1      	mov	r9, r4
 8009b88:	eb18 0805 	adds.w	r8, r8, r5
 8009b8c:	eb49 0906 	adc.w	r9, r9, r6
 8009b90:	f04f 0100 	mov.w	r1, #0
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009b9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009ba0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ba4:	4688      	mov	r8, r1
 8009ba6:	4691      	mov	r9, r2
 8009ba8:	eb18 0005 	adds.w	r0, r8, r5
 8009bac:	eb49 0106 	adc.w	r1, r9, r6
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	461d      	mov	r5, r3
 8009bb6:	f04f 0600 	mov.w	r6, #0
 8009bba:	196b      	adds	r3, r5, r5
 8009bbc:	eb46 0406 	adc.w	r4, r6, r6
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	4623      	mov	r3, r4
 8009bc4:	f7f8 ff90 	bl	8002ae8 <__aeabi_uldivmod>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4b47      	ldr	r3, [pc, #284]	; (8009cec <UART_SetConfig+0x384>)
 8009bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8009bd4:	095b      	lsrs	r3, r3, #5
 8009bd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	461d      	mov	r5, r3
 8009bde:	f04f 0600 	mov.w	r6, #0
 8009be2:	46a9      	mov	r9, r5
 8009be4:	46b2      	mov	sl, r6
 8009be6:	eb19 0309 	adds.w	r3, r9, r9
 8009bea:	eb4a 040a 	adc.w	r4, sl, sl
 8009bee:	4699      	mov	r9, r3
 8009bf0:	46a2      	mov	sl, r4
 8009bf2:	eb19 0905 	adds.w	r9, r9, r5
 8009bf6:	eb4a 0a06 	adc.w	sl, sl, r6
 8009bfa:	f04f 0100 	mov.w	r1, #0
 8009bfe:	f04f 0200 	mov.w	r2, #0
 8009c02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c0e:	4689      	mov	r9, r1
 8009c10:	4692      	mov	sl, r2
 8009c12:	eb19 0005 	adds.w	r0, r9, r5
 8009c16:	eb4a 0106 	adc.w	r1, sl, r6
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	461d      	mov	r5, r3
 8009c20:	f04f 0600 	mov.w	r6, #0
 8009c24:	196b      	adds	r3, r5, r5
 8009c26:	eb46 0406 	adc.w	r4, r6, r6
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	f7f8 ff5b 	bl	8002ae8 <__aeabi_uldivmod>
 8009c32:	4603      	mov	r3, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	461a      	mov	r2, r3
 8009c38:	4b2c      	ldr	r3, [pc, #176]	; (8009cec <UART_SetConfig+0x384>)
 8009c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8009c3e:	095b      	lsrs	r3, r3, #5
 8009c40:	2164      	movs	r1, #100	; 0x64
 8009c42:	fb01 f303 	mul.w	r3, r1, r3
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	3332      	adds	r3, #50	; 0x32
 8009c4c:	4a27      	ldr	r2, [pc, #156]	; (8009cec <UART_SetConfig+0x384>)
 8009c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c52:	095b      	lsrs	r3, r3, #5
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c5a:	4498      	add	r8, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	461d      	mov	r5, r3
 8009c60:	f04f 0600 	mov.w	r6, #0
 8009c64:	46a9      	mov	r9, r5
 8009c66:	46b2      	mov	sl, r6
 8009c68:	eb19 0309 	adds.w	r3, r9, r9
 8009c6c:	eb4a 040a 	adc.w	r4, sl, sl
 8009c70:	4699      	mov	r9, r3
 8009c72:	46a2      	mov	sl, r4
 8009c74:	eb19 0905 	adds.w	r9, r9, r5
 8009c78:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c7c:	f04f 0100 	mov.w	r1, #0
 8009c80:	f04f 0200 	mov.w	r2, #0
 8009c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c90:	4689      	mov	r9, r1
 8009c92:	4692      	mov	sl, r2
 8009c94:	eb19 0005 	adds.w	r0, r9, r5
 8009c98:	eb4a 0106 	adc.w	r1, sl, r6
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	461d      	mov	r5, r3
 8009ca2:	f04f 0600 	mov.w	r6, #0
 8009ca6:	196b      	adds	r3, r5, r5
 8009ca8:	eb46 0406 	adc.w	r4, r6, r6
 8009cac:	461a      	mov	r2, r3
 8009cae:	4623      	mov	r3, r4
 8009cb0:	f7f8 ff1a 	bl	8002ae8 <__aeabi_uldivmod>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <UART_SetConfig+0x384>)
 8009cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8009cc0:	095b      	lsrs	r3, r3, #5
 8009cc2:	2164      	movs	r1, #100	; 0x64
 8009cc4:	fb01 f303 	mul.w	r3, r1, r3
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	3332      	adds	r3, #50	; 0x32
 8009cce:	4a07      	ldr	r2, [pc, #28]	; (8009cec <UART_SetConfig+0x384>)
 8009cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd4:	095b      	lsrs	r3, r3, #5
 8009cd6:	f003 0207 	and.w	r2, r3, #7
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4442      	add	r2, r8
 8009ce0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009ce2:	e1b2      	b.n	800a04a <UART_SetConfig+0x6e2>
 8009ce4:	40011000 	.word	0x40011000
 8009ce8:	40011400 	.word	0x40011400
 8009cec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4ad7      	ldr	r2, [pc, #860]	; (800a054 <UART_SetConfig+0x6ec>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d005      	beq.n	8009d06 <UART_SetConfig+0x39e>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4ad6      	ldr	r2, [pc, #856]	; (800a058 <UART_SetConfig+0x6f0>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	f040 80d1 	bne.w	8009ea8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d06:	f7fe fb7f 	bl	8008408 <HAL_RCC_GetPCLK2Freq>
 8009d0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	469a      	mov	sl, r3
 8009d10:	f04f 0b00 	mov.w	fp, #0
 8009d14:	46d0      	mov	r8, sl
 8009d16:	46d9      	mov	r9, fp
 8009d18:	eb18 0308 	adds.w	r3, r8, r8
 8009d1c:	eb49 0409 	adc.w	r4, r9, r9
 8009d20:	4698      	mov	r8, r3
 8009d22:	46a1      	mov	r9, r4
 8009d24:	eb18 080a 	adds.w	r8, r8, sl
 8009d28:	eb49 090b 	adc.w	r9, r9, fp
 8009d2c:	f04f 0100 	mov.w	r1, #0
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d40:	4688      	mov	r8, r1
 8009d42:	4691      	mov	r9, r2
 8009d44:	eb1a 0508 	adds.w	r5, sl, r8
 8009d48:	eb4b 0609 	adc.w	r6, fp, r9
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4619      	mov	r1, r3
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	f04f 0300 	mov.w	r3, #0
 8009d5a:	f04f 0400 	mov.w	r4, #0
 8009d5e:	0094      	lsls	r4, r2, #2
 8009d60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d64:	008b      	lsls	r3, r1, #2
 8009d66:	461a      	mov	r2, r3
 8009d68:	4623      	mov	r3, r4
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	f7f8 febb 	bl	8002ae8 <__aeabi_uldivmod>
 8009d72:	4603      	mov	r3, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	461a      	mov	r2, r3
 8009d78:	4bb8      	ldr	r3, [pc, #736]	; (800a05c <UART_SetConfig+0x6f4>)
 8009d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d7e:	095b      	lsrs	r3, r3, #5
 8009d80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	469b      	mov	fp, r3
 8009d88:	f04f 0c00 	mov.w	ip, #0
 8009d8c:	46d9      	mov	r9, fp
 8009d8e:	46e2      	mov	sl, ip
 8009d90:	eb19 0309 	adds.w	r3, r9, r9
 8009d94:	eb4a 040a 	adc.w	r4, sl, sl
 8009d98:	4699      	mov	r9, r3
 8009d9a:	46a2      	mov	sl, r4
 8009d9c:	eb19 090b 	adds.w	r9, r9, fp
 8009da0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009da4:	f04f 0100 	mov.w	r1, #0
 8009da8:	f04f 0200 	mov.w	r2, #0
 8009dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009db0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009db4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009db8:	4689      	mov	r9, r1
 8009dba:	4692      	mov	sl, r2
 8009dbc:	eb1b 0509 	adds.w	r5, fp, r9
 8009dc0:	eb4c 060a 	adc.w	r6, ip, sl
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f04f 0200 	mov.w	r2, #0
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	f04f 0400 	mov.w	r4, #0
 8009dd6:	0094      	lsls	r4, r2, #2
 8009dd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ddc:	008b      	lsls	r3, r1, #2
 8009dde:	461a      	mov	r2, r3
 8009de0:	4623      	mov	r3, r4
 8009de2:	4628      	mov	r0, r5
 8009de4:	4631      	mov	r1, r6
 8009de6:	f7f8 fe7f 	bl	8002ae8 <__aeabi_uldivmod>
 8009dea:	4603      	mov	r3, r0
 8009dec:	460c      	mov	r4, r1
 8009dee:	461a      	mov	r2, r3
 8009df0:	4b9a      	ldr	r3, [pc, #616]	; (800a05c <UART_SetConfig+0x6f4>)
 8009df2:	fba3 1302 	umull	r1, r3, r3, r2
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	2164      	movs	r1, #100	; 0x64
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	3332      	adds	r3, #50	; 0x32
 8009e04:	4a95      	ldr	r2, [pc, #596]	; (800a05c <UART_SetConfig+0x6f4>)
 8009e06:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0a:	095b      	lsrs	r3, r3, #5
 8009e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e10:	4498      	add	r8, r3
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	469b      	mov	fp, r3
 8009e16:	f04f 0c00 	mov.w	ip, #0
 8009e1a:	46d9      	mov	r9, fp
 8009e1c:	46e2      	mov	sl, ip
 8009e1e:	eb19 0309 	adds.w	r3, r9, r9
 8009e22:	eb4a 040a 	adc.w	r4, sl, sl
 8009e26:	4699      	mov	r9, r3
 8009e28:	46a2      	mov	sl, r4
 8009e2a:	eb19 090b 	adds.w	r9, r9, fp
 8009e2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009e32:	f04f 0100 	mov.w	r1, #0
 8009e36:	f04f 0200 	mov.w	r2, #0
 8009e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e46:	4689      	mov	r9, r1
 8009e48:	4692      	mov	sl, r2
 8009e4a:	eb1b 0509 	adds.w	r5, fp, r9
 8009e4e:	eb4c 060a 	adc.w	r6, ip, sl
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	4619      	mov	r1, r3
 8009e58:	f04f 0200 	mov.w	r2, #0
 8009e5c:	f04f 0300 	mov.w	r3, #0
 8009e60:	f04f 0400 	mov.w	r4, #0
 8009e64:	0094      	lsls	r4, r2, #2
 8009e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009e6a:	008b      	lsls	r3, r1, #2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4623      	mov	r3, r4
 8009e70:	4628      	mov	r0, r5
 8009e72:	4631      	mov	r1, r6
 8009e74:	f7f8 fe38 	bl	8002ae8 <__aeabi_uldivmod>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4b77      	ldr	r3, [pc, #476]	; (800a05c <UART_SetConfig+0x6f4>)
 8009e80:	fba3 1302 	umull	r1, r3, r3, r2
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	2164      	movs	r1, #100	; 0x64
 8009e88:	fb01 f303 	mul.w	r3, r1, r3
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	011b      	lsls	r3, r3, #4
 8009e90:	3332      	adds	r3, #50	; 0x32
 8009e92:	4a72      	ldr	r2, [pc, #456]	; (800a05c <UART_SetConfig+0x6f4>)
 8009e94:	fba2 2303 	umull	r2, r3, r2, r3
 8009e98:	095b      	lsrs	r3, r3, #5
 8009e9a:	f003 020f 	and.w	r2, r3, #15
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4442      	add	r2, r8
 8009ea4:	609a      	str	r2, [r3, #8]
 8009ea6:	e0d0      	b.n	800a04a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ea8:	f7fe fa9a 	bl	80083e0 <HAL_RCC_GetPCLK1Freq>
 8009eac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	469a      	mov	sl, r3
 8009eb2:	f04f 0b00 	mov.w	fp, #0
 8009eb6:	46d0      	mov	r8, sl
 8009eb8:	46d9      	mov	r9, fp
 8009eba:	eb18 0308 	adds.w	r3, r8, r8
 8009ebe:	eb49 0409 	adc.w	r4, r9, r9
 8009ec2:	4698      	mov	r8, r3
 8009ec4:	46a1      	mov	r9, r4
 8009ec6:	eb18 080a 	adds.w	r8, r8, sl
 8009eca:	eb49 090b 	adc.w	r9, r9, fp
 8009ece:	f04f 0100 	mov.w	r1, #0
 8009ed2:	f04f 0200 	mov.w	r2, #0
 8009ed6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009eda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009ede:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009ee2:	4688      	mov	r8, r1
 8009ee4:	4691      	mov	r9, r2
 8009ee6:	eb1a 0508 	adds.w	r5, sl, r8
 8009eea:	eb4b 0609 	adc.w	r6, fp, r9
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	f04f 0400 	mov.w	r4, #0
 8009f00:	0094      	lsls	r4, r2, #2
 8009f02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f06:	008b      	lsls	r3, r1, #2
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	4631      	mov	r1, r6
 8009f10:	f7f8 fdea 	bl	8002ae8 <__aeabi_uldivmod>
 8009f14:	4603      	mov	r3, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4b50      	ldr	r3, [pc, #320]	; (800a05c <UART_SetConfig+0x6f4>)
 8009f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	469b      	mov	fp, r3
 8009f2a:	f04f 0c00 	mov.w	ip, #0
 8009f2e:	46d9      	mov	r9, fp
 8009f30:	46e2      	mov	sl, ip
 8009f32:	eb19 0309 	adds.w	r3, r9, r9
 8009f36:	eb4a 040a 	adc.w	r4, sl, sl
 8009f3a:	4699      	mov	r9, r3
 8009f3c:	46a2      	mov	sl, r4
 8009f3e:	eb19 090b 	adds.w	r9, r9, fp
 8009f42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f46:	f04f 0100 	mov.w	r1, #0
 8009f4a:	f04f 0200 	mov.w	r2, #0
 8009f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	4692      	mov	sl, r2
 8009f5e:	eb1b 0509 	adds.w	r5, fp, r9
 8009f62:	eb4c 060a 	adc.w	r6, ip, sl
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	f04f 0300 	mov.w	r3, #0
 8009f74:	f04f 0400 	mov.w	r4, #0
 8009f78:	0094      	lsls	r4, r2, #2
 8009f7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f7e:	008b      	lsls	r3, r1, #2
 8009f80:	461a      	mov	r2, r3
 8009f82:	4623      	mov	r3, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	4631      	mov	r1, r6
 8009f88:	f7f8 fdae 	bl	8002ae8 <__aeabi_uldivmod>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b32      	ldr	r3, [pc, #200]	; (800a05c <UART_SetConfig+0x6f4>)
 8009f94:	fba3 1302 	umull	r1, r3, r3, r2
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	2164      	movs	r1, #100	; 0x64
 8009f9c:	fb01 f303 	mul.w	r3, r1, r3
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	3332      	adds	r3, #50	; 0x32
 8009fa6:	4a2d      	ldr	r2, [pc, #180]	; (800a05c <UART_SetConfig+0x6f4>)
 8009fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fac:	095b      	lsrs	r3, r3, #5
 8009fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fb2:	4498      	add	r8, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	469b      	mov	fp, r3
 8009fb8:	f04f 0c00 	mov.w	ip, #0
 8009fbc:	46d9      	mov	r9, fp
 8009fbe:	46e2      	mov	sl, ip
 8009fc0:	eb19 0309 	adds.w	r3, r9, r9
 8009fc4:	eb4a 040a 	adc.w	r4, sl, sl
 8009fc8:	4699      	mov	r9, r3
 8009fca:	46a2      	mov	sl, r4
 8009fcc:	eb19 090b 	adds.w	r9, r9, fp
 8009fd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009fd4:	f04f 0100 	mov.w	r1, #0
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009fe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009fe8:	4689      	mov	r9, r1
 8009fea:	4692      	mov	sl, r2
 8009fec:	eb1b 0509 	adds.w	r5, fp, r9
 8009ff0:	eb4c 060a 	adc.w	r6, ip, sl
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	f04f 0200 	mov.w	r2, #0
 8009ffe:	f04f 0300 	mov.w	r3, #0
 800a002:	f04f 0400 	mov.w	r4, #0
 800a006:	0094      	lsls	r4, r2, #2
 800a008:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a00c:	008b      	lsls	r3, r1, #2
 800a00e:	461a      	mov	r2, r3
 800a010:	4623      	mov	r3, r4
 800a012:	4628      	mov	r0, r5
 800a014:	4631      	mov	r1, r6
 800a016:	f7f8 fd67 	bl	8002ae8 <__aeabi_uldivmod>
 800a01a:	4603      	mov	r3, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	461a      	mov	r2, r3
 800a020:	4b0e      	ldr	r3, [pc, #56]	; (800a05c <UART_SetConfig+0x6f4>)
 800a022:	fba3 1302 	umull	r1, r3, r3, r2
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	2164      	movs	r1, #100	; 0x64
 800a02a:	fb01 f303 	mul.w	r3, r1, r3
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	3332      	adds	r3, #50	; 0x32
 800a034:	4a09      	ldr	r2, [pc, #36]	; (800a05c <UART_SetConfig+0x6f4>)
 800a036:	fba2 2303 	umull	r2, r3, r2, r3
 800a03a:	095b      	lsrs	r3, r3, #5
 800a03c:	f003 020f 	and.w	r2, r3, #15
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4442      	add	r2, r8
 800a046:	609a      	str	r2, [r3, #8]
}
 800a048:	e7ff      	b.n	800a04a <UART_SetConfig+0x6e2>
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a054:	40011000 	.word	0x40011000
 800a058:	40011400 	.word	0x40011400
 800a05c:	51eb851f 	.word	0x51eb851f

0800a060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a060:	b084      	sub	sp, #16
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	f107 001c 	add.w	r0, r7, #28
 800a06e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	2b01      	cmp	r3, #1
 800a076:	d122      	bne.n	800a0be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a08c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d105      	bne.n	800a0b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f94a 	bl	800a34c <USB_CoreReset>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]
 800a0bc:	e01a      	b.n	800a0f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f93e 	bl	800a34c <USB_CoreReset>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a0e6:	e005      	b.n	800a0f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d10b      	bne.n	800a112 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f043 0206 	orr.w	r2, r3, #6
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f043 0220 	orr.w	r2, r3, #32
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a11e:	b004      	add	sp, #16
 800a120:	4770      	bx	lr

0800a122 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f043 0201 	orr.w	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f023 0201 	bic.w	r2, r3, #1
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d106      	bne.n	800a192 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60da      	str	r2, [r3, #12]
 800a190:	e00b      	b.n	800a1aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	60da      	str	r2, [r3, #12]
 800a1a4:	e001      	b.n	800a1aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e003      	b.n	800a1b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a1aa:	2032      	movs	r0, #50	; 0x32
 800a1ac:	f7fa ff2e 	bl	800500c <HAL_Delay>

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	019b      	lsls	r3, r3, #6
 800a1ce:	f043 0220 	orr.w	r2, r3, #32
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <USB_FlushTxFifo+0x48>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d901      	bls.n	800a1e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e006      	b.n	800a1f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0320 	and.w	r3, r3, #32
 800a1f0:	2b20      	cmp	r3, #32
 800a1f2:	d0f0      	beq.n	800a1d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	00030d40 	.word	0x00030d40

0800a208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2210      	movs	r2, #16
 800a218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3301      	adds	r3, #1
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4a09      	ldr	r2, [pc, #36]	; (800a248 <USB_FlushRxFifo+0x40>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d901      	bls.n	800a22c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e006      	b.n	800a23a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	f003 0310 	and.w	r3, r3, #16
 800a234:	2b10      	cmp	r3, #16
 800a236:	d0f0      	beq.n	800a21a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	00030d40 	.word	0x00030d40

0800a24c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b089      	sub	sp, #36	; 0x24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4611      	mov	r1, r2
 800a258:	461a      	mov	r2, r3
 800a25a:	460b      	mov	r3, r1
 800a25c:	71fb      	strb	r3, [r7, #7]
 800a25e:	4613      	mov	r3, r2
 800a260:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a26a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d11a      	bne.n	800a2a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a272:	88bb      	ldrh	r3, [r7, #4]
 800a274:	3303      	adds	r3, #3
 800a276:	089b      	lsrs	r3, r3, #2
 800a278:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	61bb      	str	r3, [r7, #24]
 800a27e:	e00f      	b.n	800a2a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	031a      	lsls	r2, r3, #12
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	4413      	add	r3, r2
 800a288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28c:	461a      	mov	r2, r3
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	3304      	adds	r3, #4
 800a298:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	3301      	adds	r3, #1
 800a29e:	61bb      	str	r3, [r7, #24]
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d3eb      	bcc.n	800a280 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3724      	adds	r7, #36	; 0x24
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b089      	sub	sp, #36	; 0x24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	60b9      	str	r1, [r7, #8]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	3303      	adds	r3, #3
 800a2d0:	089b      	lsrs	r3, r3, #2
 800a2d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	61bb      	str	r3, [r7, #24]
 800a2d8:	e00b      	b.n	800a2f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	61bb      	str	r3, [r7, #24]
 800a2f2:	69ba      	ldr	r2, [r7, #24]
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d3ef      	bcc.n	800a2da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a2fa:	69fb      	ldr	r3, [r7, #28]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3724      	adds	r7, #36	; 0x24
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	4013      	ands	r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a320:	68fb      	ldr	r3, [r7, #12]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	f003 0301 	and.w	r3, r3, #1
}
 800a33e:	4618      	mov	r0, r3
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	4a13      	ldr	r2, [pc, #76]	; (800a3b0 <USB_CoreReset+0x64>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d901      	bls.n	800a36a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e01b      	b.n	800a3a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	daf2      	bge.n	800a358 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f043 0201 	orr.w	r2, r3, #1
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3301      	adds	r3, #1
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <USB_CoreReset+0x64>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d901      	bls.n	800a394 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a390:	2303      	movs	r3, #3
 800a392:	e006      	b.n	800a3a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d0f0      	beq.n	800a382 <USB_CoreReset+0x36>

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	00030d40 	.word	0x00030d40

0800a3b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	f107 001c 	add.w	r0, r7, #28
 800a3c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a402:	2b00      	cmp	r3, #0
 800a404:	d018      	beq.n	800a438 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d10a      	bne.n	800a422 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a41a:	f043 0304 	orr.w	r3, r3, #4
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	e014      	b.n	800a44c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a430:	f023 0304 	bic.w	r3, r3, #4
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	e009      	b.n	800a44c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a446:	f023 0304 	bic.w	r3, r3, #4
 800a44a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a44c:	2110      	movs	r1, #16
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff feb4 	bl	800a1bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fed7 	bl	800a208 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
 800a45e:	e015      	b.n	800a48c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	015a      	lsls	r2, r3, #5
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	4413      	add	r3, r2
 800a468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a46c:	461a      	mov	r2, r3
 800a46e:	f04f 33ff 	mov.w	r3, #4294967295
 800a472:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a480:	461a      	mov	r2, r3
 800a482:	2300      	movs	r3, #0
 800a484:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	429a      	cmp	r2, r3
 800a492:	d3e5      	bcc.n	800a460 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a494:	2101      	movs	r1, #1
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f8ac 	bl	800a5f4 <USB_DriveVbus>

  HAL_Delay(200U);
 800a49c:	20c8      	movs	r0, #200	; 0xc8
 800a49e:	f7fa fdb5 	bl	800500c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ae:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a14      	ldr	r2, [pc, #80]	; (800a518 <USB_HostInit+0x164>)
 800a4c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a13      	ldr	r2, [pc, #76]	; (800a51c <USB_HostInit+0x168>)
 800a4ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a4d2:	e009      	b.n	800a4e8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2280      	movs	r2, #128	; 0x80
 800a4d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a10      	ldr	r2, [pc, #64]	; (800a520 <USB_HostInit+0x16c>)
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a10      	ldr	r2, [pc, #64]	; (800a524 <USB_HostInit+0x170>)
 800a4e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f043 0210 	orr.w	r2, r3, #16
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699a      	ldr	r2, [r3, #24]
 800a4fe:	4b0a      	ldr	r3, [pc, #40]	; (800a528 <USB_HostInit+0x174>)
 800a500:	4313      	orrs	r3, r2
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a512:	b004      	add	sp, #16
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	01000200 	.word	0x01000200
 800a51c:	00e00300 	.word	0x00e00300
 800a520:	00600080 	.word	0x00600080
 800a524:	004000e0 	.word	0x004000e0
 800a528:	a3200008 	.word	0xa3200008

0800a52c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a54a:	f023 0303 	bic.w	r3, r3, #3
 800a54e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	78fb      	ldrb	r3, [r7, #3]
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	68f9      	ldr	r1, [r7, #12]
 800a560:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a564:	4313      	orrs	r3, r2
 800a566:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d107      	bne.n	800a57e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a574:	461a      	mov	r2, r3
 800a576:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a57a:	6053      	str	r3, [r2, #4]
 800a57c:	e009      	b.n	800a592 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d106      	bne.n	800a592 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a58a:	461a      	mov	r2, r3
 800a58c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a590:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a5c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a5d0:	2064      	movs	r0, #100	; 0x64
 800a5d2:	f7fa fd1b 	bl	800500c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a5e4:	200a      	movs	r0, #10
 800a5e6:	f7fa fd11 	bl	800500c <HAL_Delay>

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a618:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d109      	bne.n	800a638 <USB_DriveVbus+0x44>
 800a624:	78fb      	ldrb	r3, [r7, #3]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d106      	bne.n	800a638 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a636:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a63e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a642:	d109      	bne.n	800a658 <USB_DriveVbus+0x64>
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d106      	bne.n	800a658 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a656:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3714      	adds	r7, #20
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	0c5b      	lsrs	r3, r3, #17
 800a684:	f003 0303 	and.w	r3, r3, #3
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	b29b      	uxth	r3, r3
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	4608      	mov	r0, r1
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	70fb      	strb	r3, [r7, #3]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	70bb      	strb	r3, [r7, #2]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a6ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d87e      	bhi.n	800a7f4 <USB_HC_Init+0x13c>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <USB_HC_Init+0x44>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a70d 	.word	0x0800a70d
 800a700:	0800a7b7 	.word	0x0800a7b7
 800a704:	0800a70d 	.word	0x0800a70d
 800a708:	0800a779 	.word	0x0800a779
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4413      	add	r3, r2
 800a714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a718:	461a      	mov	r2, r3
 800a71a:	f240 439d 	movw	r3, #1181	; 0x49d
 800a71e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a720:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a724:	2b00      	cmp	r3, #0
 800a726:	da10      	bge.n	800a74a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	78fa      	ldrb	r2, [r7, #3]
 800a738:	0151      	lsls	r1, r2, #5
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	440a      	add	r2, r1
 800a73e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a746:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a748:	e057      	b.n	800a7fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a752:	2b00      	cmp	r3, #0
 800a754:	d051      	beq.n	800a7fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a756:	78fb      	ldrb	r3, [r7, #3]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a770:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a774:	60d3      	str	r3, [r2, #12]
      break;
 800a776:	e040      	b.n	800a7fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a784:	461a      	mov	r2, r3
 800a786:	f240 639d 	movw	r3, #1693	; 0x69d
 800a78a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a78c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a790:	2b00      	cmp	r3, #0
 800a792:	da34      	bge.n	800a7fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	0151      	lsls	r1, r2, #5
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	440a      	add	r2, r1
 800a7aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a7b4:	e023      	b.n	800a7fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f240 2325 	movw	r3, #549	; 0x225
 800a7c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a7ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	da17      	bge.n	800a802 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a7d2:	78fb      	ldrb	r3, [r7, #3]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	78fa      	ldrb	r2, [r7, #3]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a7f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a7f2:	e006      	b.n	800a802 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f8:	e004      	b.n	800a804 <USB_HC_Init+0x14c>
      break;
 800a7fa:	bf00      	nop
 800a7fc:	e002      	b.n	800a804 <USB_HC_Init+0x14c>
      break;
 800a7fe:	bf00      	nop
 800a800:	e000      	b.n	800a804 <USB_HC_Init+0x14c>
      break;
 800a802:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a80a:	699a      	ldr	r2, [r3, #24]
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	f003 030f 	and.w	r3, r3, #15
 800a812:	2101      	movs	r1, #1
 800a814:	fa01 f303 	lsl.w	r3, r1, r3
 800a818:	68b9      	ldr	r1, [r7, #8]
 800a81a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a81e:	4313      	orrs	r3, r2
 800a820:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a82e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a832:	2b00      	cmp	r3, #0
 800a834:	da03      	bge.n	800a83e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e001      	b.n	800a842 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a842:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a846:	2b02      	cmp	r3, #2
 800a848:	d103      	bne.n	800a852 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a84a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	e001      	b.n	800a856 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a856:	787b      	ldrb	r3, [r7, #1]
 800a858:	059b      	lsls	r3, r3, #22
 800a85a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a85e:	78bb      	ldrb	r3, [r7, #2]
 800a860:	02db      	lsls	r3, r3, #11
 800a862:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a866:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a86c:	049b      	lsls	r3, r3, #18
 800a86e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a872:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a876:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a87a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	0159      	lsls	r1, r3, #5
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	440b      	add	r3, r1
 800a888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a88c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a892:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d10f      	bne.n	800a8bc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	78fa      	ldrb	r2, [r7, #3]
 800a8ac:	0151      	lsls	r1, r2, #5
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	440a      	add	r2, r1
 800a8b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8ba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	371c      	adds	r7, #28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop

0800a8cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	; 0x30
 800a8d0:	af02      	add	r7, sp, #8
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a8e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8e8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d028      	beq.n	800a948 <USB_HC_StartXfer+0x7c>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	791b      	ldrb	r3, [r3, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d124      	bne.n	800a948 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10b      	bne.n	800a91c <USB_HC_StartXfer+0x50>
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	795b      	ldrb	r3, [r3, #5]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d107      	bne.n	800a91c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	4619      	mov	r1, r3
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 fa30 	bl	800ad78 <USB_DoPing>
      return HAL_OK;
 800a918:	2300      	movs	r3, #0
 800a91a:	e114      	b.n	800ab46 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d112      	bne.n	800a948 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	0151      	lsls	r1, r2, #5
 800a934:	6a3a      	ldr	r2, [r7, #32]
 800a936:	440a      	add	r2, r1
 800a938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a93c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a940:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2200      	movs	r2, #0
 800a946:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d018      	beq.n	800a982 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	8912      	ldrh	r2, [r2, #8]
 800a958:	4413      	add	r3, r2
 800a95a:	3b01      	subs	r3, #1
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	8912      	ldrh	r2, [r2, #8]
 800a960:	fbb3 f3f2 	udiv	r3, r3, r2
 800a964:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a966:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a968:	8b7b      	ldrh	r3, [r7, #26]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d90b      	bls.n	800a986 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a96e:	8b7b      	ldrh	r3, [r7, #26]
 800a970:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a972:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a974:	68ba      	ldr	r2, [r7, #8]
 800a976:	8912      	ldrh	r2, [r2, #8]
 800a978:	fb02 f203 	mul.w	r2, r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	611a      	str	r2, [r3, #16]
 800a980:	e001      	b.n	800a986 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a982:	2301      	movs	r3, #1
 800a984:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	78db      	ldrb	r3, [r3, #3]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d006      	beq.n	800a99c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a98e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	8912      	ldrh	r2, [r2, #8]
 800a994:	fb02 f203 	mul.w	r2, r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9a6:	04d9      	lsls	r1, r3, #19
 800a9a8:	4b69      	ldr	r3, [pc, #420]	; (800ab50 <USB_HC_StartXfer+0x284>)
 800a9aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	7a9b      	ldrb	r3, [r3, #10]
 800a9b2:	075b      	lsls	r3, r3, #29
 800a9b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9b8:	69f9      	ldr	r1, [r7, #28]
 800a9ba:	0148      	lsls	r0, r1, #5
 800a9bc:	6a39      	ldr	r1, [r7, #32]
 800a9be:	4401      	add	r1, r0
 800a9c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d009      	beq.n	800a9e2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	68d9      	ldr	r1, [r3, #12]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9de:	460a      	mov	r2, r1
 800a9e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bf0c      	ite	eq
 800a9f2:	2301      	moveq	r3, #1
 800a9f4:	2300      	movne	r3, #0
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	6a3a      	ldr	r2, [r7, #32]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	7e7b      	ldrb	r3, [r7, #25]
 800aa2a:	075b      	lsls	r3, r3, #29
 800aa2c:	69f9      	ldr	r1, [r7, #28]
 800aa2e:	0148      	lsls	r0, r1, #5
 800aa30:	6a39      	ldr	r1, [r7, #32]
 800aa32:	4401      	add	r1, r0
 800aa34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a42      	ldr	r2, [pc, #264]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa4c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa4e:	4b41      	ldr	r3, [pc, #260]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa56:	4a3f      	ldr	r2, [pc, #252]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa58:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	78db      	ldrb	r3, [r3, #3]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d006      	beq.n	800aa70 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aa62:	4b3c      	ldr	r3, [pc, #240]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6a:	4a3a      	ldr	r2, [pc, #232]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	e005      	b.n	800aa7c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aa70:	4b38      	ldr	r3, [pc, #224]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa78:	4a36      	ldr	r2, [pc, #216]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa7a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa7c:	4b35      	ldr	r3, [pc, #212]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa84:	4a33      	ldr	r2, [pc, #204]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa86:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa94:	461a      	mov	r2, r3
 800aa96:	4b2f      	ldr	r3, [pc, #188]	; (800ab54 <USB_HC_StartXfer+0x288>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e04f      	b.n	800ab46 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	78db      	ldrb	r3, [r3, #3]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d14a      	bne.n	800ab44 <USB_HC_StartXfer+0x278>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d046      	beq.n	800ab44 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	79db      	ldrb	r3, [r3, #7]
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d830      	bhi.n	800ab20 <USB_HC_StartXfer+0x254>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <USB_HC_StartXfer+0x1f8>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aad5 	.word	0x0800aad5
 800aac8:	0800aaf9 	.word	0x0800aaf9
 800aacc:	0800aad5 	.word	0x0800aad5
 800aad0:	0800aaf9 	.word	0x0800aaf9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	3303      	adds	r3, #3
 800aada:	089b      	lsrs	r3, r3, #2
 800aadc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800aade:	8afa      	ldrh	r2, [r7, #22]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d91c      	bls.n	800ab24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	f043 0220 	orr.w	r2, r3, #32
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	619a      	str	r2, [r3, #24]
        }
        break;
 800aaf6:	e015      	b.n	800ab24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	3303      	adds	r3, #3
 800aafe:	089b      	lsrs	r3, r3, #2
 800ab00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ab02:	8afa      	ldrh	r2, [r7, #22]
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d90a      	bls.n	800ab28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab1e:	e003      	b.n	800ab28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ab20:	bf00      	nop
 800ab22:	e002      	b.n	800ab2a <USB_HC_StartXfer+0x25e>
        break;
 800ab24:	bf00      	nop
 800ab26:	e000      	b.n	800ab2a <USB_HC_StartXfer+0x25e>
        break;
 800ab28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	68d9      	ldr	r1, [r3, #12]
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	785a      	ldrb	r2, [r3, #1]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	b298      	uxth	r0, r3
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff fb84 	bl	800a24c <USB_WritePacket>
  }

  return HAL_OK;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3728      	adds	r7, #40	; 0x28
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	1ff80000 	.word	0x1ff80000
 800ab54:	20000b84 	.word	0x20000b84

0800ab58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	b29b      	uxth	r3, r3
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b087      	sub	sp, #28
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	0c9b      	lsrs	r3, r3, #18
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <USB_HC_Halt+0x3a>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d16c      	bne.n	800ac8e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	0151      	lsls	r1, r2, #5
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	440a      	add	r2, r1
 800abca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d143      	bne.n	800ac68 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	0151      	lsls	r1, r2, #5
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	440a      	add	r2, r1
 800abf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	0151      	lsls	r1, r2, #5
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	440a      	add	r2, r1
 800ac16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	0151      	lsls	r1, r2, #5
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	440a      	add	r2, r1
 800ac36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	3301      	adds	r3, #1
 800ac44:	617b      	str	r3, [r7, #20]
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac4c:	d81d      	bhi.n	800ac8a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac64:	d0ec      	beq.n	800ac40 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac66:	e080      	b.n	800ad6a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	0151      	lsls	r1, r2, #5
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	440a      	add	r2, r1
 800ac7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac86:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac88:	e06f      	b.n	800ad6a <USB_HC_Halt+0x1f0>
          break;
 800ac8a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac8c:	e06d      	b.n	800ad6a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	015a      	lsls	r2, r3, #5
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	4413      	add	r3, r2
 800ac96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	0151      	lsls	r1, r2, #5
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	440a      	add	r2, r1
 800aca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acac:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d143      	bne.n	800ad46 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	015a      	lsls	r2, r3, #5
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	4413      	add	r3, r2
 800acc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	0151      	lsls	r1, r2, #5
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	440a      	add	r2, r1
 800acd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acdc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	0151      	lsls	r1, r2, #5
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	440a      	add	r2, r1
 800acf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acfc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	0151      	lsls	r1, r2, #5
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	440a      	add	r2, r1
 800ad14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad1c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	3301      	adds	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad2a:	d81d      	bhi.n	800ad68 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad42:	d0ec      	beq.n	800ad1e <USB_HC_Halt+0x1a4>
 800ad44:	e011      	b.n	800ad6a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	0151      	lsls	r1, r2, #5
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	440a      	add	r2, r1
 800ad5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	e000      	b.n	800ad6a <USB_HC_Halt+0x1f0>
          break;
 800ad68:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	04da      	lsls	r2, r3, #19
 800ad94:	4b15      	ldr	r3, [pc, #84]	; (800adec <USB_DoPing+0x74>)
 800ad96:	4013      	ands	r3, r2
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	0151      	lsls	r1, r2, #5
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	440a      	add	r2, r1
 800ada0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ada4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	015a      	lsls	r2, r3, #5
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adc0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adc8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	4413      	add	r3, r2
 800add2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add6:	461a      	mov	r2, r3
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	1ff80000 	.word	0x1ff80000

0800adf0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff f99f 	bl	800a144 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ae06:	2110      	movs	r1, #16
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff f9d7 	bl	800a1bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff f9fa 	bl	800a208 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ae14:	2300      	movs	r3, #0
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	e01f      	b.n	800ae5a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4e:	461a      	mov	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	3301      	adds	r3, #1
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2b0f      	cmp	r3, #15
 800ae5e:	d9dc      	bls.n	800ae1a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ae60:	2300      	movs	r3, #0
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	e034      	b.n	800aed0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae7c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae84:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae8c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	3301      	adds	r3, #1
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aeac:	d80c      	bhi.n	800aec8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aec4:	d0ec      	beq.n	800aea0 <USB_StopHost+0xb0>
 800aec6:	e000      	b.n	800aeca <USB_StopHost+0xda>
        break;
 800aec8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	3301      	adds	r3, #1
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	2b0f      	cmp	r3, #15
 800aed4:	d9c7      	bls.n	800ae66 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aedc:	461a      	mov	r2, r3
 800aede:	f04f 33ff 	mov.w	r3, #4294967295
 800aee2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff f918 	bl	800a122 <USB_EnableGlobalInt>

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b089      	sub	sp, #36	; 0x24
 800af00:	af04      	add	r7, sp, #16
 800af02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800af04:	2301      	movs	r3, #1
 800af06:	2202      	movs	r2, #2
 800af08:	2102      	movs	r1, #2
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fc68 	bl	800b7e0 <USBH_FindInterface>
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	2bff      	cmp	r3, #255	; 0xff
 800af18:	d002      	beq.n	800af20 <USBH_CDC_InterfaceInit+0x24>
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d901      	bls.n	800af24 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800af20:	2302      	movs	r3, #2
 800af22:	e13d      	b.n	800b1a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fc3d 	bl	800b7a8 <USBH_SelectInterface>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800af38:	2302      	movs	r3, #2
 800af3a:	e131      	b.n	800b1a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800af42:	2050      	movs	r0, #80	; 0x50
 800af44:	f002 fa34 	bl	800d3b0 <malloc>
 800af48:	4603      	mov	r3, r0
 800af4a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800af5c:	2302      	movs	r3, #2
 800af5e:	e11f      	b.n	800b1a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800af60:	2250      	movs	r2, #80	; 0x50
 800af62:	2100      	movs	r1, #0
 800af64:	68b8      	ldr	r0, [r7, #8]
 800af66:	f002 fa33 	bl	800d3d0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	211a      	movs	r1, #26
 800af70:	fb01 f303 	mul.w	r3, r1, r3
 800af74:	4413      	add	r3, r2
 800af76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	b25b      	sxtb	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da15      	bge.n	800afae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	211a      	movs	r1, #26
 800af88:	fb01 f303 	mul.w	r3, r1, r3
 800af8c:	4413      	add	r3, r2
 800af8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af92:	781a      	ldrb	r2, [r3, #0]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	211a      	movs	r1, #26
 800af9e:	fb01 f303 	mul.w	r3, r1, r3
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800afa8:	881a      	ldrh	r2, [r3, #0]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 fe36 	bl	800cc26 <USBH_AllocPipe>
 800afba:	4603      	mov	r3, r0
 800afbc:	461a      	mov	r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	7819      	ldrb	r1, [r3, #0]
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	7858      	ldrb	r0, [r3, #1]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	8952      	ldrh	r2, [r2, #10]
 800afda:	9202      	str	r2, [sp, #8]
 800afdc:	2203      	movs	r2, #3
 800afde:	9201      	str	r2, [sp, #4]
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	4623      	mov	r3, r4
 800afe4:	4602      	mov	r2, r0
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 fdee 	bl	800cbc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2200      	movs	r2, #0
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f002 f8fb 	bl	800d1f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800affa:	2300      	movs	r3, #0
 800affc:	2200      	movs	r2, #0
 800affe:	210a      	movs	r1, #10
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fbed 	bl	800b7e0 <USBH_FindInterface>
 800b006:	4603      	mov	r3, r0
 800b008:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2bff      	cmp	r3, #255	; 0xff
 800b00e:	d002      	beq.n	800b016 <USBH_CDC_InterfaceInit+0x11a>
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d901      	bls.n	800b01a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b016:	2302      	movs	r3, #2
 800b018:	e0c2      	b.n	800b1a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	211a      	movs	r1, #26
 800b020:	fb01 f303 	mul.w	r3, r1, r3
 800b024:	4413      	add	r3, r2
 800b026:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da16      	bge.n	800b060 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	211a      	movs	r1, #26
 800b038:	fb01 f303 	mul.w	r3, r1, r3
 800b03c:	4413      	add	r3, r2
 800b03e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b042:	781a      	ldrb	r2, [r3, #0]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	211a      	movs	r1, #26
 800b04e:	fb01 f303 	mul.w	r3, r1, r3
 800b052:	4413      	add	r3, r2
 800b054:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b058:	881a      	ldrh	r2, [r3, #0]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	835a      	strh	r2, [r3, #26]
 800b05e:	e015      	b.n	800b08c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	211a      	movs	r1, #26
 800b066:	fb01 f303 	mul.w	r3, r1, r3
 800b06a:	4413      	add	r3, r2
 800b06c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b070:	781a      	ldrb	r2, [r3, #0]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	211a      	movs	r1, #26
 800b07c:	fb01 f303 	mul.w	r3, r1, r3
 800b080:	4413      	add	r3, r2
 800b082:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b086:	881a      	ldrh	r2, [r3, #0]
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	211a      	movs	r1, #26
 800b092:	fb01 f303 	mul.w	r3, r1, r3
 800b096:	4413      	add	r3, r2
 800b098:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b25b      	sxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	da16      	bge.n	800b0d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	211a      	movs	r1, #26
 800b0aa:	fb01 f303 	mul.w	r3, r1, r3
 800b0ae:	4413      	add	r3, r2
 800b0b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b0b4:	781a      	ldrb	r2, [r3, #0]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	211a      	movs	r1, #26
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b0ca:	881a      	ldrh	r2, [r3, #0]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	835a      	strh	r2, [r3, #26]
 800b0d0:	e015      	b.n	800b0fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	211a      	movs	r1, #26
 800b0d8:	fb01 f303 	mul.w	r3, r1, r3
 800b0dc:	4413      	add	r3, r2
 800b0de:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b0e2:	781a      	ldrb	r2, [r3, #0]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	211a      	movs	r1, #26
 800b0ee:	fb01 f303 	mul.w	r3, r1, r3
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b0f8:	881a      	ldrh	r2, [r3, #0]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	7b9b      	ldrb	r3, [r3, #14]
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f001 fd8e 	bl	800cc26 <USBH_AllocPipe>
 800b10a:	4603      	mov	r3, r0
 800b10c:	461a      	mov	r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	7bdb      	ldrb	r3, [r3, #15]
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 fd84 	bl	800cc26 <USBH_AllocPipe>
 800b11e:	4603      	mov	r3, r0
 800b120:	461a      	mov	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	7b59      	ldrb	r1, [r3, #13]
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	7b98      	ldrb	r0, [r3, #14]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	8b12      	ldrh	r2, [r2, #24]
 800b13e:	9202      	str	r2, [sp, #8]
 800b140:	2202      	movs	r2, #2
 800b142:	9201      	str	r2, [sp, #4]
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	4623      	mov	r3, r4
 800b148:	4602      	mov	r2, r0
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f001 fd3c 	bl	800cbc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	7b19      	ldrb	r1, [r3, #12]
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	7bd8      	ldrb	r0, [r3, #15]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	8b52      	ldrh	r2, [r2, #26]
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	2202      	movs	r2, #2
 800b16c:	9201      	str	r2, [sp, #4]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	4623      	mov	r3, r4
 800b172:	4602      	mov	r2, r0
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 fd27 	bl	800cbc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	7b5b      	ldrb	r3, [r3, #13]
 800b186:	2200      	movs	r2, #0
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f002 f830 	bl	800d1f0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	7b1b      	ldrb	r3, [r3, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f002 f829 	bl	800d1f0 <USBH_LL_SetToggle>

  return USBH_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd90      	pop	{r4, r7, pc}

0800b1a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00e      	beq.n	800b1e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f001 fd1c 	bl	800cc06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 fd47 	bl	800cc68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	7b1b      	ldrb	r3, [r3, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00e      	beq.n	800b206 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	7b1b      	ldrb	r3, [r3, #12]
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f001 fd09 	bl	800cc06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	7b1b      	ldrb	r3, [r3, #12]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f001 fd34 	bl	800cc68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	7b5b      	ldrb	r3, [r3, #13]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00e      	beq.n	800b22c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	7b5b      	ldrb	r3, [r3, #13]
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f001 fcf6 	bl	800cc06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	7b5b      	ldrb	r3, [r3, #13]
 800b21e:	4619      	mov	r1, r3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f001 fd21 	bl	800cc68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	4618      	mov	r0, r3
 800b242:	f002 f8bd 	bl	800d3c0 <free>
    phost->pActiveClass->pData = 0U;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b24c:	2200      	movs	r2, #0
 800b24e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3340      	adds	r3, #64	; 0x40
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f8b1 	bl	800b3da <GetLineCoding>
 800b278:	4603      	mov	r3, r0
 800b27a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d105      	bne.n	800b28e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b288:	2102      	movs	r1, #2
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b28e:	7afb      	ldrb	r3, [r7, #11]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2ae:	69db      	ldr	r3, [r3, #28]
 800b2b0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d877      	bhi.n	800b3ac <USBH_CDC_Process+0x114>
 800b2bc:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <USBH_CDC_Process+0x2c>)
 800b2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c2:	bf00      	nop
 800b2c4:	0800b2d9 	.word	0x0800b2d9
 800b2c8:	0800b2df 	.word	0x0800b2df
 800b2cc:	0800b30f 	.word	0x0800b30f
 800b2d0:	0800b383 	.word	0x0800b383
 800b2d4:	0800b391 	.word	0x0800b391
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73fb      	strb	r3, [r7, #15]
      break;
 800b2dc:	e06d      	b.n	800b3ba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f897 	bl	800b418 <SetLineCoding>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d104      	bne.n	800b2fe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b2fc:	e058      	b.n	800b3b0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b2fe:	7bbb      	ldrb	r3, [r7, #14]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d055      	beq.n	800b3b0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2204      	movs	r2, #4
 800b308:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b30c:	e050      	b.n	800b3b0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	3340      	adds	r3, #64	; 0x40
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f860 	bl	800b3da <GetLineCoding>
 800b31a:	4603      	mov	r3, r0
 800b31c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d126      	bne.n	800b372 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b336:	791b      	ldrb	r3, [r3, #4]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d13b      	bne.n	800b3b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b346:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b348:	429a      	cmp	r2, r3
 800b34a:	d133      	bne.n	800b3b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b356:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b358:	429a      	cmp	r2, r3
 800b35a:	d12b      	bne.n	800b3b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b364:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b366:	429a      	cmp	r2, r3
 800b368:	d124      	bne.n	800b3b4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f95a 	bl	800b624 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b370:	e020      	b.n	800b3b4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b372:	7bbb      	ldrb	r3, [r7, #14]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d01d      	beq.n	800b3b4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2204      	movs	r2, #4
 800b37c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b380:	e018      	b.n	800b3b4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f867 	bl	800b456 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f8dc 	bl	800b546 <CDC_ProcessReception>
      break;
 800b38e:	e014      	b.n	800b3ba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 ffe5 	bl	800c362 <USBH_ClrFeature>
 800b398:	4603      	mov	r3, r0
 800b39a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10a      	bne.n	800b3b8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b3aa:	e005      	b.n	800b3b8 <USBH_CDC_Process+0x120>

    default:
      break;
 800b3ac:	bf00      	nop
 800b3ae:	e004      	b.n	800b3ba <USBH_CDC_Process+0x122>
      break;
 800b3b0:	bf00      	nop
 800b3b2:	e002      	b.n	800b3ba <USBH_CDC_Process+0x122>
      break;
 800b3b4:	bf00      	nop
 800b3b6:	e000      	b.n	800b3ba <USBH_CDC_Process+0x122>
      break;
 800b3b8:	bf00      	nop

  }

  return status;
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	22a1      	movs	r2, #161	; 0xa1
 800b3e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2221      	movs	r2, #33	; 0x21
 800b3ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2207      	movs	r2, #7
 800b400:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2207      	movs	r2, #7
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 f98a 	bl	800c722 <USBH_CtlReq>
 800b40e:	4603      	mov	r3, r0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2221      	movs	r2, #33	; 0x21
 800b426:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2220      	movs	r2, #32
 800b42c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2207      	movs	r2, #7
 800b43e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2207      	movs	r2, #7
 800b444:	4619      	mov	r1, r3
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 f96b 	bl	800c722 <USBH_CtlReq>
 800b44c:	4603      	mov	r3, r0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b086      	sub	sp, #24
 800b45a:	af02      	add	r7, sp, #8
 800b45c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b468:	2300      	movs	r3, #0
 800b46a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b472:	2b01      	cmp	r3, #1
 800b474:	d002      	beq.n	800b47c <CDC_ProcessTransmission+0x26>
 800b476:	2b02      	cmp	r3, #2
 800b478:	d025      	beq.n	800b4c6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800b47a:	e060      	b.n	800b53e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	8b12      	ldrh	r2, [r2, #24]
 800b484:	4293      	cmp	r3, r2
 800b486:	d90c      	bls.n	800b4a2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	69d9      	ldr	r1, [r3, #28]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	8b1a      	ldrh	r2, [r3, #24]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	7b58      	ldrb	r0, [r3, #13]
 800b494:	2301      	movs	r3, #1
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	4603      	mov	r3, r0
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 fb51 	bl	800cb42 <USBH_BulkSendData>
 800b4a0:	e00c      	b.n	800b4bc <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	7b58      	ldrb	r0, [r3, #13]
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 fb43 	bl	800cb42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b4c4:	e03b      	b.n	800b53e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	7b5b      	ldrb	r3, [r3, #13]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 fe65 	bl	800d19c <USBH_LL_GetURBState>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b4d6:	7afb      	ldrb	r3, [r7, #11]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d128      	bne.n	800b52e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	8b12      	ldrh	r2, [r2, #24]
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d90e      	bls.n	800b506 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	8b12      	ldrh	r2, [r2, #24]
 800b4f0:	1a9a      	subs	r2, r3, r2
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	8b12      	ldrh	r2, [r2, #24]
 800b4fe:	441a      	add	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	61da      	str	r2, [r3, #28]
 800b504:	e002      	b.n	800b50c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	d004      	beq.n	800b51e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b51c:	e00e      	b.n	800b53c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f868 	bl	800b5fc <USBH_CDC_TransmitCallback>
      break;
 800b52c:	e006      	b.n	800b53c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	2b02      	cmp	r3, #2
 800b532:	d103      	bne.n	800b53c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b53c:	bf00      	nop
  }
}
 800b53e:	bf00      	nop
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b086      	sub	sp, #24
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b558:	2300      	movs	r3, #0
 800b55a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b562:	2b03      	cmp	r3, #3
 800b564:	d002      	beq.n	800b56c <CDC_ProcessReception+0x26>
 800b566:	2b04      	cmp	r3, #4
 800b568:	d00e      	beq.n	800b588 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b56a:	e043      	b.n	800b5f4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	6a19      	ldr	r1, [r3, #32]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	8b5a      	ldrh	r2, [r3, #26]
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	7b1b      	ldrb	r3, [r3, #12]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 fb07 	bl	800cb8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2204      	movs	r2, #4
 800b582:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b586:	e035      	b.n	800b5f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	7b1b      	ldrb	r3, [r3, #12]
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 fe04 	bl	800d19c <USBH_LL_GetURBState>
 800b594:	4603      	mov	r3, r0
 800b596:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b598:	7cfb      	ldrb	r3, [r7, #19]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d129      	bne.n	800b5f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	7b1b      	ldrb	r3, [r3, #12]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 fd67 	bl	800d078 <USBH_LL_GetLastXferSize>
 800b5aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d016      	beq.n	800b5e4 <CDC_ProcessReception+0x9e>
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	8b5b      	ldrh	r3, [r3, #26]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d910      	bls.n	800b5e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	1ad2      	subs	r2, r2, r3
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	6a1a      	ldr	r2, [r3, #32]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	441a      	add	r2, r3
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2203      	movs	r2, #3
 800b5de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b5e2:	e006      	b.n	800b5f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f80f 	bl	800b610 <USBH_CDC_ReceiveCallback>
      break;
 800b5f2:	bf00      	nop
  }
}
 800b5f4:	bf00      	nop
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	4613      	mov	r3, r2
 800b644:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b64c:	2302      	movs	r3, #2
 800b64e:	e029      	b.n	800b6a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	79fa      	ldrb	r2, [r7, #7]
 800b654:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f81f 	bl	800b6ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d003      	beq.n	800b69c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f001 fc39 	bl	800cf14 <USBH_LL_Init>

  return USBH_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	e009      	b.n	800b6d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	33e0      	adds	r3, #224	; 0xe0
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b0e      	cmp	r3, #14
 800b6d6:	d9f2      	bls.n	800b6be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	e009      	b.n	800b6f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f8:	d3f1      	bcc.n	800b6de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2240      	movs	r2, #64	; 0x40
 800b71e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d016      	beq.n	800b796 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10e      	bne.n	800b790 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b778:	1c59      	adds	r1, r3, #1
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	33de      	adds	r3, #222	; 0xde
 800b784:	6839      	ldr	r1, [r7, #0]
 800b786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]
 800b78e:	e004      	b.n	800b79a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b790:	2302      	movs	r3, #2
 800b792:	73fb      	strb	r3, [r7, #15]
 800b794:	e001      	b.n	800b79a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b796:	2302      	movs	r3, #2
 800b798:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d204      	bcs.n	800b7ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b7cc:	e001      	b.n	800b7d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3714      	adds	r7, #20
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	4608      	mov	r0, r1
 800b7ea:	4611      	mov	r1, r2
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	70fb      	strb	r3, [r7, #3]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	70bb      	strb	r3, [r7, #2]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b808:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b80a:	e025      	b.n	800b858 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	221a      	movs	r2, #26
 800b810:	fb02 f303 	mul.w	r3, r2, r3
 800b814:	3308      	adds	r3, #8
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	4413      	add	r3, r2
 800b81a:	3302      	adds	r3, #2
 800b81c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	795b      	ldrb	r3, [r3, #5]
 800b822:	78fa      	ldrb	r2, [r7, #3]
 800b824:	429a      	cmp	r2, r3
 800b826:	d002      	beq.n	800b82e <USBH_FindInterface+0x4e>
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	2bff      	cmp	r3, #255	; 0xff
 800b82c:	d111      	bne.n	800b852 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b832:	78ba      	ldrb	r2, [r7, #2]
 800b834:	429a      	cmp	r2, r3
 800b836:	d002      	beq.n	800b83e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b838:	78bb      	ldrb	r3, [r7, #2]
 800b83a:	2bff      	cmp	r3, #255	; 0xff
 800b83c:	d109      	bne.n	800b852 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b842:	787a      	ldrb	r2, [r7, #1]
 800b844:	429a      	cmp	r2, r3
 800b846:	d002      	beq.n	800b84e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b848:	787b      	ldrb	r3, [r7, #1]
 800b84a:	2bff      	cmp	r3, #255	; 0xff
 800b84c:	d101      	bne.n	800b852 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
 800b850:	e006      	b.n	800b860 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	3301      	adds	r3, #1
 800b856:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d9d6      	bls.n	800b80c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b85e:	23ff      	movs	r3, #255	; 0xff
}
 800b860:	4618      	mov	r0, r3
 800b862:	371c      	adds	r7, #28
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 fb89 	bl	800cf8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b87a:	2101      	movs	r1, #1
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f001 fca0 	bl	800d1c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af04      	add	r7, sp, #16
 800b892:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b894:	2302      	movs	r3, #2
 800b896:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d102      	bne.n	800b8ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2203      	movs	r2, #3
 800b8ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b0b      	cmp	r3, #11
 800b8b6:	f200 81b3 	bhi.w	800bc20 <USBH_Process+0x394>
 800b8ba:	a201      	add	r2, pc, #4	; (adr r2, 800b8c0 <USBH_Process+0x34>)
 800b8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c0:	0800b8f1 	.word	0x0800b8f1
 800b8c4:	0800b923 	.word	0x0800b923
 800b8c8:	0800b98b 	.word	0x0800b98b
 800b8cc:	0800bbbb 	.word	0x0800bbbb
 800b8d0:	0800bc21 	.word	0x0800bc21
 800b8d4:	0800ba2f 	.word	0x0800ba2f
 800b8d8:	0800bb61 	.word	0x0800bb61
 800b8dc:	0800ba65 	.word	0x0800ba65
 800b8e0:	0800ba85 	.word	0x0800ba85
 800b8e4:	0800baa5 	.word	0x0800baa5
 800b8e8:	0800bad3 	.word	0x0800bad3
 800b8ec:	0800bba3 	.word	0x0800bba3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 8193 	beq.w	800bc24 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b904:	20c8      	movs	r0, #200	; 0xc8
 800b906:	f001 fca6 	bl	800d256 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 fb99 	bl	800d042 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b920:	e180      	b.n	800bc24 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d107      	bne.n	800b93c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b93a:	e182      	b.n	800bc42 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b946:	d914      	bls.n	800b972 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b94e:	3301      	adds	r3, #1
 800b950:	b2da      	uxtb	r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d903      	bls.n	800b96a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	220d      	movs	r2, #13
 800b966:	701a      	strb	r2, [r3, #0]
      break;
 800b968:	e16b      	b.n	800bc42 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
      break;
 800b970:	e167      	b.n	800bc42 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b978:	f103 020a 	add.w	r2, r3, #10
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b982:	200a      	movs	r0, #10
 800b984:	f001 fc67 	bl	800d256 <USBH_Delay>
      break;
 800b988:	e15b      	b.n	800bc42 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d005      	beq.n	800b9a0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b99a:	2104      	movs	r1, #4
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b9a0:	2064      	movs	r0, #100	; 0x64
 800b9a2:	f001 fc58 	bl	800d256 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f001 fb26 	bl	800cff8 <USBH_LL_GetSpeed>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2205      	movs	r2, #5
 800b9ba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b9bc:	2100      	movs	r1, #0
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f001 f931 	bl	800cc26 <USBH_AllocPipe>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b9cc:	2180      	movs	r1, #128	; 0x80
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 f929 	bl	800cc26 <USBH_AllocPipe>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7919      	ldrb	r1, [r3, #4]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b9f0:	b292      	uxth	r2, r2
 800b9f2:	9202      	str	r2, [sp, #8]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	9201      	str	r2, [sp, #4]
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2280      	movs	r2, #128	; 0x80
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f001 f8e2 	bl	800cbc8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	7959      	ldrb	r1, [r3, #5]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ba18:	b292      	uxth	r2, r2
 800ba1a:	9202      	str	r2, [sp, #8]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	9201      	str	r2, [sp, #4]
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	4603      	mov	r3, r0
 800ba24:	2200      	movs	r2, #0
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f001 f8ce 	bl	800cbc8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ba2c:	e109      	b.n	800bc42 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f90c 	bl	800bc4c <USBH_HandleEnum>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
 800ba3a:	b2db      	uxtb	r3, r3
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 80f3 	bne.w	800bc28 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d103      	bne.n	800ba5c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2208      	movs	r2, #8
 800ba58:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ba5a:	e0e5      	b.n	800bc28 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2207      	movs	r2, #7
 800ba60:	701a      	strb	r2, [r3, #0]
      break;
 800ba62:	e0e1      	b.n	800bc28 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 80de 	beq.w	800bc2c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba76:	2101      	movs	r1, #1
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2208      	movs	r2, #8
 800ba80:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ba82:	e0d3      	b.n	800bc2c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fc20 	bl	800c2d4 <USBH_SetCfg>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 80ca 	bne.w	800bc30 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2209      	movs	r2, #9
 800baa0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800baa2:	e0c5      	b.n	800bc30 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00b      	beq.n	800baca <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bab2:	2101      	movs	r1, #1
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc30 	bl	800c31a <USBH_SetFeature>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	f040 80b9 	bne.w	800bc34 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	220a      	movs	r2, #10
 800bac6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bac8:	e0b4      	b.n	800bc34 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	220a      	movs	r2, #10
 800bace:	701a      	strb	r2, [r3, #0]
      break;
 800bad0:	e0b0      	b.n	800bc34 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 80ad 	beq.w	800bc38 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]
 800baea:	e016      	b.n	800bb1a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800baec:	7bfa      	ldrb	r2, [r7, #15]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	32de      	adds	r2, #222	; 0xde
 800baf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf6:	791a      	ldrb	r2, [r3, #4]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d108      	bne.n	800bb14 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bb02:	7bfa      	ldrb	r2, [r7, #15]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	32de      	adds	r2, #222	; 0xde
 800bb08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bb12:	e005      	b.n	800bb20 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	3301      	adds	r3, #1
 800bb18:	73fb      	strb	r3, [r7, #15]
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0e5      	beq.n	800baec <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d016      	beq.n	800bb58 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d109      	bne.n	800bb50 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2206      	movs	r2, #6
 800bb40:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb48:	2103      	movs	r1, #3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb4e:	e073      	b.n	800bc38 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	220d      	movs	r2, #13
 800bb54:	701a      	strb	r2, [r3, #0]
      break;
 800bb56:	e06f      	b.n	800bc38 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	220d      	movs	r2, #13
 800bb5c:	701a      	strb	r2, [r3, #0]
      break;
 800bb5e:	e06b      	b.n	800bc38 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d017      	beq.n	800bb9a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
 800bb76:	4603      	mov	r3, r0
 800bb78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d103      	bne.n	800bb8a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	220b      	movs	r2, #11
 800bb86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb88:	e058      	b.n	800bc3c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800bb8a:	7bbb      	ldrb	r3, [r7, #14]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d154      	bne.n	800bc3c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	220d      	movs	r2, #13
 800bb96:	701a      	strb	r2, [r3, #0]
      break;
 800bb98:	e050      	b.n	800bc3c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	220d      	movs	r2, #13
 800bb9e:	701a      	strb	r2, [r3, #0]
      break;
 800bba0:	e04c      	b.n	800bc3c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d049      	beq.n	800bc40 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	4798      	blx	r3
      }
      break;
 800bbb8:	e042      	b.n	800bc40 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff fd72 	bl	800b6ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d009      	beq.n	800bbe6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d005      	beq.n	800bbfc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbf6:	2105      	movs	r1, #5
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d107      	bne.n	800bc18 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff fe2b 	bl	800b86c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bc16:	e014      	b.n	800bc42 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 f9b7 	bl	800cf8c <USBH_LL_Start>
      break;
 800bc1e:	e010      	b.n	800bc42 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800bc20:	bf00      	nop
 800bc22:	e00e      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc24:	bf00      	nop
 800bc26:	e00c      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc28:	bf00      	nop
 800bc2a:	e00a      	b.n	800bc42 <USBH_Process+0x3b6>
    break;
 800bc2c:	bf00      	nop
 800bc2e:	e008      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc30:	bf00      	nop
 800bc32:	e006      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc34:	bf00      	nop
 800bc36:	e004      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc38:	bf00      	nop
 800bc3a:	e002      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc3c:	bf00      	nop
 800bc3e:	e000      	b.n	800bc42 <USBH_Process+0x3b6>
      break;
 800bc40:	bf00      	nop
  }
  return USBH_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af04      	add	r7, sp, #16
 800bc52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bc54:	2301      	movs	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	785b      	ldrb	r3, [r3, #1]
 800bc60:	2b07      	cmp	r3, #7
 800bc62:	f200 81c1 	bhi.w	800bfe8 <USBH_HandleEnum+0x39c>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <USBH_HandleEnum+0x20>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bd4b 	.word	0x0800bd4b
 800bc74:	0800bdb5 	.word	0x0800bdb5
 800bc78:	0800be43 	.word	0x0800be43
 800bc7c:	0800bead 	.word	0x0800bead
 800bc80:	0800bf1d 	.word	0x0800bf1d
 800bc84:	0800bf63 	.word	0x0800bf63
 800bc88:	0800bfa9 	.word	0x0800bfa9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bc8c:	2108      	movs	r1, #8
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa50 	bl	800c134 <USBH_Get_DevDesc>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d130      	bne.n	800bd00 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	7919      	ldrb	r1, [r3, #4]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	9202      	str	r2, [sp, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	9201      	str	r2, [sp, #4]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	4603      	mov	r3, r0
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 ff79 	bl	800cbc8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7959      	ldrb	r1, [r3, #5]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcea:	b292      	uxth	r2, r2
 800bcec:	9202      	str	r2, [sp, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 ff65 	bl	800cbc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bcfe:	e175      	b.n	800bfec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	f040 8172 	bne.w	800bfec <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd0e:	3301      	adds	r3, #1
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d903      	bls.n	800bd2a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	220d      	movs	r2, #13
 800bd26:	701a      	strb	r2, [r3, #0]
      break;
 800bd28:	e160      	b.n	800bfec <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	795b      	ldrb	r3, [r3, #5]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 ff99 	bl	800cc68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	791b      	ldrb	r3, [r3, #4]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 ff93 	bl	800cc68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
      break;
 800bd48:	e150      	b.n	800bfec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bd4a:	2112      	movs	r1, #18
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f9f1 	bl	800c134 <USBH_Get_DevDesc>
 800bd52:	4603      	mov	r3, r0
 800bd54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd62:	e145      	b.n	800bff0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	f040 8142 	bne.w	800bff0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd72:	3301      	adds	r3, #1
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d903      	bls.n	800bd8e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	220d      	movs	r2, #13
 800bd8a:	701a      	strb	r2, [r3, #0]
      break;
 800bd8c:	e130      	b.n	800bff0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	795b      	ldrb	r3, [r3, #5]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 ff67 	bl	800cc68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	791b      	ldrb	r3, [r3, #4]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 ff61 	bl	800cc68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	701a      	strb	r2, [r3, #0]
      break;
 800bdb2:	e11d      	b.n	800bff0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa68 	bl	800c28c <USBH_SetAddress>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d132      	bne.n	800be2c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bdc6:	2002      	movs	r0, #2
 800bdc8:	f001 fa45 	bl	800d256 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2203      	movs	r2, #3
 800bdd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7919      	ldrb	r1, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bdee:	b292      	uxth	r2, r2
 800bdf0:	9202      	str	r2, [sp, #8]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	9201      	str	r2, [sp, #4]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2280      	movs	r2, #128	; 0x80
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fee3 	bl	800cbc8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7959      	ldrb	r1, [r3, #5]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be16:	b292      	uxth	r2, r2
 800be18:	9202      	str	r2, [sp, #8]
 800be1a:	2200      	movs	r2, #0
 800be1c:	9201      	str	r2, [sp, #4]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	4603      	mov	r3, r0
 800be22:	2200      	movs	r2, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fecf 	bl	800cbc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800be2a:	e0e3      	b.n	800bff4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	2b03      	cmp	r3, #3
 800be30:	f040 80e0 	bne.w	800bff4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	220d      	movs	r2, #13
 800be38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	705a      	strb	r2, [r3, #1]
      break;
 800be40:	e0d8      	b.n	800bff4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800be42:	2109      	movs	r1, #9
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f99d 	bl	800c184 <USBH_Get_CfgDesc>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d103      	bne.n	800be5c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2204      	movs	r2, #4
 800be58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800be5a:	e0cd      	b.n	800bff8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	2b03      	cmp	r3, #3
 800be60:	f040 80ca 	bne.w	800bff8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be6a:	3301      	adds	r3, #1
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d903      	bls.n	800be86 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	220d      	movs	r2, #13
 800be82:	701a      	strb	r2, [r3, #0]
      break;
 800be84:	e0b8      	b.n	800bff8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	795b      	ldrb	r3, [r3, #5]
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 feeb 	bl	800cc68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	791b      	ldrb	r3, [r3, #4]
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fee5 	bl	800cc68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
      break;
 800beaa:	e0a5      	b.n	800bff8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f965 	bl	800c184 <USBH_Get_CfgDesc>
 800beba:	4603      	mov	r3, r0
 800bebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d103      	bne.n	800becc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2205      	movs	r2, #5
 800bec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800beca:	e097      	b.n	800bffc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	f040 8094 	bne.w	800bffc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800beda:	3301      	adds	r3, #1
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800beea:	2b03      	cmp	r3, #3
 800beec:	d903      	bls.n	800bef6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	220d      	movs	r2, #13
 800bef2:	701a      	strb	r2, [r3, #0]
      break;
 800bef4:	e082      	b.n	800bffc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	795b      	ldrb	r3, [r3, #5]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 feb3 	bl	800cc68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	791b      	ldrb	r3, [r3, #4]
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fead 	bl	800cc68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
      break;
 800bf1a:	e06f      	b.n	800bffc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d019      	beq.n	800bf5a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf32:	23ff      	movs	r3, #255	; 0xff
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f949 	bl	800c1cc <USBH_Get_StringDesc>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2206      	movs	r2, #6
 800bf48:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bf4a:	e059      	b.n	800c000 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d156      	bne.n	800c000 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2206      	movs	r2, #6
 800bf56:	705a      	strb	r2, [r3, #1]
      break;
 800bf58:	e052      	b.n	800c000 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2206      	movs	r2, #6
 800bf5e:	705a      	strb	r2, [r3, #1]
      break;
 800bf60:	e04e      	b.n	800c000 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d019      	beq.n	800bfa0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bf78:	23ff      	movs	r3, #255	; 0xff
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f926 	bl	800c1cc <USBH_Get_StringDesc>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d103      	bne.n	800bf92 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2207      	movs	r2, #7
 800bf8e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bf90:	e038      	b.n	800c004 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d135      	bne.n	800c004 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2207      	movs	r2, #7
 800bf9c:	705a      	strb	r2, [r3, #1]
      break;
 800bf9e:	e031      	b.n	800c004 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2207      	movs	r2, #7
 800bfa4:	705a      	strb	r2, [r3, #1]
      break;
 800bfa6:	e02d      	b.n	800c004 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d017      	beq.n	800bfe2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bfbe:	23ff      	movs	r3, #255	; 0xff
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f903 	bl	800c1cc <USBH_Get_StringDesc>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bfca:	7bbb      	ldrb	r3, [r7, #14]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bfd4:	e018      	b.n	800c008 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	d115      	bne.n	800c008 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe0:	e012      	b.n	800c008 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe6:	e00f      	b.n	800c008 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bfe8:	bf00      	nop
 800bfea:	e00e      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800bfec:	bf00      	nop
 800bfee:	e00c      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800bff0:	bf00      	nop
 800bff2:	e00a      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800bff4:	bf00      	nop
 800bff6:	e008      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800bff8:	bf00      	nop
 800bffa:	e006      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800bffc:	bf00      	nop
 800bffe:	e004      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800c000:	bf00      	nop
 800c002:	e002      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800c004:	bf00      	nop
 800c006:	e000      	b.n	800c00a <USBH_HandleEnum+0x3be>
      break;
 800c008:	bf00      	nop
  }
  return Status;
 800c00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c040:	1c5a      	adds	r2, r3, #1
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f804 	bl	800c056 <USBH_HandleSof>
}
 800c04e:	bf00      	nop
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b0b      	cmp	r3, #11
 800c066:	d10a      	bne.n	800c07e <USBH_HandleSof+0x28>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d005      	beq.n	800c07e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	4798      	blx	r3
  }
}
 800c07e:	bf00      	nop
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c096:	bf00      	nop
}
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c0b2:	bf00      	nop
}
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 ff58 	bl	800cfc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	791b      	ldrb	r3, [r3, #4]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fda5 	bl	800cc68 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	795b      	ldrb	r3, [r3, #5]
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fd9f 	bl	800cc68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af02      	add	r7, sp, #8
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c146:	78fb      	ldrb	r3, [r7, #3]
 800c148:	b29b      	uxth	r3, r3
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	4613      	mov	r3, r2
 800c14e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c152:	2100      	movs	r1, #0
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f864 	bl	800c222 <USBH_GetDescriptor>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c170:	78fa      	ldrb	r2, [r7, #3]
 800c172:	b292      	uxth	r2, r2
 800c174:	4619      	mov	r1, r3
 800c176:	f000 f918 	bl	800c3aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af02      	add	r7, sp, #8
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	331c      	adds	r3, #28
 800c194:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c196:	887b      	ldrh	r3, [r7, #2]
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f83d 	bl	800c222 <USBH_GetDescriptor>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	72fb      	strb	r3, [r7, #11]
 800c1ac:	7afb      	ldrb	r3, [r7, #11]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d107      	bne.n	800c1c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c1b8:	887a      	ldrh	r2, [r7, #2]
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 f964 	bl	800c48a <USBH_ParseCfgDesc>
  }

  return status;
 800c1c2:	7afb      	ldrb	r3, [r7, #11]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	607a      	str	r2, [r7, #4]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	460b      	mov	r3, r1
 800c1da:	72fb      	strb	r3, [r7, #11]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c1e0:	7afb      	ldrb	r3, [r7, #11]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c1e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c1f0:	893b      	ldrh	r3, [r7, #8]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f000 f812 	bl	800c222 <USBH_GetDescriptor>
 800c1fe:	4603      	mov	r3, r0
 800c200:	75fb      	strb	r3, [r7, #23]
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d107      	bne.n	800c218 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c20e:	893a      	ldrh	r2, [r7, #8]
 800c210:	6879      	ldr	r1, [r7, #4]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fa37 	bl	800c686 <USBH_ParseStringDesc>
  }

  return status;
 800c218:	7dfb      	ldrb	r3, [r7, #23]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	607b      	str	r3, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	72fb      	strb	r3, [r7, #11]
 800c230:	4613      	mov	r3, r2
 800c232:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	789b      	ldrb	r3, [r3, #2]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d11c      	bne.n	800c276 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c242:	b2da      	uxtb	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2206      	movs	r2, #6
 800c24c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	893a      	ldrh	r2, [r7, #8]
 800c252:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c254:	893b      	ldrh	r3, [r7, #8]
 800c256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c25e:	d104      	bne.n	800c26a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f240 4209 	movw	r2, #1033	; 0x409
 800c266:	829a      	strh	r2, [r3, #20]
 800c268:	e002      	b.n	800c270 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	8b3a      	ldrh	r2, [r7, #24]
 800c274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c276:	8b3b      	ldrh	r3, [r7, #24]
 800c278:	461a      	mov	r2, r3
 800c27a:	6879      	ldr	r1, [r7, #4]
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f000 fa50 	bl	800c722 <USBH_CtlReq>
 800c282:	4603      	mov	r3, r0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	789b      	ldrb	r3, [r3, #2]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d10f      	bne.n	800c2c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2205      	movs	r2, #5
 800c2aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fa2c 	bl	800c722 <USBH_CtlReq>
 800c2ca:	4603      	mov	r3, r0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	789b      	ldrb	r3, [r3, #2]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d10e      	bne.n	800c306 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2209      	movs	r2, #9
 800c2f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	887a      	ldrh	r2, [r7, #2]
 800c2f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c306:	2200      	movs	r2, #0
 800c308:	2100      	movs	r1, #0
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fa09 	bl	800c722 <USBH_CtlReq>
 800c310:	4603      	mov	r3, r0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3708      	adds	r7, #8
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
 800c322:	460b      	mov	r3, r1
 800c324:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	789b      	ldrb	r3, [r3, #2]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d10f      	bne.n	800c34e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2203      	movs	r2, #3
 800c338:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c33a:	78fb      	ldrb	r3, [r7, #3]
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c34e:	2200      	movs	r2, #0
 800c350:	2100      	movs	r1, #0
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f9e5 	bl	800c722 <USBH_CtlReq>
 800c358:	4603      	mov	r3, r0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b082      	sub	sp, #8
 800c366:	af00      	add	r7, sp, #0
 800c368:	6078      	str	r0, [r7, #4]
 800c36a:	460b      	mov	r3, r1
 800c36c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	789b      	ldrb	r3, [r3, #2]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d10f      	bne.n	800c396 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2202      	movs	r2, #2
 800c37a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c388:	78fb      	ldrb	r3, [r7, #3]
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c396:	2200      	movs	r2, #0
 800c398:	2100      	movs	r1, #0
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f9c1 	bl	800c722 <USBH_CtlReq>
 800c3a0:	4603      	mov	r3, r0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b085      	sub	sp, #20
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	785a      	ldrb	r2, [r3, #1]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	3302      	adds	r3, #2
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	3303      	adds	r3, #3
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	021b      	lsls	r3, r3, #8
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	791a      	ldrb	r2, [r3, #4]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	795a      	ldrb	r2, [r3, #5]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	799a      	ldrb	r2, [r3, #6]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	79da      	ldrb	r2, [r3, #7]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c404:	88fb      	ldrh	r3, [r7, #6]
 800c406:	2b08      	cmp	r3, #8
 800c408:	d939      	bls.n	800c47e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	3308      	adds	r3, #8
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	b29a      	uxth	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	3309      	adds	r3, #9
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	021b      	lsls	r3, r3, #8
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	4313      	orrs	r3, r2
 800c420:	b29a      	uxth	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	330a      	adds	r3, #10
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	330b      	adds	r3, #11
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	b29b      	uxth	r3, r3
 800c436:	021b      	lsls	r3, r3, #8
 800c438:	b29b      	uxth	r3, r3
 800c43a:	4313      	orrs	r3, r2
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	330c      	adds	r3, #12
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	b29a      	uxth	r2, r3
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	330d      	adds	r3, #13
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	b29b      	uxth	r3, r3
 800c452:	021b      	lsls	r3, r3, #8
 800c454:	b29b      	uxth	r3, r3
 800c456:	4313      	orrs	r3, r2
 800c458:	b29a      	uxth	r2, r3
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	7b9a      	ldrb	r2, [r3, #14]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	7bda      	ldrb	r2, [r3, #15]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	7c1a      	ldrb	r2, [r3, #16]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	7c5a      	ldrb	r2, [r3, #17]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	745a      	strb	r2, [r3, #17]
  }
}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b08a      	sub	sp, #40	; 0x28
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	4613      	mov	r3, r2
 800c496:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	785a      	ldrb	r2, [r3, #1]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	3302      	adds	r3, #2
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	3303      	adds	r3, #3
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	791a      	ldrb	r2, [r3, #4]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	795a      	ldrb	r2, [r3, #5]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	799a      	ldrb	r2, [r3, #6]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	79da      	ldrb	r2, [r3, #7]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	7a1a      	ldrb	r2, [r3, #8]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c500:	88fb      	ldrh	r3, [r7, #6]
 800c502:	2b09      	cmp	r3, #9
 800c504:	d95f      	bls.n	800c5c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c506:	2309      	movs	r3, #9
 800c508:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c50e:	e051      	b.n	800c5b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c510:	f107 0316 	add.w	r3, r7, #22
 800c514:	4619      	mov	r1, r3
 800c516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c518:	f000 f8e8 	bl	800c6ec <USBH_GetNextDesc>
 800c51c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	2b04      	cmp	r3, #4
 800c524:	d146      	bne.n	800c5b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c52a:	221a      	movs	r2, #26
 800c52c:	fb02 f303 	mul.w	r3, r2, r3
 800c530:	3308      	adds	r3, #8
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	4413      	add	r3, r2
 800c536:	3302      	adds	r3, #2
 800c538:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c53a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c53c:	69f8      	ldr	r0, [r7, #28]
 800c53e:	f000 f846 	bl	800c5ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c548:	2300      	movs	r3, #0
 800c54a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c54c:	e022      	b.n	800c594 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c54e:	f107 0316 	add.w	r3, r7, #22
 800c552:	4619      	mov	r1, r3
 800c554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c556:	f000 f8c9 	bl	800c6ec <USBH_GetNextDesc>
 800c55a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	785b      	ldrb	r3, [r3, #1]
 800c560:	2b05      	cmp	r3, #5
 800c562:	d117      	bne.n	800c594 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c568:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c56c:	3201      	adds	r2, #1
 800c56e:	00d2      	lsls	r2, r2, #3
 800c570:	211a      	movs	r1, #26
 800c572:	fb01 f303 	mul.w	r3, r1, r3
 800c576:	4413      	add	r3, r2
 800c578:	3308      	adds	r3, #8
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	4413      	add	r3, r2
 800c57e:	3304      	adds	r3, #4
 800c580:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c584:	69b8      	ldr	r0, [r7, #24]
 800c586:	f000 f851 	bl	800c62c <USBH_ParseEPDesc>
            ep_ix++;
 800c58a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c58e:	3301      	adds	r3, #1
 800c590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	791b      	ldrb	r3, [r3, #4]
 800c598:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d204      	bcs.n	800c5aa <USBH_ParseCfgDesc+0x120>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	885a      	ldrh	r2, [r3, #2]
 800c5a4:	8afb      	ldrh	r3, [r7, #22]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d8d1      	bhi.n	800c54e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c5aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c5b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d804      	bhi.n	800c5c6 <USBH_ParseCfgDesc+0x13c>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	885a      	ldrh	r2, [r3, #2]
 800c5c0:	8afb      	ldrh	r3, [r7, #22]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d8a4      	bhi.n	800c510 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c5c6:	bf00      	nop
 800c5c8:	3728      	adds	r7, #40	; 0x28
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b083      	sub	sp, #12
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781a      	ldrb	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	785a      	ldrb	r2, [r3, #1]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	789a      	ldrb	r2, [r3, #2]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	78da      	ldrb	r2, [r3, #3]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	791a      	ldrb	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	795a      	ldrb	r2, [r3, #5]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	799a      	ldrb	r2, [r3, #6]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	79da      	ldrb	r2, [r3, #7]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	7a1a      	ldrb	r2, [r3, #8]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	721a      	strb	r2, [r3, #8]
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	781a      	ldrb	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	785a      	ldrb	r2, [r3, #1]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	789a      	ldrb	r2, [r3, #2]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	78da      	ldrb	r2, [r3, #3]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	3304      	adds	r3, #4
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	3305      	adds	r3, #5
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	b29b      	uxth	r3, r3
 800c666:	021b      	lsls	r3, r3, #8
 800c668:	b29b      	uxth	r3, r3
 800c66a:	4313      	orrs	r3, r2
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	799a      	ldrb	r2, [r3, #6]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	719a      	strb	r2, [r3, #6]
}
 800c67a:	bf00      	nop
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c686:	b480      	push	{r7}
 800c688:	b087      	sub	sp, #28
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	4613      	mov	r3, r2
 800c692:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3301      	adds	r3, #1
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d120      	bne.n	800c6e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	1e9a      	subs	r2, r3, #2
 800c6a4:	88fb      	ldrh	r3, [r7, #6]
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	bf28      	it	cs
 800c6aa:	4613      	movcs	r3, r2
 800c6ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	82fb      	strh	r3, [r7, #22]
 800c6b8:	e00b      	b.n	800c6d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c6ba:	8afb      	ldrh	r3, [r7, #22]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	781a      	ldrb	r2, [r3, #0]
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c6cc:	8afb      	ldrh	r3, [r7, #22]
 800c6ce:	3302      	adds	r3, #2
 800c6d0:	82fb      	strh	r3, [r7, #22]
 800c6d2:	8afa      	ldrh	r2, [r7, #22]
 800c6d4:	8abb      	ldrh	r3, [r7, #20]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d3ef      	bcc.n	800c6ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
  }
}
 800c6e0:	bf00      	nop
 800c6e2:	371c      	adds	r7, #28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	881a      	ldrh	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	4413      	add	r3, r2
 800c702:	b29a      	uxth	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4413      	add	r3, r2
 800c712:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c714:	68fb      	ldr	r3, [r7, #12]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c722:	b580      	push	{r7, lr}
 800c724:	b086      	sub	sp, #24
 800c726:	af00      	add	r7, sp, #0
 800c728:	60f8      	str	r0, [r7, #12]
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	4613      	mov	r3, r2
 800c72e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c730:	2301      	movs	r3, #1
 800c732:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	789b      	ldrb	r3, [r3, #2]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d002      	beq.n	800c742 <USBH_CtlReq+0x20>
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d00f      	beq.n	800c760 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c740:	e027      	b.n	800c792 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	88fa      	ldrh	r2, [r7, #6]
 800c74c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2201      	movs	r2, #1
 800c752:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2202      	movs	r2, #2
 800c758:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c75a:	2301      	movs	r3, #1
 800c75c:	75fb      	strb	r3, [r7, #23]
      break;
 800c75e:	e018      	b.n	800c792 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 f81b 	bl	800c79c <USBH_HandleControl>
 800c766:	4603      	mov	r3, r0
 800c768:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <USBH_CtlReq+0x54>
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	2b03      	cmp	r3, #3
 800c774:	d106      	bne.n	800c784 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2201      	movs	r2, #1
 800c77a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	761a      	strb	r2, [r3, #24]
      break;
 800c782:	e005      	b.n	800c790 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c784:	7dfb      	ldrb	r3, [r7, #23]
 800c786:	2b02      	cmp	r3, #2
 800c788:	d102      	bne.n	800c790 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2201      	movs	r2, #1
 800c78e:	709a      	strb	r2, [r3, #2]
      break;
 800c790:	bf00      	nop
  }
  return status;
 800c792:	7dfb      	ldrb	r3, [r7, #23]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7e1b      	ldrb	r3, [r3, #24]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	2b0a      	cmp	r3, #10
 800c7b4:	f200 8158 	bhi.w	800ca68 <USBH_HandleControl+0x2cc>
 800c7b8:	a201      	add	r2, pc, #4	; (adr r2, 800c7c0 <USBH_HandleControl+0x24>)
 800c7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7be:	bf00      	nop
 800c7c0:	0800c7ed 	.word	0x0800c7ed
 800c7c4:	0800c807 	.word	0x0800c807
 800c7c8:	0800c871 	.word	0x0800c871
 800c7cc:	0800c897 	.word	0x0800c897
 800c7d0:	0800c8cf 	.word	0x0800c8cf
 800c7d4:	0800c8fb 	.word	0x0800c8fb
 800c7d8:	0800c94d 	.word	0x0800c94d
 800c7dc:	0800c96f 	.word	0x0800c96f
 800c7e0:	0800c9ab 	.word	0x0800c9ab
 800c7e4:	0800c9d3 	.word	0x0800c9d3
 800c7e8:	0800ca11 	.word	0x0800ca11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f103 0110 	add.w	r1, r3, #16
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	795b      	ldrb	r3, [r3, #5]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f945 	bl	800ca88 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2202      	movs	r2, #2
 800c802:	761a      	strb	r2, [r3, #24]
      break;
 800c804:	e13b      	b.n	800ca7e <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	795b      	ldrb	r3, [r3, #5]
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fcc5 	bl	800d19c <USBH_LL_GetURBState>
 800c812:	4603      	mov	r3, r0
 800c814:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c816:	7bbb      	ldrb	r3, [r7, #14]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d11e      	bne.n	800c85a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	7c1b      	ldrb	r3, [r3, #16]
 800c820:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c824:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	8adb      	ldrh	r3, [r3, #22]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c82e:	7b7b      	ldrb	r3, [r7, #13]
 800c830:	2b80      	cmp	r3, #128	; 0x80
 800c832:	d103      	bne.n	800c83c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2203      	movs	r2, #3
 800c838:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c83a:	e117      	b.n	800ca6c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2205      	movs	r2, #5
 800c840:	761a      	strb	r2, [r3, #24]
      break;
 800c842:	e113      	b.n	800ca6c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800c844:	7b7b      	ldrb	r3, [r7, #13]
 800c846:	2b80      	cmp	r3, #128	; 0x80
 800c848:	d103      	bne.n	800c852 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2209      	movs	r2, #9
 800c84e:	761a      	strb	r2, [r3, #24]
      break;
 800c850:	e10c      	b.n	800ca6c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2207      	movs	r2, #7
 800c856:	761a      	strb	r2, [r3, #24]
      break;
 800c858:	e108      	b.n	800ca6c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c85a:	7bbb      	ldrb	r3, [r7, #14]
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	d003      	beq.n	800c868 <USBH_HandleControl+0xcc>
 800c860:	7bbb      	ldrb	r3, [r7, #14]
 800c862:	2b02      	cmp	r3, #2
 800c864:	f040 8102 	bne.w	800ca6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	220b      	movs	r2, #11
 800c86c:	761a      	strb	r2, [r3, #24]
      break;
 800c86e:	e0fd      	b.n	800ca6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c876:	b29a      	uxth	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6899      	ldr	r1, [r3, #8]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	899a      	ldrh	r2, [r3, #12]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	791b      	ldrb	r3, [r3, #4]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f93c 	bl	800cb06 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2204      	movs	r2, #4
 800c892:	761a      	strb	r2, [r3, #24]
      break;
 800c894:	e0f3      	b.n	800ca7e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	791b      	ldrb	r3, [r3, #4]
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fc7d 	bl	800d19c <USBH_LL_GetURBState>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d102      	bne.n	800c8b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2209      	movs	r2, #9
 800c8b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c8b2:	7bbb      	ldrb	r3, [r7, #14]
 800c8b4:	2b05      	cmp	r3, #5
 800c8b6:	d102      	bne.n	800c8be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c8bc:	e0d8      	b.n	800ca70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c8be:	7bbb      	ldrb	r3, [r7, #14]
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	f040 80d5 	bne.w	800ca70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	220b      	movs	r2, #11
 800c8ca:	761a      	strb	r2, [r3, #24]
      break;
 800c8cc:	e0d0      	b.n	800ca70 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6899      	ldr	r1, [r3, #8]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	899a      	ldrh	r2, [r3, #12]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7958      	ldrb	r0, [r3, #5]
 800c8da:	2301      	movs	r3, #1
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	4603      	mov	r3, r0
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f8eb 	bl	800cabc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2206      	movs	r2, #6
 800c8f6:	761a      	strb	r2, [r3, #24]
      break;
 800c8f8:	e0c1      	b.n	800ca7e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	795b      	ldrb	r3, [r3, #5]
 800c8fe:	4619      	mov	r1, r3
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fc4b 	bl	800d19c <USBH_LL_GetURBState>
 800c906:	4603      	mov	r3, r0
 800c908:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d103      	bne.n	800c918 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2207      	movs	r2, #7
 800c914:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c916:	e0ad      	b.n	800ca74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b05      	cmp	r3, #5
 800c91c:	d105      	bne.n	800c92a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	220c      	movs	r2, #12
 800c922:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c924:	2303      	movs	r3, #3
 800c926:	73fb      	strb	r3, [r7, #15]
      break;
 800c928:	e0a4      	b.n	800ca74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c92a:	7bbb      	ldrb	r3, [r7, #14]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d103      	bne.n	800c938 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2205      	movs	r2, #5
 800c934:	761a      	strb	r2, [r3, #24]
      break;
 800c936:	e09d      	b.n	800ca74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800c938:	7bbb      	ldrb	r3, [r7, #14]
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	f040 809a 	bne.w	800ca74 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	220b      	movs	r2, #11
 800c944:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c946:	2302      	movs	r3, #2
 800c948:	73fb      	strb	r3, [r7, #15]
      break;
 800c94a:	e093      	b.n	800ca74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	791b      	ldrb	r3, [r3, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	2100      	movs	r1, #0
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f8d6 	bl	800cb06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c960:	b29a      	uxth	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2208      	movs	r2, #8
 800c96a:	761a      	strb	r2, [r3, #24]

      break;
 800c96c:	e087      	b.n	800ca7e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	791b      	ldrb	r3, [r3, #4]
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fc11 	bl	800d19c <USBH_LL_GetURBState>
 800c97a:	4603      	mov	r3, r0
 800c97c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c97e:	7bbb      	ldrb	r3, [r7, #14]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d105      	bne.n	800c990 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	220d      	movs	r2, #13
 800c988:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c98e:	e073      	b.n	800ca78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	2b04      	cmp	r3, #4
 800c994:	d103      	bne.n	800c99e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	220b      	movs	r2, #11
 800c99a:	761a      	strb	r2, [r3, #24]
      break;
 800c99c:	e06c      	b.n	800ca78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	2b05      	cmp	r3, #5
 800c9a2:	d169      	bne.n	800ca78 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a8:	e066      	b.n	800ca78 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	795a      	ldrb	r2, [r3, #5]
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f87f 	bl	800cabc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	220a      	movs	r2, #10
 800c9ce:	761a      	strb	r2, [r3, #24]
      break;
 800c9d0:	e055      	b.n	800ca7e <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	795b      	ldrb	r3, [r3, #5]
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fbdf 	bl	800d19c <USBH_LL_GetURBState>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d105      	bne.n	800c9f4 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	220d      	movs	r2, #13
 800c9f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c9f2:	e043      	b.n	800ca7c <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d103      	bne.n	800ca02 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2209      	movs	r2, #9
 800c9fe:	761a      	strb	r2, [r3, #24]
      break;
 800ca00:	e03c      	b.n	800ca7c <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	d139      	bne.n	800ca7c <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	220b      	movs	r2, #11
 800ca0c:	761a      	strb	r2, [r3, #24]
      break;
 800ca0e:	e035      	b.n	800ca7c <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7e5b      	ldrb	r3, [r3, #25]
 800ca14:	3301      	adds	r3, #1
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	765a      	strb	r2, [r3, #25]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	7e5b      	ldrb	r3, [r3, #25]
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d806      	bhi.n	800ca32 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ca30:	e025      	b.n	800ca7e <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca38:	2106      	movs	r1, #6
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	795b      	ldrb	r3, [r3, #5]
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f90c 	bl	800cc68 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	791b      	ldrb	r3, [r3, #4]
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f906 	bl	800cc68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ca62:	2302      	movs	r3, #2
 800ca64:	73fb      	strb	r3, [r7, #15]
      break;
 800ca66:	e00a      	b.n	800ca7e <USBH_HandleControl+0x2e2>

    default:
      break;
 800ca68:	bf00      	nop
 800ca6a:	e008      	b.n	800ca7e <USBH_HandleControl+0x2e2>
      break;
 800ca6c:	bf00      	nop
 800ca6e:	e006      	b.n	800ca7e <USBH_HandleControl+0x2e2>
      break;
 800ca70:	bf00      	nop
 800ca72:	e004      	b.n	800ca7e <USBH_HandleControl+0x2e2>
      break;
 800ca74:	bf00      	nop
 800ca76:	e002      	b.n	800ca7e <USBH_HandleControl+0x2e2>
      break;
 800ca78:	bf00      	nop
 800ca7a:	e000      	b.n	800ca7e <USBH_HandleControl+0x2e2>
      break;
 800ca7c:	bf00      	nop
  }

  return status;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af04      	add	r7, sp, #16
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	4613      	mov	r3, r2
 800ca94:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ca96:	79f9      	ldrb	r1, [r7, #7]
 800ca98:	2300      	movs	r3, #0
 800ca9a:	9303      	str	r3, [sp, #12]
 800ca9c:	2308      	movs	r3, #8
 800ca9e:	9302      	str	r3, [sp, #8]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	2300      	movs	r3, #0
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	2300      	movs	r3, #0
 800caaa:	2200      	movs	r2, #0
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f000 fb44 	bl	800d13a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af04      	add	r7, sp, #16
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	4611      	mov	r1, r2
 800cac8:	461a      	mov	r2, r3
 800caca:	460b      	mov	r3, r1
 800cacc:	80fb      	strh	r3, [r7, #6]
 800cace:	4613      	mov	r3, r2
 800cad0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cadc:	2300      	movs	r3, #0
 800cade:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cae0:	7979      	ldrb	r1, [r7, #5]
 800cae2:	7e3b      	ldrb	r3, [r7, #24]
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	88fb      	ldrh	r3, [r7, #6]
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	2301      	movs	r3, #1
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	2300      	movs	r3, #0
 800caf4:	2200      	movs	r2, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 fb1f 	bl	800d13a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b088      	sub	sp, #32
 800cb0a:	af04      	add	r7, sp, #16
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	4611      	mov	r1, r2
 800cb12:	461a      	mov	r2, r3
 800cb14:	460b      	mov	r3, r1
 800cb16:	80fb      	strh	r3, [r7, #6]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cb1c:	7979      	ldrb	r1, [r7, #5]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9303      	str	r3, [sp, #12]
 800cb22:	88fb      	ldrh	r3, [r7, #6]
 800cb24:	9302      	str	r3, [sp, #8]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	2201      	movs	r2, #1
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 fb01 	bl	800d13a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cb38:	2300      	movs	r3, #0

}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b088      	sub	sp, #32
 800cb46:	af04      	add	r7, sp, #16
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	4611      	mov	r1, r2
 800cb4e:	461a      	mov	r2, r3
 800cb50:	460b      	mov	r3, r1
 800cb52:	80fb      	strh	r3, [r7, #6]
 800cb54:	4613      	mov	r3, r2
 800cb56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cb62:	2300      	movs	r3, #0
 800cb64:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cb66:	7979      	ldrb	r1, [r7, #5]
 800cb68:	7e3b      	ldrb	r3, [r7, #24]
 800cb6a:	9303      	str	r3, [sp, #12]
 800cb6c:	88fb      	ldrh	r3, [r7, #6]
 800cb6e:	9302      	str	r3, [sp, #8]
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	9301      	str	r3, [sp, #4]
 800cb74:	2301      	movs	r3, #1
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	2302      	movs	r3, #2
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f000 fadc 	bl	800d13a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af04      	add	r7, sp, #16
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	4611      	mov	r1, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	80fb      	strh	r3, [r7, #6]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cba2:	7979      	ldrb	r1, [r7, #5]
 800cba4:	2300      	movs	r3, #0
 800cba6:	9303      	str	r3, [sp, #12]
 800cba8:	88fb      	ldrh	r3, [r7, #6]
 800cbaa:	9302      	str	r3, [sp, #8]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 fabe 	bl	800d13a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af04      	add	r7, sp, #16
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	4608      	mov	r0, r1
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	70fb      	strb	r3, [r7, #3]
 800cbda:	460b      	mov	r3, r1
 800cbdc:	70bb      	strb	r3, [r7, #2]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cbe2:	7878      	ldrb	r0, [r7, #1]
 800cbe4:	78ba      	ldrb	r2, [r7, #2]
 800cbe6:	78f9      	ldrb	r1, [r7, #3]
 800cbe8:	8b3b      	ldrh	r3, [r7, #24]
 800cbea:	9302      	str	r3, [sp, #8]
 800cbec:	7d3b      	ldrb	r3, [r7, #20]
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	7c3b      	ldrb	r3, [r7, #16]
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fa51 	bl	800d09e <USBH_LL_OpenPipe>

  return USBH_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	460b      	mov	r3, r1
 800cc10:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800cc12:	78fb      	ldrb	r3, [r7, #3]
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fa70 	bl	800d0fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f836 	bl	800cca4 <USBH_GetFreePipe>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cc3c:	89fb      	ldrh	r3, [r7, #14]
 800cc3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00a      	beq.n	800cc5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800cc46:	78fa      	ldrb	r2, [r7, #3]
 800cc48:	89fb      	ldrh	r3, [r7, #14]
 800cc4a:	f003 030f 	and.w	r3, r3, #15
 800cc4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc52:	6879      	ldr	r1, [r7, #4]
 800cc54:	33e0      	adds	r3, #224	; 0xe0
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	440b      	add	r3, r1
 800cc5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cc5c:	89fb      	ldrh	r3, [r7, #14]
 800cc5e:	b2db      	uxtb	r3, r3
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b083      	sub	sp, #12
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800cc74:	78fb      	ldrb	r3, [r7, #3]
 800cc76:	2b0a      	cmp	r3, #10
 800cc78:	d80d      	bhi.n	800cc96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cc7a:	78fb      	ldrb	r3, [r7, #3]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	33e0      	adds	r3, #224	; 0xe0
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	78fb      	ldrb	r3, [r7, #3]
 800cc88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	33e0      	adds	r3, #224	; 0xe0
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	440b      	add	r3, r1
 800cc94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ccac:	2300      	movs	r3, #0
 800ccae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
 800ccb4:	e00f      	b.n	800ccd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	33e0      	adds	r3, #224	; 0xe0
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	685b      	ldr	r3, [r3, #4]
 800ccc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	e007      	b.n	800cce0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	73fb      	strb	r3, [r7, #15]
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
 800ccd8:	2b0a      	cmp	r3, #10
 800ccda:	d9ec      	bls.n	800ccb6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ccdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	490e      	ldr	r1, [pc, #56]	; (800cd2c <MX_USB_HOST_Init+0x40>)
 800ccf4:	480e      	ldr	r0, [pc, #56]	; (800cd30 <MX_USB_HOST_Init+0x44>)
 800ccf6:	f7fe fc9f 	bl	800b638 <USBH_Init>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cd00:	f7f6 ff34 	bl	8003b6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800cd04:	490b      	ldr	r1, [pc, #44]	; (800cd34 <MX_USB_HOST_Init+0x48>)
 800cd06:	480a      	ldr	r0, [pc, #40]	; (800cd30 <MX_USB_HOST_Init+0x44>)
 800cd08:	f7fe fd24 	bl	800b754 <USBH_RegisterClass>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cd12:	f7f6 ff2b 	bl	8003b6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cd16:	4806      	ldr	r0, [pc, #24]	; (800cd30 <MX_USB_HOST_Init+0x44>)
 800cd18:	f7fe fda8 	bl	800b86c <USBH_Start>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d001      	beq.n	800cd26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cd22:	f7f6 ff23 	bl	8003b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cd26:	bf00      	nop
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0800cd4d 	.word	0x0800cd4d
 800cd30:	200011c4 	.word	0x200011c4
 800cd34:	2000000c 	.word	0x2000000c

0800cd38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cd3c:	4802      	ldr	r0, [pc, #8]	; (800cd48 <MX_USB_HOST_Process+0x10>)
 800cd3e:	f7fe fda5 	bl	800b88c <USBH_Process>
}
 800cd42:	bf00      	nop
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	200011c4 	.word	0x200011c4

0800cd4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d819      	bhi.n	800cd94 <USBH_UserProcess+0x48>
 800cd60:	a201      	add	r2, pc, #4	; (adr r2, 800cd68 <USBH_UserProcess+0x1c>)
 800cd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd66:	bf00      	nop
 800cd68:	0800cd95 	.word	0x0800cd95
 800cd6c:	0800cd85 	.word	0x0800cd85
 800cd70:	0800cd95 	.word	0x0800cd95
 800cd74:	0800cd8d 	.word	0x0800cd8d
 800cd78:	0800cd7d 	.word	0x0800cd7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cd7c:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <USBH_UserProcess+0x58>)
 800cd7e:	2203      	movs	r2, #3
 800cd80:	701a      	strb	r2, [r3, #0]
  break;
 800cd82:	e008      	b.n	800cd96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cd84:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <USBH_UserProcess+0x58>)
 800cd86:	2202      	movs	r2, #2
 800cd88:	701a      	strb	r2, [r3, #0]
  break;
 800cd8a:	e004      	b.n	800cd96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cd8c:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <USBH_UserProcess+0x58>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	701a      	strb	r2, [r3, #0]
  break;
 800cd92:	e000      	b.n	800cd96 <USBH_UserProcess+0x4a>

  default:
  break;
 800cd94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20000b88 	.word	0x20000b88

0800cda8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	; 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdb0:	f107 0314 	add.w	r3, r7, #20
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
 800cdb8:	605a      	str	r2, [r3, #4]
 800cdba:	609a      	str	r2, [r3, #8]
 800cdbc:	60da      	str	r2, [r3, #12]
 800cdbe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdc8:	d147      	bne.n	800ce5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdca:	2300      	movs	r3, #0
 800cdcc:	613b      	str	r3, [r7, #16]
 800cdce:	4b25      	ldr	r3, [pc, #148]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800cdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd2:	4a24      	ldr	r2, [pc, #144]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800cdd4:	f043 0301 	orr.w	r3, r3, #1
 800cdd8:	6313      	str	r3, [r2, #48]	; 0x30
 800cdda:	4b22      	ldr	r3, [pc, #136]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800cddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	613b      	str	r3, [r7, #16]
 800cde4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cde6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdec:	2300      	movs	r3, #0
 800cdee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cdf4:	f107 0314 	add.w	r3, r7, #20
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	481b      	ldr	r0, [pc, #108]	; (800ce68 <HAL_HCD_MspInit+0xc0>)
 800cdfc:	f7f8 fa3a 	bl	8005274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ce00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ce04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce06:	2302      	movs	r3, #2
 800ce08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce12:	230a      	movs	r3, #10
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce16:	f107 0314 	add.w	r3, r7, #20
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4812      	ldr	r0, [pc, #72]	; (800ce68 <HAL_HCD_MspInit+0xc0>)
 800ce1e:	f7f8 fa29 	bl	8005274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce22:	4b10      	ldr	r3, [pc, #64]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800ce24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce26:	4a0f      	ldr	r2, [pc, #60]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800ce28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce2c:	6353      	str	r3, [r2, #52]	; 0x34
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800ce34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce36:	4a0b      	ldr	r2, [pc, #44]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800ce38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce3c:	6453      	str	r3, [r2, #68]	; 0x44
 800ce3e:	4b09      	ldr	r3, [pc, #36]	; (800ce64 <HAL_HCD_MspInit+0xbc>)
 800ce40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce46:	60fb      	str	r3, [r7, #12]
 800ce48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	2043      	movs	r0, #67	; 0x43
 800ce50:	f7f8 f9d9 	bl	8005206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce54:	2043      	movs	r0, #67	; 0x43
 800ce56:	f7f8 f9f2 	bl	800523e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce5a:	bf00      	nop
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	40023800 	.word	0x40023800
 800ce68:	40020000 	.word	0x40020000

0800ce6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff f8d9 	bl	800c032 <USBH_LL_IncTimer>
}
 800ce80:	bf00      	nop
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7ff f911 	bl	800c0be <USBH_LL_Connect>
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff f91a 	bl	800c0ec <USBH_LL_Disconnect>
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
 800cecc:	4613      	mov	r3, r2
 800cece:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7ff f8cb 	bl	800c086 <USBH_LL_PortEnabled>
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff f8cb 	bl	800c0a2 <USBH_LL_PortDisabled>
}
 800cf0c:	bf00      	nop
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d12a      	bne.n	800cf7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cf26:	4a18      	ldr	r2, [pc, #96]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a15      	ldr	r2, [pc, #84]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf36:	4b14      	ldr	r3, [pc, #80]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cf3e:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf40:	2208      	movs	r2, #8
 800cf42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cf44:	4b10      	ldr	r3, [pc, #64]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf46:	2201      	movs	r2, #1
 800cf48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf4a:	4b0f      	ldr	r3, [pc, #60]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf52:	2202      	movs	r2, #2
 800cf54:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf56:	4b0c      	ldr	r3, [pc, #48]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cf5c:	480a      	ldr	r0, [pc, #40]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf5e:	f7f8 fb3c 	bl	80055da <HAL_HCD_Init>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cf68:	f7f6 fe00 	bl	8003b6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cf6c:	4806      	ldr	r0, [pc, #24]	; (800cf88 <USBH_LL_Init+0x74>)
 800cf6e:	f7f8 ff3f 	bl	8005df0 <HAL_HCD_GetCurrentFrame>
 800cf72:	4603      	mov	r3, r0
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f7ff f84c 	bl	800c014 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	2000159c 	.word	0x2000159c

0800cf8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf94:	2300      	movs	r3, #0
 800cf96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7f8 feac 	bl	8005d00 <HAL_HCD_Start>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cfac:	7bfb      	ldrb	r3, [r7, #15]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f000 f95c 	bl	800d26c <USBH_Get_USB_Status>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7f8 feb4 	bl	8005d46 <HAL_HCD_Stop>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cfe2:	7bfb      	ldrb	r3, [r7, #15]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 f941 	bl	800d26c <USBH_Get_USB_Status>
 800cfea:	4603      	mov	r3, r0
 800cfec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3710      	adds	r7, #16
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7f8 fefe 	bl	8005e0c <HAL_HCD_GetCurrentSpeed>
 800d010:	4603      	mov	r3, r0
 800d012:	2b01      	cmp	r3, #1
 800d014:	d007      	beq.n	800d026 <USBH_LL_GetSpeed+0x2e>
 800d016:	2b01      	cmp	r3, #1
 800d018:	d302      	bcc.n	800d020 <USBH_LL_GetSpeed+0x28>
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d006      	beq.n	800d02c <USBH_LL_GetSpeed+0x34>
 800d01e:	e008      	b.n	800d032 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d020:	2300      	movs	r3, #0
 800d022:	73fb      	strb	r3, [r7, #15]
    break;
 800d024:	e008      	b.n	800d038 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d026:	2301      	movs	r3, #1
 800d028:	73fb      	strb	r3, [r7, #15]
    break;
 800d02a:	e005      	b.n	800d038 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d02c:	2302      	movs	r3, #2
 800d02e:	73fb      	strb	r3, [r7, #15]
    break;
 800d030:	e002      	b.n	800d038 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d032:	2301      	movs	r3, #1
 800d034:	73fb      	strb	r3, [r7, #15]
    break;
 800d036:	bf00      	nop
  }
  return  speed;
 800d038:	7bfb      	ldrb	r3, [r7, #15]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d04e:	2300      	movs	r3, #0
 800d050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d058:	4618      	mov	r0, r3
 800d05a:	f7f8 fe91 	bl	8005d80 <HAL_HCD_ResetPort>
 800d05e:	4603      	mov	r3, r0
 800d060:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d062:	7bfb      	ldrb	r3, [r7, #15]
 800d064:	4618      	mov	r0, r3
 800d066:	f000 f901 	bl	800d26c <USBH_Get_USB_Status>
 800d06a:	4603      	mov	r3, r0
 800d06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	460b      	mov	r3, r1
 800d082:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d08a:	78fa      	ldrb	r2, [r7, #3]
 800d08c:	4611      	mov	r1, r2
 800d08e:	4618      	mov	r0, r3
 800d090:	f7f8 fe99 	bl	8005dc6 <HAL_HCD_HC_GetXferCount>
 800d094:	4603      	mov	r3, r0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d09e:	b590      	push	{r4, r7, lr}
 800d0a0:	b089      	sub	sp, #36	; 0x24
 800d0a2:	af04      	add	r7, sp, #16
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	4608      	mov	r0, r1
 800d0a8:	4611      	mov	r1, r2
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	70fb      	strb	r3, [r7, #3]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70bb      	strb	r3, [r7, #2]
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d0c6:	787c      	ldrb	r4, [r7, #1]
 800d0c8:	78ba      	ldrb	r2, [r7, #2]
 800d0ca:	78f9      	ldrb	r1, [r7, #3]
 800d0cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0ce:	9302      	str	r3, [sp, #8]
 800d0d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	4623      	mov	r3, r4
 800d0de:	f7f8 fade 	bl	800569e <HAL_HCD_HC_Init>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 f8bf 	bl	800d26c <USBH_Get_USB_Status>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd90      	pop	{r4, r7, pc}

0800d0fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	460b      	mov	r3, r1
 800d106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d116:	78fa      	ldrb	r2, [r7, #3]
 800d118:	4611      	mov	r1, r2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f8 fb57 	bl	80057ce <HAL_HCD_HC_Halt>
 800d120:	4603      	mov	r3, r0
 800d122:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d124:	7bfb      	ldrb	r3, [r7, #15]
 800d126:	4618      	mov	r0, r3
 800d128:	f000 f8a0 	bl	800d26c <USBH_Get_USB_Status>
 800d12c:	4603      	mov	r3, r0
 800d12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d130:	7bbb      	ldrb	r3, [r7, #14]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d13a:	b590      	push	{r4, r7, lr}
 800d13c:	b089      	sub	sp, #36	; 0x24
 800d13e:	af04      	add	r7, sp, #16
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	4608      	mov	r0, r1
 800d144:	4611      	mov	r1, r2
 800d146:	461a      	mov	r2, r3
 800d148:	4603      	mov	r3, r0
 800d14a:	70fb      	strb	r3, [r7, #3]
 800d14c:	460b      	mov	r3, r1
 800d14e:	70bb      	strb	r3, [r7, #2]
 800d150:	4613      	mov	r3, r2
 800d152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d162:	787c      	ldrb	r4, [r7, #1]
 800d164:	78ba      	ldrb	r2, [r7, #2]
 800d166:	78f9      	ldrb	r1, [r7, #3]
 800d168:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d16c:	9303      	str	r3, [sp, #12]
 800d16e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d170:	9302      	str	r3, [sp, #8]
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	4623      	mov	r3, r4
 800d17e:	f7f8 fb49 	bl	8005814 <HAL_HCD_HC_SubmitRequest>
 800d182:	4603      	mov	r3, r0
 800d184:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d186:	7bfb      	ldrb	r3, [r7, #15]
 800d188:	4618      	mov	r0, r3
 800d18a:	f000 f86f 	bl	800d26c <USBH_Get_USB_Status>
 800d18e:	4603      	mov	r3, r0
 800d190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d192:	7bbb      	ldrb	r3, [r7, #14]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd90      	pop	{r4, r7, pc}

0800d19c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b082      	sub	sp, #8
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f8 fdf2 	bl	8005d9c <HAL_HCD_HC_GetURBState>
 800d1b8:	4603      	mov	r3, r0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d103      	bne.n	800d1e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 f872 	bl	800d2c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d1e0:	20c8      	movs	r0, #200	; 0xc8
 800d1e2:	f7f7 ff13 	bl	800500c <HAL_Delay>
  return USBH_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	70fb      	strb	r3, [r7, #3]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d206:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d208:	78fa      	ldrb	r2, [r7, #3]
 800d20a:	68f9      	ldr	r1, [r7, #12]
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	440b      	add	r3, r1
 800d216:	333b      	adds	r3, #59	; 0x3b
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00a      	beq.n	800d234 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d21e:	78fa      	ldrb	r2, [r7, #3]
 800d220:	68f9      	ldr	r1, [r7, #12]
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	00db      	lsls	r3, r3, #3
 800d22a:	440b      	add	r3, r1
 800d22c:	3350      	adds	r3, #80	; 0x50
 800d22e:	78ba      	ldrb	r2, [r7, #2]
 800d230:	701a      	strb	r2, [r3, #0]
 800d232:	e009      	b.n	800d248 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d234:	78fa      	ldrb	r2, [r7, #3]
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	440b      	add	r3, r1
 800d242:	3351      	adds	r3, #81	; 0x51
 800d244:	78ba      	ldrb	r2, [r7, #2]
 800d246:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d248:	2300      	movs	r3, #0
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b082      	sub	sp, #8
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7f7 fed4 	bl	800500c <HAL_Delay>
}
 800d264:	bf00      	nop
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	2b03      	cmp	r3, #3
 800d27e:	d817      	bhi.n	800d2b0 <USBH_Get_USB_Status+0x44>
 800d280:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <USBH_Get_USB_Status+0x1c>)
 800d282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d286:	bf00      	nop
 800d288:	0800d299 	.word	0x0800d299
 800d28c:	0800d29f 	.word	0x0800d29f
 800d290:	0800d2a5 	.word	0x0800d2a5
 800d294:	0800d2ab 	.word	0x0800d2ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
    break;
 800d29c:	e00b      	b.n	800d2b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d29e:	2302      	movs	r3, #2
 800d2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a2:	e008      	b.n	800d2b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a8:	e005      	b.n	800d2b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ae:	e002      	b.n	800d2b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b4:	bf00      	nop
  }
  return usb_status;
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3714      	adds	r7, #20
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d2ce:	79fb      	ldrb	r3, [r7, #7]
 800d2d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d2d2:	79fb      	ldrb	r3, [r7, #7]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d102      	bne.n	800d2de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	73fb      	strb	r3, [r7, #15]
 800d2dc:	e001      	b.n	800d2e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800d2e2:	7bfb      	ldrb	r3, [r7, #15]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	4803      	ldr	r0, [pc, #12]	; (800d2f8 <MX_DriverVbusFS+0x34>)
 800d2ea:	f7f8 f95d 	bl	80055a8 <HAL_GPIO_WritePin>
}
 800d2ee:	bf00      	nop
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	40020800 	.word	0x40020800

0800d2fc <__assert_func>:
 800d2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2fe:	461c      	mov	r4, r3
 800d300:	4b09      	ldr	r3, [pc, #36]	; (800d328 <__assert_func+0x2c>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4605      	mov	r5, r0
 800d306:	68d8      	ldr	r0, [r3, #12]
 800d308:	b152      	cbz	r2, 800d320 <__assert_func+0x24>
 800d30a:	4b08      	ldr	r3, [pc, #32]	; (800d32c <__assert_func+0x30>)
 800d30c:	9100      	str	r1, [sp, #0]
 800d30e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d312:	4907      	ldr	r1, [pc, #28]	; (800d330 <__assert_func+0x34>)
 800d314:	462b      	mov	r3, r5
 800d316:	4622      	mov	r2, r4
 800d318:	f000 f814 	bl	800d344 <fiprintf>
 800d31c:	f001 f83e 	bl	800e39c <abort>
 800d320:	4b04      	ldr	r3, [pc, #16]	; (800d334 <__assert_func+0x38>)
 800d322:	461a      	mov	r2, r3
 800d324:	e7f2      	b.n	800d30c <__assert_func+0x10>
 800d326:	bf00      	nop
 800d328:	2000002c 	.word	0x2000002c
 800d32c:	08010720 	.word	0x08010720
 800d330:	0801072d 	.word	0x0801072d
 800d334:	0801075b 	.word	0x0801075b

0800d338 <__errno>:
 800d338:	4b01      	ldr	r3, [pc, #4]	; (800d340 <__errno+0x8>)
 800d33a:	6818      	ldr	r0, [r3, #0]
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	2000002c 	.word	0x2000002c

0800d344 <fiprintf>:
 800d344:	b40e      	push	{r1, r2, r3}
 800d346:	b503      	push	{r0, r1, lr}
 800d348:	4601      	mov	r1, r0
 800d34a:	ab03      	add	r3, sp, #12
 800d34c:	4805      	ldr	r0, [pc, #20]	; (800d364 <fiprintf+0x20>)
 800d34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d352:	6800      	ldr	r0, [r0, #0]
 800d354:	9301      	str	r3, [sp, #4]
 800d356:	f000 f915 	bl	800d584 <_vfiprintf_r>
 800d35a:	b002      	add	sp, #8
 800d35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d360:	b003      	add	sp, #12
 800d362:	4770      	bx	lr
 800d364:	2000002c 	.word	0x2000002c

0800d368 <__libc_init_array>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	4e0d      	ldr	r6, [pc, #52]	; (800d3a0 <__libc_init_array+0x38>)
 800d36c:	4c0d      	ldr	r4, [pc, #52]	; (800d3a4 <__libc_init_array+0x3c>)
 800d36e:	1ba4      	subs	r4, r4, r6
 800d370:	10a4      	asrs	r4, r4, #2
 800d372:	2500      	movs	r5, #0
 800d374:	42a5      	cmp	r5, r4
 800d376:	d109      	bne.n	800d38c <__libc_init_array+0x24>
 800d378:	4e0b      	ldr	r6, [pc, #44]	; (800d3a8 <__libc_init_array+0x40>)
 800d37a:	4c0c      	ldr	r4, [pc, #48]	; (800d3ac <__libc_init_array+0x44>)
 800d37c:	f002 fe1e 	bl	800ffbc <_init>
 800d380:	1ba4      	subs	r4, r4, r6
 800d382:	10a4      	asrs	r4, r4, #2
 800d384:	2500      	movs	r5, #0
 800d386:	42a5      	cmp	r5, r4
 800d388:	d105      	bne.n	800d396 <__libc_init_array+0x2e>
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d390:	4798      	blx	r3
 800d392:	3501      	adds	r5, #1
 800d394:	e7ee      	b.n	800d374 <__libc_init_array+0xc>
 800d396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d39a:	4798      	blx	r3
 800d39c:	3501      	adds	r5, #1
 800d39e:	e7f2      	b.n	800d386 <__libc_init_array+0x1e>
 800d3a0:	08010a28 	.word	0x08010a28
 800d3a4:	08010a28 	.word	0x08010a28
 800d3a8:	08010a28 	.word	0x08010a28
 800d3ac:	08010a2c 	.word	0x08010a2c

0800d3b0 <malloc>:
 800d3b0:	4b02      	ldr	r3, [pc, #8]	; (800d3bc <malloc+0xc>)
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	6818      	ldr	r0, [r3, #0]
 800d3b6:	f000 b861 	b.w	800d47c <_malloc_r>
 800d3ba:	bf00      	nop
 800d3bc:	2000002c 	.word	0x2000002c

0800d3c0 <free>:
 800d3c0:	4b02      	ldr	r3, [pc, #8]	; (800d3cc <free+0xc>)
 800d3c2:	4601      	mov	r1, r0
 800d3c4:	6818      	ldr	r0, [r3, #0]
 800d3c6:	f000 b80b 	b.w	800d3e0 <_free_r>
 800d3ca:	bf00      	nop
 800d3cc:	2000002c 	.word	0x2000002c

0800d3d0 <memset>:
 800d3d0:	4402      	add	r2, r0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d100      	bne.n	800d3da <memset+0xa>
 800d3d8:	4770      	bx	lr
 800d3da:	f803 1b01 	strb.w	r1, [r3], #1
 800d3de:	e7f9      	b.n	800d3d4 <memset+0x4>

0800d3e0 <_free_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	2900      	cmp	r1, #0
 800d3e6:	d045      	beq.n	800d474 <_free_r+0x94>
 800d3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3ec:	1f0c      	subs	r4, r1, #4
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bfb8      	it	lt
 800d3f2:	18e4      	addlt	r4, r4, r3
 800d3f4:	f002 f830 	bl	800f458 <__malloc_lock>
 800d3f8:	4a1f      	ldr	r2, [pc, #124]	; (800d478 <_free_r+0x98>)
 800d3fa:	6813      	ldr	r3, [r2, #0]
 800d3fc:	4610      	mov	r0, r2
 800d3fe:	b933      	cbnz	r3, 800d40e <_free_r+0x2e>
 800d400:	6063      	str	r3, [r4, #4]
 800d402:	6014      	str	r4, [r2, #0]
 800d404:	4628      	mov	r0, r5
 800d406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d40a:	f002 b826 	b.w	800f45a <__malloc_unlock>
 800d40e:	42a3      	cmp	r3, r4
 800d410:	d90c      	bls.n	800d42c <_free_r+0x4c>
 800d412:	6821      	ldr	r1, [r4, #0]
 800d414:	1862      	adds	r2, r4, r1
 800d416:	4293      	cmp	r3, r2
 800d418:	bf04      	itt	eq
 800d41a:	681a      	ldreq	r2, [r3, #0]
 800d41c:	685b      	ldreq	r3, [r3, #4]
 800d41e:	6063      	str	r3, [r4, #4]
 800d420:	bf04      	itt	eq
 800d422:	1852      	addeq	r2, r2, r1
 800d424:	6022      	streq	r2, [r4, #0]
 800d426:	6004      	str	r4, [r0, #0]
 800d428:	e7ec      	b.n	800d404 <_free_r+0x24>
 800d42a:	4613      	mov	r3, r2
 800d42c:	685a      	ldr	r2, [r3, #4]
 800d42e:	b10a      	cbz	r2, 800d434 <_free_r+0x54>
 800d430:	42a2      	cmp	r2, r4
 800d432:	d9fa      	bls.n	800d42a <_free_r+0x4a>
 800d434:	6819      	ldr	r1, [r3, #0]
 800d436:	1858      	adds	r0, r3, r1
 800d438:	42a0      	cmp	r0, r4
 800d43a:	d10b      	bne.n	800d454 <_free_r+0x74>
 800d43c:	6820      	ldr	r0, [r4, #0]
 800d43e:	4401      	add	r1, r0
 800d440:	1858      	adds	r0, r3, r1
 800d442:	4282      	cmp	r2, r0
 800d444:	6019      	str	r1, [r3, #0]
 800d446:	d1dd      	bne.n	800d404 <_free_r+0x24>
 800d448:	6810      	ldr	r0, [r2, #0]
 800d44a:	6852      	ldr	r2, [r2, #4]
 800d44c:	605a      	str	r2, [r3, #4]
 800d44e:	4401      	add	r1, r0
 800d450:	6019      	str	r1, [r3, #0]
 800d452:	e7d7      	b.n	800d404 <_free_r+0x24>
 800d454:	d902      	bls.n	800d45c <_free_r+0x7c>
 800d456:	230c      	movs	r3, #12
 800d458:	602b      	str	r3, [r5, #0]
 800d45a:	e7d3      	b.n	800d404 <_free_r+0x24>
 800d45c:	6820      	ldr	r0, [r4, #0]
 800d45e:	1821      	adds	r1, r4, r0
 800d460:	428a      	cmp	r2, r1
 800d462:	bf04      	itt	eq
 800d464:	6811      	ldreq	r1, [r2, #0]
 800d466:	6852      	ldreq	r2, [r2, #4]
 800d468:	6062      	str	r2, [r4, #4]
 800d46a:	bf04      	itt	eq
 800d46c:	1809      	addeq	r1, r1, r0
 800d46e:	6021      	streq	r1, [r4, #0]
 800d470:	605c      	str	r4, [r3, #4]
 800d472:	e7c7      	b.n	800d404 <_free_r+0x24>
 800d474:	bd38      	pop	{r3, r4, r5, pc}
 800d476:	bf00      	nop
 800d478:	20000b8c 	.word	0x20000b8c

0800d47c <_malloc_r>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	1ccd      	adds	r5, r1, #3
 800d480:	f025 0503 	bic.w	r5, r5, #3
 800d484:	3508      	adds	r5, #8
 800d486:	2d0c      	cmp	r5, #12
 800d488:	bf38      	it	cc
 800d48a:	250c      	movcc	r5, #12
 800d48c:	2d00      	cmp	r5, #0
 800d48e:	4606      	mov	r6, r0
 800d490:	db01      	blt.n	800d496 <_malloc_r+0x1a>
 800d492:	42a9      	cmp	r1, r5
 800d494:	d903      	bls.n	800d49e <_malloc_r+0x22>
 800d496:	230c      	movs	r3, #12
 800d498:	6033      	str	r3, [r6, #0]
 800d49a:	2000      	movs	r0, #0
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
 800d49e:	f001 ffdb 	bl	800f458 <__malloc_lock>
 800d4a2:	4a21      	ldr	r2, [pc, #132]	; (800d528 <_malloc_r+0xac>)
 800d4a4:	6814      	ldr	r4, [r2, #0]
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	b991      	cbnz	r1, 800d4d0 <_malloc_r+0x54>
 800d4aa:	4c20      	ldr	r4, [pc, #128]	; (800d52c <_malloc_r+0xb0>)
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	b91b      	cbnz	r3, 800d4b8 <_malloc_r+0x3c>
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f000 fe69 	bl	800e188 <_sbrk_r>
 800d4b6:	6020      	str	r0, [r4, #0]
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f000 fe64 	bl	800e188 <_sbrk_r>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d124      	bne.n	800d50e <_malloc_r+0x92>
 800d4c4:	230c      	movs	r3, #12
 800d4c6:	6033      	str	r3, [r6, #0]
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f001 ffc6 	bl	800f45a <__malloc_unlock>
 800d4ce:	e7e4      	b.n	800d49a <_malloc_r+0x1e>
 800d4d0:	680b      	ldr	r3, [r1, #0]
 800d4d2:	1b5b      	subs	r3, r3, r5
 800d4d4:	d418      	bmi.n	800d508 <_malloc_r+0x8c>
 800d4d6:	2b0b      	cmp	r3, #11
 800d4d8:	d90f      	bls.n	800d4fa <_malloc_r+0x7e>
 800d4da:	600b      	str	r3, [r1, #0]
 800d4dc:	50cd      	str	r5, [r1, r3]
 800d4de:	18cc      	adds	r4, r1, r3
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	f001 ffba 	bl	800f45a <__malloc_unlock>
 800d4e6:	f104 000b 	add.w	r0, r4, #11
 800d4ea:	1d23      	adds	r3, r4, #4
 800d4ec:	f020 0007 	bic.w	r0, r0, #7
 800d4f0:	1ac3      	subs	r3, r0, r3
 800d4f2:	d0d3      	beq.n	800d49c <_malloc_r+0x20>
 800d4f4:	425a      	negs	r2, r3
 800d4f6:	50e2      	str	r2, [r4, r3]
 800d4f8:	e7d0      	b.n	800d49c <_malloc_r+0x20>
 800d4fa:	428c      	cmp	r4, r1
 800d4fc:	684b      	ldr	r3, [r1, #4]
 800d4fe:	bf16      	itet	ne
 800d500:	6063      	strne	r3, [r4, #4]
 800d502:	6013      	streq	r3, [r2, #0]
 800d504:	460c      	movne	r4, r1
 800d506:	e7eb      	b.n	800d4e0 <_malloc_r+0x64>
 800d508:	460c      	mov	r4, r1
 800d50a:	6849      	ldr	r1, [r1, #4]
 800d50c:	e7cc      	b.n	800d4a8 <_malloc_r+0x2c>
 800d50e:	1cc4      	adds	r4, r0, #3
 800d510:	f024 0403 	bic.w	r4, r4, #3
 800d514:	42a0      	cmp	r0, r4
 800d516:	d005      	beq.n	800d524 <_malloc_r+0xa8>
 800d518:	1a21      	subs	r1, r4, r0
 800d51a:	4630      	mov	r0, r6
 800d51c:	f000 fe34 	bl	800e188 <_sbrk_r>
 800d520:	3001      	adds	r0, #1
 800d522:	d0cf      	beq.n	800d4c4 <_malloc_r+0x48>
 800d524:	6025      	str	r5, [r4, #0]
 800d526:	e7db      	b.n	800d4e0 <_malloc_r+0x64>
 800d528:	20000b8c 	.word	0x20000b8c
 800d52c:	20000b90 	.word	0x20000b90

0800d530 <__sfputc_r>:
 800d530:	6893      	ldr	r3, [r2, #8]
 800d532:	3b01      	subs	r3, #1
 800d534:	2b00      	cmp	r3, #0
 800d536:	b410      	push	{r4}
 800d538:	6093      	str	r3, [r2, #8]
 800d53a:	da08      	bge.n	800d54e <__sfputc_r+0x1e>
 800d53c:	6994      	ldr	r4, [r2, #24]
 800d53e:	42a3      	cmp	r3, r4
 800d540:	db01      	blt.n	800d546 <__sfputc_r+0x16>
 800d542:	290a      	cmp	r1, #10
 800d544:	d103      	bne.n	800d54e <__sfputc_r+0x1e>
 800d546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d54a:	f000 be67 	b.w	800e21c <__swbuf_r>
 800d54e:	6813      	ldr	r3, [r2, #0]
 800d550:	1c58      	adds	r0, r3, #1
 800d552:	6010      	str	r0, [r2, #0]
 800d554:	7019      	strb	r1, [r3, #0]
 800d556:	4608      	mov	r0, r1
 800d558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <__sfputs_r>:
 800d55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d560:	4606      	mov	r6, r0
 800d562:	460f      	mov	r7, r1
 800d564:	4614      	mov	r4, r2
 800d566:	18d5      	adds	r5, r2, r3
 800d568:	42ac      	cmp	r4, r5
 800d56a:	d101      	bne.n	800d570 <__sfputs_r+0x12>
 800d56c:	2000      	movs	r0, #0
 800d56e:	e007      	b.n	800d580 <__sfputs_r+0x22>
 800d570:	463a      	mov	r2, r7
 800d572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d576:	4630      	mov	r0, r6
 800d578:	f7ff ffda 	bl	800d530 <__sfputc_r>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d1f3      	bne.n	800d568 <__sfputs_r+0xa>
 800d580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d584 <_vfiprintf_r>:
 800d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d588:	460c      	mov	r4, r1
 800d58a:	b09d      	sub	sp, #116	; 0x74
 800d58c:	4617      	mov	r7, r2
 800d58e:	461d      	mov	r5, r3
 800d590:	4606      	mov	r6, r0
 800d592:	b118      	cbz	r0, 800d59c <_vfiprintf_r+0x18>
 800d594:	6983      	ldr	r3, [r0, #24]
 800d596:	b90b      	cbnz	r3, 800d59c <_vfiprintf_r+0x18>
 800d598:	f001 fe3e 	bl	800f218 <__sinit>
 800d59c:	4b7c      	ldr	r3, [pc, #496]	; (800d790 <_vfiprintf_r+0x20c>)
 800d59e:	429c      	cmp	r4, r3
 800d5a0:	d158      	bne.n	800d654 <_vfiprintf_r+0xd0>
 800d5a2:	6874      	ldr	r4, [r6, #4]
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	0718      	lsls	r0, r3, #28
 800d5a8:	d55e      	bpl.n	800d668 <_vfiprintf_r+0xe4>
 800d5aa:	6923      	ldr	r3, [r4, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d05b      	beq.n	800d668 <_vfiprintf_r+0xe4>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b4:	2320      	movs	r3, #32
 800d5b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ba:	2330      	movs	r3, #48	; 0x30
 800d5bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5c0:	9503      	str	r5, [sp, #12]
 800d5c2:	f04f 0b01 	mov.w	fp, #1
 800d5c6:	46b8      	mov	r8, r7
 800d5c8:	4645      	mov	r5, r8
 800d5ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d5ce:	b10b      	cbz	r3, 800d5d4 <_vfiprintf_r+0x50>
 800d5d0:	2b25      	cmp	r3, #37	; 0x25
 800d5d2:	d154      	bne.n	800d67e <_vfiprintf_r+0xfa>
 800d5d4:	ebb8 0a07 	subs.w	sl, r8, r7
 800d5d8:	d00b      	beq.n	800d5f2 <_vfiprintf_r+0x6e>
 800d5da:	4653      	mov	r3, sl
 800d5dc:	463a      	mov	r2, r7
 800d5de:	4621      	mov	r1, r4
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ffbc 	bl	800d55e <__sfputs_r>
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	f000 80c2 	beq.w	800d770 <_vfiprintf_r+0x1ec>
 800d5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ee:	4453      	add	r3, sl
 800d5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5f2:	f898 3000 	ldrb.w	r3, [r8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 80ba 	beq.w	800d770 <_vfiprintf_r+0x1ec>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d606:	9304      	str	r3, [sp, #16]
 800d608:	9307      	str	r3, [sp, #28]
 800d60a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d60e:	931a      	str	r3, [sp, #104]	; 0x68
 800d610:	46a8      	mov	r8, r5
 800d612:	2205      	movs	r2, #5
 800d614:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d618:	485e      	ldr	r0, [pc, #376]	; (800d794 <_vfiprintf_r+0x210>)
 800d61a:	f7f4 fd81 	bl	8002120 <memchr>
 800d61e:	9b04      	ldr	r3, [sp, #16]
 800d620:	bb78      	cbnz	r0, 800d682 <_vfiprintf_r+0xfe>
 800d622:	06d9      	lsls	r1, r3, #27
 800d624:	bf44      	itt	mi
 800d626:	2220      	movmi	r2, #32
 800d628:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d62c:	071a      	lsls	r2, r3, #28
 800d62e:	bf44      	itt	mi
 800d630:	222b      	movmi	r2, #43	; 0x2b
 800d632:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d636:	782a      	ldrb	r2, [r5, #0]
 800d638:	2a2a      	cmp	r2, #42	; 0x2a
 800d63a:	d02a      	beq.n	800d692 <_vfiprintf_r+0x10e>
 800d63c:	9a07      	ldr	r2, [sp, #28]
 800d63e:	46a8      	mov	r8, r5
 800d640:	2000      	movs	r0, #0
 800d642:	250a      	movs	r5, #10
 800d644:	4641      	mov	r1, r8
 800d646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64a:	3b30      	subs	r3, #48	; 0x30
 800d64c:	2b09      	cmp	r3, #9
 800d64e:	d969      	bls.n	800d724 <_vfiprintf_r+0x1a0>
 800d650:	b360      	cbz	r0, 800d6ac <_vfiprintf_r+0x128>
 800d652:	e024      	b.n	800d69e <_vfiprintf_r+0x11a>
 800d654:	4b50      	ldr	r3, [pc, #320]	; (800d798 <_vfiprintf_r+0x214>)
 800d656:	429c      	cmp	r4, r3
 800d658:	d101      	bne.n	800d65e <_vfiprintf_r+0xda>
 800d65a:	68b4      	ldr	r4, [r6, #8]
 800d65c:	e7a2      	b.n	800d5a4 <_vfiprintf_r+0x20>
 800d65e:	4b4f      	ldr	r3, [pc, #316]	; (800d79c <_vfiprintf_r+0x218>)
 800d660:	429c      	cmp	r4, r3
 800d662:	bf08      	it	eq
 800d664:	68f4      	ldreq	r4, [r6, #12]
 800d666:	e79d      	b.n	800d5a4 <_vfiprintf_r+0x20>
 800d668:	4621      	mov	r1, r4
 800d66a:	4630      	mov	r0, r6
 800d66c:	f000 fe28 	bl	800e2c0 <__swsetup_r>
 800d670:	2800      	cmp	r0, #0
 800d672:	d09d      	beq.n	800d5b0 <_vfiprintf_r+0x2c>
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	b01d      	add	sp, #116	; 0x74
 800d67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67e:	46a8      	mov	r8, r5
 800d680:	e7a2      	b.n	800d5c8 <_vfiprintf_r+0x44>
 800d682:	4a44      	ldr	r2, [pc, #272]	; (800d794 <_vfiprintf_r+0x210>)
 800d684:	1a80      	subs	r0, r0, r2
 800d686:	fa0b f000 	lsl.w	r0, fp, r0
 800d68a:	4318      	orrs	r0, r3
 800d68c:	9004      	str	r0, [sp, #16]
 800d68e:	4645      	mov	r5, r8
 800d690:	e7be      	b.n	800d610 <_vfiprintf_r+0x8c>
 800d692:	9a03      	ldr	r2, [sp, #12]
 800d694:	1d11      	adds	r1, r2, #4
 800d696:	6812      	ldr	r2, [r2, #0]
 800d698:	9103      	str	r1, [sp, #12]
 800d69a:	2a00      	cmp	r2, #0
 800d69c:	db01      	blt.n	800d6a2 <_vfiprintf_r+0x11e>
 800d69e:	9207      	str	r2, [sp, #28]
 800d6a0:	e004      	b.n	800d6ac <_vfiprintf_r+0x128>
 800d6a2:	4252      	negs	r2, r2
 800d6a4:	f043 0302 	orr.w	r3, r3, #2
 800d6a8:	9207      	str	r2, [sp, #28]
 800d6aa:	9304      	str	r3, [sp, #16]
 800d6ac:	f898 3000 	ldrb.w	r3, [r8]
 800d6b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b2:	d10e      	bne.n	800d6d2 <_vfiprintf_r+0x14e>
 800d6b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ba:	d138      	bne.n	800d72e <_vfiprintf_r+0x1aa>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	9203      	str	r2, [sp, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfb8      	it	lt
 800d6c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6cc:	f108 0802 	add.w	r8, r8, #2
 800d6d0:	9305      	str	r3, [sp, #20]
 800d6d2:	4d33      	ldr	r5, [pc, #204]	; (800d7a0 <_vfiprintf_r+0x21c>)
 800d6d4:	f898 1000 	ldrb.w	r1, [r8]
 800d6d8:	2203      	movs	r2, #3
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f7f4 fd20 	bl	8002120 <memchr>
 800d6e0:	b140      	cbz	r0, 800d6f4 <_vfiprintf_r+0x170>
 800d6e2:	2340      	movs	r3, #64	; 0x40
 800d6e4:	1b40      	subs	r0, r0, r5
 800d6e6:	fa03 f000 	lsl.w	r0, r3, r0
 800d6ea:	9b04      	ldr	r3, [sp, #16]
 800d6ec:	4303      	orrs	r3, r0
 800d6ee:	f108 0801 	add.w	r8, r8, #1
 800d6f2:	9304      	str	r3, [sp, #16]
 800d6f4:	f898 1000 	ldrb.w	r1, [r8]
 800d6f8:	482a      	ldr	r0, [pc, #168]	; (800d7a4 <_vfiprintf_r+0x220>)
 800d6fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fe:	2206      	movs	r2, #6
 800d700:	f108 0701 	add.w	r7, r8, #1
 800d704:	f7f4 fd0c 	bl	8002120 <memchr>
 800d708:	2800      	cmp	r0, #0
 800d70a:	d037      	beq.n	800d77c <_vfiprintf_r+0x1f8>
 800d70c:	4b26      	ldr	r3, [pc, #152]	; (800d7a8 <_vfiprintf_r+0x224>)
 800d70e:	bb1b      	cbnz	r3, 800d758 <_vfiprintf_r+0x1d4>
 800d710:	9b03      	ldr	r3, [sp, #12]
 800d712:	3307      	adds	r3, #7
 800d714:	f023 0307 	bic.w	r3, r3, #7
 800d718:	3308      	adds	r3, #8
 800d71a:	9303      	str	r3, [sp, #12]
 800d71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71e:	444b      	add	r3, r9
 800d720:	9309      	str	r3, [sp, #36]	; 0x24
 800d722:	e750      	b.n	800d5c6 <_vfiprintf_r+0x42>
 800d724:	fb05 3202 	mla	r2, r5, r2, r3
 800d728:	2001      	movs	r0, #1
 800d72a:	4688      	mov	r8, r1
 800d72c:	e78a      	b.n	800d644 <_vfiprintf_r+0xc0>
 800d72e:	2300      	movs	r3, #0
 800d730:	f108 0801 	add.w	r8, r8, #1
 800d734:	9305      	str	r3, [sp, #20]
 800d736:	4619      	mov	r1, r3
 800d738:	250a      	movs	r5, #10
 800d73a:	4640      	mov	r0, r8
 800d73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d740:	3a30      	subs	r2, #48	; 0x30
 800d742:	2a09      	cmp	r2, #9
 800d744:	d903      	bls.n	800d74e <_vfiprintf_r+0x1ca>
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0c3      	beq.n	800d6d2 <_vfiprintf_r+0x14e>
 800d74a:	9105      	str	r1, [sp, #20]
 800d74c:	e7c1      	b.n	800d6d2 <_vfiprintf_r+0x14e>
 800d74e:	fb05 2101 	mla	r1, r5, r1, r2
 800d752:	2301      	movs	r3, #1
 800d754:	4680      	mov	r8, r0
 800d756:	e7f0      	b.n	800d73a <_vfiprintf_r+0x1b6>
 800d758:	ab03      	add	r3, sp, #12
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	4622      	mov	r2, r4
 800d75e:	4b13      	ldr	r3, [pc, #76]	; (800d7ac <_vfiprintf_r+0x228>)
 800d760:	a904      	add	r1, sp, #16
 800d762:	4630      	mov	r0, r6
 800d764:	f000 f8b8 	bl	800d8d8 <_printf_float>
 800d768:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d76c:	4681      	mov	r9, r0
 800d76e:	d1d5      	bne.n	800d71c <_vfiprintf_r+0x198>
 800d770:	89a3      	ldrh	r3, [r4, #12]
 800d772:	065b      	lsls	r3, r3, #25
 800d774:	f53f af7e 	bmi.w	800d674 <_vfiprintf_r+0xf0>
 800d778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d77a:	e77d      	b.n	800d678 <_vfiprintf_r+0xf4>
 800d77c:	ab03      	add	r3, sp, #12
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	4622      	mov	r2, r4
 800d782:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <_vfiprintf_r+0x228>)
 800d784:	a904      	add	r1, sp, #16
 800d786:	4630      	mov	r0, r6
 800d788:	f000 fb5c 	bl	800de44 <_printf_i>
 800d78c:	e7ec      	b.n	800d768 <_vfiprintf_r+0x1e4>
 800d78e:	bf00      	nop
 800d790:	080107d4 	.word	0x080107d4
 800d794:	08010760 	.word	0x08010760
 800d798:	080107f4 	.word	0x080107f4
 800d79c:	080107b4 	.word	0x080107b4
 800d7a0:	08010766 	.word	0x08010766
 800d7a4:	0801076a 	.word	0x0801076a
 800d7a8:	0800d8d9 	.word	0x0800d8d9
 800d7ac:	0800d55f 	.word	0x0800d55f

0800d7b0 <__cvt>:
 800d7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	ec55 4b10 	vmov	r4, r5, d0
 800d7b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d7ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d7be:	2d00      	cmp	r5, #0
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	4691      	mov	r9, r2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	bfb8      	it	lt
 800d7c8:	4622      	movlt	r2, r4
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f027 0720 	bic.w	r7, r7, #32
 800d7d0:	bfbb      	ittet	lt
 800d7d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d7d6:	461d      	movlt	r5, r3
 800d7d8:	2300      	movge	r3, #0
 800d7da:	232d      	movlt	r3, #45	; 0x2d
 800d7dc:	bfb8      	it	lt
 800d7de:	4614      	movlt	r4, r2
 800d7e0:	2f46      	cmp	r7, #70	; 0x46
 800d7e2:	700b      	strb	r3, [r1, #0]
 800d7e4:	d004      	beq.n	800d7f0 <__cvt+0x40>
 800d7e6:	2f45      	cmp	r7, #69	; 0x45
 800d7e8:	d100      	bne.n	800d7ec <__cvt+0x3c>
 800d7ea:	3601      	adds	r6, #1
 800d7ec:	2102      	movs	r1, #2
 800d7ee:	e000      	b.n	800d7f2 <__cvt+0x42>
 800d7f0:	2103      	movs	r1, #3
 800d7f2:	ab03      	add	r3, sp, #12
 800d7f4:	9301      	str	r3, [sp, #4]
 800d7f6:	ab02      	add	r3, sp, #8
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	4632      	mov	r2, r6
 800d7fc:	4653      	mov	r3, sl
 800d7fe:	ec45 4b10 	vmov	d0, r4, r5
 800d802:	f000 fe61 	bl	800e4c8 <_dtoa_r>
 800d806:	2f47      	cmp	r7, #71	; 0x47
 800d808:	4680      	mov	r8, r0
 800d80a:	d102      	bne.n	800d812 <__cvt+0x62>
 800d80c:	f019 0f01 	tst.w	r9, #1
 800d810:	d026      	beq.n	800d860 <__cvt+0xb0>
 800d812:	2f46      	cmp	r7, #70	; 0x46
 800d814:	eb08 0906 	add.w	r9, r8, r6
 800d818:	d111      	bne.n	800d83e <__cvt+0x8e>
 800d81a:	f898 3000 	ldrb.w	r3, [r8]
 800d81e:	2b30      	cmp	r3, #48	; 0x30
 800d820:	d10a      	bne.n	800d838 <__cvt+0x88>
 800d822:	2200      	movs	r2, #0
 800d824:	2300      	movs	r3, #0
 800d826:	4620      	mov	r0, r4
 800d828:	4629      	mov	r1, r5
 800d82a:	f7f5 f8ed 	bl	8002a08 <__aeabi_dcmpeq>
 800d82e:	b918      	cbnz	r0, 800d838 <__cvt+0x88>
 800d830:	f1c6 0601 	rsb	r6, r6, #1
 800d834:	f8ca 6000 	str.w	r6, [sl]
 800d838:	f8da 3000 	ldr.w	r3, [sl]
 800d83c:	4499      	add	r9, r3
 800d83e:	2200      	movs	r2, #0
 800d840:	2300      	movs	r3, #0
 800d842:	4620      	mov	r0, r4
 800d844:	4629      	mov	r1, r5
 800d846:	f7f5 f8df 	bl	8002a08 <__aeabi_dcmpeq>
 800d84a:	b938      	cbnz	r0, 800d85c <__cvt+0xac>
 800d84c:	2230      	movs	r2, #48	; 0x30
 800d84e:	9b03      	ldr	r3, [sp, #12]
 800d850:	454b      	cmp	r3, r9
 800d852:	d205      	bcs.n	800d860 <__cvt+0xb0>
 800d854:	1c59      	adds	r1, r3, #1
 800d856:	9103      	str	r1, [sp, #12]
 800d858:	701a      	strb	r2, [r3, #0]
 800d85a:	e7f8      	b.n	800d84e <__cvt+0x9e>
 800d85c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d860:	9b03      	ldr	r3, [sp, #12]
 800d862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d864:	eba3 0308 	sub.w	r3, r3, r8
 800d868:	4640      	mov	r0, r8
 800d86a:	6013      	str	r3, [r2, #0]
 800d86c:	b004      	add	sp, #16
 800d86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d872 <__exponent>:
 800d872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d874:	2900      	cmp	r1, #0
 800d876:	4604      	mov	r4, r0
 800d878:	bfba      	itte	lt
 800d87a:	4249      	neglt	r1, r1
 800d87c:	232d      	movlt	r3, #45	; 0x2d
 800d87e:	232b      	movge	r3, #43	; 0x2b
 800d880:	2909      	cmp	r1, #9
 800d882:	f804 2b02 	strb.w	r2, [r4], #2
 800d886:	7043      	strb	r3, [r0, #1]
 800d888:	dd20      	ble.n	800d8cc <__exponent+0x5a>
 800d88a:	f10d 0307 	add.w	r3, sp, #7
 800d88e:	461f      	mov	r7, r3
 800d890:	260a      	movs	r6, #10
 800d892:	fb91 f5f6 	sdiv	r5, r1, r6
 800d896:	fb06 1115 	mls	r1, r6, r5, r1
 800d89a:	3130      	adds	r1, #48	; 0x30
 800d89c:	2d09      	cmp	r5, #9
 800d89e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d8a2:	f103 32ff 	add.w	r2, r3, #4294967295
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	dc09      	bgt.n	800d8be <__exponent+0x4c>
 800d8aa:	3130      	adds	r1, #48	; 0x30
 800d8ac:	3b02      	subs	r3, #2
 800d8ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d8b2:	42bb      	cmp	r3, r7
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	d304      	bcc.n	800d8c2 <__exponent+0x50>
 800d8b8:	1a10      	subs	r0, r2, r0
 800d8ba:	b003      	add	sp, #12
 800d8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8be:	4613      	mov	r3, r2
 800d8c0:	e7e7      	b.n	800d892 <__exponent+0x20>
 800d8c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c6:	f804 2b01 	strb.w	r2, [r4], #1
 800d8ca:	e7f2      	b.n	800d8b2 <__exponent+0x40>
 800d8cc:	2330      	movs	r3, #48	; 0x30
 800d8ce:	4419      	add	r1, r3
 800d8d0:	7083      	strb	r3, [r0, #2]
 800d8d2:	1d02      	adds	r2, r0, #4
 800d8d4:	70c1      	strb	r1, [r0, #3]
 800d8d6:	e7ef      	b.n	800d8b8 <__exponent+0x46>

0800d8d8 <_printf_float>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	b08d      	sub	sp, #52	; 0x34
 800d8de:	460c      	mov	r4, r1
 800d8e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d8e4:	4616      	mov	r6, r2
 800d8e6:	461f      	mov	r7, r3
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	f001 fd1f 	bl	800f32c <_localeconv_r>
 800d8ee:	6803      	ldr	r3, [r0, #0]
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7f4 fc09 	bl	800210a <strlen>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d900:	9005      	str	r0, [sp, #20]
 800d902:	3307      	adds	r3, #7
 800d904:	f023 0307 	bic.w	r3, r3, #7
 800d908:	f103 0208 	add.w	r2, r3, #8
 800d90c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d910:	f8d4 b000 	ldr.w	fp, [r4]
 800d914:	f8c8 2000 	str.w	r2, [r8]
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d920:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d924:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d928:	9307      	str	r3, [sp, #28]
 800d92a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d92e:	f04f 32ff 	mov.w	r2, #4294967295
 800d932:	4ba7      	ldr	r3, [pc, #668]	; (800dbd0 <_printf_float+0x2f8>)
 800d934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d938:	f7f5 f898 	bl	8002a6c <__aeabi_dcmpun>
 800d93c:	bb70      	cbnz	r0, 800d99c <_printf_float+0xc4>
 800d93e:	f04f 32ff 	mov.w	r2, #4294967295
 800d942:	4ba3      	ldr	r3, [pc, #652]	; (800dbd0 <_printf_float+0x2f8>)
 800d944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d948:	f7f5 f872 	bl	8002a30 <__aeabi_dcmple>
 800d94c:	bb30      	cbnz	r0, 800d99c <_printf_float+0xc4>
 800d94e:	2200      	movs	r2, #0
 800d950:	2300      	movs	r3, #0
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f5 f861 	bl	8002a1c <__aeabi_dcmplt>
 800d95a:	b110      	cbz	r0, 800d962 <_printf_float+0x8a>
 800d95c:	232d      	movs	r3, #45	; 0x2d
 800d95e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d962:	4a9c      	ldr	r2, [pc, #624]	; (800dbd4 <_printf_float+0x2fc>)
 800d964:	4b9c      	ldr	r3, [pc, #624]	; (800dbd8 <_printf_float+0x300>)
 800d966:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d96a:	bf8c      	ite	hi
 800d96c:	4690      	movhi	r8, r2
 800d96e:	4698      	movls	r8, r3
 800d970:	2303      	movs	r3, #3
 800d972:	f02b 0204 	bic.w	r2, fp, #4
 800d976:	6123      	str	r3, [r4, #16]
 800d978:	6022      	str	r2, [r4, #0]
 800d97a:	f04f 0900 	mov.w	r9, #0
 800d97e:	9700      	str	r7, [sp, #0]
 800d980:	4633      	mov	r3, r6
 800d982:	aa0b      	add	r2, sp, #44	; 0x2c
 800d984:	4621      	mov	r1, r4
 800d986:	4628      	mov	r0, r5
 800d988:	f000 f9e6 	bl	800dd58 <_printf_common>
 800d98c:	3001      	adds	r0, #1
 800d98e:	f040 808d 	bne.w	800daac <_printf_float+0x1d4>
 800d992:	f04f 30ff 	mov.w	r0, #4294967295
 800d996:	b00d      	add	sp, #52	; 0x34
 800d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99c:	4642      	mov	r2, r8
 800d99e:	464b      	mov	r3, r9
 800d9a0:	4640      	mov	r0, r8
 800d9a2:	4649      	mov	r1, r9
 800d9a4:	f7f5 f862 	bl	8002a6c <__aeabi_dcmpun>
 800d9a8:	b110      	cbz	r0, 800d9b0 <_printf_float+0xd8>
 800d9aa:	4a8c      	ldr	r2, [pc, #560]	; (800dbdc <_printf_float+0x304>)
 800d9ac:	4b8c      	ldr	r3, [pc, #560]	; (800dbe0 <_printf_float+0x308>)
 800d9ae:	e7da      	b.n	800d966 <_printf_float+0x8e>
 800d9b0:	6861      	ldr	r1, [r4, #4]
 800d9b2:	1c4b      	adds	r3, r1, #1
 800d9b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d9b8:	a80a      	add	r0, sp, #40	; 0x28
 800d9ba:	d13e      	bne.n	800da3a <_printf_float+0x162>
 800d9bc:	2306      	movs	r3, #6
 800d9be:	6063      	str	r3, [r4, #4]
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d9c6:	ab09      	add	r3, sp, #36	; 0x24
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	ec49 8b10 	vmov	d0, r8, r9
 800d9ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9d2:	6022      	str	r2, [r4, #0]
 800d9d4:	f8cd a004 	str.w	sl, [sp, #4]
 800d9d8:	6861      	ldr	r1, [r4, #4]
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f7ff fee8 	bl	800d7b0 <__cvt>
 800d9e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d9e4:	2b47      	cmp	r3, #71	; 0x47
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	d109      	bne.n	800d9fe <_printf_float+0x126>
 800d9ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ec:	1cd8      	adds	r0, r3, #3
 800d9ee:	db02      	blt.n	800d9f6 <_printf_float+0x11e>
 800d9f0:	6862      	ldr	r2, [r4, #4]
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	dd47      	ble.n	800da86 <_printf_float+0x1ae>
 800d9f6:	f1aa 0a02 	sub.w	sl, sl, #2
 800d9fa:	fa5f fa8a 	uxtb.w	sl, sl
 800d9fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800da02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da04:	d824      	bhi.n	800da50 <_printf_float+0x178>
 800da06:	3901      	subs	r1, #1
 800da08:	4652      	mov	r2, sl
 800da0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da0e:	9109      	str	r1, [sp, #36]	; 0x24
 800da10:	f7ff ff2f 	bl	800d872 <__exponent>
 800da14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da16:	1813      	adds	r3, r2, r0
 800da18:	2a01      	cmp	r2, #1
 800da1a:	4681      	mov	r9, r0
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	dc02      	bgt.n	800da26 <_printf_float+0x14e>
 800da20:	6822      	ldr	r2, [r4, #0]
 800da22:	07d1      	lsls	r1, r2, #31
 800da24:	d501      	bpl.n	800da2a <_printf_float+0x152>
 800da26:	3301      	adds	r3, #1
 800da28:	6123      	str	r3, [r4, #16]
 800da2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d0a5      	beq.n	800d97e <_printf_float+0xa6>
 800da32:	232d      	movs	r3, #45	; 0x2d
 800da34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da38:	e7a1      	b.n	800d97e <_printf_float+0xa6>
 800da3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800da3e:	f000 8177 	beq.w	800dd30 <_printf_float+0x458>
 800da42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800da46:	d1bb      	bne.n	800d9c0 <_printf_float+0xe8>
 800da48:	2900      	cmp	r1, #0
 800da4a:	d1b9      	bne.n	800d9c0 <_printf_float+0xe8>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e7b6      	b.n	800d9be <_printf_float+0xe6>
 800da50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800da54:	d119      	bne.n	800da8a <_printf_float+0x1b2>
 800da56:	2900      	cmp	r1, #0
 800da58:	6863      	ldr	r3, [r4, #4]
 800da5a:	dd0c      	ble.n	800da76 <_printf_float+0x19e>
 800da5c:	6121      	str	r1, [r4, #16]
 800da5e:	b913      	cbnz	r3, 800da66 <_printf_float+0x18e>
 800da60:	6822      	ldr	r2, [r4, #0]
 800da62:	07d2      	lsls	r2, r2, #31
 800da64:	d502      	bpl.n	800da6c <_printf_float+0x194>
 800da66:	3301      	adds	r3, #1
 800da68:	440b      	add	r3, r1
 800da6a:	6123      	str	r3, [r4, #16]
 800da6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da6e:	65a3      	str	r3, [r4, #88]	; 0x58
 800da70:	f04f 0900 	mov.w	r9, #0
 800da74:	e7d9      	b.n	800da2a <_printf_float+0x152>
 800da76:	b913      	cbnz	r3, 800da7e <_printf_float+0x1a6>
 800da78:	6822      	ldr	r2, [r4, #0]
 800da7a:	07d0      	lsls	r0, r2, #31
 800da7c:	d501      	bpl.n	800da82 <_printf_float+0x1aa>
 800da7e:	3302      	adds	r3, #2
 800da80:	e7f3      	b.n	800da6a <_printf_float+0x192>
 800da82:	2301      	movs	r3, #1
 800da84:	e7f1      	b.n	800da6a <_printf_float+0x192>
 800da86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800da8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da8e:	4293      	cmp	r3, r2
 800da90:	db05      	blt.n	800da9e <_printf_float+0x1c6>
 800da92:	6822      	ldr	r2, [r4, #0]
 800da94:	6123      	str	r3, [r4, #16]
 800da96:	07d1      	lsls	r1, r2, #31
 800da98:	d5e8      	bpl.n	800da6c <_printf_float+0x194>
 800da9a:	3301      	adds	r3, #1
 800da9c:	e7e5      	b.n	800da6a <_printf_float+0x192>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bfd4      	ite	le
 800daa2:	f1c3 0302 	rsble	r3, r3, #2
 800daa6:	2301      	movgt	r3, #1
 800daa8:	4413      	add	r3, r2
 800daaa:	e7de      	b.n	800da6a <_printf_float+0x192>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	055a      	lsls	r2, r3, #21
 800dab0:	d407      	bmi.n	800dac2 <_printf_float+0x1ea>
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	4642      	mov	r2, r8
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	d12b      	bne.n	800db18 <_printf_float+0x240>
 800dac0:	e767      	b.n	800d992 <_printf_float+0xba>
 800dac2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dac6:	f240 80dc 	bls.w	800dc82 <_printf_float+0x3aa>
 800daca:	2200      	movs	r2, #0
 800dacc:	2300      	movs	r3, #0
 800dace:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dad2:	f7f4 ff99 	bl	8002a08 <__aeabi_dcmpeq>
 800dad6:	2800      	cmp	r0, #0
 800dad8:	d033      	beq.n	800db42 <_printf_float+0x26a>
 800dada:	2301      	movs	r3, #1
 800dadc:	4a41      	ldr	r2, [pc, #260]	; (800dbe4 <_printf_float+0x30c>)
 800dade:	4631      	mov	r1, r6
 800dae0:	4628      	mov	r0, r5
 800dae2:	47b8      	blx	r7
 800dae4:	3001      	adds	r0, #1
 800dae6:	f43f af54 	beq.w	800d992 <_printf_float+0xba>
 800daea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daee:	429a      	cmp	r2, r3
 800daf0:	db02      	blt.n	800daf8 <_printf_float+0x220>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	07d8      	lsls	r0, r3, #31
 800daf6:	d50f      	bpl.n	800db18 <_printf_float+0x240>
 800daf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dafc:	4631      	mov	r1, r6
 800dafe:	4628      	mov	r0, r5
 800db00:	47b8      	blx	r7
 800db02:	3001      	adds	r0, #1
 800db04:	f43f af45 	beq.w	800d992 <_printf_float+0xba>
 800db08:	f04f 0800 	mov.w	r8, #0
 800db0c:	f104 091a 	add.w	r9, r4, #26
 800db10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db12:	3b01      	subs	r3, #1
 800db14:	4543      	cmp	r3, r8
 800db16:	dc09      	bgt.n	800db2c <_printf_float+0x254>
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	079b      	lsls	r3, r3, #30
 800db1c:	f100 8103 	bmi.w	800dd26 <_printf_float+0x44e>
 800db20:	68e0      	ldr	r0, [r4, #12]
 800db22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db24:	4298      	cmp	r0, r3
 800db26:	bfb8      	it	lt
 800db28:	4618      	movlt	r0, r3
 800db2a:	e734      	b.n	800d996 <_printf_float+0xbe>
 800db2c:	2301      	movs	r3, #1
 800db2e:	464a      	mov	r2, r9
 800db30:	4631      	mov	r1, r6
 800db32:	4628      	mov	r0, r5
 800db34:	47b8      	blx	r7
 800db36:	3001      	adds	r0, #1
 800db38:	f43f af2b 	beq.w	800d992 <_printf_float+0xba>
 800db3c:	f108 0801 	add.w	r8, r8, #1
 800db40:	e7e6      	b.n	800db10 <_printf_float+0x238>
 800db42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db44:	2b00      	cmp	r3, #0
 800db46:	dc2b      	bgt.n	800dba0 <_printf_float+0x2c8>
 800db48:	2301      	movs	r3, #1
 800db4a:	4a26      	ldr	r2, [pc, #152]	; (800dbe4 <_printf_float+0x30c>)
 800db4c:	4631      	mov	r1, r6
 800db4e:	4628      	mov	r0, r5
 800db50:	47b8      	blx	r7
 800db52:	3001      	adds	r0, #1
 800db54:	f43f af1d 	beq.w	800d992 <_printf_float+0xba>
 800db58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5a:	b923      	cbnz	r3, 800db66 <_printf_float+0x28e>
 800db5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5e:	b913      	cbnz	r3, 800db66 <_printf_float+0x28e>
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	07d9      	lsls	r1, r3, #31
 800db64:	d5d8      	bpl.n	800db18 <_printf_float+0x240>
 800db66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db6a:	4631      	mov	r1, r6
 800db6c:	4628      	mov	r0, r5
 800db6e:	47b8      	blx	r7
 800db70:	3001      	adds	r0, #1
 800db72:	f43f af0e 	beq.w	800d992 <_printf_float+0xba>
 800db76:	f04f 0900 	mov.w	r9, #0
 800db7a:	f104 0a1a 	add.w	sl, r4, #26
 800db7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db80:	425b      	negs	r3, r3
 800db82:	454b      	cmp	r3, r9
 800db84:	dc01      	bgt.n	800db8a <_printf_float+0x2b2>
 800db86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db88:	e794      	b.n	800dab4 <_printf_float+0x1dc>
 800db8a:	2301      	movs	r3, #1
 800db8c:	4652      	mov	r2, sl
 800db8e:	4631      	mov	r1, r6
 800db90:	4628      	mov	r0, r5
 800db92:	47b8      	blx	r7
 800db94:	3001      	adds	r0, #1
 800db96:	f43f aefc 	beq.w	800d992 <_printf_float+0xba>
 800db9a:	f109 0901 	add.w	r9, r9, #1
 800db9e:	e7ee      	b.n	800db7e <_printf_float+0x2a6>
 800dba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dba4:	429a      	cmp	r2, r3
 800dba6:	bfa8      	it	ge
 800dba8:	461a      	movge	r2, r3
 800dbaa:	2a00      	cmp	r2, #0
 800dbac:	4691      	mov	r9, r2
 800dbae:	dd07      	ble.n	800dbc0 <_printf_float+0x2e8>
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	4631      	mov	r1, r6
 800dbb4:	4642      	mov	r2, r8
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	47b8      	blx	r7
 800dbba:	3001      	adds	r0, #1
 800dbbc:	f43f aee9 	beq.w	800d992 <_printf_float+0xba>
 800dbc0:	f104 031a 	add.w	r3, r4, #26
 800dbc4:	f04f 0b00 	mov.w	fp, #0
 800dbc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbcc:	9306      	str	r3, [sp, #24]
 800dbce:	e015      	b.n	800dbfc <_printf_float+0x324>
 800dbd0:	7fefffff 	.word	0x7fefffff
 800dbd4:	08010775 	.word	0x08010775
 800dbd8:	08010771 	.word	0x08010771
 800dbdc:	0801077d 	.word	0x0801077d
 800dbe0:	08010779 	.word	0x08010779
 800dbe4:	08010781 	.word	0x08010781
 800dbe8:	2301      	movs	r3, #1
 800dbea:	9a06      	ldr	r2, [sp, #24]
 800dbec:	4631      	mov	r1, r6
 800dbee:	4628      	mov	r0, r5
 800dbf0:	47b8      	blx	r7
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f43f aecd 	beq.w	800d992 <_printf_float+0xba>
 800dbf8:	f10b 0b01 	add.w	fp, fp, #1
 800dbfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dc00:	ebaa 0309 	sub.w	r3, sl, r9
 800dc04:	455b      	cmp	r3, fp
 800dc06:	dcef      	bgt.n	800dbe8 <_printf_float+0x310>
 800dc08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	44d0      	add	r8, sl
 800dc10:	db15      	blt.n	800dc3e <_printf_float+0x366>
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	07da      	lsls	r2, r3, #31
 800dc16:	d412      	bmi.n	800dc3e <_printf_float+0x366>
 800dc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc1c:	eba3 020a 	sub.w	r2, r3, sl
 800dc20:	eba3 0a01 	sub.w	sl, r3, r1
 800dc24:	4592      	cmp	sl, r2
 800dc26:	bfa8      	it	ge
 800dc28:	4692      	movge	sl, r2
 800dc2a:	f1ba 0f00 	cmp.w	sl, #0
 800dc2e:	dc0e      	bgt.n	800dc4e <_printf_float+0x376>
 800dc30:	f04f 0800 	mov.w	r8, #0
 800dc34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc38:	f104 091a 	add.w	r9, r4, #26
 800dc3c:	e019      	b.n	800dc72 <_printf_float+0x39a>
 800dc3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc42:	4631      	mov	r1, r6
 800dc44:	4628      	mov	r0, r5
 800dc46:	47b8      	blx	r7
 800dc48:	3001      	adds	r0, #1
 800dc4a:	d1e5      	bne.n	800dc18 <_printf_float+0x340>
 800dc4c:	e6a1      	b.n	800d992 <_printf_float+0xba>
 800dc4e:	4653      	mov	r3, sl
 800dc50:	4642      	mov	r2, r8
 800dc52:	4631      	mov	r1, r6
 800dc54:	4628      	mov	r0, r5
 800dc56:	47b8      	blx	r7
 800dc58:	3001      	adds	r0, #1
 800dc5a:	d1e9      	bne.n	800dc30 <_printf_float+0x358>
 800dc5c:	e699      	b.n	800d992 <_printf_float+0xba>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	464a      	mov	r2, r9
 800dc62:	4631      	mov	r1, r6
 800dc64:	4628      	mov	r0, r5
 800dc66:	47b8      	blx	r7
 800dc68:	3001      	adds	r0, #1
 800dc6a:	f43f ae92 	beq.w	800d992 <_printf_float+0xba>
 800dc6e:	f108 0801 	add.w	r8, r8, #1
 800dc72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc76:	1a9b      	subs	r3, r3, r2
 800dc78:	eba3 030a 	sub.w	r3, r3, sl
 800dc7c:	4543      	cmp	r3, r8
 800dc7e:	dcee      	bgt.n	800dc5e <_printf_float+0x386>
 800dc80:	e74a      	b.n	800db18 <_printf_float+0x240>
 800dc82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc84:	2a01      	cmp	r2, #1
 800dc86:	dc01      	bgt.n	800dc8c <_printf_float+0x3b4>
 800dc88:	07db      	lsls	r3, r3, #31
 800dc8a:	d53a      	bpl.n	800dd02 <_printf_float+0x42a>
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	4642      	mov	r2, r8
 800dc90:	4631      	mov	r1, r6
 800dc92:	4628      	mov	r0, r5
 800dc94:	47b8      	blx	r7
 800dc96:	3001      	adds	r0, #1
 800dc98:	f43f ae7b 	beq.w	800d992 <_printf_float+0xba>
 800dc9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dca0:	4631      	mov	r1, r6
 800dca2:	4628      	mov	r0, r5
 800dca4:	47b8      	blx	r7
 800dca6:	3001      	adds	r0, #1
 800dca8:	f108 0801 	add.w	r8, r8, #1
 800dcac:	f43f ae71 	beq.w	800d992 <_printf_float+0xba>
 800dcb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f103 3aff 	add.w	sl, r3, #4294967295
 800dcb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	f7f4 fea3 	bl	8002a08 <__aeabi_dcmpeq>
 800dcc2:	b9c8      	cbnz	r0, 800dcf8 <_printf_float+0x420>
 800dcc4:	4653      	mov	r3, sl
 800dcc6:	4642      	mov	r2, r8
 800dcc8:	4631      	mov	r1, r6
 800dcca:	4628      	mov	r0, r5
 800dccc:	47b8      	blx	r7
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d10e      	bne.n	800dcf0 <_printf_float+0x418>
 800dcd2:	e65e      	b.n	800d992 <_printf_float+0xba>
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	4652      	mov	r2, sl
 800dcd8:	4631      	mov	r1, r6
 800dcda:	4628      	mov	r0, r5
 800dcdc:	47b8      	blx	r7
 800dcde:	3001      	adds	r0, #1
 800dce0:	f43f ae57 	beq.w	800d992 <_printf_float+0xba>
 800dce4:	f108 0801 	add.w	r8, r8, #1
 800dce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4543      	cmp	r3, r8
 800dcee:	dcf1      	bgt.n	800dcd4 <_printf_float+0x3fc>
 800dcf0:	464b      	mov	r3, r9
 800dcf2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcf6:	e6de      	b.n	800dab6 <_printf_float+0x1de>
 800dcf8:	f04f 0800 	mov.w	r8, #0
 800dcfc:	f104 0a1a 	add.w	sl, r4, #26
 800dd00:	e7f2      	b.n	800dce8 <_printf_float+0x410>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e7df      	b.n	800dcc6 <_printf_float+0x3ee>
 800dd06:	2301      	movs	r3, #1
 800dd08:	464a      	mov	r2, r9
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	47b8      	blx	r7
 800dd10:	3001      	adds	r0, #1
 800dd12:	f43f ae3e 	beq.w	800d992 <_printf_float+0xba>
 800dd16:	f108 0801 	add.w	r8, r8, #1
 800dd1a:	68e3      	ldr	r3, [r4, #12]
 800dd1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd1e:	1a9b      	subs	r3, r3, r2
 800dd20:	4543      	cmp	r3, r8
 800dd22:	dcf0      	bgt.n	800dd06 <_printf_float+0x42e>
 800dd24:	e6fc      	b.n	800db20 <_printf_float+0x248>
 800dd26:	f04f 0800 	mov.w	r8, #0
 800dd2a:	f104 0919 	add.w	r9, r4, #25
 800dd2e:	e7f4      	b.n	800dd1a <_printf_float+0x442>
 800dd30:	2900      	cmp	r1, #0
 800dd32:	f43f ae8b 	beq.w	800da4c <_printf_float+0x174>
 800dd36:	2300      	movs	r3, #0
 800dd38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dd3c:	ab09      	add	r3, sp, #36	; 0x24
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	ec49 8b10 	vmov	d0, r8, r9
 800dd44:	6022      	str	r2, [r4, #0]
 800dd46:	f8cd a004 	str.w	sl, [sp, #4]
 800dd4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f7ff fd2e 	bl	800d7b0 <__cvt>
 800dd54:	4680      	mov	r8, r0
 800dd56:	e648      	b.n	800d9ea <_printf_float+0x112>

0800dd58 <_printf_common>:
 800dd58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd5c:	4691      	mov	r9, r2
 800dd5e:	461f      	mov	r7, r3
 800dd60:	688a      	ldr	r2, [r1, #8]
 800dd62:	690b      	ldr	r3, [r1, #16]
 800dd64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	bfb8      	it	lt
 800dd6c:	4613      	movlt	r3, r2
 800dd6e:	f8c9 3000 	str.w	r3, [r9]
 800dd72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd76:	4606      	mov	r6, r0
 800dd78:	460c      	mov	r4, r1
 800dd7a:	b112      	cbz	r2, 800dd82 <_printf_common+0x2a>
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	f8c9 3000 	str.w	r3, [r9]
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	0699      	lsls	r1, r3, #26
 800dd86:	bf42      	ittt	mi
 800dd88:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dd8c:	3302      	addmi	r3, #2
 800dd8e:	f8c9 3000 	strmi.w	r3, [r9]
 800dd92:	6825      	ldr	r5, [r4, #0]
 800dd94:	f015 0506 	ands.w	r5, r5, #6
 800dd98:	d107      	bne.n	800ddaa <_printf_common+0x52>
 800dd9a:	f104 0a19 	add.w	sl, r4, #25
 800dd9e:	68e3      	ldr	r3, [r4, #12]
 800dda0:	f8d9 2000 	ldr.w	r2, [r9]
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	42ab      	cmp	r3, r5
 800dda8:	dc28      	bgt.n	800ddfc <_printf_common+0xa4>
 800ddaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ddae:	6822      	ldr	r2, [r4, #0]
 800ddb0:	3300      	adds	r3, #0
 800ddb2:	bf18      	it	ne
 800ddb4:	2301      	movne	r3, #1
 800ddb6:	0692      	lsls	r2, r2, #26
 800ddb8:	d42d      	bmi.n	800de16 <_printf_common+0xbe>
 800ddba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ddbe:	4639      	mov	r1, r7
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	47c0      	blx	r8
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d020      	beq.n	800de0a <_printf_common+0xb2>
 800ddc8:	6823      	ldr	r3, [r4, #0]
 800ddca:	68e5      	ldr	r5, [r4, #12]
 800ddcc:	f8d9 2000 	ldr.w	r2, [r9]
 800ddd0:	f003 0306 	and.w	r3, r3, #6
 800ddd4:	2b04      	cmp	r3, #4
 800ddd6:	bf08      	it	eq
 800ddd8:	1aad      	subeq	r5, r5, r2
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	6922      	ldr	r2, [r4, #16]
 800ddde:	bf0c      	ite	eq
 800dde0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dde4:	2500      	movne	r5, #0
 800dde6:	4293      	cmp	r3, r2
 800dde8:	bfc4      	itt	gt
 800ddea:	1a9b      	subgt	r3, r3, r2
 800ddec:	18ed      	addgt	r5, r5, r3
 800ddee:	f04f 0900 	mov.w	r9, #0
 800ddf2:	341a      	adds	r4, #26
 800ddf4:	454d      	cmp	r5, r9
 800ddf6:	d11a      	bne.n	800de2e <_printf_common+0xd6>
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	e008      	b.n	800de0e <_printf_common+0xb6>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	4652      	mov	r2, sl
 800de00:	4639      	mov	r1, r7
 800de02:	4630      	mov	r0, r6
 800de04:	47c0      	blx	r8
 800de06:	3001      	adds	r0, #1
 800de08:	d103      	bne.n	800de12 <_printf_common+0xba>
 800de0a:	f04f 30ff 	mov.w	r0, #4294967295
 800de0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de12:	3501      	adds	r5, #1
 800de14:	e7c3      	b.n	800dd9e <_printf_common+0x46>
 800de16:	18e1      	adds	r1, r4, r3
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	2030      	movs	r0, #48	; 0x30
 800de1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de20:	4422      	add	r2, r4
 800de22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de2a:	3302      	adds	r3, #2
 800de2c:	e7c5      	b.n	800ddba <_printf_common+0x62>
 800de2e:	2301      	movs	r3, #1
 800de30:	4622      	mov	r2, r4
 800de32:	4639      	mov	r1, r7
 800de34:	4630      	mov	r0, r6
 800de36:	47c0      	blx	r8
 800de38:	3001      	adds	r0, #1
 800de3a:	d0e6      	beq.n	800de0a <_printf_common+0xb2>
 800de3c:	f109 0901 	add.w	r9, r9, #1
 800de40:	e7d8      	b.n	800ddf4 <_printf_common+0x9c>
	...

0800de44 <_printf_i>:
 800de44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800de4c:	460c      	mov	r4, r1
 800de4e:	7e09      	ldrb	r1, [r1, #24]
 800de50:	b085      	sub	sp, #20
 800de52:	296e      	cmp	r1, #110	; 0x6e
 800de54:	4617      	mov	r7, r2
 800de56:	4606      	mov	r6, r0
 800de58:	4698      	mov	r8, r3
 800de5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de5c:	f000 80b3 	beq.w	800dfc6 <_printf_i+0x182>
 800de60:	d822      	bhi.n	800dea8 <_printf_i+0x64>
 800de62:	2963      	cmp	r1, #99	; 0x63
 800de64:	d036      	beq.n	800ded4 <_printf_i+0x90>
 800de66:	d80a      	bhi.n	800de7e <_printf_i+0x3a>
 800de68:	2900      	cmp	r1, #0
 800de6a:	f000 80b9 	beq.w	800dfe0 <_printf_i+0x19c>
 800de6e:	2958      	cmp	r1, #88	; 0x58
 800de70:	f000 8083 	beq.w	800df7a <_printf_i+0x136>
 800de74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800de7c:	e032      	b.n	800dee4 <_printf_i+0xa0>
 800de7e:	2964      	cmp	r1, #100	; 0x64
 800de80:	d001      	beq.n	800de86 <_printf_i+0x42>
 800de82:	2969      	cmp	r1, #105	; 0x69
 800de84:	d1f6      	bne.n	800de74 <_printf_i+0x30>
 800de86:	6820      	ldr	r0, [r4, #0]
 800de88:	6813      	ldr	r3, [r2, #0]
 800de8a:	0605      	lsls	r5, r0, #24
 800de8c:	f103 0104 	add.w	r1, r3, #4
 800de90:	d52a      	bpl.n	800dee8 <_printf_i+0xa4>
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6011      	str	r1, [r2, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	da03      	bge.n	800dea2 <_printf_i+0x5e>
 800de9a:	222d      	movs	r2, #45	; 0x2d
 800de9c:	425b      	negs	r3, r3
 800de9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dea2:	486f      	ldr	r0, [pc, #444]	; (800e060 <_printf_i+0x21c>)
 800dea4:	220a      	movs	r2, #10
 800dea6:	e039      	b.n	800df1c <_printf_i+0xd8>
 800dea8:	2973      	cmp	r1, #115	; 0x73
 800deaa:	f000 809d 	beq.w	800dfe8 <_printf_i+0x1a4>
 800deae:	d808      	bhi.n	800dec2 <_printf_i+0x7e>
 800deb0:	296f      	cmp	r1, #111	; 0x6f
 800deb2:	d020      	beq.n	800def6 <_printf_i+0xb2>
 800deb4:	2970      	cmp	r1, #112	; 0x70
 800deb6:	d1dd      	bne.n	800de74 <_printf_i+0x30>
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	f043 0320 	orr.w	r3, r3, #32
 800debe:	6023      	str	r3, [r4, #0]
 800dec0:	e003      	b.n	800deca <_printf_i+0x86>
 800dec2:	2975      	cmp	r1, #117	; 0x75
 800dec4:	d017      	beq.n	800def6 <_printf_i+0xb2>
 800dec6:	2978      	cmp	r1, #120	; 0x78
 800dec8:	d1d4      	bne.n	800de74 <_printf_i+0x30>
 800deca:	2378      	movs	r3, #120	; 0x78
 800decc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ded0:	4864      	ldr	r0, [pc, #400]	; (800e064 <_printf_i+0x220>)
 800ded2:	e055      	b.n	800df80 <_printf_i+0x13c>
 800ded4:	6813      	ldr	r3, [r2, #0]
 800ded6:	1d19      	adds	r1, r3, #4
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6011      	str	r1, [r2, #0]
 800dedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dee4:	2301      	movs	r3, #1
 800dee6:	e08c      	b.n	800e002 <_printf_i+0x1be>
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	6011      	str	r1, [r2, #0]
 800deec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800def0:	bf18      	it	ne
 800def2:	b21b      	sxthne	r3, r3
 800def4:	e7cf      	b.n	800de96 <_printf_i+0x52>
 800def6:	6813      	ldr	r3, [r2, #0]
 800def8:	6825      	ldr	r5, [r4, #0]
 800defa:	1d18      	adds	r0, r3, #4
 800defc:	6010      	str	r0, [r2, #0]
 800defe:	0628      	lsls	r0, r5, #24
 800df00:	d501      	bpl.n	800df06 <_printf_i+0xc2>
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	e002      	b.n	800df0c <_printf_i+0xc8>
 800df06:	0668      	lsls	r0, r5, #25
 800df08:	d5fb      	bpl.n	800df02 <_printf_i+0xbe>
 800df0a:	881b      	ldrh	r3, [r3, #0]
 800df0c:	4854      	ldr	r0, [pc, #336]	; (800e060 <_printf_i+0x21c>)
 800df0e:	296f      	cmp	r1, #111	; 0x6f
 800df10:	bf14      	ite	ne
 800df12:	220a      	movne	r2, #10
 800df14:	2208      	moveq	r2, #8
 800df16:	2100      	movs	r1, #0
 800df18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df1c:	6865      	ldr	r5, [r4, #4]
 800df1e:	60a5      	str	r5, [r4, #8]
 800df20:	2d00      	cmp	r5, #0
 800df22:	f2c0 8095 	blt.w	800e050 <_printf_i+0x20c>
 800df26:	6821      	ldr	r1, [r4, #0]
 800df28:	f021 0104 	bic.w	r1, r1, #4
 800df2c:	6021      	str	r1, [r4, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d13d      	bne.n	800dfae <_printf_i+0x16a>
 800df32:	2d00      	cmp	r5, #0
 800df34:	f040 808e 	bne.w	800e054 <_printf_i+0x210>
 800df38:	4665      	mov	r5, ip
 800df3a:	2a08      	cmp	r2, #8
 800df3c:	d10b      	bne.n	800df56 <_printf_i+0x112>
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	07db      	lsls	r3, r3, #31
 800df42:	d508      	bpl.n	800df56 <_printf_i+0x112>
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	6862      	ldr	r2, [r4, #4]
 800df48:	429a      	cmp	r2, r3
 800df4a:	bfde      	ittt	le
 800df4c:	2330      	movle	r3, #48	; 0x30
 800df4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df52:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df56:	ebac 0305 	sub.w	r3, ip, r5
 800df5a:	6123      	str	r3, [r4, #16]
 800df5c:	f8cd 8000 	str.w	r8, [sp]
 800df60:	463b      	mov	r3, r7
 800df62:	aa03      	add	r2, sp, #12
 800df64:	4621      	mov	r1, r4
 800df66:	4630      	mov	r0, r6
 800df68:	f7ff fef6 	bl	800dd58 <_printf_common>
 800df6c:	3001      	adds	r0, #1
 800df6e:	d14d      	bne.n	800e00c <_printf_i+0x1c8>
 800df70:	f04f 30ff 	mov.w	r0, #4294967295
 800df74:	b005      	add	sp, #20
 800df76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df7a:	4839      	ldr	r0, [pc, #228]	; (800e060 <_printf_i+0x21c>)
 800df7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800df80:	6813      	ldr	r3, [r2, #0]
 800df82:	6821      	ldr	r1, [r4, #0]
 800df84:	1d1d      	adds	r5, r3, #4
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6015      	str	r5, [r2, #0]
 800df8a:	060a      	lsls	r2, r1, #24
 800df8c:	d50b      	bpl.n	800dfa6 <_printf_i+0x162>
 800df8e:	07ca      	lsls	r2, r1, #31
 800df90:	bf44      	itt	mi
 800df92:	f041 0120 	orrmi.w	r1, r1, #32
 800df96:	6021      	strmi	r1, [r4, #0]
 800df98:	b91b      	cbnz	r3, 800dfa2 <_printf_i+0x15e>
 800df9a:	6822      	ldr	r2, [r4, #0]
 800df9c:	f022 0220 	bic.w	r2, r2, #32
 800dfa0:	6022      	str	r2, [r4, #0]
 800dfa2:	2210      	movs	r2, #16
 800dfa4:	e7b7      	b.n	800df16 <_printf_i+0xd2>
 800dfa6:	064d      	lsls	r5, r1, #25
 800dfa8:	bf48      	it	mi
 800dfaa:	b29b      	uxthmi	r3, r3
 800dfac:	e7ef      	b.n	800df8e <_printf_i+0x14a>
 800dfae:	4665      	mov	r5, ip
 800dfb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfb4:	fb02 3311 	mls	r3, r2, r1, r3
 800dfb8:	5cc3      	ldrb	r3, [r0, r3]
 800dfba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	2900      	cmp	r1, #0
 800dfc2:	d1f5      	bne.n	800dfb0 <_printf_i+0x16c>
 800dfc4:	e7b9      	b.n	800df3a <_printf_i+0xf6>
 800dfc6:	6813      	ldr	r3, [r2, #0]
 800dfc8:	6825      	ldr	r5, [r4, #0]
 800dfca:	6961      	ldr	r1, [r4, #20]
 800dfcc:	1d18      	adds	r0, r3, #4
 800dfce:	6010      	str	r0, [r2, #0]
 800dfd0:	0628      	lsls	r0, r5, #24
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	d501      	bpl.n	800dfda <_printf_i+0x196>
 800dfd6:	6019      	str	r1, [r3, #0]
 800dfd8:	e002      	b.n	800dfe0 <_printf_i+0x19c>
 800dfda:	066a      	lsls	r2, r5, #25
 800dfdc:	d5fb      	bpl.n	800dfd6 <_printf_i+0x192>
 800dfde:	8019      	strh	r1, [r3, #0]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	6123      	str	r3, [r4, #16]
 800dfe4:	4665      	mov	r5, ip
 800dfe6:	e7b9      	b.n	800df5c <_printf_i+0x118>
 800dfe8:	6813      	ldr	r3, [r2, #0]
 800dfea:	1d19      	adds	r1, r3, #4
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	681d      	ldr	r5, [r3, #0]
 800dff0:	6862      	ldr	r2, [r4, #4]
 800dff2:	2100      	movs	r1, #0
 800dff4:	4628      	mov	r0, r5
 800dff6:	f7f4 f893 	bl	8002120 <memchr>
 800dffa:	b108      	cbz	r0, 800e000 <_printf_i+0x1bc>
 800dffc:	1b40      	subs	r0, r0, r5
 800dffe:	6060      	str	r0, [r4, #4]
 800e000:	6863      	ldr	r3, [r4, #4]
 800e002:	6123      	str	r3, [r4, #16]
 800e004:	2300      	movs	r3, #0
 800e006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e00a:	e7a7      	b.n	800df5c <_printf_i+0x118>
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	462a      	mov	r2, r5
 800e010:	4639      	mov	r1, r7
 800e012:	4630      	mov	r0, r6
 800e014:	47c0      	blx	r8
 800e016:	3001      	adds	r0, #1
 800e018:	d0aa      	beq.n	800df70 <_printf_i+0x12c>
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	079b      	lsls	r3, r3, #30
 800e01e:	d413      	bmi.n	800e048 <_printf_i+0x204>
 800e020:	68e0      	ldr	r0, [r4, #12]
 800e022:	9b03      	ldr	r3, [sp, #12]
 800e024:	4298      	cmp	r0, r3
 800e026:	bfb8      	it	lt
 800e028:	4618      	movlt	r0, r3
 800e02a:	e7a3      	b.n	800df74 <_printf_i+0x130>
 800e02c:	2301      	movs	r3, #1
 800e02e:	464a      	mov	r2, r9
 800e030:	4639      	mov	r1, r7
 800e032:	4630      	mov	r0, r6
 800e034:	47c0      	blx	r8
 800e036:	3001      	adds	r0, #1
 800e038:	d09a      	beq.n	800df70 <_printf_i+0x12c>
 800e03a:	3501      	adds	r5, #1
 800e03c:	68e3      	ldr	r3, [r4, #12]
 800e03e:	9a03      	ldr	r2, [sp, #12]
 800e040:	1a9b      	subs	r3, r3, r2
 800e042:	42ab      	cmp	r3, r5
 800e044:	dcf2      	bgt.n	800e02c <_printf_i+0x1e8>
 800e046:	e7eb      	b.n	800e020 <_printf_i+0x1dc>
 800e048:	2500      	movs	r5, #0
 800e04a:	f104 0919 	add.w	r9, r4, #25
 800e04e:	e7f5      	b.n	800e03c <_printf_i+0x1f8>
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1ac      	bne.n	800dfae <_printf_i+0x16a>
 800e054:	7803      	ldrb	r3, [r0, #0]
 800e056:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e05a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e05e:	e76c      	b.n	800df3a <_printf_i+0xf6>
 800e060:	08010783 	.word	0x08010783
 800e064:	08010794 	.word	0x08010794

0800e068 <iprintf>:
 800e068:	b40f      	push	{r0, r1, r2, r3}
 800e06a:	4b0a      	ldr	r3, [pc, #40]	; (800e094 <iprintf+0x2c>)
 800e06c:	b513      	push	{r0, r1, r4, lr}
 800e06e:	681c      	ldr	r4, [r3, #0]
 800e070:	b124      	cbz	r4, 800e07c <iprintf+0x14>
 800e072:	69a3      	ldr	r3, [r4, #24]
 800e074:	b913      	cbnz	r3, 800e07c <iprintf+0x14>
 800e076:	4620      	mov	r0, r4
 800e078:	f001 f8ce 	bl	800f218 <__sinit>
 800e07c:	ab05      	add	r3, sp, #20
 800e07e:	9a04      	ldr	r2, [sp, #16]
 800e080:	68a1      	ldr	r1, [r4, #8]
 800e082:	9301      	str	r3, [sp, #4]
 800e084:	4620      	mov	r0, r4
 800e086:	f7ff fa7d 	bl	800d584 <_vfiprintf_r>
 800e08a:	b002      	add	sp, #8
 800e08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e090:	b004      	add	sp, #16
 800e092:	4770      	bx	lr
 800e094:	2000002c 	.word	0x2000002c

0800e098 <putchar>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	4b08      	ldr	r3, [pc, #32]	; (800e0bc <putchar+0x24>)
 800e09c:	681c      	ldr	r4, [r3, #0]
 800e09e:	4605      	mov	r5, r0
 800e0a0:	b124      	cbz	r4, 800e0ac <putchar+0x14>
 800e0a2:	69a3      	ldr	r3, [r4, #24]
 800e0a4:	b913      	cbnz	r3, 800e0ac <putchar+0x14>
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f001 f8b6 	bl	800f218 <__sinit>
 800e0ac:	68a2      	ldr	r2, [r4, #8]
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0b6:	f001 be33 	b.w	800fd20 <_putc_r>
 800e0ba:	bf00      	nop
 800e0bc:	2000002c 	.word	0x2000002c

0800e0c0 <_puts_r>:
 800e0c0:	b570      	push	{r4, r5, r6, lr}
 800e0c2:	460e      	mov	r6, r1
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	b118      	cbz	r0, 800e0d0 <_puts_r+0x10>
 800e0c8:	6983      	ldr	r3, [r0, #24]
 800e0ca:	b90b      	cbnz	r3, 800e0d0 <_puts_r+0x10>
 800e0cc:	f001 f8a4 	bl	800f218 <__sinit>
 800e0d0:	69ab      	ldr	r3, [r5, #24]
 800e0d2:	68ac      	ldr	r4, [r5, #8]
 800e0d4:	b913      	cbnz	r3, 800e0dc <_puts_r+0x1c>
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f001 f89e 	bl	800f218 <__sinit>
 800e0dc:	4b23      	ldr	r3, [pc, #140]	; (800e16c <_puts_r+0xac>)
 800e0de:	429c      	cmp	r4, r3
 800e0e0:	d117      	bne.n	800e112 <_puts_r+0x52>
 800e0e2:	686c      	ldr	r4, [r5, #4]
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	071b      	lsls	r3, r3, #28
 800e0e8:	d51d      	bpl.n	800e126 <_puts_r+0x66>
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	b1db      	cbz	r3, 800e126 <_puts_r+0x66>
 800e0ee:	3e01      	subs	r6, #1
 800e0f0:	68a3      	ldr	r3, [r4, #8]
 800e0f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e0f6:	3b01      	subs	r3, #1
 800e0f8:	60a3      	str	r3, [r4, #8]
 800e0fa:	b9e9      	cbnz	r1, 800e138 <_puts_r+0x78>
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	da2e      	bge.n	800e15e <_puts_r+0x9e>
 800e100:	4622      	mov	r2, r4
 800e102:	210a      	movs	r1, #10
 800e104:	4628      	mov	r0, r5
 800e106:	f000 f889 	bl	800e21c <__swbuf_r>
 800e10a:	3001      	adds	r0, #1
 800e10c:	d011      	beq.n	800e132 <_puts_r+0x72>
 800e10e:	200a      	movs	r0, #10
 800e110:	e011      	b.n	800e136 <_puts_r+0x76>
 800e112:	4b17      	ldr	r3, [pc, #92]	; (800e170 <_puts_r+0xb0>)
 800e114:	429c      	cmp	r4, r3
 800e116:	d101      	bne.n	800e11c <_puts_r+0x5c>
 800e118:	68ac      	ldr	r4, [r5, #8]
 800e11a:	e7e3      	b.n	800e0e4 <_puts_r+0x24>
 800e11c:	4b15      	ldr	r3, [pc, #84]	; (800e174 <_puts_r+0xb4>)
 800e11e:	429c      	cmp	r4, r3
 800e120:	bf08      	it	eq
 800e122:	68ec      	ldreq	r4, [r5, #12]
 800e124:	e7de      	b.n	800e0e4 <_puts_r+0x24>
 800e126:	4621      	mov	r1, r4
 800e128:	4628      	mov	r0, r5
 800e12a:	f000 f8c9 	bl	800e2c0 <__swsetup_r>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0dd      	beq.n	800e0ee <_puts_r+0x2e>
 800e132:	f04f 30ff 	mov.w	r0, #4294967295
 800e136:	bd70      	pop	{r4, r5, r6, pc}
 800e138:	2b00      	cmp	r3, #0
 800e13a:	da04      	bge.n	800e146 <_puts_r+0x86>
 800e13c:	69a2      	ldr	r2, [r4, #24]
 800e13e:	429a      	cmp	r2, r3
 800e140:	dc06      	bgt.n	800e150 <_puts_r+0x90>
 800e142:	290a      	cmp	r1, #10
 800e144:	d004      	beq.n	800e150 <_puts_r+0x90>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	6022      	str	r2, [r4, #0]
 800e14c:	7019      	strb	r1, [r3, #0]
 800e14e:	e7cf      	b.n	800e0f0 <_puts_r+0x30>
 800e150:	4622      	mov	r2, r4
 800e152:	4628      	mov	r0, r5
 800e154:	f000 f862 	bl	800e21c <__swbuf_r>
 800e158:	3001      	adds	r0, #1
 800e15a:	d1c9      	bne.n	800e0f0 <_puts_r+0x30>
 800e15c:	e7e9      	b.n	800e132 <_puts_r+0x72>
 800e15e:	6823      	ldr	r3, [r4, #0]
 800e160:	200a      	movs	r0, #10
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	6022      	str	r2, [r4, #0]
 800e166:	7018      	strb	r0, [r3, #0]
 800e168:	e7e5      	b.n	800e136 <_puts_r+0x76>
 800e16a:	bf00      	nop
 800e16c:	080107d4 	.word	0x080107d4
 800e170:	080107f4 	.word	0x080107f4
 800e174:	080107b4 	.word	0x080107b4

0800e178 <puts>:
 800e178:	4b02      	ldr	r3, [pc, #8]	; (800e184 <puts+0xc>)
 800e17a:	4601      	mov	r1, r0
 800e17c:	6818      	ldr	r0, [r3, #0]
 800e17e:	f7ff bf9f 	b.w	800e0c0 <_puts_r>
 800e182:	bf00      	nop
 800e184:	2000002c 	.word	0x2000002c

0800e188 <_sbrk_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4c06      	ldr	r4, [pc, #24]	; (800e1a4 <_sbrk_r+0x1c>)
 800e18c:	2300      	movs	r3, #0
 800e18e:	4605      	mov	r5, r0
 800e190:	4608      	mov	r0, r1
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	f7f6 f802 	bl	800419c <_sbrk>
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	d102      	bne.n	800e1a2 <_sbrk_r+0x1a>
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	b103      	cbz	r3, 800e1a2 <_sbrk_r+0x1a>
 800e1a0:	602b      	str	r3, [r5, #0]
 800e1a2:	bd38      	pop	{r3, r4, r5, pc}
 800e1a4:	20001860 	.word	0x20001860

0800e1a8 <siprintf>:
 800e1a8:	b40e      	push	{r1, r2, r3}
 800e1aa:	b500      	push	{lr}
 800e1ac:	b09c      	sub	sp, #112	; 0x70
 800e1ae:	ab1d      	add	r3, sp, #116	; 0x74
 800e1b0:	9002      	str	r0, [sp, #8]
 800e1b2:	9006      	str	r0, [sp, #24]
 800e1b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1b8:	4809      	ldr	r0, [pc, #36]	; (800e1e0 <siprintf+0x38>)
 800e1ba:	9107      	str	r1, [sp, #28]
 800e1bc:	9104      	str	r1, [sp, #16]
 800e1be:	4909      	ldr	r1, [pc, #36]	; (800e1e4 <siprintf+0x3c>)
 800e1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c4:	9105      	str	r1, [sp, #20]
 800e1c6:	6800      	ldr	r0, [r0, #0]
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	a902      	add	r1, sp, #8
 800e1cc:	f001 fcb0 	bl	800fb30 <_svfiprintf_r>
 800e1d0:	9b02      	ldr	r3, [sp, #8]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
 800e1d6:	b01c      	add	sp, #112	; 0x70
 800e1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1dc:	b003      	add	sp, #12
 800e1de:	4770      	bx	lr
 800e1e0:	2000002c 	.word	0x2000002c
 800e1e4:	ffff0208 	.word	0xffff0208

0800e1e8 <strstr>:
 800e1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ea:	7803      	ldrb	r3, [r0, #0]
 800e1ec:	b17b      	cbz	r3, 800e20e <strstr+0x26>
 800e1ee:	4604      	mov	r4, r0
 800e1f0:	7823      	ldrb	r3, [r4, #0]
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	1c66      	adds	r6, r4, #1
 800e1f6:	b17b      	cbz	r3, 800e218 <strstr+0x30>
 800e1f8:	1e4a      	subs	r2, r1, #1
 800e1fa:	1e63      	subs	r3, r4, #1
 800e1fc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800e200:	b14d      	cbz	r5, 800e216 <strstr+0x2e>
 800e202:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e206:	42af      	cmp	r7, r5
 800e208:	4634      	mov	r4, r6
 800e20a:	d0f7      	beq.n	800e1fc <strstr+0x14>
 800e20c:	e7f0      	b.n	800e1f0 <strstr+0x8>
 800e20e:	780b      	ldrb	r3, [r1, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	bf18      	it	ne
 800e214:	2000      	movne	r0, #0
 800e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e218:	4618      	mov	r0, r3
 800e21a:	e7fc      	b.n	800e216 <strstr+0x2e>

0800e21c <__swbuf_r>:
 800e21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21e:	460e      	mov	r6, r1
 800e220:	4614      	mov	r4, r2
 800e222:	4605      	mov	r5, r0
 800e224:	b118      	cbz	r0, 800e22e <__swbuf_r+0x12>
 800e226:	6983      	ldr	r3, [r0, #24]
 800e228:	b90b      	cbnz	r3, 800e22e <__swbuf_r+0x12>
 800e22a:	f000 fff5 	bl	800f218 <__sinit>
 800e22e:	4b21      	ldr	r3, [pc, #132]	; (800e2b4 <__swbuf_r+0x98>)
 800e230:	429c      	cmp	r4, r3
 800e232:	d12a      	bne.n	800e28a <__swbuf_r+0x6e>
 800e234:	686c      	ldr	r4, [r5, #4]
 800e236:	69a3      	ldr	r3, [r4, #24]
 800e238:	60a3      	str	r3, [r4, #8]
 800e23a:	89a3      	ldrh	r3, [r4, #12]
 800e23c:	071a      	lsls	r2, r3, #28
 800e23e:	d52e      	bpl.n	800e29e <__swbuf_r+0x82>
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	b363      	cbz	r3, 800e29e <__swbuf_r+0x82>
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	6820      	ldr	r0, [r4, #0]
 800e248:	1ac0      	subs	r0, r0, r3
 800e24a:	6963      	ldr	r3, [r4, #20]
 800e24c:	b2f6      	uxtb	r6, r6
 800e24e:	4283      	cmp	r3, r0
 800e250:	4637      	mov	r7, r6
 800e252:	dc04      	bgt.n	800e25e <__swbuf_r+0x42>
 800e254:	4621      	mov	r1, r4
 800e256:	4628      	mov	r0, r5
 800e258:	f000 ff74 	bl	800f144 <_fflush_r>
 800e25c:	bb28      	cbnz	r0, 800e2aa <__swbuf_r+0x8e>
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	3b01      	subs	r3, #1
 800e262:	60a3      	str	r3, [r4, #8]
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	1c5a      	adds	r2, r3, #1
 800e268:	6022      	str	r2, [r4, #0]
 800e26a:	701e      	strb	r6, [r3, #0]
 800e26c:	6963      	ldr	r3, [r4, #20]
 800e26e:	3001      	adds	r0, #1
 800e270:	4283      	cmp	r3, r0
 800e272:	d004      	beq.n	800e27e <__swbuf_r+0x62>
 800e274:	89a3      	ldrh	r3, [r4, #12]
 800e276:	07db      	lsls	r3, r3, #31
 800e278:	d519      	bpl.n	800e2ae <__swbuf_r+0x92>
 800e27a:	2e0a      	cmp	r6, #10
 800e27c:	d117      	bne.n	800e2ae <__swbuf_r+0x92>
 800e27e:	4621      	mov	r1, r4
 800e280:	4628      	mov	r0, r5
 800e282:	f000 ff5f 	bl	800f144 <_fflush_r>
 800e286:	b190      	cbz	r0, 800e2ae <__swbuf_r+0x92>
 800e288:	e00f      	b.n	800e2aa <__swbuf_r+0x8e>
 800e28a:	4b0b      	ldr	r3, [pc, #44]	; (800e2b8 <__swbuf_r+0x9c>)
 800e28c:	429c      	cmp	r4, r3
 800e28e:	d101      	bne.n	800e294 <__swbuf_r+0x78>
 800e290:	68ac      	ldr	r4, [r5, #8]
 800e292:	e7d0      	b.n	800e236 <__swbuf_r+0x1a>
 800e294:	4b09      	ldr	r3, [pc, #36]	; (800e2bc <__swbuf_r+0xa0>)
 800e296:	429c      	cmp	r4, r3
 800e298:	bf08      	it	eq
 800e29a:	68ec      	ldreq	r4, [r5, #12]
 800e29c:	e7cb      	b.n	800e236 <__swbuf_r+0x1a>
 800e29e:	4621      	mov	r1, r4
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f000 f80d 	bl	800e2c0 <__swsetup_r>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d0cc      	beq.n	800e244 <__swbuf_r+0x28>
 800e2aa:	f04f 37ff 	mov.w	r7, #4294967295
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	080107d4 	.word	0x080107d4
 800e2b8:	080107f4 	.word	0x080107f4
 800e2bc:	080107b4 	.word	0x080107b4

0800e2c0 <__swsetup_r>:
 800e2c0:	4b32      	ldr	r3, [pc, #200]	; (800e38c <__swsetup_r+0xcc>)
 800e2c2:	b570      	push	{r4, r5, r6, lr}
 800e2c4:	681d      	ldr	r5, [r3, #0]
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	b125      	cbz	r5, 800e2d6 <__swsetup_r+0x16>
 800e2cc:	69ab      	ldr	r3, [r5, #24]
 800e2ce:	b913      	cbnz	r3, 800e2d6 <__swsetup_r+0x16>
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	f000 ffa1 	bl	800f218 <__sinit>
 800e2d6:	4b2e      	ldr	r3, [pc, #184]	; (800e390 <__swsetup_r+0xd0>)
 800e2d8:	429c      	cmp	r4, r3
 800e2da:	d10f      	bne.n	800e2fc <__swsetup_r+0x3c>
 800e2dc:	686c      	ldr	r4, [r5, #4]
 800e2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	0715      	lsls	r5, r2, #28
 800e2e6:	d42c      	bmi.n	800e342 <__swsetup_r+0x82>
 800e2e8:	06d0      	lsls	r0, r2, #27
 800e2ea:	d411      	bmi.n	800e310 <__swsetup_r+0x50>
 800e2ec:	2209      	movs	r2, #9
 800e2ee:	6032      	str	r2, [r6, #0]
 800e2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2f4:	81a3      	strh	r3, [r4, #12]
 800e2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2fa:	e03e      	b.n	800e37a <__swsetup_r+0xba>
 800e2fc:	4b25      	ldr	r3, [pc, #148]	; (800e394 <__swsetup_r+0xd4>)
 800e2fe:	429c      	cmp	r4, r3
 800e300:	d101      	bne.n	800e306 <__swsetup_r+0x46>
 800e302:	68ac      	ldr	r4, [r5, #8]
 800e304:	e7eb      	b.n	800e2de <__swsetup_r+0x1e>
 800e306:	4b24      	ldr	r3, [pc, #144]	; (800e398 <__swsetup_r+0xd8>)
 800e308:	429c      	cmp	r4, r3
 800e30a:	bf08      	it	eq
 800e30c:	68ec      	ldreq	r4, [r5, #12]
 800e30e:	e7e6      	b.n	800e2de <__swsetup_r+0x1e>
 800e310:	0751      	lsls	r1, r2, #29
 800e312:	d512      	bpl.n	800e33a <__swsetup_r+0x7a>
 800e314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e316:	b141      	cbz	r1, 800e32a <__swsetup_r+0x6a>
 800e318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e31c:	4299      	cmp	r1, r3
 800e31e:	d002      	beq.n	800e326 <__swsetup_r+0x66>
 800e320:	4630      	mov	r0, r6
 800e322:	f7ff f85d 	bl	800d3e0 <_free_r>
 800e326:	2300      	movs	r3, #0
 800e328:	6363      	str	r3, [r4, #52]	; 0x34
 800e32a:	89a3      	ldrh	r3, [r4, #12]
 800e32c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e330:	81a3      	strh	r3, [r4, #12]
 800e332:	2300      	movs	r3, #0
 800e334:	6063      	str	r3, [r4, #4]
 800e336:	6923      	ldr	r3, [r4, #16]
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	89a3      	ldrh	r3, [r4, #12]
 800e33c:	f043 0308 	orr.w	r3, r3, #8
 800e340:	81a3      	strh	r3, [r4, #12]
 800e342:	6923      	ldr	r3, [r4, #16]
 800e344:	b94b      	cbnz	r3, 800e35a <__swsetup_r+0x9a>
 800e346:	89a3      	ldrh	r3, [r4, #12]
 800e348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e350:	d003      	beq.n	800e35a <__swsetup_r+0x9a>
 800e352:	4621      	mov	r1, r4
 800e354:	4630      	mov	r0, r6
 800e356:	f001 f81b 	bl	800f390 <__smakebuf_r>
 800e35a:	89a2      	ldrh	r2, [r4, #12]
 800e35c:	f012 0301 	ands.w	r3, r2, #1
 800e360:	d00c      	beq.n	800e37c <__swsetup_r+0xbc>
 800e362:	2300      	movs	r3, #0
 800e364:	60a3      	str	r3, [r4, #8]
 800e366:	6963      	ldr	r3, [r4, #20]
 800e368:	425b      	negs	r3, r3
 800e36a:	61a3      	str	r3, [r4, #24]
 800e36c:	6923      	ldr	r3, [r4, #16]
 800e36e:	b953      	cbnz	r3, 800e386 <__swsetup_r+0xc6>
 800e370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e374:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e378:	d1ba      	bne.n	800e2f0 <__swsetup_r+0x30>
 800e37a:	bd70      	pop	{r4, r5, r6, pc}
 800e37c:	0792      	lsls	r2, r2, #30
 800e37e:	bf58      	it	pl
 800e380:	6963      	ldrpl	r3, [r4, #20]
 800e382:	60a3      	str	r3, [r4, #8]
 800e384:	e7f2      	b.n	800e36c <__swsetup_r+0xac>
 800e386:	2000      	movs	r0, #0
 800e388:	e7f7      	b.n	800e37a <__swsetup_r+0xba>
 800e38a:	bf00      	nop
 800e38c:	2000002c 	.word	0x2000002c
 800e390:	080107d4 	.word	0x080107d4
 800e394:	080107f4 	.word	0x080107f4
 800e398:	080107b4 	.word	0x080107b4

0800e39c <abort>:
 800e39c:	b508      	push	{r3, lr}
 800e39e:	2006      	movs	r0, #6
 800e3a0:	f001 fd1c 	bl	800fddc <raise>
 800e3a4:	2001      	movs	r0, #1
 800e3a6:	f7f5 fe81 	bl	80040ac <_exit>

0800e3aa <quorem>:
 800e3aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ae:	6903      	ldr	r3, [r0, #16]
 800e3b0:	690c      	ldr	r4, [r1, #16]
 800e3b2:	42a3      	cmp	r3, r4
 800e3b4:	4680      	mov	r8, r0
 800e3b6:	f2c0 8082 	blt.w	800e4be <quorem+0x114>
 800e3ba:	3c01      	subs	r4, #1
 800e3bc:	f101 0714 	add.w	r7, r1, #20
 800e3c0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e3c4:	f100 0614 	add.w	r6, r0, #20
 800e3c8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e3cc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e3d0:	eb06 030c 	add.w	r3, r6, ip
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	eb07 090c 	add.w	r9, r7, ip
 800e3da:	9301      	str	r3, [sp, #4]
 800e3dc:	fbb0 f5f5 	udiv	r5, r0, r5
 800e3e0:	b395      	cbz	r5, 800e448 <quorem+0x9e>
 800e3e2:	f04f 0a00 	mov.w	sl, #0
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	46b6      	mov	lr, r6
 800e3ea:	46d3      	mov	fp, sl
 800e3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3f0:	b293      	uxth	r3, r2
 800e3f2:	fb05 a303 	mla	r3, r5, r3, sl
 800e3f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	ebab 0303 	sub.w	r3, fp, r3
 800e400:	0c12      	lsrs	r2, r2, #16
 800e402:	f8de b000 	ldr.w	fp, [lr]
 800e406:	fb05 a202 	mla	r2, r5, r2, sl
 800e40a:	fa13 f38b 	uxtah	r3, r3, fp
 800e40e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e412:	fa1f fb82 	uxth.w	fp, r2
 800e416:	f8de 2000 	ldr.w	r2, [lr]
 800e41a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e41e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e422:	b29b      	uxth	r3, r3
 800e424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e428:	4581      	cmp	r9, r0
 800e42a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e42e:	f84e 3b04 	str.w	r3, [lr], #4
 800e432:	d2db      	bcs.n	800e3ec <quorem+0x42>
 800e434:	f856 300c 	ldr.w	r3, [r6, ip]
 800e438:	b933      	cbnz	r3, 800e448 <quorem+0x9e>
 800e43a:	9b01      	ldr	r3, [sp, #4]
 800e43c:	3b04      	subs	r3, #4
 800e43e:	429e      	cmp	r6, r3
 800e440:	461a      	mov	r2, r3
 800e442:	d330      	bcc.n	800e4a6 <quorem+0xfc>
 800e444:	f8c8 4010 	str.w	r4, [r8, #16]
 800e448:	4640      	mov	r0, r8
 800e44a:	f001 fa1d 	bl	800f888 <__mcmp>
 800e44e:	2800      	cmp	r0, #0
 800e450:	db25      	blt.n	800e49e <quorem+0xf4>
 800e452:	3501      	adds	r5, #1
 800e454:	4630      	mov	r0, r6
 800e456:	f04f 0c00 	mov.w	ip, #0
 800e45a:	f857 2b04 	ldr.w	r2, [r7], #4
 800e45e:	f8d0 e000 	ldr.w	lr, [r0]
 800e462:	b293      	uxth	r3, r2
 800e464:	ebac 0303 	sub.w	r3, ip, r3
 800e468:	0c12      	lsrs	r2, r2, #16
 800e46a:	fa13 f38e 	uxtah	r3, r3, lr
 800e46e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e472:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e476:	b29b      	uxth	r3, r3
 800e478:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e47c:	45b9      	cmp	r9, r7
 800e47e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e482:	f840 3b04 	str.w	r3, [r0], #4
 800e486:	d2e8      	bcs.n	800e45a <quorem+0xb0>
 800e488:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e48c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e490:	b92a      	cbnz	r2, 800e49e <quorem+0xf4>
 800e492:	3b04      	subs	r3, #4
 800e494:	429e      	cmp	r6, r3
 800e496:	461a      	mov	r2, r3
 800e498:	d30b      	bcc.n	800e4b2 <quorem+0x108>
 800e49a:	f8c8 4010 	str.w	r4, [r8, #16]
 800e49e:	4628      	mov	r0, r5
 800e4a0:	b003      	add	sp, #12
 800e4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a6:	6812      	ldr	r2, [r2, #0]
 800e4a8:	3b04      	subs	r3, #4
 800e4aa:	2a00      	cmp	r2, #0
 800e4ac:	d1ca      	bne.n	800e444 <quorem+0x9a>
 800e4ae:	3c01      	subs	r4, #1
 800e4b0:	e7c5      	b.n	800e43e <quorem+0x94>
 800e4b2:	6812      	ldr	r2, [r2, #0]
 800e4b4:	3b04      	subs	r3, #4
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	d1ef      	bne.n	800e49a <quorem+0xf0>
 800e4ba:	3c01      	subs	r4, #1
 800e4bc:	e7ea      	b.n	800e494 <quorem+0xea>
 800e4be:	2000      	movs	r0, #0
 800e4c0:	e7ee      	b.n	800e4a0 <quorem+0xf6>
 800e4c2:	0000      	movs	r0, r0
 800e4c4:	0000      	movs	r0, r0
	...

0800e4c8 <_dtoa_r>:
 800e4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	ec57 6b10 	vmov	r6, r7, d0
 800e4d0:	b097      	sub	sp, #92	; 0x5c
 800e4d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e4d4:	9106      	str	r1, [sp, #24]
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e4da:	9312      	str	r3, [sp, #72]	; 0x48
 800e4dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e4e0:	e9cd 6700 	strd	r6, r7, [sp]
 800e4e4:	b93d      	cbnz	r5, 800e4f6 <_dtoa_r+0x2e>
 800e4e6:	2010      	movs	r0, #16
 800e4e8:	f7fe ff62 	bl	800d3b0 <malloc>
 800e4ec:	6260      	str	r0, [r4, #36]	; 0x24
 800e4ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e4f2:	6005      	str	r5, [r0, #0]
 800e4f4:	60c5      	str	r5, [r0, #12]
 800e4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4f8:	6819      	ldr	r1, [r3, #0]
 800e4fa:	b151      	cbz	r1, 800e512 <_dtoa_r+0x4a>
 800e4fc:	685a      	ldr	r2, [r3, #4]
 800e4fe:	604a      	str	r2, [r1, #4]
 800e500:	2301      	movs	r3, #1
 800e502:	4093      	lsls	r3, r2
 800e504:	608b      	str	r3, [r1, #8]
 800e506:	4620      	mov	r0, r4
 800e508:	f000 ffdc 	bl	800f4c4 <_Bfree>
 800e50c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e50e:	2200      	movs	r2, #0
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	1e3b      	subs	r3, r7, #0
 800e514:	bfbb      	ittet	lt
 800e516:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e51a:	9301      	strlt	r3, [sp, #4]
 800e51c:	2300      	movge	r3, #0
 800e51e:	2201      	movlt	r2, #1
 800e520:	bfac      	ite	ge
 800e522:	f8c8 3000 	strge.w	r3, [r8]
 800e526:	f8c8 2000 	strlt.w	r2, [r8]
 800e52a:	4baf      	ldr	r3, [pc, #700]	; (800e7e8 <_dtoa_r+0x320>)
 800e52c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e530:	ea33 0308 	bics.w	r3, r3, r8
 800e534:	d114      	bne.n	800e560 <_dtoa_r+0x98>
 800e536:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e538:	f242 730f 	movw	r3, #9999	; 0x270f
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	9b00      	ldr	r3, [sp, #0]
 800e540:	b923      	cbnz	r3, 800e54c <_dtoa_r+0x84>
 800e542:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e546:	2800      	cmp	r0, #0
 800e548:	f000 8542 	beq.w	800efd0 <_dtoa_r+0xb08>
 800e54c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e54e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e7fc <_dtoa_r+0x334>
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 8544 	beq.w	800efe0 <_dtoa_r+0xb18>
 800e558:	f10b 0303 	add.w	r3, fp, #3
 800e55c:	f000 bd3e 	b.w	800efdc <_dtoa_r+0xb14>
 800e560:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e564:	2200      	movs	r2, #0
 800e566:	2300      	movs	r3, #0
 800e568:	4630      	mov	r0, r6
 800e56a:	4639      	mov	r1, r7
 800e56c:	f7f4 fa4c 	bl	8002a08 <__aeabi_dcmpeq>
 800e570:	4681      	mov	r9, r0
 800e572:	b168      	cbz	r0, 800e590 <_dtoa_r+0xc8>
 800e574:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e576:	2301      	movs	r3, #1
 800e578:	6013      	str	r3, [r2, #0]
 800e57a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 8524 	beq.w	800efca <_dtoa_r+0xb02>
 800e582:	4b9a      	ldr	r3, [pc, #616]	; (800e7ec <_dtoa_r+0x324>)
 800e584:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e586:	f103 3bff 	add.w	fp, r3, #4294967295
 800e58a:	6013      	str	r3, [r2, #0]
 800e58c:	f000 bd28 	b.w	800efe0 <_dtoa_r+0xb18>
 800e590:	aa14      	add	r2, sp, #80	; 0x50
 800e592:	a915      	add	r1, sp, #84	; 0x54
 800e594:	ec47 6b10 	vmov	d0, r6, r7
 800e598:	4620      	mov	r0, r4
 800e59a:	f001 f9ec 	bl	800f976 <__d2b>
 800e59e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e5a2:	9004      	str	r0, [sp, #16]
 800e5a4:	2d00      	cmp	r5, #0
 800e5a6:	d07c      	beq.n	800e6a2 <_dtoa_r+0x1da>
 800e5a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e5ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e5b0:	46b2      	mov	sl, r6
 800e5b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e5b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e5ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e5be:	2200      	movs	r2, #0
 800e5c0:	4b8b      	ldr	r3, [pc, #556]	; (800e7f0 <_dtoa_r+0x328>)
 800e5c2:	4650      	mov	r0, sl
 800e5c4:	4659      	mov	r1, fp
 800e5c6:	f7f3 fdff 	bl	80021c8 <__aeabi_dsub>
 800e5ca:	a381      	add	r3, pc, #516	; (adr r3, 800e7d0 <_dtoa_r+0x308>)
 800e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d0:	f7f3 ffb2 	bl	8002538 <__aeabi_dmul>
 800e5d4:	a380      	add	r3, pc, #512	; (adr r3, 800e7d8 <_dtoa_r+0x310>)
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f3 fdf7 	bl	80021cc <__adddf3>
 800e5de:	4606      	mov	r6, r0
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	460f      	mov	r7, r1
 800e5e4:	f7f3 ff3e 	bl	8002464 <__aeabi_i2d>
 800e5e8:	a37d      	add	r3, pc, #500	; (adr r3, 800e7e0 <_dtoa_r+0x318>)
 800e5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ee:	f7f3 ffa3 	bl	8002538 <__aeabi_dmul>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	4639      	mov	r1, r7
 800e5fa:	f7f3 fde7 	bl	80021cc <__adddf3>
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	f7f4 fa49 	bl	8002a98 <__aeabi_d2iz>
 800e606:	2200      	movs	r2, #0
 800e608:	4682      	mov	sl, r0
 800e60a:	2300      	movs	r3, #0
 800e60c:	4630      	mov	r0, r6
 800e60e:	4639      	mov	r1, r7
 800e610:	f7f4 fa04 	bl	8002a1c <__aeabi_dcmplt>
 800e614:	b148      	cbz	r0, 800e62a <_dtoa_r+0x162>
 800e616:	4650      	mov	r0, sl
 800e618:	f7f3 ff24 	bl	8002464 <__aeabi_i2d>
 800e61c:	4632      	mov	r2, r6
 800e61e:	463b      	mov	r3, r7
 800e620:	f7f4 f9f2 	bl	8002a08 <__aeabi_dcmpeq>
 800e624:	b908      	cbnz	r0, 800e62a <_dtoa_r+0x162>
 800e626:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e62a:	f1ba 0f16 	cmp.w	sl, #22
 800e62e:	d859      	bhi.n	800e6e4 <_dtoa_r+0x21c>
 800e630:	4970      	ldr	r1, [pc, #448]	; (800e7f4 <_dtoa_r+0x32c>)
 800e632:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e63e:	f7f4 fa0b 	bl	8002a58 <__aeabi_dcmpgt>
 800e642:	2800      	cmp	r0, #0
 800e644:	d050      	beq.n	800e6e8 <_dtoa_r+0x220>
 800e646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e64a:	2300      	movs	r3, #0
 800e64c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e64e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e650:	1b5d      	subs	r5, r3, r5
 800e652:	f1b5 0801 	subs.w	r8, r5, #1
 800e656:	bf49      	itett	mi
 800e658:	f1c5 0301 	rsbmi	r3, r5, #1
 800e65c:	2300      	movpl	r3, #0
 800e65e:	9305      	strmi	r3, [sp, #20]
 800e660:	f04f 0800 	movmi.w	r8, #0
 800e664:	bf58      	it	pl
 800e666:	9305      	strpl	r3, [sp, #20]
 800e668:	f1ba 0f00 	cmp.w	sl, #0
 800e66c:	db3e      	blt.n	800e6ec <_dtoa_r+0x224>
 800e66e:	2300      	movs	r3, #0
 800e670:	44d0      	add	r8, sl
 800e672:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e676:	9307      	str	r3, [sp, #28]
 800e678:	9b06      	ldr	r3, [sp, #24]
 800e67a:	2b09      	cmp	r3, #9
 800e67c:	f200 8090 	bhi.w	800e7a0 <_dtoa_r+0x2d8>
 800e680:	2b05      	cmp	r3, #5
 800e682:	bfc4      	itt	gt
 800e684:	3b04      	subgt	r3, #4
 800e686:	9306      	strgt	r3, [sp, #24]
 800e688:	9b06      	ldr	r3, [sp, #24]
 800e68a:	f1a3 0302 	sub.w	r3, r3, #2
 800e68e:	bfcc      	ite	gt
 800e690:	2500      	movgt	r5, #0
 800e692:	2501      	movle	r5, #1
 800e694:	2b03      	cmp	r3, #3
 800e696:	f200 808f 	bhi.w	800e7b8 <_dtoa_r+0x2f0>
 800e69a:	e8df f003 	tbb	[pc, r3]
 800e69e:	7f7d      	.short	0x7f7d
 800e6a0:	7131      	.short	0x7131
 800e6a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e6a6:	441d      	add	r5, r3
 800e6a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e6ac:	2820      	cmp	r0, #32
 800e6ae:	dd13      	ble.n	800e6d8 <_dtoa_r+0x210>
 800e6b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e6b4:	9b00      	ldr	r3, [sp, #0]
 800e6b6:	fa08 f800 	lsl.w	r8, r8, r0
 800e6ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e6be:	fa23 f000 	lsr.w	r0, r3, r0
 800e6c2:	ea48 0000 	orr.w	r0, r8, r0
 800e6c6:	f7f3 febd 	bl	8002444 <__aeabi_ui2d>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	4682      	mov	sl, r0
 800e6ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e6d2:	3d01      	subs	r5, #1
 800e6d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e6d6:	e772      	b.n	800e5be <_dtoa_r+0xf6>
 800e6d8:	9b00      	ldr	r3, [sp, #0]
 800e6da:	f1c0 0020 	rsb	r0, r0, #32
 800e6de:	fa03 f000 	lsl.w	r0, r3, r0
 800e6e2:	e7f0      	b.n	800e6c6 <_dtoa_r+0x1fe>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e7b1      	b.n	800e64c <_dtoa_r+0x184>
 800e6e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e6ea:	e7b0      	b.n	800e64e <_dtoa_r+0x186>
 800e6ec:	9b05      	ldr	r3, [sp, #20]
 800e6ee:	eba3 030a 	sub.w	r3, r3, sl
 800e6f2:	9305      	str	r3, [sp, #20]
 800e6f4:	f1ca 0300 	rsb	r3, sl, #0
 800e6f8:	9307      	str	r3, [sp, #28]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800e6fe:	e7bb      	b.n	800e678 <_dtoa_r+0x1b0>
 800e700:	2301      	movs	r3, #1
 800e702:	930a      	str	r3, [sp, #40]	; 0x28
 800e704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e706:	2b00      	cmp	r3, #0
 800e708:	dd59      	ble.n	800e7be <_dtoa_r+0x2f6>
 800e70a:	9302      	str	r3, [sp, #8]
 800e70c:	4699      	mov	r9, r3
 800e70e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e710:	2200      	movs	r2, #0
 800e712:	6072      	str	r2, [r6, #4]
 800e714:	2204      	movs	r2, #4
 800e716:	f102 0014 	add.w	r0, r2, #20
 800e71a:	4298      	cmp	r0, r3
 800e71c:	6871      	ldr	r1, [r6, #4]
 800e71e:	d953      	bls.n	800e7c8 <_dtoa_r+0x300>
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fe9b 	bl	800f45c <_Balloc>
 800e726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e728:	6030      	str	r0, [r6, #0]
 800e72a:	f1b9 0f0e 	cmp.w	r9, #14
 800e72e:	f8d3 b000 	ldr.w	fp, [r3]
 800e732:	f200 80e6 	bhi.w	800e902 <_dtoa_r+0x43a>
 800e736:	2d00      	cmp	r5, #0
 800e738:	f000 80e3 	beq.w	800e902 <_dtoa_r+0x43a>
 800e73c:	ed9d 7b00 	vldr	d7, [sp]
 800e740:	f1ba 0f00 	cmp.w	sl, #0
 800e744:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e748:	dd74      	ble.n	800e834 <_dtoa_r+0x36c>
 800e74a:	4a2a      	ldr	r2, [pc, #168]	; (800e7f4 <_dtoa_r+0x32c>)
 800e74c:	f00a 030f 	and.w	r3, sl, #15
 800e750:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e754:	ed93 7b00 	vldr	d7, [r3]
 800e758:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e75c:	06f0      	lsls	r0, r6, #27
 800e75e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e762:	d565      	bpl.n	800e830 <_dtoa_r+0x368>
 800e764:	4b24      	ldr	r3, [pc, #144]	; (800e7f8 <_dtoa_r+0x330>)
 800e766:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e76a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e76e:	f7f4 f80d 	bl	800278c <__aeabi_ddiv>
 800e772:	e9cd 0100 	strd	r0, r1, [sp]
 800e776:	f006 060f 	and.w	r6, r6, #15
 800e77a:	2503      	movs	r5, #3
 800e77c:	4f1e      	ldr	r7, [pc, #120]	; (800e7f8 <_dtoa_r+0x330>)
 800e77e:	e04c      	b.n	800e81a <_dtoa_r+0x352>
 800e780:	2301      	movs	r3, #1
 800e782:	930a      	str	r3, [sp, #40]	; 0x28
 800e784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e786:	4453      	add	r3, sl
 800e788:	f103 0901 	add.w	r9, r3, #1
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	464b      	mov	r3, r9
 800e790:	2b01      	cmp	r3, #1
 800e792:	bfb8      	it	lt
 800e794:	2301      	movlt	r3, #1
 800e796:	e7ba      	b.n	800e70e <_dtoa_r+0x246>
 800e798:	2300      	movs	r3, #0
 800e79a:	e7b2      	b.n	800e702 <_dtoa_r+0x23a>
 800e79c:	2300      	movs	r3, #0
 800e79e:	e7f0      	b.n	800e782 <_dtoa_r+0x2ba>
 800e7a0:	2501      	movs	r5, #1
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	9306      	str	r3, [sp, #24]
 800e7a6:	950a      	str	r5, [sp, #40]	; 0x28
 800e7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ac:	9302      	str	r3, [sp, #8]
 800e7ae:	4699      	mov	r9, r3
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2312      	movs	r3, #18
 800e7b4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e7b6:	e7aa      	b.n	800e70e <_dtoa_r+0x246>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	930a      	str	r3, [sp, #40]	; 0x28
 800e7bc:	e7f4      	b.n	800e7a8 <_dtoa_r+0x2e0>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	9302      	str	r3, [sp, #8]
 800e7c2:	4699      	mov	r9, r3
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	e7f5      	b.n	800e7b4 <_dtoa_r+0x2ec>
 800e7c8:	3101      	adds	r1, #1
 800e7ca:	6071      	str	r1, [r6, #4]
 800e7cc:	0052      	lsls	r2, r2, #1
 800e7ce:	e7a2      	b.n	800e716 <_dtoa_r+0x24e>
 800e7d0:	636f4361 	.word	0x636f4361
 800e7d4:	3fd287a7 	.word	0x3fd287a7
 800e7d8:	8b60c8b3 	.word	0x8b60c8b3
 800e7dc:	3fc68a28 	.word	0x3fc68a28
 800e7e0:	509f79fb 	.word	0x509f79fb
 800e7e4:	3fd34413 	.word	0x3fd34413
 800e7e8:	7ff00000 	.word	0x7ff00000
 800e7ec:	08010782 	.word	0x08010782
 800e7f0:	3ff80000 	.word	0x3ff80000
 800e7f4:	08010840 	.word	0x08010840
 800e7f8:	08010818 	.word	0x08010818
 800e7fc:	080107ae 	.word	0x080107ae
 800e800:	07f1      	lsls	r1, r6, #31
 800e802:	d508      	bpl.n	800e816 <_dtoa_r+0x34e>
 800e804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e80c:	f7f3 fe94 	bl	8002538 <__aeabi_dmul>
 800e810:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e814:	3501      	adds	r5, #1
 800e816:	1076      	asrs	r6, r6, #1
 800e818:	3708      	adds	r7, #8
 800e81a:	2e00      	cmp	r6, #0
 800e81c:	d1f0      	bne.n	800e800 <_dtoa_r+0x338>
 800e81e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e822:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e826:	f7f3 ffb1 	bl	800278c <__aeabi_ddiv>
 800e82a:	e9cd 0100 	strd	r0, r1, [sp]
 800e82e:	e01a      	b.n	800e866 <_dtoa_r+0x39e>
 800e830:	2502      	movs	r5, #2
 800e832:	e7a3      	b.n	800e77c <_dtoa_r+0x2b4>
 800e834:	f000 80a0 	beq.w	800e978 <_dtoa_r+0x4b0>
 800e838:	f1ca 0600 	rsb	r6, sl, #0
 800e83c:	4b9f      	ldr	r3, [pc, #636]	; (800eabc <_dtoa_r+0x5f4>)
 800e83e:	4fa0      	ldr	r7, [pc, #640]	; (800eac0 <_dtoa_r+0x5f8>)
 800e840:	f006 020f 	and.w	r2, r6, #15
 800e844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e850:	f7f3 fe72 	bl	8002538 <__aeabi_dmul>
 800e854:	e9cd 0100 	strd	r0, r1, [sp]
 800e858:	1136      	asrs	r6, r6, #4
 800e85a:	2300      	movs	r3, #0
 800e85c:	2502      	movs	r5, #2
 800e85e:	2e00      	cmp	r6, #0
 800e860:	d17f      	bne.n	800e962 <_dtoa_r+0x49a>
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1e1      	bne.n	800e82a <_dtoa_r+0x362>
 800e866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 8087 	beq.w	800e97c <_dtoa_r+0x4b4>
 800e86e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e872:	2200      	movs	r2, #0
 800e874:	4b93      	ldr	r3, [pc, #588]	; (800eac4 <_dtoa_r+0x5fc>)
 800e876:	4630      	mov	r0, r6
 800e878:	4639      	mov	r1, r7
 800e87a:	f7f4 f8cf 	bl	8002a1c <__aeabi_dcmplt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d07c      	beq.n	800e97c <_dtoa_r+0x4b4>
 800e882:	f1b9 0f00 	cmp.w	r9, #0
 800e886:	d079      	beq.n	800e97c <_dtoa_r+0x4b4>
 800e888:	9b02      	ldr	r3, [sp, #8]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	dd35      	ble.n	800e8fa <_dtoa_r+0x432>
 800e88e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e892:	9308      	str	r3, [sp, #32]
 800e894:	4639      	mov	r1, r7
 800e896:	2200      	movs	r2, #0
 800e898:	4b8b      	ldr	r3, [pc, #556]	; (800eac8 <_dtoa_r+0x600>)
 800e89a:	4630      	mov	r0, r6
 800e89c:	f7f3 fe4c 	bl	8002538 <__aeabi_dmul>
 800e8a0:	e9cd 0100 	strd	r0, r1, [sp]
 800e8a4:	9f02      	ldr	r7, [sp, #8]
 800e8a6:	3501      	adds	r5, #1
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f7f3 fddb 	bl	8002464 <__aeabi_i2d>
 800e8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8b2:	f7f3 fe41 	bl	8002538 <__aeabi_dmul>
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	4b84      	ldr	r3, [pc, #528]	; (800eacc <_dtoa_r+0x604>)
 800e8ba:	f7f3 fc87 	bl	80021cc <__adddf3>
 800e8be:	4605      	mov	r5, r0
 800e8c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e8c4:	2f00      	cmp	r7, #0
 800e8c6:	d15d      	bne.n	800e984 <_dtoa_r+0x4bc>
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	4b81      	ldr	r3, [pc, #516]	; (800ead0 <_dtoa_r+0x608>)
 800e8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8d0:	f7f3 fc7a 	bl	80021c8 <__aeabi_dsub>
 800e8d4:	462a      	mov	r2, r5
 800e8d6:	4633      	mov	r3, r6
 800e8d8:	e9cd 0100 	strd	r0, r1, [sp]
 800e8dc:	f7f4 f8bc 	bl	8002a58 <__aeabi_dcmpgt>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	f040 8288 	bne.w	800edf6 <_dtoa_r+0x92e>
 800e8e6:	462a      	mov	r2, r5
 800e8e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e8ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8f0:	f7f4 f894 	bl	8002a1c <__aeabi_dcmplt>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	f040 827c 	bne.w	800edf2 <_dtoa_r+0x92a>
 800e8fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e8fe:	e9cd 2300 	strd	r2, r3, [sp]
 800e902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e904:	2b00      	cmp	r3, #0
 800e906:	f2c0 8150 	blt.w	800ebaa <_dtoa_r+0x6e2>
 800e90a:	f1ba 0f0e 	cmp.w	sl, #14
 800e90e:	f300 814c 	bgt.w	800ebaa <_dtoa_r+0x6e2>
 800e912:	4b6a      	ldr	r3, [pc, #424]	; (800eabc <_dtoa_r+0x5f4>)
 800e914:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e918:	ed93 7b00 	vldr	d7, [r3]
 800e91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e924:	f280 80d8 	bge.w	800ead8 <_dtoa_r+0x610>
 800e928:	f1b9 0f00 	cmp.w	r9, #0
 800e92c:	f300 80d4 	bgt.w	800ead8 <_dtoa_r+0x610>
 800e930:	f040 825e 	bne.w	800edf0 <_dtoa_r+0x928>
 800e934:	2200      	movs	r2, #0
 800e936:	4b66      	ldr	r3, [pc, #408]	; (800ead0 <_dtoa_r+0x608>)
 800e938:	ec51 0b17 	vmov	r0, r1, d7
 800e93c:	f7f3 fdfc 	bl	8002538 <__aeabi_dmul>
 800e940:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e944:	f7f4 f87e 	bl	8002a44 <__aeabi_dcmpge>
 800e948:	464f      	mov	r7, r9
 800e94a:	464e      	mov	r6, r9
 800e94c:	2800      	cmp	r0, #0
 800e94e:	f040 8234 	bne.w	800edba <_dtoa_r+0x8f2>
 800e952:	2331      	movs	r3, #49	; 0x31
 800e954:	f10b 0501 	add.w	r5, fp, #1
 800e958:	f88b 3000 	strb.w	r3, [fp]
 800e95c:	f10a 0a01 	add.w	sl, sl, #1
 800e960:	e22f      	b.n	800edc2 <_dtoa_r+0x8fa>
 800e962:	07f2      	lsls	r2, r6, #31
 800e964:	d505      	bpl.n	800e972 <_dtoa_r+0x4aa>
 800e966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e96a:	f7f3 fde5 	bl	8002538 <__aeabi_dmul>
 800e96e:	3501      	adds	r5, #1
 800e970:	2301      	movs	r3, #1
 800e972:	1076      	asrs	r6, r6, #1
 800e974:	3708      	adds	r7, #8
 800e976:	e772      	b.n	800e85e <_dtoa_r+0x396>
 800e978:	2502      	movs	r5, #2
 800e97a:	e774      	b.n	800e866 <_dtoa_r+0x39e>
 800e97c:	f8cd a020 	str.w	sl, [sp, #32]
 800e980:	464f      	mov	r7, r9
 800e982:	e791      	b.n	800e8a8 <_dtoa_r+0x3e0>
 800e984:	4b4d      	ldr	r3, [pc, #308]	; (800eabc <_dtoa_r+0x5f4>)
 800e986:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e98a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e990:	2b00      	cmp	r3, #0
 800e992:	d047      	beq.n	800ea24 <_dtoa_r+0x55c>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	2000      	movs	r0, #0
 800e99a:	494e      	ldr	r1, [pc, #312]	; (800ead4 <_dtoa_r+0x60c>)
 800e99c:	f7f3 fef6 	bl	800278c <__aeabi_ddiv>
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4633      	mov	r3, r6
 800e9a4:	f7f3 fc10 	bl	80021c8 <__aeabi_dsub>
 800e9a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e9ac:	465d      	mov	r5, fp
 800e9ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9b2:	f7f4 f871 	bl	8002a98 <__aeabi_d2iz>
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	f7f3 fd54 	bl	8002464 <__aeabi_i2d>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9c4:	f7f3 fc00 	bl	80021c8 <__aeabi_dsub>
 800e9c8:	3630      	adds	r6, #48	; 0x30
 800e9ca:	f805 6b01 	strb.w	r6, [r5], #1
 800e9ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e9d2:	e9cd 0100 	strd	r0, r1, [sp]
 800e9d6:	f7f4 f821 	bl	8002a1c <__aeabi_dcmplt>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d163      	bne.n	800eaa6 <_dtoa_r+0x5de>
 800e9de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	4937      	ldr	r1, [pc, #220]	; (800eac4 <_dtoa_r+0x5fc>)
 800e9e6:	f7f3 fbef 	bl	80021c8 <__aeabi_dsub>
 800e9ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e9ee:	f7f4 f815 	bl	8002a1c <__aeabi_dcmplt>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f040 80b7 	bne.w	800eb66 <_dtoa_r+0x69e>
 800e9f8:	eba5 030b 	sub.w	r3, r5, fp
 800e9fc:	429f      	cmp	r7, r3
 800e9fe:	f77f af7c 	ble.w	800e8fa <_dtoa_r+0x432>
 800ea02:	2200      	movs	r2, #0
 800ea04:	4b30      	ldr	r3, [pc, #192]	; (800eac8 <_dtoa_r+0x600>)
 800ea06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea0a:	f7f3 fd95 	bl	8002538 <__aeabi_dmul>
 800ea0e:	2200      	movs	r2, #0
 800ea10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ea14:	4b2c      	ldr	r3, [pc, #176]	; (800eac8 <_dtoa_r+0x600>)
 800ea16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea1a:	f7f3 fd8d 	bl	8002538 <__aeabi_dmul>
 800ea1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ea22:	e7c4      	b.n	800e9ae <_dtoa_r+0x4e6>
 800ea24:	462a      	mov	r2, r5
 800ea26:	4633      	mov	r3, r6
 800ea28:	f7f3 fd86 	bl	8002538 <__aeabi_dmul>
 800ea2c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ea30:	eb0b 0507 	add.w	r5, fp, r7
 800ea34:	465e      	mov	r6, fp
 800ea36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea3a:	f7f4 f82d 	bl	8002a98 <__aeabi_d2iz>
 800ea3e:	4607      	mov	r7, r0
 800ea40:	f7f3 fd10 	bl	8002464 <__aeabi_i2d>
 800ea44:	3730      	adds	r7, #48	; 0x30
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea4e:	f7f3 fbbb 	bl	80021c8 <__aeabi_dsub>
 800ea52:	f806 7b01 	strb.w	r7, [r6], #1
 800ea56:	42ae      	cmp	r6, r5
 800ea58:	e9cd 0100 	strd	r0, r1, [sp]
 800ea5c:	f04f 0200 	mov.w	r2, #0
 800ea60:	d126      	bne.n	800eab0 <_dtoa_r+0x5e8>
 800ea62:	4b1c      	ldr	r3, [pc, #112]	; (800ead4 <_dtoa_r+0x60c>)
 800ea64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ea68:	f7f3 fbb0 	bl	80021cc <__adddf3>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	460b      	mov	r3, r1
 800ea70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea74:	f7f3 fff0 	bl	8002a58 <__aeabi_dcmpgt>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d174      	bne.n	800eb66 <_dtoa_r+0x69e>
 800ea7c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ea80:	2000      	movs	r0, #0
 800ea82:	4914      	ldr	r1, [pc, #80]	; (800ead4 <_dtoa_r+0x60c>)
 800ea84:	f7f3 fba0 	bl	80021c8 <__aeabi_dsub>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea90:	f7f3 ffc4 	bl	8002a1c <__aeabi_dcmplt>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	f43f af30 	beq.w	800e8fa <_dtoa_r+0x432>
 800ea9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea9e:	2b30      	cmp	r3, #48	; 0x30
 800eaa0:	f105 32ff 	add.w	r2, r5, #4294967295
 800eaa4:	d002      	beq.n	800eaac <_dtoa_r+0x5e4>
 800eaa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800eaaa:	e04a      	b.n	800eb42 <_dtoa_r+0x67a>
 800eaac:	4615      	mov	r5, r2
 800eaae:	e7f4      	b.n	800ea9a <_dtoa_r+0x5d2>
 800eab0:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <_dtoa_r+0x600>)
 800eab2:	f7f3 fd41 	bl	8002538 <__aeabi_dmul>
 800eab6:	e9cd 0100 	strd	r0, r1, [sp]
 800eaba:	e7bc      	b.n	800ea36 <_dtoa_r+0x56e>
 800eabc:	08010840 	.word	0x08010840
 800eac0:	08010818 	.word	0x08010818
 800eac4:	3ff00000 	.word	0x3ff00000
 800eac8:	40240000 	.word	0x40240000
 800eacc:	401c0000 	.word	0x401c0000
 800ead0:	40140000 	.word	0x40140000
 800ead4:	3fe00000 	.word	0x3fe00000
 800ead8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eadc:	465d      	mov	r5, fp
 800eade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eae2:	4630      	mov	r0, r6
 800eae4:	4639      	mov	r1, r7
 800eae6:	f7f3 fe51 	bl	800278c <__aeabi_ddiv>
 800eaea:	f7f3 ffd5 	bl	8002a98 <__aeabi_d2iz>
 800eaee:	4680      	mov	r8, r0
 800eaf0:	f7f3 fcb8 	bl	8002464 <__aeabi_i2d>
 800eaf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaf8:	f7f3 fd1e 	bl	8002538 <__aeabi_dmul>
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800eb08:	f7f3 fb5e 	bl	80021c8 <__aeabi_dsub>
 800eb0c:	f805 6b01 	strb.w	r6, [r5], #1
 800eb10:	eba5 060b 	sub.w	r6, r5, fp
 800eb14:	45b1      	cmp	r9, r6
 800eb16:	4602      	mov	r2, r0
 800eb18:	460b      	mov	r3, r1
 800eb1a:	d139      	bne.n	800eb90 <_dtoa_r+0x6c8>
 800eb1c:	f7f3 fb56 	bl	80021cc <__adddf3>
 800eb20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb24:	4606      	mov	r6, r0
 800eb26:	460f      	mov	r7, r1
 800eb28:	f7f3 ff96 	bl	8002a58 <__aeabi_dcmpgt>
 800eb2c:	b9c8      	cbnz	r0, 800eb62 <_dtoa_r+0x69a>
 800eb2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb32:	4630      	mov	r0, r6
 800eb34:	4639      	mov	r1, r7
 800eb36:	f7f3 ff67 	bl	8002a08 <__aeabi_dcmpeq>
 800eb3a:	b110      	cbz	r0, 800eb42 <_dtoa_r+0x67a>
 800eb3c:	f018 0f01 	tst.w	r8, #1
 800eb40:	d10f      	bne.n	800eb62 <_dtoa_r+0x69a>
 800eb42:	9904      	ldr	r1, [sp, #16]
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fcbd 	bl	800f4c4 <_Bfree>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb4e:	702b      	strb	r3, [r5, #0]
 800eb50:	f10a 0301 	add.w	r3, sl, #1
 800eb54:	6013      	str	r3, [r2, #0]
 800eb56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 8241 	beq.w	800efe0 <_dtoa_r+0xb18>
 800eb5e:	601d      	str	r5, [r3, #0]
 800eb60:	e23e      	b.n	800efe0 <_dtoa_r+0xb18>
 800eb62:	f8cd a020 	str.w	sl, [sp, #32]
 800eb66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eb6a:	2a39      	cmp	r2, #57	; 0x39
 800eb6c:	f105 33ff 	add.w	r3, r5, #4294967295
 800eb70:	d108      	bne.n	800eb84 <_dtoa_r+0x6bc>
 800eb72:	459b      	cmp	fp, r3
 800eb74:	d10a      	bne.n	800eb8c <_dtoa_r+0x6c4>
 800eb76:	9b08      	ldr	r3, [sp, #32]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	9308      	str	r3, [sp, #32]
 800eb7c:	2330      	movs	r3, #48	; 0x30
 800eb7e:	f88b 3000 	strb.w	r3, [fp]
 800eb82:	465b      	mov	r3, fp
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	3201      	adds	r2, #1
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	e78c      	b.n	800eaa6 <_dtoa_r+0x5de>
 800eb8c:	461d      	mov	r5, r3
 800eb8e:	e7ea      	b.n	800eb66 <_dtoa_r+0x69e>
 800eb90:	2200      	movs	r2, #0
 800eb92:	4b9b      	ldr	r3, [pc, #620]	; (800ee00 <_dtoa_r+0x938>)
 800eb94:	f7f3 fcd0 	bl	8002538 <__aeabi_dmul>
 800eb98:	2200      	movs	r2, #0
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	460f      	mov	r7, r1
 800eba0:	f7f3 ff32 	bl	8002a08 <__aeabi_dcmpeq>
 800eba4:	2800      	cmp	r0, #0
 800eba6:	d09a      	beq.n	800eade <_dtoa_r+0x616>
 800eba8:	e7cb      	b.n	800eb42 <_dtoa_r+0x67a>
 800ebaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebac:	2a00      	cmp	r2, #0
 800ebae:	f000 808b 	beq.w	800ecc8 <_dtoa_r+0x800>
 800ebb2:	9a06      	ldr	r2, [sp, #24]
 800ebb4:	2a01      	cmp	r2, #1
 800ebb6:	dc6e      	bgt.n	800ec96 <_dtoa_r+0x7ce>
 800ebb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ebba:	2a00      	cmp	r2, #0
 800ebbc:	d067      	beq.n	800ec8e <_dtoa_r+0x7c6>
 800ebbe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebc2:	9f07      	ldr	r7, [sp, #28]
 800ebc4:	9d05      	ldr	r5, [sp, #20]
 800ebc6:	9a05      	ldr	r2, [sp, #20]
 800ebc8:	2101      	movs	r1, #1
 800ebca:	441a      	add	r2, r3
 800ebcc:	4620      	mov	r0, r4
 800ebce:	9205      	str	r2, [sp, #20]
 800ebd0:	4498      	add	r8, r3
 800ebd2:	f000 fd17 	bl	800f604 <__i2b>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	2d00      	cmp	r5, #0
 800ebda:	dd0c      	ble.n	800ebf6 <_dtoa_r+0x72e>
 800ebdc:	f1b8 0f00 	cmp.w	r8, #0
 800ebe0:	dd09      	ble.n	800ebf6 <_dtoa_r+0x72e>
 800ebe2:	4545      	cmp	r5, r8
 800ebe4:	9a05      	ldr	r2, [sp, #20]
 800ebe6:	462b      	mov	r3, r5
 800ebe8:	bfa8      	it	ge
 800ebea:	4643      	movge	r3, r8
 800ebec:	1ad2      	subs	r2, r2, r3
 800ebee:	9205      	str	r2, [sp, #20]
 800ebf0:	1aed      	subs	r5, r5, r3
 800ebf2:	eba8 0803 	sub.w	r8, r8, r3
 800ebf6:	9b07      	ldr	r3, [sp, #28]
 800ebf8:	b1eb      	cbz	r3, 800ec36 <_dtoa_r+0x76e>
 800ebfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d067      	beq.n	800ecd0 <_dtoa_r+0x808>
 800ec00:	b18f      	cbz	r7, 800ec26 <_dtoa_r+0x75e>
 800ec02:	4631      	mov	r1, r6
 800ec04:	463a      	mov	r2, r7
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 fd9c 	bl	800f744 <__pow5mult>
 800ec0c:	9a04      	ldr	r2, [sp, #16]
 800ec0e:	4601      	mov	r1, r0
 800ec10:	4606      	mov	r6, r0
 800ec12:	4620      	mov	r0, r4
 800ec14:	f000 fcff 	bl	800f616 <__multiply>
 800ec18:	9904      	ldr	r1, [sp, #16]
 800ec1a:	9008      	str	r0, [sp, #32]
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fc51 	bl	800f4c4 <_Bfree>
 800ec22:	9b08      	ldr	r3, [sp, #32]
 800ec24:	9304      	str	r3, [sp, #16]
 800ec26:	9b07      	ldr	r3, [sp, #28]
 800ec28:	1bda      	subs	r2, r3, r7
 800ec2a:	d004      	beq.n	800ec36 <_dtoa_r+0x76e>
 800ec2c:	9904      	ldr	r1, [sp, #16]
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f000 fd88 	bl	800f744 <__pow5mult>
 800ec34:	9004      	str	r0, [sp, #16]
 800ec36:	2101      	movs	r1, #1
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 fce3 	bl	800f604 <__i2b>
 800ec3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec40:	4607      	mov	r7, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f000 81d0 	beq.w	800efe8 <_dtoa_r+0xb20>
 800ec48:	461a      	mov	r2, r3
 800ec4a:	4601      	mov	r1, r0
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	f000 fd79 	bl	800f744 <__pow5mult>
 800ec52:	9b06      	ldr	r3, [sp, #24]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	4607      	mov	r7, r0
 800ec58:	dc40      	bgt.n	800ecdc <_dtoa_r+0x814>
 800ec5a:	9b00      	ldr	r3, [sp, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d139      	bne.n	800ecd4 <_dtoa_r+0x80c>
 800ec60:	9b01      	ldr	r3, [sp, #4]
 800ec62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d136      	bne.n	800ecd8 <_dtoa_r+0x810>
 800ec6a:	9b01      	ldr	r3, [sp, #4]
 800ec6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec70:	0d1b      	lsrs	r3, r3, #20
 800ec72:	051b      	lsls	r3, r3, #20
 800ec74:	b12b      	cbz	r3, 800ec82 <_dtoa_r+0x7ba>
 800ec76:	9b05      	ldr	r3, [sp, #20]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	9305      	str	r3, [sp, #20]
 800ec7c:	f108 0801 	add.w	r8, r8, #1
 800ec80:	2301      	movs	r3, #1
 800ec82:	9307      	str	r3, [sp, #28]
 800ec84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d12a      	bne.n	800ece0 <_dtoa_r+0x818>
 800ec8a:	2001      	movs	r0, #1
 800ec8c:	e030      	b.n	800ecf0 <_dtoa_r+0x828>
 800ec8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec94:	e795      	b.n	800ebc2 <_dtoa_r+0x6fa>
 800ec96:	9b07      	ldr	r3, [sp, #28]
 800ec98:	f109 37ff 	add.w	r7, r9, #4294967295
 800ec9c:	42bb      	cmp	r3, r7
 800ec9e:	bfbf      	itttt	lt
 800eca0:	9b07      	ldrlt	r3, [sp, #28]
 800eca2:	9707      	strlt	r7, [sp, #28]
 800eca4:	1afa      	sublt	r2, r7, r3
 800eca6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eca8:	bfbb      	ittet	lt
 800ecaa:	189b      	addlt	r3, r3, r2
 800ecac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ecae:	1bdf      	subge	r7, r3, r7
 800ecb0:	2700      	movlt	r7, #0
 800ecb2:	f1b9 0f00 	cmp.w	r9, #0
 800ecb6:	bfb5      	itete	lt
 800ecb8:	9b05      	ldrlt	r3, [sp, #20]
 800ecba:	9d05      	ldrge	r5, [sp, #20]
 800ecbc:	eba3 0509 	sublt.w	r5, r3, r9
 800ecc0:	464b      	movge	r3, r9
 800ecc2:	bfb8      	it	lt
 800ecc4:	2300      	movlt	r3, #0
 800ecc6:	e77e      	b.n	800ebc6 <_dtoa_r+0x6fe>
 800ecc8:	9f07      	ldr	r7, [sp, #28]
 800ecca:	9d05      	ldr	r5, [sp, #20]
 800eccc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ecce:	e783      	b.n	800ebd8 <_dtoa_r+0x710>
 800ecd0:	9a07      	ldr	r2, [sp, #28]
 800ecd2:	e7ab      	b.n	800ec2c <_dtoa_r+0x764>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e7d4      	b.n	800ec82 <_dtoa_r+0x7ba>
 800ecd8:	9b00      	ldr	r3, [sp, #0]
 800ecda:	e7d2      	b.n	800ec82 <_dtoa_r+0x7ba>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	9307      	str	r3, [sp, #28]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ece6:	6918      	ldr	r0, [r3, #16]
 800ece8:	f000 fc3e 	bl	800f568 <__hi0bits>
 800ecec:	f1c0 0020 	rsb	r0, r0, #32
 800ecf0:	4440      	add	r0, r8
 800ecf2:	f010 001f 	ands.w	r0, r0, #31
 800ecf6:	d047      	beq.n	800ed88 <_dtoa_r+0x8c0>
 800ecf8:	f1c0 0320 	rsb	r3, r0, #32
 800ecfc:	2b04      	cmp	r3, #4
 800ecfe:	dd3b      	ble.n	800ed78 <_dtoa_r+0x8b0>
 800ed00:	9b05      	ldr	r3, [sp, #20]
 800ed02:	f1c0 001c 	rsb	r0, r0, #28
 800ed06:	4403      	add	r3, r0
 800ed08:	9305      	str	r3, [sp, #20]
 800ed0a:	4405      	add	r5, r0
 800ed0c:	4480      	add	r8, r0
 800ed0e:	9b05      	ldr	r3, [sp, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	dd05      	ble.n	800ed20 <_dtoa_r+0x858>
 800ed14:	461a      	mov	r2, r3
 800ed16:	9904      	ldr	r1, [sp, #16]
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f000 fd61 	bl	800f7e0 <__lshift>
 800ed1e:	9004      	str	r0, [sp, #16]
 800ed20:	f1b8 0f00 	cmp.w	r8, #0
 800ed24:	dd05      	ble.n	800ed32 <_dtoa_r+0x86a>
 800ed26:	4639      	mov	r1, r7
 800ed28:	4642      	mov	r2, r8
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f000 fd58 	bl	800f7e0 <__lshift>
 800ed30:	4607      	mov	r7, r0
 800ed32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed34:	b353      	cbz	r3, 800ed8c <_dtoa_r+0x8c4>
 800ed36:	4639      	mov	r1, r7
 800ed38:	9804      	ldr	r0, [sp, #16]
 800ed3a:	f000 fda5 	bl	800f888 <__mcmp>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	da24      	bge.n	800ed8c <_dtoa_r+0x8c4>
 800ed42:	2300      	movs	r3, #0
 800ed44:	220a      	movs	r2, #10
 800ed46:	9904      	ldr	r1, [sp, #16]
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f000 fbd2 	bl	800f4f2 <__multadd>
 800ed4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed50:	9004      	str	r0, [sp, #16]
 800ed52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 814d 	beq.w	800eff6 <_dtoa_r+0xb2e>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4631      	mov	r1, r6
 800ed60:	220a      	movs	r2, #10
 800ed62:	4620      	mov	r0, r4
 800ed64:	f000 fbc5 	bl	800f4f2 <__multadd>
 800ed68:	9b02      	ldr	r3, [sp, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	dc4f      	bgt.n	800ee10 <_dtoa_r+0x948>
 800ed70:	9b06      	ldr	r3, [sp, #24]
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	dd4c      	ble.n	800ee10 <_dtoa_r+0x948>
 800ed76:	e011      	b.n	800ed9c <_dtoa_r+0x8d4>
 800ed78:	d0c9      	beq.n	800ed0e <_dtoa_r+0x846>
 800ed7a:	9a05      	ldr	r2, [sp, #20]
 800ed7c:	331c      	adds	r3, #28
 800ed7e:	441a      	add	r2, r3
 800ed80:	9205      	str	r2, [sp, #20]
 800ed82:	441d      	add	r5, r3
 800ed84:	4498      	add	r8, r3
 800ed86:	e7c2      	b.n	800ed0e <_dtoa_r+0x846>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	e7f6      	b.n	800ed7a <_dtoa_r+0x8b2>
 800ed8c:	f1b9 0f00 	cmp.w	r9, #0
 800ed90:	dc38      	bgt.n	800ee04 <_dtoa_r+0x93c>
 800ed92:	9b06      	ldr	r3, [sp, #24]
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	dd35      	ble.n	800ee04 <_dtoa_r+0x93c>
 800ed98:	f8cd 9008 	str.w	r9, [sp, #8]
 800ed9c:	9b02      	ldr	r3, [sp, #8]
 800ed9e:	b963      	cbnz	r3, 800edba <_dtoa_r+0x8f2>
 800eda0:	4639      	mov	r1, r7
 800eda2:	2205      	movs	r2, #5
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 fba4 	bl	800f4f2 <__multadd>
 800edaa:	4601      	mov	r1, r0
 800edac:	4607      	mov	r7, r0
 800edae:	9804      	ldr	r0, [sp, #16]
 800edb0:	f000 fd6a 	bl	800f888 <__mcmp>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f73f adcc 	bgt.w	800e952 <_dtoa_r+0x48a>
 800edba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edbc:	465d      	mov	r5, fp
 800edbe:	ea6f 0a03 	mvn.w	sl, r3
 800edc2:	f04f 0900 	mov.w	r9, #0
 800edc6:	4639      	mov	r1, r7
 800edc8:	4620      	mov	r0, r4
 800edca:	f000 fb7b 	bl	800f4c4 <_Bfree>
 800edce:	2e00      	cmp	r6, #0
 800edd0:	f43f aeb7 	beq.w	800eb42 <_dtoa_r+0x67a>
 800edd4:	f1b9 0f00 	cmp.w	r9, #0
 800edd8:	d005      	beq.n	800ede6 <_dtoa_r+0x91e>
 800edda:	45b1      	cmp	r9, r6
 800eddc:	d003      	beq.n	800ede6 <_dtoa_r+0x91e>
 800edde:	4649      	mov	r1, r9
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 fb6f 	bl	800f4c4 <_Bfree>
 800ede6:	4631      	mov	r1, r6
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fb6b 	bl	800f4c4 <_Bfree>
 800edee:	e6a8      	b.n	800eb42 <_dtoa_r+0x67a>
 800edf0:	2700      	movs	r7, #0
 800edf2:	463e      	mov	r6, r7
 800edf4:	e7e1      	b.n	800edba <_dtoa_r+0x8f2>
 800edf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800edfa:	463e      	mov	r6, r7
 800edfc:	e5a9      	b.n	800e952 <_dtoa_r+0x48a>
 800edfe:	bf00      	nop
 800ee00:	40240000 	.word	0x40240000
 800ee04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee06:	f8cd 9008 	str.w	r9, [sp, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 80fa 	beq.w	800f004 <_dtoa_r+0xb3c>
 800ee10:	2d00      	cmp	r5, #0
 800ee12:	dd05      	ble.n	800ee20 <_dtoa_r+0x958>
 800ee14:	4631      	mov	r1, r6
 800ee16:	462a      	mov	r2, r5
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f000 fce1 	bl	800f7e0 <__lshift>
 800ee1e:	4606      	mov	r6, r0
 800ee20:	9b07      	ldr	r3, [sp, #28]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d04c      	beq.n	800eec0 <_dtoa_r+0x9f8>
 800ee26:	6871      	ldr	r1, [r6, #4]
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f000 fb17 	bl	800f45c <_Balloc>
 800ee2e:	6932      	ldr	r2, [r6, #16]
 800ee30:	3202      	adds	r2, #2
 800ee32:	4605      	mov	r5, r0
 800ee34:	0092      	lsls	r2, r2, #2
 800ee36:	f106 010c 	add.w	r1, r6, #12
 800ee3a:	300c      	adds	r0, #12
 800ee3c:	f000 fae8 	bl	800f410 <memcpy>
 800ee40:	2201      	movs	r2, #1
 800ee42:	4629      	mov	r1, r5
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 fccb 	bl	800f7e0 <__lshift>
 800ee4a:	9b00      	ldr	r3, [sp, #0]
 800ee4c:	f8cd b014 	str.w	fp, [sp, #20]
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	46b1      	mov	r9, r6
 800ee56:	9307      	str	r3, [sp, #28]
 800ee58:	4606      	mov	r6, r0
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	9804      	ldr	r0, [sp, #16]
 800ee5e:	f7ff faa4 	bl	800e3aa <quorem>
 800ee62:	4649      	mov	r1, r9
 800ee64:	4605      	mov	r5, r0
 800ee66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ee6a:	9804      	ldr	r0, [sp, #16]
 800ee6c:	f000 fd0c 	bl	800f888 <__mcmp>
 800ee70:	4632      	mov	r2, r6
 800ee72:	9000      	str	r0, [sp, #0]
 800ee74:	4639      	mov	r1, r7
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 fd20 	bl	800f8bc <__mdiff>
 800ee7c:	68c3      	ldr	r3, [r0, #12]
 800ee7e:	4602      	mov	r2, r0
 800ee80:	bb03      	cbnz	r3, 800eec4 <_dtoa_r+0x9fc>
 800ee82:	4601      	mov	r1, r0
 800ee84:	9008      	str	r0, [sp, #32]
 800ee86:	9804      	ldr	r0, [sp, #16]
 800ee88:	f000 fcfe 	bl	800f888 <__mcmp>
 800ee8c:	9a08      	ldr	r2, [sp, #32]
 800ee8e:	4603      	mov	r3, r0
 800ee90:	4611      	mov	r1, r2
 800ee92:	4620      	mov	r0, r4
 800ee94:	9308      	str	r3, [sp, #32]
 800ee96:	f000 fb15 	bl	800f4c4 <_Bfree>
 800ee9a:	9b08      	ldr	r3, [sp, #32]
 800ee9c:	b9a3      	cbnz	r3, 800eec8 <_dtoa_r+0xa00>
 800ee9e:	9a06      	ldr	r2, [sp, #24]
 800eea0:	b992      	cbnz	r2, 800eec8 <_dtoa_r+0xa00>
 800eea2:	9a07      	ldr	r2, [sp, #28]
 800eea4:	b982      	cbnz	r2, 800eec8 <_dtoa_r+0xa00>
 800eea6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eeaa:	d029      	beq.n	800ef00 <_dtoa_r+0xa38>
 800eeac:	9b00      	ldr	r3, [sp, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	dd01      	ble.n	800eeb6 <_dtoa_r+0x9ee>
 800eeb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800eeb6:	9b05      	ldr	r3, [sp, #20]
 800eeb8:	1c5d      	adds	r5, r3, #1
 800eeba:	f883 8000 	strb.w	r8, [r3]
 800eebe:	e782      	b.n	800edc6 <_dtoa_r+0x8fe>
 800eec0:	4630      	mov	r0, r6
 800eec2:	e7c2      	b.n	800ee4a <_dtoa_r+0x982>
 800eec4:	2301      	movs	r3, #1
 800eec6:	e7e3      	b.n	800ee90 <_dtoa_r+0x9c8>
 800eec8:	9a00      	ldr	r2, [sp, #0]
 800eeca:	2a00      	cmp	r2, #0
 800eecc:	db04      	blt.n	800eed8 <_dtoa_r+0xa10>
 800eece:	d125      	bne.n	800ef1c <_dtoa_r+0xa54>
 800eed0:	9a06      	ldr	r2, [sp, #24]
 800eed2:	bb1a      	cbnz	r2, 800ef1c <_dtoa_r+0xa54>
 800eed4:	9a07      	ldr	r2, [sp, #28]
 800eed6:	bb0a      	cbnz	r2, 800ef1c <_dtoa_r+0xa54>
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	ddec      	ble.n	800eeb6 <_dtoa_r+0x9ee>
 800eedc:	2201      	movs	r2, #1
 800eede:	9904      	ldr	r1, [sp, #16]
 800eee0:	4620      	mov	r0, r4
 800eee2:	f000 fc7d 	bl	800f7e0 <__lshift>
 800eee6:	4639      	mov	r1, r7
 800eee8:	9004      	str	r0, [sp, #16]
 800eeea:	f000 fccd 	bl	800f888 <__mcmp>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	dc03      	bgt.n	800eefa <_dtoa_r+0xa32>
 800eef2:	d1e0      	bne.n	800eeb6 <_dtoa_r+0x9ee>
 800eef4:	f018 0f01 	tst.w	r8, #1
 800eef8:	d0dd      	beq.n	800eeb6 <_dtoa_r+0x9ee>
 800eefa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eefe:	d1d8      	bne.n	800eeb2 <_dtoa_r+0x9ea>
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	9a05      	ldr	r2, [sp, #20]
 800ef04:	1c5d      	adds	r5, r3, #1
 800ef06:	2339      	movs	r3, #57	; 0x39
 800ef08:	7013      	strb	r3, [r2, #0]
 800ef0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef0e:	2b39      	cmp	r3, #57	; 0x39
 800ef10:	f105 32ff 	add.w	r2, r5, #4294967295
 800ef14:	d04f      	beq.n	800efb6 <_dtoa_r+0xaee>
 800ef16:	3301      	adds	r3, #1
 800ef18:	7013      	strb	r3, [r2, #0]
 800ef1a:	e754      	b.n	800edc6 <_dtoa_r+0x8fe>
 800ef1c:	9a05      	ldr	r2, [sp, #20]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f102 0501 	add.w	r5, r2, #1
 800ef24:	dd06      	ble.n	800ef34 <_dtoa_r+0xa6c>
 800ef26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ef2a:	d0e9      	beq.n	800ef00 <_dtoa_r+0xa38>
 800ef2c:	f108 0801 	add.w	r8, r8, #1
 800ef30:	9b05      	ldr	r3, [sp, #20]
 800ef32:	e7c2      	b.n	800eeba <_dtoa_r+0x9f2>
 800ef34:	9a02      	ldr	r2, [sp, #8]
 800ef36:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ef3a:	eba5 030b 	sub.w	r3, r5, fp
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d021      	beq.n	800ef86 <_dtoa_r+0xabe>
 800ef42:	2300      	movs	r3, #0
 800ef44:	220a      	movs	r2, #10
 800ef46:	9904      	ldr	r1, [sp, #16]
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f000 fad2 	bl	800f4f2 <__multadd>
 800ef4e:	45b1      	cmp	r9, r6
 800ef50:	9004      	str	r0, [sp, #16]
 800ef52:	f04f 0300 	mov.w	r3, #0
 800ef56:	f04f 020a 	mov.w	r2, #10
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	d105      	bne.n	800ef6c <_dtoa_r+0xaa4>
 800ef60:	f000 fac7 	bl	800f4f2 <__multadd>
 800ef64:	4681      	mov	r9, r0
 800ef66:	4606      	mov	r6, r0
 800ef68:	9505      	str	r5, [sp, #20]
 800ef6a:	e776      	b.n	800ee5a <_dtoa_r+0x992>
 800ef6c:	f000 fac1 	bl	800f4f2 <__multadd>
 800ef70:	4631      	mov	r1, r6
 800ef72:	4681      	mov	r9, r0
 800ef74:	2300      	movs	r3, #0
 800ef76:	220a      	movs	r2, #10
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f000 faba 	bl	800f4f2 <__multadd>
 800ef7e:	4606      	mov	r6, r0
 800ef80:	e7f2      	b.n	800ef68 <_dtoa_r+0xaa0>
 800ef82:	f04f 0900 	mov.w	r9, #0
 800ef86:	2201      	movs	r2, #1
 800ef88:	9904      	ldr	r1, [sp, #16]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 fc28 	bl	800f7e0 <__lshift>
 800ef90:	4639      	mov	r1, r7
 800ef92:	9004      	str	r0, [sp, #16]
 800ef94:	f000 fc78 	bl	800f888 <__mcmp>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	dcb6      	bgt.n	800ef0a <_dtoa_r+0xa42>
 800ef9c:	d102      	bne.n	800efa4 <_dtoa_r+0xadc>
 800ef9e:	f018 0f01 	tst.w	r8, #1
 800efa2:	d1b2      	bne.n	800ef0a <_dtoa_r+0xa42>
 800efa4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800efa8:	2b30      	cmp	r3, #48	; 0x30
 800efaa:	f105 32ff 	add.w	r2, r5, #4294967295
 800efae:	f47f af0a 	bne.w	800edc6 <_dtoa_r+0x8fe>
 800efb2:	4615      	mov	r5, r2
 800efb4:	e7f6      	b.n	800efa4 <_dtoa_r+0xadc>
 800efb6:	4593      	cmp	fp, r2
 800efb8:	d105      	bne.n	800efc6 <_dtoa_r+0xafe>
 800efba:	2331      	movs	r3, #49	; 0x31
 800efbc:	f10a 0a01 	add.w	sl, sl, #1
 800efc0:	f88b 3000 	strb.w	r3, [fp]
 800efc4:	e6ff      	b.n	800edc6 <_dtoa_r+0x8fe>
 800efc6:	4615      	mov	r5, r2
 800efc8:	e79f      	b.n	800ef0a <_dtoa_r+0xa42>
 800efca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f030 <_dtoa_r+0xb68>
 800efce:	e007      	b.n	800efe0 <_dtoa_r+0xb18>
 800efd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f034 <_dtoa_r+0xb6c>
 800efd6:	b11b      	cbz	r3, 800efe0 <_dtoa_r+0xb18>
 800efd8:	f10b 0308 	add.w	r3, fp, #8
 800efdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efde:	6013      	str	r3, [r2, #0]
 800efe0:	4658      	mov	r0, fp
 800efe2:	b017      	add	sp, #92	; 0x5c
 800efe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe8:	9b06      	ldr	r3, [sp, #24]
 800efea:	2b01      	cmp	r3, #1
 800efec:	f77f ae35 	ble.w	800ec5a <_dtoa_r+0x792>
 800eff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eff2:	9307      	str	r3, [sp, #28]
 800eff4:	e649      	b.n	800ec8a <_dtoa_r+0x7c2>
 800eff6:	9b02      	ldr	r3, [sp, #8]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	dc03      	bgt.n	800f004 <_dtoa_r+0xb3c>
 800effc:	9b06      	ldr	r3, [sp, #24]
 800effe:	2b02      	cmp	r3, #2
 800f000:	f73f aecc 	bgt.w	800ed9c <_dtoa_r+0x8d4>
 800f004:	465d      	mov	r5, fp
 800f006:	4639      	mov	r1, r7
 800f008:	9804      	ldr	r0, [sp, #16]
 800f00a:	f7ff f9ce 	bl	800e3aa <quorem>
 800f00e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f012:	f805 8b01 	strb.w	r8, [r5], #1
 800f016:	9a02      	ldr	r2, [sp, #8]
 800f018:	eba5 030b 	sub.w	r3, r5, fp
 800f01c:	429a      	cmp	r2, r3
 800f01e:	ddb0      	ble.n	800ef82 <_dtoa_r+0xaba>
 800f020:	2300      	movs	r3, #0
 800f022:	220a      	movs	r2, #10
 800f024:	9904      	ldr	r1, [sp, #16]
 800f026:	4620      	mov	r0, r4
 800f028:	f000 fa63 	bl	800f4f2 <__multadd>
 800f02c:	9004      	str	r0, [sp, #16]
 800f02e:	e7ea      	b.n	800f006 <_dtoa_r+0xb3e>
 800f030:	08010781 	.word	0x08010781
 800f034:	080107a5 	.word	0x080107a5

0800f038 <__sflush_r>:
 800f038:	898a      	ldrh	r2, [r1, #12]
 800f03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f03e:	4605      	mov	r5, r0
 800f040:	0710      	lsls	r0, r2, #28
 800f042:	460c      	mov	r4, r1
 800f044:	d458      	bmi.n	800f0f8 <__sflush_r+0xc0>
 800f046:	684b      	ldr	r3, [r1, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	dc05      	bgt.n	800f058 <__sflush_r+0x20>
 800f04c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f04e:	2b00      	cmp	r3, #0
 800f050:	dc02      	bgt.n	800f058 <__sflush_r+0x20>
 800f052:	2000      	movs	r0, #0
 800f054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f05a:	2e00      	cmp	r6, #0
 800f05c:	d0f9      	beq.n	800f052 <__sflush_r+0x1a>
 800f05e:	2300      	movs	r3, #0
 800f060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f064:	682f      	ldr	r7, [r5, #0]
 800f066:	6a21      	ldr	r1, [r4, #32]
 800f068:	602b      	str	r3, [r5, #0]
 800f06a:	d032      	beq.n	800f0d2 <__sflush_r+0x9a>
 800f06c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f06e:	89a3      	ldrh	r3, [r4, #12]
 800f070:	075a      	lsls	r2, r3, #29
 800f072:	d505      	bpl.n	800f080 <__sflush_r+0x48>
 800f074:	6863      	ldr	r3, [r4, #4]
 800f076:	1ac0      	subs	r0, r0, r3
 800f078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f07a:	b10b      	cbz	r3, 800f080 <__sflush_r+0x48>
 800f07c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f07e:	1ac0      	subs	r0, r0, r3
 800f080:	2300      	movs	r3, #0
 800f082:	4602      	mov	r2, r0
 800f084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f086:	6a21      	ldr	r1, [r4, #32]
 800f088:	4628      	mov	r0, r5
 800f08a:	47b0      	blx	r6
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	89a3      	ldrh	r3, [r4, #12]
 800f090:	d106      	bne.n	800f0a0 <__sflush_r+0x68>
 800f092:	6829      	ldr	r1, [r5, #0]
 800f094:	291d      	cmp	r1, #29
 800f096:	d848      	bhi.n	800f12a <__sflush_r+0xf2>
 800f098:	4a29      	ldr	r2, [pc, #164]	; (800f140 <__sflush_r+0x108>)
 800f09a:	40ca      	lsrs	r2, r1
 800f09c:	07d6      	lsls	r6, r2, #31
 800f09e:	d544      	bpl.n	800f12a <__sflush_r+0xf2>
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	6062      	str	r2, [r4, #4]
 800f0a4:	04d9      	lsls	r1, r3, #19
 800f0a6:	6922      	ldr	r2, [r4, #16]
 800f0a8:	6022      	str	r2, [r4, #0]
 800f0aa:	d504      	bpl.n	800f0b6 <__sflush_r+0x7e>
 800f0ac:	1c42      	adds	r2, r0, #1
 800f0ae:	d101      	bne.n	800f0b4 <__sflush_r+0x7c>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	b903      	cbnz	r3, 800f0b6 <__sflush_r+0x7e>
 800f0b4:	6560      	str	r0, [r4, #84]	; 0x54
 800f0b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0b8:	602f      	str	r7, [r5, #0]
 800f0ba:	2900      	cmp	r1, #0
 800f0bc:	d0c9      	beq.n	800f052 <__sflush_r+0x1a>
 800f0be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0c2:	4299      	cmp	r1, r3
 800f0c4:	d002      	beq.n	800f0cc <__sflush_r+0x94>
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7fe f98a 	bl	800d3e0 <_free_r>
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	6360      	str	r0, [r4, #52]	; 0x34
 800f0d0:	e7c0      	b.n	800f054 <__sflush_r+0x1c>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	47b0      	blx	r6
 800f0d8:	1c41      	adds	r1, r0, #1
 800f0da:	d1c8      	bne.n	800f06e <__sflush_r+0x36>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0c5      	beq.n	800f06e <__sflush_r+0x36>
 800f0e2:	2b1d      	cmp	r3, #29
 800f0e4:	d001      	beq.n	800f0ea <__sflush_r+0xb2>
 800f0e6:	2b16      	cmp	r3, #22
 800f0e8:	d101      	bne.n	800f0ee <__sflush_r+0xb6>
 800f0ea:	602f      	str	r7, [r5, #0]
 800f0ec:	e7b1      	b.n	800f052 <__sflush_r+0x1a>
 800f0ee:	89a3      	ldrh	r3, [r4, #12]
 800f0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0f4:	81a3      	strh	r3, [r4, #12]
 800f0f6:	e7ad      	b.n	800f054 <__sflush_r+0x1c>
 800f0f8:	690f      	ldr	r7, [r1, #16]
 800f0fa:	2f00      	cmp	r7, #0
 800f0fc:	d0a9      	beq.n	800f052 <__sflush_r+0x1a>
 800f0fe:	0793      	lsls	r3, r2, #30
 800f100:	680e      	ldr	r6, [r1, #0]
 800f102:	bf08      	it	eq
 800f104:	694b      	ldreq	r3, [r1, #20]
 800f106:	600f      	str	r7, [r1, #0]
 800f108:	bf18      	it	ne
 800f10a:	2300      	movne	r3, #0
 800f10c:	eba6 0807 	sub.w	r8, r6, r7
 800f110:	608b      	str	r3, [r1, #8]
 800f112:	f1b8 0f00 	cmp.w	r8, #0
 800f116:	dd9c      	ble.n	800f052 <__sflush_r+0x1a>
 800f118:	4643      	mov	r3, r8
 800f11a:	463a      	mov	r2, r7
 800f11c:	6a21      	ldr	r1, [r4, #32]
 800f11e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f120:	4628      	mov	r0, r5
 800f122:	47b0      	blx	r6
 800f124:	2800      	cmp	r0, #0
 800f126:	dc06      	bgt.n	800f136 <__sflush_r+0xfe>
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f12e:	81a3      	strh	r3, [r4, #12]
 800f130:	f04f 30ff 	mov.w	r0, #4294967295
 800f134:	e78e      	b.n	800f054 <__sflush_r+0x1c>
 800f136:	4407      	add	r7, r0
 800f138:	eba8 0800 	sub.w	r8, r8, r0
 800f13c:	e7e9      	b.n	800f112 <__sflush_r+0xda>
 800f13e:	bf00      	nop
 800f140:	20400001 	.word	0x20400001

0800f144 <_fflush_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	690b      	ldr	r3, [r1, #16]
 800f148:	4605      	mov	r5, r0
 800f14a:	460c      	mov	r4, r1
 800f14c:	b1db      	cbz	r3, 800f186 <_fflush_r+0x42>
 800f14e:	b118      	cbz	r0, 800f158 <_fflush_r+0x14>
 800f150:	6983      	ldr	r3, [r0, #24]
 800f152:	b90b      	cbnz	r3, 800f158 <_fflush_r+0x14>
 800f154:	f000 f860 	bl	800f218 <__sinit>
 800f158:	4b0c      	ldr	r3, [pc, #48]	; (800f18c <_fflush_r+0x48>)
 800f15a:	429c      	cmp	r4, r3
 800f15c:	d109      	bne.n	800f172 <_fflush_r+0x2e>
 800f15e:	686c      	ldr	r4, [r5, #4]
 800f160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f164:	b17b      	cbz	r3, 800f186 <_fflush_r+0x42>
 800f166:	4621      	mov	r1, r4
 800f168:	4628      	mov	r0, r5
 800f16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f16e:	f7ff bf63 	b.w	800f038 <__sflush_r>
 800f172:	4b07      	ldr	r3, [pc, #28]	; (800f190 <_fflush_r+0x4c>)
 800f174:	429c      	cmp	r4, r3
 800f176:	d101      	bne.n	800f17c <_fflush_r+0x38>
 800f178:	68ac      	ldr	r4, [r5, #8]
 800f17a:	e7f1      	b.n	800f160 <_fflush_r+0x1c>
 800f17c:	4b05      	ldr	r3, [pc, #20]	; (800f194 <_fflush_r+0x50>)
 800f17e:	429c      	cmp	r4, r3
 800f180:	bf08      	it	eq
 800f182:	68ec      	ldreq	r4, [r5, #12]
 800f184:	e7ec      	b.n	800f160 <_fflush_r+0x1c>
 800f186:	2000      	movs	r0, #0
 800f188:	bd38      	pop	{r3, r4, r5, pc}
 800f18a:	bf00      	nop
 800f18c:	080107d4 	.word	0x080107d4
 800f190:	080107f4 	.word	0x080107f4
 800f194:	080107b4 	.word	0x080107b4

0800f198 <std>:
 800f198:	2300      	movs	r3, #0
 800f19a:	b510      	push	{r4, lr}
 800f19c:	4604      	mov	r4, r0
 800f19e:	e9c0 3300 	strd	r3, r3, [r0]
 800f1a2:	6083      	str	r3, [r0, #8]
 800f1a4:	8181      	strh	r1, [r0, #12]
 800f1a6:	6643      	str	r3, [r0, #100]	; 0x64
 800f1a8:	81c2      	strh	r2, [r0, #14]
 800f1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1ae:	6183      	str	r3, [r0, #24]
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	2208      	movs	r2, #8
 800f1b4:	305c      	adds	r0, #92	; 0x5c
 800f1b6:	f7fe f90b 	bl	800d3d0 <memset>
 800f1ba:	4b05      	ldr	r3, [pc, #20]	; (800f1d0 <std+0x38>)
 800f1bc:	6263      	str	r3, [r4, #36]	; 0x24
 800f1be:	4b05      	ldr	r3, [pc, #20]	; (800f1d4 <std+0x3c>)
 800f1c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f1c2:	4b05      	ldr	r3, [pc, #20]	; (800f1d8 <std+0x40>)
 800f1c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1c6:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <std+0x44>)
 800f1c8:	6224      	str	r4, [r4, #32]
 800f1ca:	6323      	str	r3, [r4, #48]	; 0x30
 800f1cc:	bd10      	pop	{r4, pc}
 800f1ce:	bf00      	nop
 800f1d0:	0800fe15 	.word	0x0800fe15
 800f1d4:	0800fe37 	.word	0x0800fe37
 800f1d8:	0800fe6f 	.word	0x0800fe6f
 800f1dc:	0800fe93 	.word	0x0800fe93

0800f1e0 <_cleanup_r>:
 800f1e0:	4901      	ldr	r1, [pc, #4]	; (800f1e8 <_cleanup_r+0x8>)
 800f1e2:	f000 b885 	b.w	800f2f0 <_fwalk_reent>
 800f1e6:	bf00      	nop
 800f1e8:	0800f145 	.word	0x0800f145

0800f1ec <__sfmoreglue>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	1e4a      	subs	r2, r1, #1
 800f1f0:	2568      	movs	r5, #104	; 0x68
 800f1f2:	4355      	muls	r5, r2
 800f1f4:	460e      	mov	r6, r1
 800f1f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1fa:	f7fe f93f 	bl	800d47c <_malloc_r>
 800f1fe:	4604      	mov	r4, r0
 800f200:	b140      	cbz	r0, 800f214 <__sfmoreglue+0x28>
 800f202:	2100      	movs	r1, #0
 800f204:	e9c0 1600 	strd	r1, r6, [r0]
 800f208:	300c      	adds	r0, #12
 800f20a:	60a0      	str	r0, [r4, #8]
 800f20c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f210:	f7fe f8de 	bl	800d3d0 <memset>
 800f214:	4620      	mov	r0, r4
 800f216:	bd70      	pop	{r4, r5, r6, pc}

0800f218 <__sinit>:
 800f218:	6983      	ldr	r3, [r0, #24]
 800f21a:	b510      	push	{r4, lr}
 800f21c:	4604      	mov	r4, r0
 800f21e:	bb33      	cbnz	r3, 800f26e <__sinit+0x56>
 800f220:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f224:	6503      	str	r3, [r0, #80]	; 0x50
 800f226:	4b12      	ldr	r3, [pc, #72]	; (800f270 <__sinit+0x58>)
 800f228:	4a12      	ldr	r2, [pc, #72]	; (800f274 <__sinit+0x5c>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6282      	str	r2, [r0, #40]	; 0x28
 800f22e:	4298      	cmp	r0, r3
 800f230:	bf04      	itt	eq
 800f232:	2301      	moveq	r3, #1
 800f234:	6183      	streq	r3, [r0, #24]
 800f236:	f000 f81f 	bl	800f278 <__sfp>
 800f23a:	6060      	str	r0, [r4, #4]
 800f23c:	4620      	mov	r0, r4
 800f23e:	f000 f81b 	bl	800f278 <__sfp>
 800f242:	60a0      	str	r0, [r4, #8]
 800f244:	4620      	mov	r0, r4
 800f246:	f000 f817 	bl	800f278 <__sfp>
 800f24a:	2200      	movs	r2, #0
 800f24c:	60e0      	str	r0, [r4, #12]
 800f24e:	2104      	movs	r1, #4
 800f250:	6860      	ldr	r0, [r4, #4]
 800f252:	f7ff ffa1 	bl	800f198 <std>
 800f256:	2201      	movs	r2, #1
 800f258:	2109      	movs	r1, #9
 800f25a:	68a0      	ldr	r0, [r4, #8]
 800f25c:	f7ff ff9c 	bl	800f198 <std>
 800f260:	2202      	movs	r2, #2
 800f262:	2112      	movs	r1, #18
 800f264:	68e0      	ldr	r0, [r4, #12]
 800f266:	f7ff ff97 	bl	800f198 <std>
 800f26a:	2301      	movs	r3, #1
 800f26c:	61a3      	str	r3, [r4, #24]
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	0801075c 	.word	0x0801075c
 800f274:	0800f1e1 	.word	0x0800f1e1

0800f278 <__sfp>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	4b1b      	ldr	r3, [pc, #108]	; (800f2e8 <__sfp+0x70>)
 800f27c:	681e      	ldr	r6, [r3, #0]
 800f27e:	69b3      	ldr	r3, [r6, #24]
 800f280:	4607      	mov	r7, r0
 800f282:	b913      	cbnz	r3, 800f28a <__sfp+0x12>
 800f284:	4630      	mov	r0, r6
 800f286:	f7ff ffc7 	bl	800f218 <__sinit>
 800f28a:	3648      	adds	r6, #72	; 0x48
 800f28c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f290:	3b01      	subs	r3, #1
 800f292:	d503      	bpl.n	800f29c <__sfp+0x24>
 800f294:	6833      	ldr	r3, [r6, #0]
 800f296:	b133      	cbz	r3, 800f2a6 <__sfp+0x2e>
 800f298:	6836      	ldr	r6, [r6, #0]
 800f29a:	e7f7      	b.n	800f28c <__sfp+0x14>
 800f29c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f2a0:	b16d      	cbz	r5, 800f2be <__sfp+0x46>
 800f2a2:	3468      	adds	r4, #104	; 0x68
 800f2a4:	e7f4      	b.n	800f290 <__sfp+0x18>
 800f2a6:	2104      	movs	r1, #4
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f7ff ff9f 	bl	800f1ec <__sfmoreglue>
 800f2ae:	6030      	str	r0, [r6, #0]
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d1f1      	bne.n	800f298 <__sfp+0x20>
 800f2b4:	230c      	movs	r3, #12
 800f2b6:	603b      	str	r3, [r7, #0]
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2be:	4b0b      	ldr	r3, [pc, #44]	; (800f2ec <__sfp+0x74>)
 800f2c0:	6665      	str	r5, [r4, #100]	; 0x64
 800f2c2:	e9c4 5500 	strd	r5, r5, [r4]
 800f2c6:	60a5      	str	r5, [r4, #8]
 800f2c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f2cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f2d0:	2208      	movs	r2, #8
 800f2d2:	4629      	mov	r1, r5
 800f2d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2d8:	f7fe f87a 	bl	800d3d0 <memset>
 800f2dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2e4:	e7e9      	b.n	800f2ba <__sfp+0x42>
 800f2e6:	bf00      	nop
 800f2e8:	0801075c 	.word	0x0801075c
 800f2ec:	ffff0001 	.word	0xffff0001

0800f2f0 <_fwalk_reent>:
 800f2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2f4:	4680      	mov	r8, r0
 800f2f6:	4689      	mov	r9, r1
 800f2f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2fc:	2600      	movs	r6, #0
 800f2fe:	b914      	cbnz	r4, 800f306 <_fwalk_reent+0x16>
 800f300:	4630      	mov	r0, r6
 800f302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f306:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f30a:	3f01      	subs	r7, #1
 800f30c:	d501      	bpl.n	800f312 <_fwalk_reent+0x22>
 800f30e:	6824      	ldr	r4, [r4, #0]
 800f310:	e7f5      	b.n	800f2fe <_fwalk_reent+0xe>
 800f312:	89ab      	ldrh	r3, [r5, #12]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d907      	bls.n	800f328 <_fwalk_reent+0x38>
 800f318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f31c:	3301      	adds	r3, #1
 800f31e:	d003      	beq.n	800f328 <_fwalk_reent+0x38>
 800f320:	4629      	mov	r1, r5
 800f322:	4640      	mov	r0, r8
 800f324:	47c8      	blx	r9
 800f326:	4306      	orrs	r6, r0
 800f328:	3568      	adds	r5, #104	; 0x68
 800f32a:	e7ee      	b.n	800f30a <_fwalk_reent+0x1a>

0800f32c <_localeconv_r>:
 800f32c:	4b04      	ldr	r3, [pc, #16]	; (800f340 <_localeconv_r+0x14>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6a18      	ldr	r0, [r3, #32]
 800f332:	4b04      	ldr	r3, [pc, #16]	; (800f344 <_localeconv_r+0x18>)
 800f334:	2800      	cmp	r0, #0
 800f336:	bf08      	it	eq
 800f338:	4618      	moveq	r0, r3
 800f33a:	30f0      	adds	r0, #240	; 0xf0
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	2000002c 	.word	0x2000002c
 800f344:	20000090 	.word	0x20000090

0800f348 <__swhatbuf_r>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	460e      	mov	r6, r1
 800f34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f350:	2900      	cmp	r1, #0
 800f352:	b096      	sub	sp, #88	; 0x58
 800f354:	4614      	mov	r4, r2
 800f356:	461d      	mov	r5, r3
 800f358:	da07      	bge.n	800f36a <__swhatbuf_r+0x22>
 800f35a:	2300      	movs	r3, #0
 800f35c:	602b      	str	r3, [r5, #0]
 800f35e:	89b3      	ldrh	r3, [r6, #12]
 800f360:	061a      	lsls	r2, r3, #24
 800f362:	d410      	bmi.n	800f386 <__swhatbuf_r+0x3e>
 800f364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f368:	e00e      	b.n	800f388 <__swhatbuf_r+0x40>
 800f36a:	466a      	mov	r2, sp
 800f36c:	f000 fdb8 	bl	800fee0 <_fstat_r>
 800f370:	2800      	cmp	r0, #0
 800f372:	dbf2      	blt.n	800f35a <__swhatbuf_r+0x12>
 800f374:	9a01      	ldr	r2, [sp, #4]
 800f376:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f37a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f37e:	425a      	negs	r2, r3
 800f380:	415a      	adcs	r2, r3
 800f382:	602a      	str	r2, [r5, #0]
 800f384:	e7ee      	b.n	800f364 <__swhatbuf_r+0x1c>
 800f386:	2340      	movs	r3, #64	; 0x40
 800f388:	2000      	movs	r0, #0
 800f38a:	6023      	str	r3, [r4, #0]
 800f38c:	b016      	add	sp, #88	; 0x58
 800f38e:	bd70      	pop	{r4, r5, r6, pc}

0800f390 <__smakebuf_r>:
 800f390:	898b      	ldrh	r3, [r1, #12]
 800f392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f394:	079d      	lsls	r5, r3, #30
 800f396:	4606      	mov	r6, r0
 800f398:	460c      	mov	r4, r1
 800f39a:	d507      	bpl.n	800f3ac <__smakebuf_r+0x1c>
 800f39c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	6163      	str	r3, [r4, #20]
 800f3a8:	b002      	add	sp, #8
 800f3aa:	bd70      	pop	{r4, r5, r6, pc}
 800f3ac:	ab01      	add	r3, sp, #4
 800f3ae:	466a      	mov	r2, sp
 800f3b0:	f7ff ffca 	bl	800f348 <__swhatbuf_r>
 800f3b4:	9900      	ldr	r1, [sp, #0]
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f7fe f85f 	bl	800d47c <_malloc_r>
 800f3be:	b948      	cbnz	r0, 800f3d4 <__smakebuf_r+0x44>
 800f3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c4:	059a      	lsls	r2, r3, #22
 800f3c6:	d4ef      	bmi.n	800f3a8 <__smakebuf_r+0x18>
 800f3c8:	f023 0303 	bic.w	r3, r3, #3
 800f3cc:	f043 0302 	orr.w	r3, r3, #2
 800f3d0:	81a3      	strh	r3, [r4, #12]
 800f3d2:	e7e3      	b.n	800f39c <__smakebuf_r+0xc>
 800f3d4:	4b0d      	ldr	r3, [pc, #52]	; (800f40c <__smakebuf_r+0x7c>)
 800f3d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3d8:	89a3      	ldrh	r3, [r4, #12]
 800f3da:	6020      	str	r0, [r4, #0]
 800f3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3e0:	81a3      	strh	r3, [r4, #12]
 800f3e2:	9b00      	ldr	r3, [sp, #0]
 800f3e4:	6163      	str	r3, [r4, #20]
 800f3e6:	9b01      	ldr	r3, [sp, #4]
 800f3e8:	6120      	str	r0, [r4, #16]
 800f3ea:	b15b      	cbz	r3, 800f404 <__smakebuf_r+0x74>
 800f3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f000 fd87 	bl	800ff04 <_isatty_r>
 800f3f6:	b128      	cbz	r0, 800f404 <__smakebuf_r+0x74>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	f023 0303 	bic.w	r3, r3, #3
 800f3fe:	f043 0301 	orr.w	r3, r3, #1
 800f402:	81a3      	strh	r3, [r4, #12]
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	431d      	orrs	r5, r3
 800f408:	81a5      	strh	r5, [r4, #12]
 800f40a:	e7cd      	b.n	800f3a8 <__smakebuf_r+0x18>
 800f40c:	0800f1e1 	.word	0x0800f1e1

0800f410 <memcpy>:
 800f410:	b510      	push	{r4, lr}
 800f412:	1e43      	subs	r3, r0, #1
 800f414:	440a      	add	r2, r1
 800f416:	4291      	cmp	r1, r2
 800f418:	d100      	bne.n	800f41c <memcpy+0xc>
 800f41a:	bd10      	pop	{r4, pc}
 800f41c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f420:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f424:	e7f7      	b.n	800f416 <memcpy+0x6>

0800f426 <memmove>:
 800f426:	4288      	cmp	r0, r1
 800f428:	b510      	push	{r4, lr}
 800f42a:	eb01 0302 	add.w	r3, r1, r2
 800f42e:	d807      	bhi.n	800f440 <memmove+0x1a>
 800f430:	1e42      	subs	r2, r0, #1
 800f432:	4299      	cmp	r1, r3
 800f434:	d00a      	beq.n	800f44c <memmove+0x26>
 800f436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f43a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f43e:	e7f8      	b.n	800f432 <memmove+0xc>
 800f440:	4283      	cmp	r3, r0
 800f442:	d9f5      	bls.n	800f430 <memmove+0xa>
 800f444:	1881      	adds	r1, r0, r2
 800f446:	1ad2      	subs	r2, r2, r3
 800f448:	42d3      	cmn	r3, r2
 800f44a:	d100      	bne.n	800f44e <memmove+0x28>
 800f44c:	bd10      	pop	{r4, pc}
 800f44e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f452:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f456:	e7f7      	b.n	800f448 <memmove+0x22>

0800f458 <__malloc_lock>:
 800f458:	4770      	bx	lr

0800f45a <__malloc_unlock>:
 800f45a:	4770      	bx	lr

0800f45c <_Balloc>:
 800f45c:	b570      	push	{r4, r5, r6, lr}
 800f45e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f460:	4604      	mov	r4, r0
 800f462:	460e      	mov	r6, r1
 800f464:	b93d      	cbnz	r5, 800f476 <_Balloc+0x1a>
 800f466:	2010      	movs	r0, #16
 800f468:	f7fd ffa2 	bl	800d3b0 <malloc>
 800f46c:	6260      	str	r0, [r4, #36]	; 0x24
 800f46e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f472:	6005      	str	r5, [r0, #0]
 800f474:	60c5      	str	r5, [r0, #12]
 800f476:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f478:	68eb      	ldr	r3, [r5, #12]
 800f47a:	b183      	cbz	r3, 800f49e <_Balloc+0x42>
 800f47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f484:	b9b8      	cbnz	r0, 800f4b6 <_Balloc+0x5a>
 800f486:	2101      	movs	r1, #1
 800f488:	fa01 f506 	lsl.w	r5, r1, r6
 800f48c:	1d6a      	adds	r2, r5, #5
 800f48e:	0092      	lsls	r2, r2, #2
 800f490:	4620      	mov	r0, r4
 800f492:	f000 fabf 	bl	800fa14 <_calloc_r>
 800f496:	b160      	cbz	r0, 800f4b2 <_Balloc+0x56>
 800f498:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f49c:	e00e      	b.n	800f4bc <_Balloc+0x60>
 800f49e:	2221      	movs	r2, #33	; 0x21
 800f4a0:	2104      	movs	r1, #4
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f000 fab6 	bl	800fa14 <_calloc_r>
 800f4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4aa:	60e8      	str	r0, [r5, #12]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1e4      	bne.n	800f47c <_Balloc+0x20>
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	bd70      	pop	{r4, r5, r6, pc}
 800f4b6:	6802      	ldr	r2, [r0, #0]
 800f4b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f4bc:	2300      	movs	r3, #0
 800f4be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4c2:	e7f7      	b.n	800f4b4 <_Balloc+0x58>

0800f4c4 <_Bfree>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	460d      	mov	r5, r1
 800f4cc:	b93c      	cbnz	r4, 800f4de <_Bfree+0x1a>
 800f4ce:	2010      	movs	r0, #16
 800f4d0:	f7fd ff6e 	bl	800d3b0 <malloc>
 800f4d4:	6270      	str	r0, [r6, #36]	; 0x24
 800f4d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4da:	6004      	str	r4, [r0, #0]
 800f4dc:	60c4      	str	r4, [r0, #12]
 800f4de:	b13d      	cbz	r5, 800f4f0 <_Bfree+0x2c>
 800f4e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f4e2:	686a      	ldr	r2, [r5, #4]
 800f4e4:	68db      	ldr	r3, [r3, #12]
 800f4e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4ea:	6029      	str	r1, [r5, #0]
 800f4ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f4f0:	bd70      	pop	{r4, r5, r6, pc}

0800f4f2 <__multadd>:
 800f4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f6:	690d      	ldr	r5, [r1, #16]
 800f4f8:	461f      	mov	r7, r3
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	460c      	mov	r4, r1
 800f4fe:	f101 0c14 	add.w	ip, r1, #20
 800f502:	2300      	movs	r3, #0
 800f504:	f8dc 0000 	ldr.w	r0, [ip]
 800f508:	b281      	uxth	r1, r0
 800f50a:	fb02 7101 	mla	r1, r2, r1, r7
 800f50e:	0c0f      	lsrs	r7, r1, #16
 800f510:	0c00      	lsrs	r0, r0, #16
 800f512:	fb02 7000 	mla	r0, r2, r0, r7
 800f516:	b289      	uxth	r1, r1
 800f518:	3301      	adds	r3, #1
 800f51a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f51e:	429d      	cmp	r5, r3
 800f520:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f524:	f84c 1b04 	str.w	r1, [ip], #4
 800f528:	dcec      	bgt.n	800f504 <__multadd+0x12>
 800f52a:	b1d7      	cbz	r7, 800f562 <__multadd+0x70>
 800f52c:	68a3      	ldr	r3, [r4, #8]
 800f52e:	42ab      	cmp	r3, r5
 800f530:	dc12      	bgt.n	800f558 <__multadd+0x66>
 800f532:	6861      	ldr	r1, [r4, #4]
 800f534:	4630      	mov	r0, r6
 800f536:	3101      	adds	r1, #1
 800f538:	f7ff ff90 	bl	800f45c <_Balloc>
 800f53c:	6922      	ldr	r2, [r4, #16]
 800f53e:	3202      	adds	r2, #2
 800f540:	f104 010c 	add.w	r1, r4, #12
 800f544:	4680      	mov	r8, r0
 800f546:	0092      	lsls	r2, r2, #2
 800f548:	300c      	adds	r0, #12
 800f54a:	f7ff ff61 	bl	800f410 <memcpy>
 800f54e:	4621      	mov	r1, r4
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff ffb7 	bl	800f4c4 <_Bfree>
 800f556:	4644      	mov	r4, r8
 800f558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f55c:	3501      	adds	r5, #1
 800f55e:	615f      	str	r7, [r3, #20]
 800f560:	6125      	str	r5, [r4, #16]
 800f562:	4620      	mov	r0, r4
 800f564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f568 <__hi0bits>:
 800f568:	0c02      	lsrs	r2, r0, #16
 800f56a:	0412      	lsls	r2, r2, #16
 800f56c:	4603      	mov	r3, r0
 800f56e:	b9b2      	cbnz	r2, 800f59e <__hi0bits+0x36>
 800f570:	0403      	lsls	r3, r0, #16
 800f572:	2010      	movs	r0, #16
 800f574:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f578:	bf04      	itt	eq
 800f57a:	021b      	lsleq	r3, r3, #8
 800f57c:	3008      	addeq	r0, #8
 800f57e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f582:	bf04      	itt	eq
 800f584:	011b      	lsleq	r3, r3, #4
 800f586:	3004      	addeq	r0, #4
 800f588:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f58c:	bf04      	itt	eq
 800f58e:	009b      	lsleq	r3, r3, #2
 800f590:	3002      	addeq	r0, #2
 800f592:	2b00      	cmp	r3, #0
 800f594:	db06      	blt.n	800f5a4 <__hi0bits+0x3c>
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	d503      	bpl.n	800f5a2 <__hi0bits+0x3a>
 800f59a:	3001      	adds	r0, #1
 800f59c:	4770      	bx	lr
 800f59e:	2000      	movs	r0, #0
 800f5a0:	e7e8      	b.n	800f574 <__hi0bits+0xc>
 800f5a2:	2020      	movs	r0, #32
 800f5a4:	4770      	bx	lr

0800f5a6 <__lo0bits>:
 800f5a6:	6803      	ldr	r3, [r0, #0]
 800f5a8:	f013 0207 	ands.w	r2, r3, #7
 800f5ac:	4601      	mov	r1, r0
 800f5ae:	d00b      	beq.n	800f5c8 <__lo0bits+0x22>
 800f5b0:	07da      	lsls	r2, r3, #31
 800f5b2:	d423      	bmi.n	800f5fc <__lo0bits+0x56>
 800f5b4:	0798      	lsls	r0, r3, #30
 800f5b6:	bf49      	itett	mi
 800f5b8:	085b      	lsrmi	r3, r3, #1
 800f5ba:	089b      	lsrpl	r3, r3, #2
 800f5bc:	2001      	movmi	r0, #1
 800f5be:	600b      	strmi	r3, [r1, #0]
 800f5c0:	bf5c      	itt	pl
 800f5c2:	600b      	strpl	r3, [r1, #0]
 800f5c4:	2002      	movpl	r0, #2
 800f5c6:	4770      	bx	lr
 800f5c8:	b298      	uxth	r0, r3
 800f5ca:	b9a8      	cbnz	r0, 800f5f8 <__lo0bits+0x52>
 800f5cc:	0c1b      	lsrs	r3, r3, #16
 800f5ce:	2010      	movs	r0, #16
 800f5d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f5d4:	bf04      	itt	eq
 800f5d6:	0a1b      	lsreq	r3, r3, #8
 800f5d8:	3008      	addeq	r0, #8
 800f5da:	071a      	lsls	r2, r3, #28
 800f5dc:	bf04      	itt	eq
 800f5de:	091b      	lsreq	r3, r3, #4
 800f5e0:	3004      	addeq	r0, #4
 800f5e2:	079a      	lsls	r2, r3, #30
 800f5e4:	bf04      	itt	eq
 800f5e6:	089b      	lsreq	r3, r3, #2
 800f5e8:	3002      	addeq	r0, #2
 800f5ea:	07da      	lsls	r2, r3, #31
 800f5ec:	d402      	bmi.n	800f5f4 <__lo0bits+0x4e>
 800f5ee:	085b      	lsrs	r3, r3, #1
 800f5f0:	d006      	beq.n	800f600 <__lo0bits+0x5a>
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	600b      	str	r3, [r1, #0]
 800f5f6:	4770      	bx	lr
 800f5f8:	4610      	mov	r0, r2
 800f5fa:	e7e9      	b.n	800f5d0 <__lo0bits+0x2a>
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	4770      	bx	lr
 800f600:	2020      	movs	r0, #32
 800f602:	4770      	bx	lr

0800f604 <__i2b>:
 800f604:	b510      	push	{r4, lr}
 800f606:	460c      	mov	r4, r1
 800f608:	2101      	movs	r1, #1
 800f60a:	f7ff ff27 	bl	800f45c <_Balloc>
 800f60e:	2201      	movs	r2, #1
 800f610:	6144      	str	r4, [r0, #20]
 800f612:	6102      	str	r2, [r0, #16]
 800f614:	bd10      	pop	{r4, pc}

0800f616 <__multiply>:
 800f616:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	4614      	mov	r4, r2
 800f61c:	690a      	ldr	r2, [r1, #16]
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	429a      	cmp	r2, r3
 800f622:	bfb8      	it	lt
 800f624:	460b      	movlt	r3, r1
 800f626:	4688      	mov	r8, r1
 800f628:	bfbc      	itt	lt
 800f62a:	46a0      	movlt	r8, r4
 800f62c:	461c      	movlt	r4, r3
 800f62e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f632:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f63a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f63e:	eb07 0609 	add.w	r6, r7, r9
 800f642:	42b3      	cmp	r3, r6
 800f644:	bfb8      	it	lt
 800f646:	3101      	addlt	r1, #1
 800f648:	f7ff ff08 	bl	800f45c <_Balloc>
 800f64c:	f100 0514 	add.w	r5, r0, #20
 800f650:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f654:	462b      	mov	r3, r5
 800f656:	2200      	movs	r2, #0
 800f658:	4573      	cmp	r3, lr
 800f65a:	d316      	bcc.n	800f68a <__multiply+0x74>
 800f65c:	f104 0214 	add.w	r2, r4, #20
 800f660:	f108 0114 	add.w	r1, r8, #20
 800f664:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f668:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	9b00      	ldr	r3, [sp, #0]
 800f670:	9201      	str	r2, [sp, #4]
 800f672:	4293      	cmp	r3, r2
 800f674:	d80c      	bhi.n	800f690 <__multiply+0x7a>
 800f676:	2e00      	cmp	r6, #0
 800f678:	dd03      	ble.n	800f682 <__multiply+0x6c>
 800f67a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d05d      	beq.n	800f73e <__multiply+0x128>
 800f682:	6106      	str	r6, [r0, #16]
 800f684:	b003      	add	sp, #12
 800f686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68a:	f843 2b04 	str.w	r2, [r3], #4
 800f68e:	e7e3      	b.n	800f658 <__multiply+0x42>
 800f690:	f8b2 b000 	ldrh.w	fp, [r2]
 800f694:	f1bb 0f00 	cmp.w	fp, #0
 800f698:	d023      	beq.n	800f6e2 <__multiply+0xcc>
 800f69a:	4689      	mov	r9, r1
 800f69c:	46ac      	mov	ip, r5
 800f69e:	f04f 0800 	mov.w	r8, #0
 800f6a2:	f859 4b04 	ldr.w	r4, [r9], #4
 800f6a6:	f8dc a000 	ldr.w	sl, [ip]
 800f6aa:	b2a3      	uxth	r3, r4
 800f6ac:	fa1f fa8a 	uxth.w	sl, sl
 800f6b0:	fb0b a303 	mla	r3, fp, r3, sl
 800f6b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f6b8:	f8dc 4000 	ldr.w	r4, [ip]
 800f6bc:	4443      	add	r3, r8
 800f6be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f6c2:	fb0b 840a 	mla	r4, fp, sl, r8
 800f6c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f6ca:	46e2      	mov	sl, ip
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f6d2:	454f      	cmp	r7, r9
 800f6d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f6d8:	f84a 3b04 	str.w	r3, [sl], #4
 800f6dc:	d82b      	bhi.n	800f736 <__multiply+0x120>
 800f6de:	f8cc 8004 	str.w	r8, [ip, #4]
 800f6e2:	9b01      	ldr	r3, [sp, #4]
 800f6e4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f6e8:	3204      	adds	r2, #4
 800f6ea:	f1ba 0f00 	cmp.w	sl, #0
 800f6ee:	d020      	beq.n	800f732 <__multiply+0x11c>
 800f6f0:	682b      	ldr	r3, [r5, #0]
 800f6f2:	4689      	mov	r9, r1
 800f6f4:	46a8      	mov	r8, r5
 800f6f6:	f04f 0b00 	mov.w	fp, #0
 800f6fa:	f8b9 c000 	ldrh.w	ip, [r9]
 800f6fe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f702:	fb0a 440c 	mla	r4, sl, ip, r4
 800f706:	445c      	add	r4, fp
 800f708:	46c4      	mov	ip, r8
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f710:	f84c 3b04 	str.w	r3, [ip], #4
 800f714:	f859 3b04 	ldr.w	r3, [r9], #4
 800f718:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f71c:	0c1b      	lsrs	r3, r3, #16
 800f71e:	fb0a b303 	mla	r3, sl, r3, fp
 800f722:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f726:	454f      	cmp	r7, r9
 800f728:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f72c:	d805      	bhi.n	800f73a <__multiply+0x124>
 800f72e:	f8c8 3004 	str.w	r3, [r8, #4]
 800f732:	3504      	adds	r5, #4
 800f734:	e79b      	b.n	800f66e <__multiply+0x58>
 800f736:	46d4      	mov	ip, sl
 800f738:	e7b3      	b.n	800f6a2 <__multiply+0x8c>
 800f73a:	46e0      	mov	r8, ip
 800f73c:	e7dd      	b.n	800f6fa <__multiply+0xe4>
 800f73e:	3e01      	subs	r6, #1
 800f740:	e799      	b.n	800f676 <__multiply+0x60>
	...

0800f744 <__pow5mult>:
 800f744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f748:	4615      	mov	r5, r2
 800f74a:	f012 0203 	ands.w	r2, r2, #3
 800f74e:	4606      	mov	r6, r0
 800f750:	460f      	mov	r7, r1
 800f752:	d007      	beq.n	800f764 <__pow5mult+0x20>
 800f754:	3a01      	subs	r2, #1
 800f756:	4c21      	ldr	r4, [pc, #132]	; (800f7dc <__pow5mult+0x98>)
 800f758:	2300      	movs	r3, #0
 800f75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f75e:	f7ff fec8 	bl	800f4f2 <__multadd>
 800f762:	4607      	mov	r7, r0
 800f764:	10ad      	asrs	r5, r5, #2
 800f766:	d035      	beq.n	800f7d4 <__pow5mult+0x90>
 800f768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f76a:	b93c      	cbnz	r4, 800f77c <__pow5mult+0x38>
 800f76c:	2010      	movs	r0, #16
 800f76e:	f7fd fe1f 	bl	800d3b0 <malloc>
 800f772:	6270      	str	r0, [r6, #36]	; 0x24
 800f774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f778:	6004      	str	r4, [r0, #0]
 800f77a:	60c4      	str	r4, [r0, #12]
 800f77c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f784:	b94c      	cbnz	r4, 800f79a <__pow5mult+0x56>
 800f786:	f240 2171 	movw	r1, #625	; 0x271
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7ff ff3a 	bl	800f604 <__i2b>
 800f790:	2300      	movs	r3, #0
 800f792:	f8c8 0008 	str.w	r0, [r8, #8]
 800f796:	4604      	mov	r4, r0
 800f798:	6003      	str	r3, [r0, #0]
 800f79a:	f04f 0800 	mov.w	r8, #0
 800f79e:	07eb      	lsls	r3, r5, #31
 800f7a0:	d50a      	bpl.n	800f7b8 <__pow5mult+0x74>
 800f7a2:	4639      	mov	r1, r7
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f7ff ff35 	bl	800f616 <__multiply>
 800f7ac:	4639      	mov	r1, r7
 800f7ae:	4681      	mov	r9, r0
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f7ff fe87 	bl	800f4c4 <_Bfree>
 800f7b6:	464f      	mov	r7, r9
 800f7b8:	106d      	asrs	r5, r5, #1
 800f7ba:	d00b      	beq.n	800f7d4 <__pow5mult+0x90>
 800f7bc:	6820      	ldr	r0, [r4, #0]
 800f7be:	b938      	cbnz	r0, 800f7d0 <__pow5mult+0x8c>
 800f7c0:	4622      	mov	r2, r4
 800f7c2:	4621      	mov	r1, r4
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	f7ff ff26 	bl	800f616 <__multiply>
 800f7ca:	6020      	str	r0, [r4, #0]
 800f7cc:	f8c0 8000 	str.w	r8, [r0]
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	e7e4      	b.n	800f79e <__pow5mult+0x5a>
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7da:	bf00      	nop
 800f7dc:	08010908 	.word	0x08010908

0800f7e0 <__lshift>:
 800f7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7ea:	6923      	ldr	r3, [r4, #16]
 800f7ec:	6849      	ldr	r1, [r1, #4]
 800f7ee:	eb0a 0903 	add.w	r9, sl, r3
 800f7f2:	68a3      	ldr	r3, [r4, #8]
 800f7f4:	4607      	mov	r7, r0
 800f7f6:	4616      	mov	r6, r2
 800f7f8:	f109 0501 	add.w	r5, r9, #1
 800f7fc:	42ab      	cmp	r3, r5
 800f7fe:	db32      	blt.n	800f866 <__lshift+0x86>
 800f800:	4638      	mov	r0, r7
 800f802:	f7ff fe2b 	bl	800f45c <_Balloc>
 800f806:	2300      	movs	r3, #0
 800f808:	4680      	mov	r8, r0
 800f80a:	f100 0114 	add.w	r1, r0, #20
 800f80e:	461a      	mov	r2, r3
 800f810:	4553      	cmp	r3, sl
 800f812:	db2b      	blt.n	800f86c <__lshift+0x8c>
 800f814:	6920      	ldr	r0, [r4, #16]
 800f816:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f81a:	f104 0314 	add.w	r3, r4, #20
 800f81e:	f016 021f 	ands.w	r2, r6, #31
 800f822:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f826:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f82a:	d025      	beq.n	800f878 <__lshift+0x98>
 800f82c:	f1c2 0e20 	rsb	lr, r2, #32
 800f830:	2000      	movs	r0, #0
 800f832:	681e      	ldr	r6, [r3, #0]
 800f834:	468a      	mov	sl, r1
 800f836:	4096      	lsls	r6, r2
 800f838:	4330      	orrs	r0, r6
 800f83a:	f84a 0b04 	str.w	r0, [sl], #4
 800f83e:	f853 0b04 	ldr.w	r0, [r3], #4
 800f842:	459c      	cmp	ip, r3
 800f844:	fa20 f00e 	lsr.w	r0, r0, lr
 800f848:	d814      	bhi.n	800f874 <__lshift+0x94>
 800f84a:	6048      	str	r0, [r1, #4]
 800f84c:	b108      	cbz	r0, 800f852 <__lshift+0x72>
 800f84e:	f109 0502 	add.w	r5, r9, #2
 800f852:	3d01      	subs	r5, #1
 800f854:	4638      	mov	r0, r7
 800f856:	f8c8 5010 	str.w	r5, [r8, #16]
 800f85a:	4621      	mov	r1, r4
 800f85c:	f7ff fe32 	bl	800f4c4 <_Bfree>
 800f860:	4640      	mov	r0, r8
 800f862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f866:	3101      	adds	r1, #1
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	e7c7      	b.n	800f7fc <__lshift+0x1c>
 800f86c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f870:	3301      	adds	r3, #1
 800f872:	e7cd      	b.n	800f810 <__lshift+0x30>
 800f874:	4651      	mov	r1, sl
 800f876:	e7dc      	b.n	800f832 <__lshift+0x52>
 800f878:	3904      	subs	r1, #4
 800f87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f87e:	f841 2f04 	str.w	r2, [r1, #4]!
 800f882:	459c      	cmp	ip, r3
 800f884:	d8f9      	bhi.n	800f87a <__lshift+0x9a>
 800f886:	e7e4      	b.n	800f852 <__lshift+0x72>

0800f888 <__mcmp>:
 800f888:	6903      	ldr	r3, [r0, #16]
 800f88a:	690a      	ldr	r2, [r1, #16]
 800f88c:	1a9b      	subs	r3, r3, r2
 800f88e:	b530      	push	{r4, r5, lr}
 800f890:	d10c      	bne.n	800f8ac <__mcmp+0x24>
 800f892:	0092      	lsls	r2, r2, #2
 800f894:	3014      	adds	r0, #20
 800f896:	3114      	adds	r1, #20
 800f898:	1884      	adds	r4, r0, r2
 800f89a:	4411      	add	r1, r2
 800f89c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8a4:	4295      	cmp	r5, r2
 800f8a6:	d003      	beq.n	800f8b0 <__mcmp+0x28>
 800f8a8:	d305      	bcc.n	800f8b6 <__mcmp+0x2e>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	bd30      	pop	{r4, r5, pc}
 800f8b0:	42a0      	cmp	r0, r4
 800f8b2:	d3f3      	bcc.n	800f89c <__mcmp+0x14>
 800f8b4:	e7fa      	b.n	800f8ac <__mcmp+0x24>
 800f8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ba:	e7f7      	b.n	800f8ac <__mcmp+0x24>

0800f8bc <__mdiff>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	460d      	mov	r5, r1
 800f8c2:	4607      	mov	r7, r0
 800f8c4:	4611      	mov	r1, r2
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	4614      	mov	r4, r2
 800f8ca:	f7ff ffdd 	bl	800f888 <__mcmp>
 800f8ce:	1e06      	subs	r6, r0, #0
 800f8d0:	d108      	bne.n	800f8e4 <__mdiff+0x28>
 800f8d2:	4631      	mov	r1, r6
 800f8d4:	4638      	mov	r0, r7
 800f8d6:	f7ff fdc1 	bl	800f45c <_Balloc>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8e4:	bfa4      	itt	ge
 800f8e6:	4623      	movge	r3, r4
 800f8e8:	462c      	movge	r4, r5
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	6861      	ldr	r1, [r4, #4]
 800f8ee:	bfa6      	itte	ge
 800f8f0:	461d      	movge	r5, r3
 800f8f2:	2600      	movge	r6, #0
 800f8f4:	2601      	movlt	r6, #1
 800f8f6:	f7ff fdb1 	bl	800f45c <_Balloc>
 800f8fa:	692b      	ldr	r3, [r5, #16]
 800f8fc:	60c6      	str	r6, [r0, #12]
 800f8fe:	6926      	ldr	r6, [r4, #16]
 800f900:	f105 0914 	add.w	r9, r5, #20
 800f904:	f104 0214 	add.w	r2, r4, #20
 800f908:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f90c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f910:	f100 0514 	add.w	r5, r0, #20
 800f914:	f04f 0e00 	mov.w	lr, #0
 800f918:	f852 ab04 	ldr.w	sl, [r2], #4
 800f91c:	f859 4b04 	ldr.w	r4, [r9], #4
 800f920:	fa1e f18a 	uxtah	r1, lr, sl
 800f924:	b2a3      	uxth	r3, r4
 800f926:	1ac9      	subs	r1, r1, r3
 800f928:	0c23      	lsrs	r3, r4, #16
 800f92a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f92e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f932:	b289      	uxth	r1, r1
 800f934:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f938:	45c8      	cmp	r8, r9
 800f93a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f93e:	4694      	mov	ip, r2
 800f940:	f845 3b04 	str.w	r3, [r5], #4
 800f944:	d8e8      	bhi.n	800f918 <__mdiff+0x5c>
 800f946:	45bc      	cmp	ip, r7
 800f948:	d304      	bcc.n	800f954 <__mdiff+0x98>
 800f94a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f94e:	b183      	cbz	r3, 800f972 <__mdiff+0xb6>
 800f950:	6106      	str	r6, [r0, #16]
 800f952:	e7c5      	b.n	800f8e0 <__mdiff+0x24>
 800f954:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f958:	fa1e f381 	uxtah	r3, lr, r1
 800f95c:	141a      	asrs	r2, r3, #16
 800f95e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f962:	b29b      	uxth	r3, r3
 800f964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f968:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f96c:	f845 3b04 	str.w	r3, [r5], #4
 800f970:	e7e9      	b.n	800f946 <__mdiff+0x8a>
 800f972:	3e01      	subs	r6, #1
 800f974:	e7e9      	b.n	800f94a <__mdiff+0x8e>

0800f976 <__d2b>:
 800f976:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f97a:	460e      	mov	r6, r1
 800f97c:	2101      	movs	r1, #1
 800f97e:	ec59 8b10 	vmov	r8, r9, d0
 800f982:	4615      	mov	r5, r2
 800f984:	f7ff fd6a 	bl	800f45c <_Balloc>
 800f988:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f98c:	4607      	mov	r7, r0
 800f98e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f992:	bb34      	cbnz	r4, 800f9e2 <__d2b+0x6c>
 800f994:	9301      	str	r3, [sp, #4]
 800f996:	f1b8 0300 	subs.w	r3, r8, #0
 800f99a:	d027      	beq.n	800f9ec <__d2b+0x76>
 800f99c:	a802      	add	r0, sp, #8
 800f99e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f9a2:	f7ff fe00 	bl	800f5a6 <__lo0bits>
 800f9a6:	9900      	ldr	r1, [sp, #0]
 800f9a8:	b1f0      	cbz	r0, 800f9e8 <__d2b+0x72>
 800f9aa:	9a01      	ldr	r2, [sp, #4]
 800f9ac:	f1c0 0320 	rsb	r3, r0, #32
 800f9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b4:	430b      	orrs	r3, r1
 800f9b6:	40c2      	lsrs	r2, r0
 800f9b8:	617b      	str	r3, [r7, #20]
 800f9ba:	9201      	str	r2, [sp, #4]
 800f9bc:	9b01      	ldr	r3, [sp, #4]
 800f9be:	61bb      	str	r3, [r7, #24]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	bf14      	ite	ne
 800f9c4:	2102      	movne	r1, #2
 800f9c6:	2101      	moveq	r1, #1
 800f9c8:	6139      	str	r1, [r7, #16]
 800f9ca:	b1c4      	cbz	r4, 800f9fe <__d2b+0x88>
 800f9cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f9d0:	4404      	add	r4, r0
 800f9d2:	6034      	str	r4, [r6, #0]
 800f9d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9d8:	6028      	str	r0, [r5, #0]
 800f9da:	4638      	mov	r0, r7
 800f9dc:	b003      	add	sp, #12
 800f9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9e6:	e7d5      	b.n	800f994 <__d2b+0x1e>
 800f9e8:	6179      	str	r1, [r7, #20]
 800f9ea:	e7e7      	b.n	800f9bc <__d2b+0x46>
 800f9ec:	a801      	add	r0, sp, #4
 800f9ee:	f7ff fdda 	bl	800f5a6 <__lo0bits>
 800f9f2:	9b01      	ldr	r3, [sp, #4]
 800f9f4:	617b      	str	r3, [r7, #20]
 800f9f6:	2101      	movs	r1, #1
 800f9f8:	6139      	str	r1, [r7, #16]
 800f9fa:	3020      	adds	r0, #32
 800f9fc:	e7e5      	b.n	800f9ca <__d2b+0x54>
 800f9fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fa02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa06:	6030      	str	r0, [r6, #0]
 800fa08:	6918      	ldr	r0, [r3, #16]
 800fa0a:	f7ff fdad 	bl	800f568 <__hi0bits>
 800fa0e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fa12:	e7e1      	b.n	800f9d8 <__d2b+0x62>

0800fa14 <_calloc_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	fb02 f401 	mul.w	r4, r2, r1
 800fa1a:	4621      	mov	r1, r4
 800fa1c:	f7fd fd2e 	bl	800d47c <_malloc_r>
 800fa20:	4605      	mov	r5, r0
 800fa22:	b118      	cbz	r0, 800fa2c <_calloc_r+0x18>
 800fa24:	4622      	mov	r2, r4
 800fa26:	2100      	movs	r1, #0
 800fa28:	f7fd fcd2 	bl	800d3d0 <memset>
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}

0800fa30 <_realloc_r>:
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa32:	4607      	mov	r7, r0
 800fa34:	4614      	mov	r4, r2
 800fa36:	460e      	mov	r6, r1
 800fa38:	b921      	cbnz	r1, 800fa44 <_realloc_r+0x14>
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa40:	f7fd bd1c 	b.w	800d47c <_malloc_r>
 800fa44:	b922      	cbnz	r2, 800fa50 <_realloc_r+0x20>
 800fa46:	f7fd fccb 	bl	800d3e0 <_free_r>
 800fa4a:	4625      	mov	r5, r4
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa50:	f000 fa8c 	bl	800ff6c <_malloc_usable_size_r>
 800fa54:	42a0      	cmp	r0, r4
 800fa56:	d20f      	bcs.n	800fa78 <_realloc_r+0x48>
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4638      	mov	r0, r7
 800fa5c:	f7fd fd0e 	bl	800d47c <_malloc_r>
 800fa60:	4605      	mov	r5, r0
 800fa62:	2800      	cmp	r0, #0
 800fa64:	d0f2      	beq.n	800fa4c <_realloc_r+0x1c>
 800fa66:	4631      	mov	r1, r6
 800fa68:	4622      	mov	r2, r4
 800fa6a:	f7ff fcd1 	bl	800f410 <memcpy>
 800fa6e:	4631      	mov	r1, r6
 800fa70:	4638      	mov	r0, r7
 800fa72:	f7fd fcb5 	bl	800d3e0 <_free_r>
 800fa76:	e7e9      	b.n	800fa4c <_realloc_r+0x1c>
 800fa78:	4635      	mov	r5, r6
 800fa7a:	e7e7      	b.n	800fa4c <_realloc_r+0x1c>

0800fa7c <__ssputs_r>:
 800fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa80:	688e      	ldr	r6, [r1, #8]
 800fa82:	429e      	cmp	r6, r3
 800fa84:	4682      	mov	sl, r0
 800fa86:	460c      	mov	r4, r1
 800fa88:	4690      	mov	r8, r2
 800fa8a:	4699      	mov	r9, r3
 800fa8c:	d837      	bhi.n	800fafe <__ssputs_r+0x82>
 800fa8e:	898a      	ldrh	r2, [r1, #12]
 800fa90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa94:	d031      	beq.n	800fafa <__ssputs_r+0x7e>
 800fa96:	6825      	ldr	r5, [r4, #0]
 800fa98:	6909      	ldr	r1, [r1, #16]
 800fa9a:	1a6f      	subs	r7, r5, r1
 800fa9c:	6965      	ldr	r5, [r4, #20]
 800fa9e:	2302      	movs	r3, #2
 800faa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800faa4:	fb95 f5f3 	sdiv	r5, r5, r3
 800faa8:	f109 0301 	add.w	r3, r9, #1
 800faac:	443b      	add	r3, r7
 800faae:	429d      	cmp	r5, r3
 800fab0:	bf38      	it	cc
 800fab2:	461d      	movcc	r5, r3
 800fab4:	0553      	lsls	r3, r2, #21
 800fab6:	d530      	bpl.n	800fb1a <__ssputs_r+0x9e>
 800fab8:	4629      	mov	r1, r5
 800faba:	f7fd fcdf 	bl	800d47c <_malloc_r>
 800fabe:	4606      	mov	r6, r0
 800fac0:	b950      	cbnz	r0, 800fad8 <__ssputs_r+0x5c>
 800fac2:	230c      	movs	r3, #12
 800fac4:	f8ca 3000 	str.w	r3, [sl]
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800face:	81a3      	strh	r3, [r4, #12]
 800fad0:	f04f 30ff 	mov.w	r0, #4294967295
 800fad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad8:	463a      	mov	r2, r7
 800fada:	6921      	ldr	r1, [r4, #16]
 800fadc:	f7ff fc98 	bl	800f410 <memcpy>
 800fae0:	89a3      	ldrh	r3, [r4, #12]
 800fae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faea:	81a3      	strh	r3, [r4, #12]
 800faec:	6126      	str	r6, [r4, #16]
 800faee:	6165      	str	r5, [r4, #20]
 800faf0:	443e      	add	r6, r7
 800faf2:	1bed      	subs	r5, r5, r7
 800faf4:	6026      	str	r6, [r4, #0]
 800faf6:	60a5      	str	r5, [r4, #8]
 800faf8:	464e      	mov	r6, r9
 800fafa:	454e      	cmp	r6, r9
 800fafc:	d900      	bls.n	800fb00 <__ssputs_r+0x84>
 800fafe:	464e      	mov	r6, r9
 800fb00:	4632      	mov	r2, r6
 800fb02:	4641      	mov	r1, r8
 800fb04:	6820      	ldr	r0, [r4, #0]
 800fb06:	f7ff fc8e 	bl	800f426 <memmove>
 800fb0a:	68a3      	ldr	r3, [r4, #8]
 800fb0c:	1b9b      	subs	r3, r3, r6
 800fb0e:	60a3      	str	r3, [r4, #8]
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	441e      	add	r6, r3
 800fb14:	6026      	str	r6, [r4, #0]
 800fb16:	2000      	movs	r0, #0
 800fb18:	e7dc      	b.n	800fad4 <__ssputs_r+0x58>
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	f7ff ff88 	bl	800fa30 <_realloc_r>
 800fb20:	4606      	mov	r6, r0
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d1e2      	bne.n	800faec <__ssputs_r+0x70>
 800fb26:	6921      	ldr	r1, [r4, #16]
 800fb28:	4650      	mov	r0, sl
 800fb2a:	f7fd fc59 	bl	800d3e0 <_free_r>
 800fb2e:	e7c8      	b.n	800fac2 <__ssputs_r+0x46>

0800fb30 <_svfiprintf_r>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	461d      	mov	r5, r3
 800fb36:	898b      	ldrh	r3, [r1, #12]
 800fb38:	061f      	lsls	r7, r3, #24
 800fb3a:	b09d      	sub	sp, #116	; 0x74
 800fb3c:	4680      	mov	r8, r0
 800fb3e:	460c      	mov	r4, r1
 800fb40:	4616      	mov	r6, r2
 800fb42:	d50f      	bpl.n	800fb64 <_svfiprintf_r+0x34>
 800fb44:	690b      	ldr	r3, [r1, #16]
 800fb46:	b96b      	cbnz	r3, 800fb64 <_svfiprintf_r+0x34>
 800fb48:	2140      	movs	r1, #64	; 0x40
 800fb4a:	f7fd fc97 	bl	800d47c <_malloc_r>
 800fb4e:	6020      	str	r0, [r4, #0]
 800fb50:	6120      	str	r0, [r4, #16]
 800fb52:	b928      	cbnz	r0, 800fb60 <_svfiprintf_r+0x30>
 800fb54:	230c      	movs	r3, #12
 800fb56:	f8c8 3000 	str.w	r3, [r8]
 800fb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb5e:	e0c8      	b.n	800fcf2 <_svfiprintf_r+0x1c2>
 800fb60:	2340      	movs	r3, #64	; 0x40
 800fb62:	6163      	str	r3, [r4, #20]
 800fb64:	2300      	movs	r3, #0
 800fb66:	9309      	str	r3, [sp, #36]	; 0x24
 800fb68:	2320      	movs	r3, #32
 800fb6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb6e:	2330      	movs	r3, #48	; 0x30
 800fb70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb74:	9503      	str	r5, [sp, #12]
 800fb76:	f04f 0b01 	mov.w	fp, #1
 800fb7a:	4637      	mov	r7, r6
 800fb7c:	463d      	mov	r5, r7
 800fb7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fb82:	b10b      	cbz	r3, 800fb88 <_svfiprintf_r+0x58>
 800fb84:	2b25      	cmp	r3, #37	; 0x25
 800fb86:	d13e      	bne.n	800fc06 <_svfiprintf_r+0xd6>
 800fb88:	ebb7 0a06 	subs.w	sl, r7, r6
 800fb8c:	d00b      	beq.n	800fba6 <_svfiprintf_r+0x76>
 800fb8e:	4653      	mov	r3, sl
 800fb90:	4632      	mov	r2, r6
 800fb92:	4621      	mov	r1, r4
 800fb94:	4640      	mov	r0, r8
 800fb96:	f7ff ff71 	bl	800fa7c <__ssputs_r>
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	f000 80a4 	beq.w	800fce8 <_svfiprintf_r+0x1b8>
 800fba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fba2:	4453      	add	r3, sl
 800fba4:	9309      	str	r3, [sp, #36]	; 0x24
 800fba6:	783b      	ldrb	r3, [r7, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 809d 	beq.w	800fce8 <_svfiprintf_r+0x1b8>
 800fbae:	2300      	movs	r3, #0
 800fbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbb8:	9304      	str	r3, [sp, #16]
 800fbba:	9307      	str	r3, [sp, #28]
 800fbbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbc0:	931a      	str	r3, [sp, #104]	; 0x68
 800fbc2:	462f      	mov	r7, r5
 800fbc4:	2205      	movs	r2, #5
 800fbc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fbca:	4850      	ldr	r0, [pc, #320]	; (800fd0c <_svfiprintf_r+0x1dc>)
 800fbcc:	f7f2 faa8 	bl	8002120 <memchr>
 800fbd0:	9b04      	ldr	r3, [sp, #16]
 800fbd2:	b9d0      	cbnz	r0, 800fc0a <_svfiprintf_r+0xda>
 800fbd4:	06d9      	lsls	r1, r3, #27
 800fbd6:	bf44      	itt	mi
 800fbd8:	2220      	movmi	r2, #32
 800fbda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fbde:	071a      	lsls	r2, r3, #28
 800fbe0:	bf44      	itt	mi
 800fbe2:	222b      	movmi	r2, #43	; 0x2b
 800fbe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fbe8:	782a      	ldrb	r2, [r5, #0]
 800fbea:	2a2a      	cmp	r2, #42	; 0x2a
 800fbec:	d015      	beq.n	800fc1a <_svfiprintf_r+0xea>
 800fbee:	9a07      	ldr	r2, [sp, #28]
 800fbf0:	462f      	mov	r7, r5
 800fbf2:	2000      	movs	r0, #0
 800fbf4:	250a      	movs	r5, #10
 800fbf6:	4639      	mov	r1, r7
 800fbf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbfc:	3b30      	subs	r3, #48	; 0x30
 800fbfe:	2b09      	cmp	r3, #9
 800fc00:	d94d      	bls.n	800fc9e <_svfiprintf_r+0x16e>
 800fc02:	b1b8      	cbz	r0, 800fc34 <_svfiprintf_r+0x104>
 800fc04:	e00f      	b.n	800fc26 <_svfiprintf_r+0xf6>
 800fc06:	462f      	mov	r7, r5
 800fc08:	e7b8      	b.n	800fb7c <_svfiprintf_r+0x4c>
 800fc0a:	4a40      	ldr	r2, [pc, #256]	; (800fd0c <_svfiprintf_r+0x1dc>)
 800fc0c:	1a80      	subs	r0, r0, r2
 800fc0e:	fa0b f000 	lsl.w	r0, fp, r0
 800fc12:	4318      	orrs	r0, r3
 800fc14:	9004      	str	r0, [sp, #16]
 800fc16:	463d      	mov	r5, r7
 800fc18:	e7d3      	b.n	800fbc2 <_svfiprintf_r+0x92>
 800fc1a:	9a03      	ldr	r2, [sp, #12]
 800fc1c:	1d11      	adds	r1, r2, #4
 800fc1e:	6812      	ldr	r2, [r2, #0]
 800fc20:	9103      	str	r1, [sp, #12]
 800fc22:	2a00      	cmp	r2, #0
 800fc24:	db01      	blt.n	800fc2a <_svfiprintf_r+0xfa>
 800fc26:	9207      	str	r2, [sp, #28]
 800fc28:	e004      	b.n	800fc34 <_svfiprintf_r+0x104>
 800fc2a:	4252      	negs	r2, r2
 800fc2c:	f043 0302 	orr.w	r3, r3, #2
 800fc30:	9207      	str	r2, [sp, #28]
 800fc32:	9304      	str	r3, [sp, #16]
 800fc34:	783b      	ldrb	r3, [r7, #0]
 800fc36:	2b2e      	cmp	r3, #46	; 0x2e
 800fc38:	d10c      	bne.n	800fc54 <_svfiprintf_r+0x124>
 800fc3a:	787b      	ldrb	r3, [r7, #1]
 800fc3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fc3e:	d133      	bne.n	800fca8 <_svfiprintf_r+0x178>
 800fc40:	9b03      	ldr	r3, [sp, #12]
 800fc42:	1d1a      	adds	r2, r3, #4
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	9203      	str	r2, [sp, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	bfb8      	it	lt
 800fc4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc50:	3702      	adds	r7, #2
 800fc52:	9305      	str	r3, [sp, #20]
 800fc54:	4d2e      	ldr	r5, [pc, #184]	; (800fd10 <_svfiprintf_r+0x1e0>)
 800fc56:	7839      	ldrb	r1, [r7, #0]
 800fc58:	2203      	movs	r2, #3
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f7f2 fa60 	bl	8002120 <memchr>
 800fc60:	b138      	cbz	r0, 800fc72 <_svfiprintf_r+0x142>
 800fc62:	2340      	movs	r3, #64	; 0x40
 800fc64:	1b40      	subs	r0, r0, r5
 800fc66:	fa03 f000 	lsl.w	r0, r3, r0
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	4303      	orrs	r3, r0
 800fc6e:	3701      	adds	r7, #1
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	7839      	ldrb	r1, [r7, #0]
 800fc74:	4827      	ldr	r0, [pc, #156]	; (800fd14 <_svfiprintf_r+0x1e4>)
 800fc76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc7a:	2206      	movs	r2, #6
 800fc7c:	1c7e      	adds	r6, r7, #1
 800fc7e:	f7f2 fa4f 	bl	8002120 <memchr>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d038      	beq.n	800fcf8 <_svfiprintf_r+0x1c8>
 800fc86:	4b24      	ldr	r3, [pc, #144]	; (800fd18 <_svfiprintf_r+0x1e8>)
 800fc88:	bb13      	cbnz	r3, 800fcd0 <_svfiprintf_r+0x1a0>
 800fc8a:	9b03      	ldr	r3, [sp, #12]
 800fc8c:	3307      	adds	r3, #7
 800fc8e:	f023 0307 	bic.w	r3, r3, #7
 800fc92:	3308      	adds	r3, #8
 800fc94:	9303      	str	r3, [sp, #12]
 800fc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc98:	444b      	add	r3, r9
 800fc9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc9c:	e76d      	b.n	800fb7a <_svfiprintf_r+0x4a>
 800fc9e:	fb05 3202 	mla	r2, r5, r2, r3
 800fca2:	2001      	movs	r0, #1
 800fca4:	460f      	mov	r7, r1
 800fca6:	e7a6      	b.n	800fbf6 <_svfiprintf_r+0xc6>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	3701      	adds	r7, #1
 800fcac:	9305      	str	r3, [sp, #20]
 800fcae:	4619      	mov	r1, r3
 800fcb0:	250a      	movs	r5, #10
 800fcb2:	4638      	mov	r0, r7
 800fcb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcb8:	3a30      	subs	r2, #48	; 0x30
 800fcba:	2a09      	cmp	r2, #9
 800fcbc:	d903      	bls.n	800fcc6 <_svfiprintf_r+0x196>
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d0c8      	beq.n	800fc54 <_svfiprintf_r+0x124>
 800fcc2:	9105      	str	r1, [sp, #20]
 800fcc4:	e7c6      	b.n	800fc54 <_svfiprintf_r+0x124>
 800fcc6:	fb05 2101 	mla	r1, r5, r1, r2
 800fcca:	2301      	movs	r3, #1
 800fccc:	4607      	mov	r7, r0
 800fcce:	e7f0      	b.n	800fcb2 <_svfiprintf_r+0x182>
 800fcd0:	ab03      	add	r3, sp, #12
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	4622      	mov	r2, r4
 800fcd6:	4b11      	ldr	r3, [pc, #68]	; (800fd1c <_svfiprintf_r+0x1ec>)
 800fcd8:	a904      	add	r1, sp, #16
 800fcda:	4640      	mov	r0, r8
 800fcdc:	f7fd fdfc 	bl	800d8d8 <_printf_float>
 800fce0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fce4:	4681      	mov	r9, r0
 800fce6:	d1d6      	bne.n	800fc96 <_svfiprintf_r+0x166>
 800fce8:	89a3      	ldrh	r3, [r4, #12]
 800fcea:	065b      	lsls	r3, r3, #25
 800fcec:	f53f af35 	bmi.w	800fb5a <_svfiprintf_r+0x2a>
 800fcf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fcf2:	b01d      	add	sp, #116	; 0x74
 800fcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf8:	ab03      	add	r3, sp, #12
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	4b07      	ldr	r3, [pc, #28]	; (800fd1c <_svfiprintf_r+0x1ec>)
 800fd00:	a904      	add	r1, sp, #16
 800fd02:	4640      	mov	r0, r8
 800fd04:	f7fe f89e 	bl	800de44 <_printf_i>
 800fd08:	e7ea      	b.n	800fce0 <_svfiprintf_r+0x1b0>
 800fd0a:	bf00      	nop
 800fd0c:	08010760 	.word	0x08010760
 800fd10:	08010766 	.word	0x08010766
 800fd14:	0801076a 	.word	0x0801076a
 800fd18:	0800d8d9 	.word	0x0800d8d9
 800fd1c:	0800fa7d 	.word	0x0800fa7d

0800fd20 <_putc_r>:
 800fd20:	b570      	push	{r4, r5, r6, lr}
 800fd22:	460d      	mov	r5, r1
 800fd24:	4614      	mov	r4, r2
 800fd26:	4606      	mov	r6, r0
 800fd28:	b118      	cbz	r0, 800fd32 <_putc_r+0x12>
 800fd2a:	6983      	ldr	r3, [r0, #24]
 800fd2c:	b90b      	cbnz	r3, 800fd32 <_putc_r+0x12>
 800fd2e:	f7ff fa73 	bl	800f218 <__sinit>
 800fd32:	4b13      	ldr	r3, [pc, #76]	; (800fd80 <_putc_r+0x60>)
 800fd34:	429c      	cmp	r4, r3
 800fd36:	d112      	bne.n	800fd5e <_putc_r+0x3e>
 800fd38:	6874      	ldr	r4, [r6, #4]
 800fd3a:	68a3      	ldr	r3, [r4, #8]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	60a3      	str	r3, [r4, #8]
 800fd42:	da16      	bge.n	800fd72 <_putc_r+0x52>
 800fd44:	69a2      	ldr	r2, [r4, #24]
 800fd46:	4293      	cmp	r3, r2
 800fd48:	db02      	blt.n	800fd50 <_putc_r+0x30>
 800fd4a:	b2eb      	uxtb	r3, r5
 800fd4c:	2b0a      	cmp	r3, #10
 800fd4e:	d110      	bne.n	800fd72 <_putc_r+0x52>
 800fd50:	4622      	mov	r2, r4
 800fd52:	4629      	mov	r1, r5
 800fd54:	4630      	mov	r0, r6
 800fd56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd5a:	f7fe ba5f 	b.w	800e21c <__swbuf_r>
 800fd5e:	4b09      	ldr	r3, [pc, #36]	; (800fd84 <_putc_r+0x64>)
 800fd60:	429c      	cmp	r4, r3
 800fd62:	d101      	bne.n	800fd68 <_putc_r+0x48>
 800fd64:	68b4      	ldr	r4, [r6, #8]
 800fd66:	e7e8      	b.n	800fd3a <_putc_r+0x1a>
 800fd68:	4b07      	ldr	r3, [pc, #28]	; (800fd88 <_putc_r+0x68>)
 800fd6a:	429c      	cmp	r4, r3
 800fd6c:	bf08      	it	eq
 800fd6e:	68f4      	ldreq	r4, [r6, #12]
 800fd70:	e7e3      	b.n	800fd3a <_putc_r+0x1a>
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	1c5a      	adds	r2, r3, #1
 800fd76:	6022      	str	r2, [r4, #0]
 800fd78:	701d      	strb	r5, [r3, #0]
 800fd7a:	b2e8      	uxtb	r0, r5
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
 800fd7e:	bf00      	nop
 800fd80:	080107d4 	.word	0x080107d4
 800fd84:	080107f4 	.word	0x080107f4
 800fd88:	080107b4 	.word	0x080107b4

0800fd8c <_raise_r>:
 800fd8c:	291f      	cmp	r1, #31
 800fd8e:	b538      	push	{r3, r4, r5, lr}
 800fd90:	4604      	mov	r4, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	d904      	bls.n	800fda0 <_raise_r+0x14>
 800fd96:	2316      	movs	r3, #22
 800fd98:	6003      	str	r3, [r0, #0]
 800fd9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fda2:	b112      	cbz	r2, 800fdaa <_raise_r+0x1e>
 800fda4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fda8:	b94b      	cbnz	r3, 800fdbe <_raise_r+0x32>
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f000 f830 	bl	800fe10 <_getpid_r>
 800fdb0:	462a      	mov	r2, r5
 800fdb2:	4601      	mov	r1, r0
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdba:	f000 b817 	b.w	800fdec <_kill_r>
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d00a      	beq.n	800fdd8 <_raise_r+0x4c>
 800fdc2:	1c59      	adds	r1, r3, #1
 800fdc4:	d103      	bne.n	800fdce <_raise_r+0x42>
 800fdc6:	2316      	movs	r3, #22
 800fdc8:	6003      	str	r3, [r0, #0]
 800fdca:	2001      	movs	r0, #1
 800fdcc:	e7e7      	b.n	800fd9e <_raise_r+0x12>
 800fdce:	2400      	movs	r4, #0
 800fdd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdd4:	4628      	mov	r0, r5
 800fdd6:	4798      	blx	r3
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e7e0      	b.n	800fd9e <_raise_r+0x12>

0800fddc <raise>:
 800fddc:	4b02      	ldr	r3, [pc, #8]	; (800fde8 <raise+0xc>)
 800fdde:	4601      	mov	r1, r0
 800fde0:	6818      	ldr	r0, [r3, #0]
 800fde2:	f7ff bfd3 	b.w	800fd8c <_raise_r>
 800fde6:	bf00      	nop
 800fde8:	2000002c 	.word	0x2000002c

0800fdec <_kill_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4c07      	ldr	r4, [pc, #28]	; (800fe0c <_kill_r+0x20>)
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4605      	mov	r5, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	f7f4 f947 	bl	800408c <_kill>
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	d102      	bne.n	800fe08 <_kill_r+0x1c>
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	b103      	cbz	r3, 800fe08 <_kill_r+0x1c>
 800fe06:	602b      	str	r3, [r5, #0]
 800fe08:	bd38      	pop	{r3, r4, r5, pc}
 800fe0a:	bf00      	nop
 800fe0c:	20001860 	.word	0x20001860

0800fe10 <_getpid_r>:
 800fe10:	f7f4 b934 	b.w	800407c <_getpid>

0800fe14 <__sread>:
 800fe14:	b510      	push	{r4, lr}
 800fe16:	460c      	mov	r4, r1
 800fe18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe1c:	f000 f8ae 	bl	800ff7c <_read_r>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	bfab      	itete	ge
 800fe24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe26:	89a3      	ldrhlt	r3, [r4, #12]
 800fe28:	181b      	addge	r3, r3, r0
 800fe2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe2e:	bfac      	ite	ge
 800fe30:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe32:	81a3      	strhlt	r3, [r4, #12]
 800fe34:	bd10      	pop	{r4, pc}

0800fe36 <__swrite>:
 800fe36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe3a:	461f      	mov	r7, r3
 800fe3c:	898b      	ldrh	r3, [r1, #12]
 800fe3e:	05db      	lsls	r3, r3, #23
 800fe40:	4605      	mov	r5, r0
 800fe42:	460c      	mov	r4, r1
 800fe44:	4616      	mov	r6, r2
 800fe46:	d505      	bpl.n	800fe54 <__swrite+0x1e>
 800fe48:	2302      	movs	r3, #2
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe50:	f000 f868 	bl	800ff24 <_lseek_r>
 800fe54:	89a3      	ldrh	r3, [r4, #12]
 800fe56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe5e:	81a3      	strh	r3, [r4, #12]
 800fe60:	4632      	mov	r2, r6
 800fe62:	463b      	mov	r3, r7
 800fe64:	4628      	mov	r0, r5
 800fe66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe6a:	f000 b817 	b.w	800fe9c <_write_r>

0800fe6e <__sseek>:
 800fe6e:	b510      	push	{r4, lr}
 800fe70:	460c      	mov	r4, r1
 800fe72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe76:	f000 f855 	bl	800ff24 <_lseek_r>
 800fe7a:	1c43      	adds	r3, r0, #1
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	bf15      	itete	ne
 800fe80:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe8a:	81a3      	strheq	r3, [r4, #12]
 800fe8c:	bf18      	it	ne
 800fe8e:	81a3      	strhne	r3, [r4, #12]
 800fe90:	bd10      	pop	{r4, pc}

0800fe92 <__sclose>:
 800fe92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe96:	f000 b813 	b.w	800fec0 <_close_r>
	...

0800fe9c <_write_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	4c07      	ldr	r4, [pc, #28]	; (800febc <_write_r+0x20>)
 800fea0:	4605      	mov	r5, r0
 800fea2:	4608      	mov	r0, r1
 800fea4:	4611      	mov	r1, r2
 800fea6:	2200      	movs	r2, #0
 800fea8:	6022      	str	r2, [r4, #0]
 800feaa:	461a      	mov	r2, r3
 800feac:	f7f4 f925 	bl	80040fa <_write>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d102      	bne.n	800feba <_write_r+0x1e>
 800feb4:	6823      	ldr	r3, [r4, #0]
 800feb6:	b103      	cbz	r3, 800feba <_write_r+0x1e>
 800feb8:	602b      	str	r3, [r5, #0]
 800feba:	bd38      	pop	{r3, r4, r5, pc}
 800febc:	20001860 	.word	0x20001860

0800fec0 <_close_r>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4c06      	ldr	r4, [pc, #24]	; (800fedc <_close_r+0x1c>)
 800fec4:	2300      	movs	r3, #0
 800fec6:	4605      	mov	r5, r0
 800fec8:	4608      	mov	r0, r1
 800feca:	6023      	str	r3, [r4, #0]
 800fecc:	f7f4 f931 	bl	8004132 <_close>
 800fed0:	1c43      	adds	r3, r0, #1
 800fed2:	d102      	bne.n	800feda <_close_r+0x1a>
 800fed4:	6823      	ldr	r3, [r4, #0]
 800fed6:	b103      	cbz	r3, 800feda <_close_r+0x1a>
 800fed8:	602b      	str	r3, [r5, #0]
 800feda:	bd38      	pop	{r3, r4, r5, pc}
 800fedc:	20001860 	.word	0x20001860

0800fee0 <_fstat_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4c07      	ldr	r4, [pc, #28]	; (800ff00 <_fstat_r+0x20>)
 800fee4:	2300      	movs	r3, #0
 800fee6:	4605      	mov	r5, r0
 800fee8:	4608      	mov	r0, r1
 800feea:	4611      	mov	r1, r2
 800feec:	6023      	str	r3, [r4, #0]
 800feee:	f7f4 f92c 	bl	800414a <_fstat>
 800fef2:	1c43      	adds	r3, r0, #1
 800fef4:	d102      	bne.n	800fefc <_fstat_r+0x1c>
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	b103      	cbz	r3, 800fefc <_fstat_r+0x1c>
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	bd38      	pop	{r3, r4, r5, pc}
 800fefe:	bf00      	nop
 800ff00:	20001860 	.word	0x20001860

0800ff04 <_isatty_r>:
 800ff04:	b538      	push	{r3, r4, r5, lr}
 800ff06:	4c06      	ldr	r4, [pc, #24]	; (800ff20 <_isatty_r+0x1c>)
 800ff08:	2300      	movs	r3, #0
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	4608      	mov	r0, r1
 800ff0e:	6023      	str	r3, [r4, #0]
 800ff10:	f7f4 f92b 	bl	800416a <_isatty>
 800ff14:	1c43      	adds	r3, r0, #1
 800ff16:	d102      	bne.n	800ff1e <_isatty_r+0x1a>
 800ff18:	6823      	ldr	r3, [r4, #0]
 800ff1a:	b103      	cbz	r3, 800ff1e <_isatty_r+0x1a>
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	bd38      	pop	{r3, r4, r5, pc}
 800ff20:	20001860 	.word	0x20001860

0800ff24 <_lseek_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4c07      	ldr	r4, [pc, #28]	; (800ff44 <_lseek_r+0x20>)
 800ff28:	4605      	mov	r5, r0
 800ff2a:	4608      	mov	r0, r1
 800ff2c:	4611      	mov	r1, r2
 800ff2e:	2200      	movs	r2, #0
 800ff30:	6022      	str	r2, [r4, #0]
 800ff32:	461a      	mov	r2, r3
 800ff34:	f7f4 f924 	bl	8004180 <_lseek>
 800ff38:	1c43      	adds	r3, r0, #1
 800ff3a:	d102      	bne.n	800ff42 <_lseek_r+0x1e>
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	b103      	cbz	r3, 800ff42 <_lseek_r+0x1e>
 800ff40:	602b      	str	r3, [r5, #0]
 800ff42:	bd38      	pop	{r3, r4, r5, pc}
 800ff44:	20001860 	.word	0x20001860

0800ff48 <__ascii_mbtowc>:
 800ff48:	b082      	sub	sp, #8
 800ff4a:	b901      	cbnz	r1, 800ff4e <__ascii_mbtowc+0x6>
 800ff4c:	a901      	add	r1, sp, #4
 800ff4e:	b142      	cbz	r2, 800ff62 <__ascii_mbtowc+0x1a>
 800ff50:	b14b      	cbz	r3, 800ff66 <__ascii_mbtowc+0x1e>
 800ff52:	7813      	ldrb	r3, [r2, #0]
 800ff54:	600b      	str	r3, [r1, #0]
 800ff56:	7812      	ldrb	r2, [r2, #0]
 800ff58:	1c10      	adds	r0, r2, #0
 800ff5a:	bf18      	it	ne
 800ff5c:	2001      	movne	r0, #1
 800ff5e:	b002      	add	sp, #8
 800ff60:	4770      	bx	lr
 800ff62:	4610      	mov	r0, r2
 800ff64:	e7fb      	b.n	800ff5e <__ascii_mbtowc+0x16>
 800ff66:	f06f 0001 	mvn.w	r0, #1
 800ff6a:	e7f8      	b.n	800ff5e <__ascii_mbtowc+0x16>

0800ff6c <_malloc_usable_size_r>:
 800ff6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff70:	1f18      	subs	r0, r3, #4
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	bfbc      	itt	lt
 800ff76:	580b      	ldrlt	r3, [r1, r0]
 800ff78:	18c0      	addlt	r0, r0, r3
 800ff7a:	4770      	bx	lr

0800ff7c <_read_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4c07      	ldr	r4, [pc, #28]	; (800ff9c <_read_r+0x20>)
 800ff80:	4605      	mov	r5, r0
 800ff82:	4608      	mov	r0, r1
 800ff84:	4611      	mov	r1, r2
 800ff86:	2200      	movs	r2, #0
 800ff88:	6022      	str	r2, [r4, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f7f4 f898 	bl	80040c0 <_read>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d102      	bne.n	800ff9a <_read_r+0x1e>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	b103      	cbz	r3, 800ff9a <_read_r+0x1e>
 800ff98:	602b      	str	r3, [r5, #0]
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	20001860 	.word	0x20001860

0800ffa0 <__ascii_wctomb>:
 800ffa0:	b149      	cbz	r1, 800ffb6 <__ascii_wctomb+0x16>
 800ffa2:	2aff      	cmp	r2, #255	; 0xff
 800ffa4:	bf85      	ittet	hi
 800ffa6:	238a      	movhi	r3, #138	; 0x8a
 800ffa8:	6003      	strhi	r3, [r0, #0]
 800ffaa:	700a      	strbls	r2, [r1, #0]
 800ffac:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffb0:	bf98      	it	ls
 800ffb2:	2001      	movls	r0, #1
 800ffb4:	4770      	bx	lr
 800ffb6:	4608      	mov	r0, r1
 800ffb8:	4770      	bx	lr
	...

0800ffbc <_init>:
 800ffbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffbe:	bf00      	nop
 800ffc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffc2:	bc08      	pop	{r3}
 800ffc4:	469e      	mov	lr, r3
 800ffc6:	4770      	bx	lr

0800ffc8 <_fini>:
 800ffc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffca:	bf00      	nop
 800ffcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffce:	bc08      	pop	{r3}
 800ffd0:	469e      	mov	lr, r3
 800ffd2:	4770      	bx	lr
