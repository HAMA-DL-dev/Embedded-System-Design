
Ubidots.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08009cfc  08009cfc  00019cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb8  08009eb8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec0  08009ec0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ec4  08009ec4  00019ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000090  08009f58  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  08009f58  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5b2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e2f  00000000  00000000  0003e672  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001750  00000000  00000000  000424a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  00043bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002573d  00000000  00000000  000451a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015574  00000000  00000000  0006a8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d505e  00000000  00000000  0007fe59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006614  00000000  00000000  00154f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ce4 	.word	0x08009ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009ce4 	.word	0x08009ce4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <set_gpio_output>:
#include "dht22.h"
uint8_t check = 0;
GPIO_InitTypeDef GPIO_InitStruct;

void set_gpio_output(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/*Configure GPIO pin output: PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <set_gpio_output+0x24>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <set_gpio_output+0x24>)
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <set_gpio_output+0x24>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000596:	4903      	ldr	r1, [pc, #12]	; (80005a4 <set_gpio_output+0x24>)
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <set_gpio_output+0x28>)
 800059a:	f001 fbc9 	bl	8001d30 <HAL_GPIO_Init>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000c4 	.word	0x200000c4
 80005a8:	40021000 	.word	0x40021000

080005ac <set_gpio_input>:
void set_gpio_input(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	/*Configure GPIO pin input: PE0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <set_gpio_input+0x24>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <set_gpio_input+0x24>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <set_gpio_input+0x24>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c2:	4903      	ldr	r1, [pc, #12]	; (80005d0 <set_gpio_input+0x24>)
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <set_gpio_input+0x28>)
 80005c6:	f001 fbb3 	bl	8001d30 <HAL_GPIO_Init>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000c4 	.word	0x200000c4
 80005d4:	40021000 	.word	0x40021000

080005d8 <DHT22_start>:
void DHT22_start(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	set_gpio_output();   // set the pin as output
 80005dc:	f7ff ffd0 	bl	8000580 <set_gpio_output>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);    // pull the pin low
 80005e0:	2200      	movs	r2, #0
 80005e2:	2101      	movs	r1, #1
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <DHT22_start+0x34>)
 80005e6:	f001 fd55 	bl	8002094 <HAL_GPIO_WritePin>
	Delay_us(500);    // wait for 500us
 80005ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ee:	f000 f897 	bl	8000720 <Delay_us>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);    // pull the pin high
 80005f2:	2201      	movs	r2, #1
 80005f4:	2101      	movs	r1, #1
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <DHT22_start+0x34>)
 80005f8:	f001 fd4c 	bl	8002094 <HAL_GPIO_WritePin>
	Delay_us(30);    // wait for 30us
 80005fc:	201e      	movs	r0, #30
 80005fe:	f000 f88f 	bl	8000720 <Delay_us>
	set_gpio_input();    // set as input
 8000602:	f7ff ffd3 	bl	80005ac <set_gpio_input>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <check_response>:
void check_response(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	Delay_us(40);
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 f883 	bl	8000720 <Delay_us>
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)))
 800061a:	2101      	movs	r1, #1
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <check_response+0x48>)
 800061e:	f001 fd21 	bl	8002064 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10c      	bne.n	8000642 <check_response+0x32>
	{
		Delay_us(80);
 8000628:	2050      	movs	r0, #80	; 0x50
 800062a:	f000 f879 	bl	8000720 <Delay_us>
		if ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0))) check = 1;
 800062e:	2101      	movs	r1, #1
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <check_response+0x48>)
 8000632:	f001 fd17 	bl	8002064 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <check_response+0x32>
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <check_response+0x4c>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
	}
	while ((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0))) ;   // wait for the pin to go low
 8000642:	bf00      	nop
 8000644:	2101      	movs	r1, #1
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <check_response+0x48>)
 8000648:	f001 fd0c 	bl	8002064 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f8      	bne.n	8000644 <check_response+0x34>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	200000ac 	.word	0x200000ac

08000660 <read_data>:
uint8_t read_data(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8000666:	2300      	movs	r3, #0
 8000668:	71bb      	strb	r3, [r7, #6]
 800066a:	e037      	b.n	80006dc <read_data+0x7c>
	{
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0))) ;   // wait for the pin to go high
 800066c:	bf00      	nop
 800066e:	2101      	movs	r1, #1
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <read_data+0x8c>)
 8000672:	f001 fcf7 	bl	8002064 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f8      	beq.n	800066e <read_data+0xe>
		Delay_us(40);    // wait for 40 us
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 f84f 	bl	8000720 <Delay_us>
		if((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)) == 0)   // if the pin is low 
 8000682:	2101      	movs	r1, #1
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <read_data+0x8c>)
 8000686:	f001 fced 	bl	8002064 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10e      	bne.n	80006ae <read_data+0x4e>
		{
			i &= ~(1 << (7 - j));    // write 0
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	f1c3 0307 	rsb	r3, r3, #7
 8000696:	2201      	movs	r2, #1
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	b25b      	sxtb	r3, r3
 800069e:	43db      	mvns	r3, r3
 80006a0:	b25a      	sxtb	r2, r3
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	4013      	ands	r3, r2
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	71fb      	strb	r3, [r7, #7]
 80006ac:	e00b      	b.n	80006c6 <read_data+0x66>
		}
		else i |= (1 << (7 - j));   // if the pin is high, write 1
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	f1c3 0307 	rsb	r3, r3, #7
 80006b4:	2201      	movs	r2, #1
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	71fb      	strb	r3, [r7, #7]
		while((HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)));   // wait for the pin to go low
 80006c6:	bf00      	nop
 80006c8:	2101      	movs	r1, #1
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <read_data+0x8c>)
 80006cc:	f001 fcca 	bl	8002064 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f8      	bne.n	80006c8 <read_data+0x68>
	for (j = 0; j < 8; j++)
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	3301      	adds	r3, #1
 80006da:	71bb      	strb	r3, [r7, #6]
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	d9c4      	bls.n	800066c <read_data+0xc>
	}
	return i;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000

080006f0 <PrintString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PrintString(char * string)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	int length;
	length = (int)strlen(string);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fd69 	bl	80001d0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, length, 0xffff);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	b29a      	uxth	r2, r3
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <PrintString+0x2c>)
 800070e:	f005 f834 	bl	800577a <HAL_UART_Transmit>
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000204 	.word	0x20000204

08000720 <Delay_us>:
void Delay_us(uint16_t usec)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <Delay_us+0x30>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim9) < usec * 2) ;
 8000732:	bf00      	nop
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <Delay_us+0x30>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	88fa      	ldrh	r2, [r7, #6]
 800073c:	0052      	lsls	r2, r2, #1
 800073e:	4293      	cmp	r3, r2
 8000740:	d3f8      	bcc.n	8000734 <Delay_us+0x14>
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	2000016c 	.word	0x2000016c

08000754 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000758:	f001 f944 	bl	80019e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800075c:	f000 f826 	bl	80007ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000760:	f000 f9c8 	bl	8000af4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000764:	f000 f8a4 	bl	80008b0 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000768:	f000 f8d0 	bl	800090c <MX_I2S3_Init>
	MX_SPI1_Init();
 800076c:	f000 f8fe 	bl	800096c <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8000770:	f008 fb4e 	bl	8008e10 <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 8000774:	f000 f96a 	bl	8000a4c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000778:	f000 f992 	bl	8000aa0 <MX_USART3_UART_Init>
	MX_TIM9_Init();
 800077c:	f000 f92c 	bl	80009d8 <MX_TIM9_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_TIM_Base_Start(&htim9) != HAL_OK)
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0x50>)
 8000782:	f004 fd98 	bl	80052b6 <HAL_TIM_Base_Start>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <main+0x3c>
	{
		Error_Handler();
 800078c:	f000 fab0 	bl	8000cf0 <Error_Handler>
	}
	PrintString("Hello Cortex-M\n\r");
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <main+0x54>)
 8000792:	f7ff ffad 	bl	80006f0 <PrintString>
	WifiSetup();
 8000796:	f000 fdd9 	bl	800134c <WifiSetup>
	WifiUbidots();
 800079a:	f000 ff97 	bl	80016cc <WifiUbidots>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800079e:	f008 fb5d 	bl	8008e5c <MX_USB_HOST_Process>
 80007a2:	e7fc      	b.n	800079e <main+0x4a>
 80007a4:	2000016c 	.word	0x2000016c
 80007a8:	08009cfc 	.word	0x08009cfc

080007ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b098      	sub	sp, #96	; 0x60
 80007b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f008 fe6a 	bl	8009494 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <SystemClock_Config+0xfc>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a30      	ldr	r2, [pc, #192]	; (80008a8 <SystemClock_Config+0xfc>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <SystemClock_Config+0xfc>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <SystemClock_Config+0x100>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <SystemClock_Config+0x100>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0x100>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000816:	2301      	movs	r3, #1
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000824:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800082a:	2308      	movs	r3, #8
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 800082e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000838:	2307      	movs	r3, #7
 800083a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000840:	4618      	mov	r0, r3
 8000842:	f003 ff09 	bl	8004658 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 800084c:	f000 fa50 	bl	8000cf0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800085c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	2105      	movs	r1, #5
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f962 	bl	8004b38 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800087a:	f000 fa39 	bl	8000cf0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800087e:	2301      	movs	r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000882:	23c0      	movs	r3, #192	; 0xc0
 8000884:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fb44 	bl	8004f1c <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xf2>
	{
		Error_Handler();
 800089a:	f000 fa29 	bl	8000cf0 <Error_Handler>
	}
}
 800089e:	bf00      	nop
 80008a0:	3760      	adds	r7, #96	; 0x60
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x50>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <MX_I2C1_Init+0x54>)
 80008b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x50>)
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_I2C1_Init+0x58>)
 80008be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_I2C1_Init+0x50>)
 80008ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_I2C1_Init+0x50>)
 80008ee:	f003 f8db 	bl	8003aa8 <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80008f8:	f000 f9fa 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000118 	.word	0x20000118
 8000904:	40005400 	.word	0x40005400
 8000908:	000186a0 	.word	0x000186a0

0800090c <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_I2S3_Init+0x54>)
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <MX_I2S3_Init+0x58>)
 8000914:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2S3_Init+0x54>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_I2S3_Init+0x54>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_I2S3_Init+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <MX_I2S3_Init+0x54>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_I2S3_Init+0x54>)
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <MX_I2S3_Init+0x5c>)
 8000936:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_I2S3_Init+0x54>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_I2S3_Init+0x54>)
 800094c:	f003 f9e4 	bl	8003d18 <HAL_I2S_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 8000956:	f000 f9cb 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000244 	.word	0x20000244
 8000964:	40003c00 	.word	0x40003c00
 8000968:	00017700 	.word	0x00017700

0800096c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI1_Init+0x64>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI1_Init+0x64>)
 80009be:	f004 fbeb 	bl	8005198 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80009c8:	f000 f992 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001ac 	.word	0x200001ac
 80009d4:	40013000 	.word	0x40013000

080009d8 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_TIM9_Init+0x6c>)
 80009ec:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <MX_TIM9_Init+0x70>)
 80009ee:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 84;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_TIM9_Init+0x6c>)
 80009f2:	2254      	movs	r2, #84	; 0x54
 80009f4:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_TIM9_Init+0x6c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_TIM9_Init+0x6c>)
 80009fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a02:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_TIM9_Init+0x6c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_TIM9_Init+0x6c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_TIM9_Init+0x6c>)
 8000a12:	f004 fc25 	bl	8005260 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM9_Init+0x48>
	{
		Error_Handler();
 8000a1c:	f000 f968 	bl	8000cf0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <MX_TIM9_Init+0x6c>)
 8000a2c:	f004 fc67 	bl	80052fe <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM9_Init+0x62>
	{
		Error_Handler();
 8000a36:	f000 f95b 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000016c 	.word	0x2000016c
 8000a48:	40014000 	.word	0x40014000

08000a4c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x4c>)
 8000a84:	f004 fe2c 	bl	80056e0 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000a8e:	f000 f92f 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000204 	.word	0x20000204
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART3_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART3_UART_Init+0x4c>)
 8000ad8:	f004 fe02 	bl	80056e0 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000ae2:	f000 f905 	bl	8000cf0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000d8 	.word	0x200000d8
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4b71      	ldr	r3, [pc, #452]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a70      	ldr	r2, [pc, #448]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b6e      	ldr	r3, [pc, #440]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b6a      	ldr	r3, [pc, #424]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a69      	ldr	r2, [pc, #420]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b67      	ldr	r3, [pc, #412]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b63      	ldr	r3, [pc, #396]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a62      	ldr	r2, [pc, #392]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b60      	ldr	r3, [pc, #384]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b5c      	ldr	r3, [pc, #368]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a5b      	ldr	r2, [pc, #364]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a54      	ldr	r2, [pc, #336]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a4d      	ldr	r2, [pc, #308]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <MX_GPIO_Init+0x1e0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4848      	ldr	r0, [pc, #288]	; (8000cd8 <MX_GPIO_Init+0x1e4>)
 8000bb8:	f001 fa6c 	bl	8002094 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4846      	ldr	r0, [pc, #280]	; (8000cdc <MX_GPIO_Init+0x1e8>)
 8000bc2:	f001 fa67 	bl	8002094 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bcc:	4844      	ldr	r0, [pc, #272]	; (8000ce0 <MX_GPIO_Init+0x1ec>)
 8000bce:	f001 fa61 	bl	8002094 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	483b      	ldr	r0, [pc, #236]	; (8000cd8 <MX_GPIO_Init+0x1e4>)
 8000bea:	f001 f8a1 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4835      	ldr	r0, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x1e8>)
 8000c06:	f001 f893 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	482d      	ldr	r0, [pc, #180]	; (8000cdc <MX_GPIO_Init+0x1e8>)
 8000c26:	f001 f883 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000c30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482a      	ldr	r0, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0x1f4>)
 8000c3e:	f001 f877 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c42:	2304      	movs	r3, #4
 8000c44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <MX_GPIO_Init+0x1f8>)
 8000c56:	f001 f86b 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	481d      	ldr	r0, [pc, #116]	; (8000cec <MX_GPIO_Init+0x1f8>)
 8000c78:	f001 f85a 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c7c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c80:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <MX_GPIO_Init+0x1ec>)
 8000c96:	f001 f84b 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0x1ec>)
 8000cae:	f001 f83f 	bl	8001d30 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000cb8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0x1e4>)
 8000cc6:	f001 f833 	bl	8001d30 <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40020800 	.word	0x40020800
 8000ce0:	40020c00 	.word	0x40020c00
 8000ce4:	10120000 	.word	0x10120000
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020400 	.word	0x40020400

08000cf0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <Error_Handler+0x6>

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f000 ffb8 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12c      	bne.n	8000dc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <HAL_I2C_MspInit+0x8c>)
 8000da4:	f000 ffc4 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_I2S_MspInit+0xc0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d14a      	bne.n	8000e90 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_I2S_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5e:	2306      	movs	r3, #6
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <HAL_I2S_MspInit+0xc8>)
 8000e6a:	f000 ff61 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e6e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e80:	2306      	movs	r3, #6
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_I2S_MspInit+0xcc>)
 8000e8c:	f000 ff50 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40003c00 	.word	0x40003c00
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020800 	.word	0x40020800

08000ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_SPI_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12b      	bne.n	8000f22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_SPI_MspInit+0x88>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_SPI_MspInit+0x88>)
 8000ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_SPI_MspInit+0x88>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_SPI_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_SPI_MspInit+0x88>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_SPI_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f02:	23e0      	movs	r3, #224	; 0xe0
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f12:	2305      	movs	r3, #5
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_SPI_MspInit+0x8c>)
 8000f1e:	f000 ff07 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40013000 	.word	0x40013000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020000 	.word	0x40020000

08000f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_TIM_Base_MspInit+0x3c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10d      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40014000 	.word	0x40014000
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_UART_MspInit+0x128>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12c      	bne.n	8000ff8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a39      	ldr	r2, [pc, #228]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	482e      	ldr	r0, [pc, #184]	; (80010ac <HAL_UART_MspInit+0x130>)
 8000ff2:	f000 fe9d 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff6:	e050      	b.n	800109a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <HAL_UART_MspInit+0x134>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d14b      	bne.n	800109a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_UART_MspInit+0x12c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001068:	2307      	movs	r3, #7
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <HAL_UART_MspInit+0x138>)
 8001074:	f000 fe5c 	bl	8001d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800108a:	2307      	movs	r3, #7
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <HAL_UART_MspInit+0x13c>)
 8001096:	f000 fe4b 	bl	8001d30 <HAL_GPIO_Init>
}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	; 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004400 	.word	0x40004400
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40004800 	.word	0x40004800
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020c00 	.word	0x40020c00

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 fcba 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <OTG_FS_IRQHandler+0x10>)
 800111e:	f001 fa61 	bl	80025e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000668 	.word	0x20000668

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f008 f960 	bl	8009420 <__errno>
 8001160:	4602      	mov	r2, r0
 8001162:	230c      	movs	r3, #12
 8001164:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20020000 	.word	0x20020000
 800118c:	00000400 	.word	0x00000400
 8001190:	200000b0 	.word	0x200000b0
 8001194:	20000930 	.word	0x20000930

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <SystemInit+0x28>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <SystemInit+0x28>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SystemInit+0x28>)
 80011ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b2:	609a      	str	r2, [r3, #8]
#endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <my_itoa>:
extern UART_HandleTypeDef huart3;
#define UBIDOTS_TOKEN   "BBFF-WeWEmnH1dQ1qd8Dtbk2DzKCCIaXiKQ"
#define UBIDOTS_DEVICE  "STM32F407"

void my_itoa(uint32_t val, uint8_t* str, uint8_t len)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 1; i <= len; i++)
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
 80011d6:	e01c      	b.n	8001212 <my_itoa+0x4e>
	{
		str[len - i] = (uint8_t)((val % 10UL) + '0');
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <my_itoa+0x70>)
 80011dc:	fba3 2301 	umull	r2, r3, r3, r1
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	1aca      	subs	r2, r1, r3
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	79f9      	ldrb	r1, [r7, #7]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	1acb      	subs	r3, r1, r3
 80011f4:	4619      	mov	r1, r3
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	440b      	add	r3, r1
 80011fa:	3230      	adds	r2, #48	; 0x30
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
		val /= 10;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <my_itoa+0x70>)
 8001204:	fba2 2303 	umull	r2, r3, r2, r3
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	60fb      	str	r3, [r7, #12]
	for (i = 1; i <= len; i++)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	3301      	adds	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
 8001212:	7dfa      	ldrb	r2, [r7, #23]
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	429a      	cmp	r2, r3
 8001218:	d9de      	bls.n	80011d8 <my_itoa+0x14>
	}
	str[i - 1] = '\0';
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	3b01      	subs	r3, #1
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	4413      	add	r3, r2
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	cccccccd 	.word	0xcccccccd

08001238 <FloatToString>:
void FloatToString(uint8_t *str, float f, char size, char after_point) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	ed87 0a02 	vstr	s0, [r7, #8]
 8001244:	460b      	mov	r3, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
	int count;
	uint8_t* curr;
	int value;
	
	size++; /* to include NULL */
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3301      	adds	r3, #1
 8001250:	71fb      	strb	r3, [r7, #7]
	value = (int)f;
 8001252:	edd7 7a02 	vldr	s15, [r7, #8]
 8001256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125a:	ee17 3a90 	vmov	r3, s15
 800125e:	617b      	str	r3, [r7, #20]
	my_itoa(value, str, size-after_point-2);
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	3b02      	subs	r3, #2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	461a      	mov	r2, r3
 8001270:	68f9      	ldr	r1, [r7, #12]
 8001272:	f7ff ffa7 	bl	80011c4 <my_itoa>
	count = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
	curr = str;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 800127e:	e005      	b.n	800128c <FloatToString+0x54>
		++count;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	3301      	adds	r3, #1
 8001284:	61fb      	str	r3, [r7, #28]
		++curr;
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	3301      	adds	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
	while (*curr != 0) {
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f5      	bne.n	8001280 <FloatToString+0x48>
	}
 
	if (count + 1 >= size) {
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	429a      	cmp	r2, r3
 800129c:	db06      	blt.n	80012ac <FloatToString+0x74>
		str[size - 1] = 0;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		return;	
 80012aa:	e04b      	b.n	8001344 <FloatToString+0x10c>
	}
 	
	str[count++] = '.';
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	61fa      	str	r2, [r7, #28]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	222e      	movs	r2, #46	; 0x2e
 80012ba:	701a      	strb	r2, [r3, #0]
	++curr;
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3301      	adds	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
	f = f - (float)value;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d4:	edc7 7a02 	vstr	s15, [r7, #8]
 	
	while (count + 1 < size) {
 80012d8:	e00a      	b.n	80012f0 <FloatToString+0xb8>
		f *= 10;
 80012da:	edd7 7a02 	vldr	s15, [r7, #8]
 80012de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e6:	edc7 7a02 	vstr	s15, [r7, #8]
		++count;	
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61fb      	str	r3, [r7, #28]
	while (count + 1 < size) {
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbef      	blt.n	80012da <FloatToString+0xa2>
	}
 	
	value = (int)f;
 80012fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	617b      	str	r3, [r7, #20]
	my_itoa(value, curr, after_point);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	79ba      	ldrb	r2, [r7, #6]
 800130c:	69b9      	ldr	r1, [r7, #24]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff58 	bl	80011c4 <my_itoa>
	str[size - 1] = 0;
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	3b01      	subs	r3, #1
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	
	count = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 8001324:	e007      	b.n	8001336 <FloatToString+0xfe>
	{
		*(str + count) = ' ';
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	2220      	movs	r2, #32
 800132e:	701a      	strb	r2, [r3, #0]
		count++;
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
	while (*(str + count) == '0')
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b30      	cmp	r3, #48	; 0x30
 8001340:	d0f1      	beq.n	8001326 <FloatToString+0xee>
	}
	return;
 8001342:	bf00      	nop
}
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <WifiSetup>:
 
void WifiSetup(void)
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b0e6      	sub	sp, #408	; 0x198
 8001350:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001358:	e00a      	b.n	8001370 <WifiSetup+0x24>
 800135a:	463a      	mov	r2, r7
 800135c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001360:	4413      	add	r3, r2
 8001362:	2220      	movs	r2, #32
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001370:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001374:	2bc7      	cmp	r3, #199	; 0xc7
 8001376:	ddf0      	ble.n	800135a <WifiSetup+0xe>
	strcpy((char *)string, "AT+CWMODE=3");
 8001378:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800137c:	4a54      	ldr	r2, [pc, #336]	; (80014d0 <WifiSetup+0x184>)
 800137e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001380:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 8001384:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff21 	bl	80001d0 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8001394:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001398:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800139c:	4413      	add	r3, r2
 800139e:	220d      	movs	r2, #13
 80013a0:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 80013a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013a6:	3301      	adds	r3, #1
 80013a8:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80013ac:	4413      	add	r3, r2
 80013ae:	220a      	movs	r2, #10
 80013b0:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 80013b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013b8:	3302      	adds	r3, #2
 80013ba:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 80013c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3302      	adds	r3, #2
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80013d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d8:	483e      	ldr	r0, [pc, #248]	; (80014d4 <WifiSetup+0x188>)
 80013da:	f004 f9ce 	bl	800577a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 1000);
 80013de:	4639      	mov	r1, r7
 80013e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e4:	2264      	movs	r2, #100	; 0x64
 80013e6:	483b      	ldr	r0, [pc, #236]	; (80014d4 <WifiSetup+0x188>)
 80013e8:	f004 fa60 	bl	80058ac <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);	
 80013ec:	4639      	mov	r1, r7
 80013ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f2:	2264      	movs	r2, #100	; 0x64
 80013f4:	4838      	ldr	r0, [pc, #224]	; (80014d8 <WifiSetup+0x18c>)
 80013f6:	f004 f9c0 	bl	800577a <HAL_UART_Transmit>
	string[0] = 0x0D;
 80013fa:	230d      	movs	r3, #13
 80013fc:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 8001400:	230a      	movs	r3, #10
 8001402:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);	
 8001406:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800140a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140e:	2202      	movs	r2, #2
 8001410:	4831      	ldr	r0, [pc, #196]	; (80014d8 <WifiSetup+0x18c>)
 8001412:	f004 f9b2 	bl	800577a <HAL_UART_Transmit>
	
	strcpy((char *)string, (char *)"AT+CWJAP=\"iptime_ccrs515\",""");
 8001416:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800141a:	4a30      	ldr	r2, [pc, #192]	; (80014dc <WifiSetup+0x190>)
 800141c:	461c      	mov	r4, r3
 800141e:	4615      	mov	r5, r2
 8001420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001428:	c403      	stmia	r4!, {r0, r1}
 800142a:	8022      	strh	r2, [r4, #0]
 800142c:	3402      	adds	r4, #2
 800142e:	0c13      	lsrs	r3, r2, #16
 8001430:	7023      	strb	r3, [r4, #0]
	length = strlen((char *)string);
 8001432:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe feca 	bl	80001d0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8001442:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001446:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800144a:	4413      	add	r3, r2
 800144c:	220d      	movs	r2, #13
 800144e:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 8001450:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001454:	3301      	adds	r3, #1
 8001456:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800145a:	4413      	add	r3, r2
 800145c:	220a      	movs	r2, #10
 800145e:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 8001462:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001466:	3302      	adds	r3, #2
 8001468:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800146c:	4413      	add	r3, r2
 800146e:	2200      	movs	r2, #0
 8001470:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 8001474:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001478:	b29b      	uxth	r3, r3
 800147a:	3302      	adds	r3, #2
 800147c:	b29a      	uxth	r2, r3
 800147e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001486:	4813      	ldr	r0, [pc, #76]	; (80014d4 <WifiSetup+0x188>)
 8001488:	f004 f977 	bl	800577a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000);
 800148c:	4639      	mov	r1, r7
 800148e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001492:	2264      	movs	r2, #100	; 0x64
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <WifiSetup+0x188>)
 8001496:	f004 fa09 	bl	80058ac <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 800149a:	4639      	mov	r1, r7
 800149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a0:	2264      	movs	r2, #100	; 0x64
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <WifiSetup+0x18c>)
 80014a4:	f004 f969 	bl	800577a <HAL_UART_Transmit>
	string[0] = 0x0D;
 80014a8:	230d      	movs	r3, #13
 80014aa:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 80014ae:	230a      	movs	r3, #10
 80014b0:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 80014b4:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80014b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014bc:	2202      	movs	r2, #2
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <WifiSetup+0x18c>)
 80014c0:	f004 f95b 	bl	800577a <HAL_UART_Transmit>
}
 80014c4:	bf00      	nop
 80014c6:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08009d10 	.word	0x08009d10
 80014d4:	200000d8 	.word	0x200000d8
 80014d8:	20000204 	.word	0x20000204
 80014dc:	08009d1c 	.word	0x08009d1c

080014e0 <OpenUbidots>:
void OpenUbidots(void)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b0e8      	sub	sp, #416	; 0x1a0
 80014e4:	af00      	add	r7, sp, #0
	int length;
	int ret;
	
	do
	{
		for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014ec:	e00a      	b.n	8001504 <OpenUbidots+0x24>
 80014ee:	1d3a      	adds	r2, r7, #4
 80014f0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014f4:	4413      	add	r3, r2
 80014f6:	2220      	movs	r2, #32
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014fe:	3301      	adds	r3, #1
 8001500:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001504:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001508:	2bc7      	cmp	r3, #199	; 0xc7
 800150a:	ddf0      	ble.n	80014ee <OpenUbidots+0xe>
		strcpy((char *)string, (char *)"AT+CIPSTART=\"TCP\",\"things.ubidots.com\",80");
 800150c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001510:	4a32      	ldr	r2, [pc, #200]	; (80015dc <OpenUbidots+0xfc>)
 8001512:	461c      	mov	r4, r3
 8001514:	4615      	mov	r5, r2
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001522:	c403      	stmia	r4!, {r0, r1}
 8001524:	8022      	strh	r2, [r4, #0]
		length = strlen((char *)string);
 8001526:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fe50 	bl	80001d0 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		string[length] = 0x0D;
 8001536:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800153a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800153e:	4413      	add	r3, r2
 8001540:	220d      	movs	r2, #13
 8001542:	701a      	strb	r2, [r3, #0]
		string[length + 1] = 0x0A;
 8001544:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001548:	3301      	adds	r3, #1
 800154a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800154e:	4413      	add	r3, r2
 8001550:	220a      	movs	r2, #10
 8001552:	f803 2cd4 	strb.w	r2, [r3, #-212]
		string[length + 2] = 0;
 8001556:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800155a:	3302      	adds	r3, #2
 800155c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001560:	4413      	add	r3, r2
 8001562:	2200      	movs	r2, #0
 8001564:	f803 2cd4 	strb.w	r2, [r3, #-212]
		HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8001568:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800156c:	b29b      	uxth	r3, r3
 800156e:	3302      	adds	r3, #2
 8001570:	b29a      	uxth	r2, r3
 8001572:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157a:	4819      	ldr	r0, [pc, #100]	; (80015e0 <OpenUbidots+0x100>)
 800157c:	f004 f8fd 	bl	800577a <HAL_UART_Transmit>
		HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 8001580:	1d39      	adds	r1, r7, #4
 8001582:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001586:	2264      	movs	r2, #100	; 0x64
 8001588:	4815      	ldr	r0, [pc, #84]	; (80015e0 <OpenUbidots+0x100>)
 800158a:	f004 f98f 	bl	80058ac <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 800158e:	1d39      	adds	r1, r7, #4
 8001590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001594:	2264      	movs	r2, #100	; 0x64
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <OpenUbidots+0x104>)
 8001598:	f004 f8ef 	bl	800577a <HAL_UART_Transmit>
		string[0] = 0x0D;
 800159c:	230d      	movs	r3, #13
 800159e:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
		string[1] = 0x0A;
 80015a2:	230a      	movs	r3, #10
 80015a4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 80015a8:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80015ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b0:	2202      	movs	r2, #2
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <OpenUbidots+0x104>)
 80015b4:	f004 f8e1 	bl	800577a <HAL_UART_Transmit>
		ret = (int)strstr((char *)buffer, (char *)"CONNECT");
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	490b      	ldr	r1, [pc, #44]	; (80015e8 <OpenUbidots+0x108>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f008 f849 	bl	8009654 <strstr>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	} while (ret == 0);
 80015c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d08a      	beq.n	80014e6 <OpenUbidots+0x6>
}
 80015d0:	bf00      	nop
 80015d2:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdb0      	pop	{r4, r5, r7, pc}
 80015da:	bf00      	nop
 80015dc:	08009d38 	.word	0x08009d38
 80015e0:	200000d8 	.word	0x200000d8
 80015e4:	20000204 	.word	0x20000204
 80015e8:	08009d64 	.word	0x08009d64

080015ec <CloseUbidots>:
void CloseUbidots(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0e6      	sub	sp, #408	; 0x198
 80015f0:	af00      	add	r7, sp, #0
	uint8_t  string[200];
	uint8_t  buffer[200];
	int length;
	
	for (int i = 0; i < 200; i++)buffer[i] = ' ';
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80015f8:	e00a      	b.n	8001610 <CloseUbidots+0x24>
 80015fa:	463a      	mov	r2, r7
 80015fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001600:	4413      	add	r3, r2
 8001602:	2220      	movs	r2, #32
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800160a:	3301      	adds	r3, #1
 800160c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001610:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001614:	2bc7      	cmp	r3, #199	; 0xc7
 8001616:	ddf0      	ble.n	80015fa <CloseUbidots+0xe>
	strcpy((char *)string, (char *)"AT+CIPCLOSE");
 8001618:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800161c:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <CloseUbidots+0xd4>)
 800161e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001620:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	length = strlen((char *)string);
 8001624:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe fdd1 	bl	80001d0 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	string[length] = 0x0D;
 8001634:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001638:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800163c:	4413      	add	r3, r2
 800163e:	220d      	movs	r2, #13
 8001640:	701a      	strb	r2, [r3, #0]
	string[length + 1] = 0x0A;
 8001642:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001646:	3301      	adds	r3, #1
 8001648:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800164c:	4413      	add	r3, r2
 800164e:	220a      	movs	r2, #10
 8001650:	f803 2cd0 	strb.w	r2, [r3, #-208]
	string[length + 2] = 0;
 8001654:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001658:	3302      	adds	r3, #2
 800165a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800165e:	4413      	add	r3, r2
 8001660:	2200      	movs	r2, #0
 8001662:	f803 2cd0 	strb.w	r2, [r3, #-208]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);	
 8001666:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800166a:	b29b      	uxth	r3, r3
 800166c:	3302      	adds	r3, #2
 800166e:	b29a      	uxth	r2, r3
 8001670:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001678:	4812      	ldr	r0, [pc, #72]	; (80016c4 <CloseUbidots+0xd8>)
 800167a:	f004 f87e 	bl	800577a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 100, 4000); 		
 800167e:	4639      	mov	r1, r7
 8001680:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <CloseUbidots+0xd8>)
 8001688:	f004 f910 	bl	80058ac <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 100, 0xFFFF);
 800168c:	4639      	mov	r1, r7
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	2264      	movs	r2, #100	; 0x64
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <CloseUbidots+0xdc>)
 8001696:	f004 f870 	bl	800577a <HAL_UART_Transmit>
	string[0] = 0x0D;
 800169a:	230d      	movs	r3, #13
 800169c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	string[1] = 0x0A;
 80016a0:	230a      	movs	r3, #10
 80016a2:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 80016a6:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	2202      	movs	r2, #2
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <CloseUbidots+0xdc>)
 80016b2:	f004 f862 	bl	800577a <HAL_UART_Transmit>
}
 80016b6:	bf00      	nop
 80016b8:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	08009d6c 	.word	0x08009d6c
 80016c4:	200000d8 	.word	0x200000d8
 80016c8:	20000204 	.word	0x20000204

080016cc <WifiUbidots>:
void WifiUbidots(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	f6ad 2d28 	subw	sp, sp, #2600	; 0xa28
 80016d2:	af02      	add	r7, sp, #8
	char sendBuffer[256];
	uint8_t sendBufferLength;
	uint8_t sendBufferLengthString[5];
	char message[64];
	int length;
	float temp = 3.4;
 80016d4:	4ba4      	ldr	r3, [pc, #656]	; (8001968 <WifiUbidots+0x29c>)
 80016d6:	f607 2214 	addw	r2, r7, #2580	; 0xa14
 80016da:	6013      	str	r3, [r2, #0]
	float humid = 45.6;
 80016dc:	4ba3      	ldr	r3, [pc, #652]	; (800196c <WifiUbidots+0x2a0>)
 80016de:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 80016e2:	6013      	str	r3, [r2, #0]
	uint16_t RH, TEMP/*, sum*/;
	int ret;

	for (;;)
	{
		OpenUbidots();
 80016e4:	f7ff fefc 	bl	80014e0 <OpenUbidots>
		do
		{
			DHT22_start();
 80016e8:	f7fe ff76 	bl	80005d8 <DHT22_start>
			check_response();
 80016ec:	f7fe ff90 	bl	8000610 <check_response>
			Rh_byte1 = read_data();
 80016f0:	f7fe ffb6 	bl	8000660 <read_data>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f887 3a0f 	strb.w	r3, [r7, #2575]	; 0xa0f
			Rh_byte2 = read_data();
 80016fa:	f7fe ffb1 	bl	8000660 <read_data>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 3a0e 	strb.w	r3, [r7, #2574]	; 0xa0e
			Temp_byte1 = read_data();
 8001704:	f7fe ffac 	bl	8000660 <read_data>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3a0d 	strb.w	r3, [r7, #2573]	; 0xa0d
			Temp_byte2 = read_data();
 800170e:	f7fe ffa7 	bl	8000660 <read_data>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 3a0c 	strb.w	r3, [r7, #2572]	; 0xa0c
			//sum = read_data();
			//if (sum == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
			{
				TEMP = ((Temp_byte1 << 8) | Temp_byte2);
 8001718:	f897 3a0d 	ldrb.w	r3, [r7, #2573]	; 0xa0d
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	f897 3a0c 	ldrb.w	r3, [r7, #2572]	; 0xa0c
 8001724:	b21b      	sxth	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b21b      	sxth	r3, r3
 800172a:	f8a7 3a0a 	strh.w	r3, [r7, #2570]	; 0xa0a
				RH = ((Rh_byte1 << 8) | Rh_byte2);
 800172e:	f897 3a0f 	ldrb.w	r3, [r7, #2575]	; 0xa0f
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	f897 3a0e 	ldrb.w	r3, [r7, #2574]	; 0xa0e
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	f8a7 3a08 	strh.w	r3, [r7, #2568]	; 0xa08
			}
			temp = (float)TEMP / 10.0;
 8001744:	f8b7 3a0a 	ldrh.w	r3, [r7, #2570]	; 0xa0a
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001750:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001758:	f607 2314 	addw	r3, r7, #2580	; 0xa14
 800175c:	edc3 7a00 	vstr	s15, [r3]
			humid = (float)RH / 10.0;
 8001760:	f8b7 3a08 	ldrh.w	r3, [r7, #2568]	; 0xa08
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800176c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8001778:	edc3 7a00 	vstr	s15, [r3]
			FloatToString(temp_string, temp, 4, 1);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	2201      	movs	r2, #1
 8001782:	2104      	movs	r1, #4
 8001784:	f607 2014 	addw	r0, r7, #2580	; 0xa14
 8001788:	ed90 0a00 	vldr	s0, [r0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd53 	bl	8001238 <FloatToString>
			FloatToString(humid_string, humid, 4, 1);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2201      	movs	r2, #1
 8001796:	2104      	movs	r1, #4
 8001798:	f507 6021 	add.w	r0, r7, #2576	; 0xa10
 800179c:	ed90 0a00 	vldr	s0, [r0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fd49 	bl	8001238 <FloatToString>
			sprintf(message, "{\"temperature\": %s, \"humidity\": %s}", temp_string, humid_string);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	f107 0210 	add.w	r2, r7, #16
 80017ac:	f107 001c 	add.w	r0, r7, #28
 80017b0:	496f      	ldr	r1, [pc, #444]	; (8001970 <WifiUbidots+0x2a4>)
 80017b2:	f007 ff2f 	bl	8009614 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 0xFFFF);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd08 	bl	80001d0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f107 011c 	add.w	r1, r7, #28
 80017c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017cc:	4869      	ldr	r0, [pc, #420]	; (8001974 <WifiUbidots+0x2a8>)
 80017ce:	f003 ffd4 	bl	800577a <HAL_UART_Transmit>
			sprintf(sendBuffer, "POST /api/v1.6/devices/%s/?token=%s HTTP/1.1\r\nHost: things.ubidots.com\r\nContent-Type: application/json\r\nContent-Length: %d\r\n\r\n%s", UBIDOTS_DEVICE, UBIDOTS_TOKEN, (int)strlen(message), message);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fcfa 	bl	80001d0 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	9200      	str	r2, [sp, #0]
 80017ec:	4b62      	ldr	r3, [pc, #392]	; (8001978 <WifiUbidots+0x2ac>)
 80017ee:	4a63      	ldr	r2, [pc, #396]	; (800197c <WifiUbidots+0x2b0>)
 80017f0:	4963      	ldr	r1, [pc, #396]	; (8001980 <WifiUbidots+0x2b4>)
 80017f2:	f007 ff0f 	bl	8009614 <siprintf>
			sendBufferLength = strlen((char *)sendBuffer);
 80017f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fce8 	bl	80001d0 <strlen>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 3a07 	strb.w	r3, [r7, #2567]	; 0xa07
			for (int i = 0; i < 50; i++)buffer[i] = ' ';
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 800180c:	e00b      	b.n	8001826 <WifiUbidots+0x15a>
 800180e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001812:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8001816:	4413      	add	r3, r2
 8001818:	2220      	movs	r2, #32
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 8001820:	3301      	adds	r3, #1
 8001822:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 8001826:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 800182a:	2b31      	cmp	r3, #49	; 0x31
 800182c:	ddef      	ble.n	800180e <WifiUbidots+0x142>
			my_itoa(sendBufferLength, sendBufferLengthString, 3);
 800182e:	f897 3a07 	ldrb.w	r3, [r7, #2567]	; 0xa07
 8001832:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001836:	2203      	movs	r2, #3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fcc3 	bl	80011c4 <my_itoa>
			sprintf((char *)string, "AT+CIPSEND=%s", sendBufferLengthString);
 800183e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001842:	f607 1334 	addw	r3, r7, #2356	; 0x934
 8001846:	494f      	ldr	r1, [pc, #316]	; (8001984 <WifiUbidots+0x2b8>)
 8001848:	4618      	mov	r0, r3
 800184a:	f007 fee3 	bl	8009614 <siprintf>
			length = strlen((char *)string);
 800184e:	f607 1334 	addw	r3, r7, #2356	; 0x934
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fcbc 	bl	80001d0 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
			string[length] = 0x0D;
 800185e:	f607 1234 	addw	r2, r7, #2356	; 0x934
 8001862:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8001866:	4413      	add	r3, r2
 8001868:	220d      	movs	r2, #13
 800186a:	701a      	strb	r2, [r3, #0]
			string[length + 1] = 0x0A;
 800186c:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8001870:	3301      	adds	r3, #1
 8001872:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8001876:	4413      	add	r3, r2
 8001878:	220a      	movs	r2, #10
 800187a:	f803 2cec 	strb.w	r2, [r3, #-236]
			string[length + 2] = 0;
 800187e:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8001882:	3302      	adds	r3, #2
 8001884:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8001888:	4413      	add	r3, r2
 800188a:	2200      	movs	r2, #0
 800188c:	f803 2cec 	strb.w	r2, [r3, #-236]
			HAL_UART_Transmit(&huart3, (uint8_t *)string, length + 2, 0xFFFF);
 8001890:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 8001894:	b29b      	uxth	r3, r3
 8001896:	3302      	adds	r3, #2
 8001898:	b29a      	uxth	r2, r3
 800189a:	f607 1134 	addw	r1, r7, #2356	; 0x934
 800189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a2:	4839      	ldr	r0, [pc, #228]	; (8001988 <WifiUbidots+0x2bc>)
 80018a4:	f003 ff69 	bl	800577a <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 24, 4000);
 80018a8:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 80018ac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80018b0:	2218      	movs	r2, #24
 80018b2:	4835      	ldr	r0, [pc, #212]	; (8001988 <WifiUbidots+0x2bc>)
 80018b4:	f003 fffa 	bl	80058ac <HAL_UART_Receive>

			for (int i = 0; i < 2000; i++)buffer[i] = ' ';
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
 80018be:	e00b      	b.n	80018d8 <WifiUbidots+0x20c>
 80018c0:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80018c4:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80018c8:	4413      	add	r3, r2
 80018ca:	2220      	movs	r2, #32
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80018d2:	3301      	adds	r3, #1
 80018d4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
 80018d8:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 80018dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018e0:	dbee      	blt.n	80018c0 <WifiUbidots+0x1f4>
			HAL_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 f8f0 	bl	8001ac8 <HAL_Delay>
			HAL_UART_Transmit(&huart3, (uint8_t *)(sendBuffer), sendBufferLength, 0xFFFF);
 80018e8:	f897 3a07 	ldrb.w	r3, [r7, #2567]	; 0xa07
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80018f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f6:	4824      	ldr	r0, [pc, #144]	; (8001988 <WifiUbidots+0x2bc>)
 80018f8:	f003 ff3f 	bl	800577a <HAL_UART_Transmit>
			HAL_UART_Receive(&huart3, (uint8_t *)buffer, 500, 4000);
 80018fc:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8001900:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001904:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001908:	481f      	ldr	r0, [pc, #124]	; (8001988 <WifiUbidots+0x2bc>)
 800190a:	f003 ffcf 	bl	80058ac <HAL_UART_Receive>
			HAL_UART_Transmit(&huart2, (uint8_t *)buffer, 500, 0xFFFF);
 800190e:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8001912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001916:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800191a:	4816      	ldr	r0, [pc, #88]	; (8001974 <WifiUbidots+0x2a8>)
 800191c:	f003 ff2d 	bl	800577a <HAL_UART_Transmit>
			string[0] = 0x0D;
 8001920:	230d      	movs	r3, #13
 8001922:	f887 3934 	strb.w	r3, [r7, #2356]	; 0x934
			string[1] = 0x0A;
 8001926:	230a      	movs	r3, #10
 8001928:	f887 3935 	strb.w	r3, [r7, #2357]	; 0x935
			HAL_UART_Transmit(&huart2, (uint8_t *)string, 2, 0xFFFF);
 800192c:	f607 1134 	addw	r1, r7, #2356	; 0x934
 8001930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001934:	2202      	movs	r2, #2
 8001936:	480f      	ldr	r0, [pc, #60]	; (8001974 <WifiUbidots+0x2a8>)
 8001938:	f003 ff1f 	bl	800577a <HAL_UART_Transmit>
			ret = (int)strstr((char *)buffer, (char *)"ERROR");
 800193c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001940:	4912      	ldr	r1, [pc, #72]	; (800198c <WifiUbidots+0x2c0>)
 8001942:	4618      	mov	r0, r3
 8001944:	f007 fe86 	bl	8009654 <strstr>
 8001948:	4603      	mov	r3, r0
 800194a:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
			/* wait for a while to slow down */
			HAL_Delay(20000);
 800194e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001952:	f000 f8b9 	bl	8001ac8 <HAL_Delay>
		} while (ret == 0);
 8001956:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 800195a:	2b00      	cmp	r3, #0
 800195c:	f43f aec4 	beq.w	80016e8 <WifiUbidots+0x1c>
		CloseUbidots();
 8001960:	f7ff fe44 	bl	80015ec <CloseUbidots>
		OpenUbidots();
 8001964:	e6be      	b.n	80016e4 <WifiUbidots+0x18>
 8001966:	bf00      	nop
 8001968:	4059999a 	.word	0x4059999a
 800196c:	42366666 	.word	0x42366666
 8001970:	08009d78 	.word	0x08009d78
 8001974:	20000204 	.word	0x20000204
 8001978:	08009d9c 	.word	0x08009d9c
 800197c:	08009dc0 	.word	0x08009dc0
 8001980:	08009dcc 	.word	0x08009dcc
 8001984:	08009e50 	.word	0x08009e50
 8001988:	200000d8 	.word	0x200000d8
 800198c:	08009e60 	.word	0x08009e60

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001994:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001996:	e003      	b.n	80019a0 <LoopCopyDataInit>

08001998 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800199a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800199c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199e:	3104      	adds	r1, #4

080019a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a8:	d3f6      	bcc.n	8001998 <CopyDataInit>
  ldr  r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019ac:	e002      	b.n	80019b4 <LoopFillZerobss>

080019ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019b0:	f842 3b04 	str.w	r3, [r2], #4

080019b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b8:	d3f9      	bcc.n	80019ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ba:	f7ff fbed 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f007 fd35 	bl	800942c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7fe fec7 	bl	8000754 <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019cc:	08009ec8 	.word	0x08009ec8
  ldr  r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80019d8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80019dc:	20000930 	.word	0x20000930

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_Init+0x40>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_Init+0x40>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x40>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f94d 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff f96e 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f965 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f92d 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	2000028c 	.word	0x2000028c

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2000028c 	.word	0x2000028c

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_Delay+0x40>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000008 	.word	0x20000008

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	; (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	; (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	; 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e16b      	b.n	8002024 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 815a 	bne.w	800201e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d00b      	beq.n	8001d8a <HAL_GPIO_Init+0x5a>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d7e:	2b11      	cmp	r3, #17
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d130      	bne.n	8001dec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0xfc>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b12      	cmp	r3, #18
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80b4 	beq.w	800201e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <HAL_GPIO_Init+0x308>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <HAL_GPIO_Init+0x308>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b5c      	ldr	r3, [pc, #368]	; (8002038 <HAL_GPIO_Init+0x308>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a51      	ldr	r2, [pc, #324]	; (8002040 <HAL_GPIO_Init+0x310>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d02b      	beq.n	8001f56 <HAL_GPIO_Init+0x226>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a50      	ldr	r2, [pc, #320]	; (8002044 <HAL_GPIO_Init+0x314>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d025      	beq.n	8001f52 <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x318>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01f      	beq.n	8001f4e <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_GPIO_Init+0x31c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_GPIO_Init+0x320>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	; (8002058 <HAL_GPIO_Init+0x328>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4a      	ldr	r2, [pc, #296]	; (800205c <HAL_GPIO_Init+0x32c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x20a>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x228>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9a:	4a31      	ldr	r2, [pc, #196]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_GPIO_Init+0x330>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_GPIO_Init+0x330>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae90 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	3724      	adds	r7, #36	; 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40023800 	.word	0x40023800
 800203c:	40013800 	.word	0x40013800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020400 	.word	0x40020400
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40021400 	.word	0x40021400
 8002058:	40021800 	.word	0x40021800
 800205c:	40021c00 	.word	0x40021c00
 8002060:	40013c00 	.word	0x40013c00

08002064 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e001      	b.n	8002086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	619a      	str	r2, [r3, #24]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c8:	b08f      	sub	sp, #60	; 0x3c
 80020ca:	af0a      	add	r7, sp, #40	; 0x28
 80020cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e054      	b.n	8002182 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f006 feea 	bl	8008ecc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 f8a6 	bl	8006268 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	687e      	ldr	r6, [r7, #4]
 8002124:	466d      	mov	r5, sp
 8002126:	f106 0410 	add.w	r4, r6, #16
 800212a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002136:	e885 0003 	stmia.w	r5, {r0, r1}
 800213a:	1d33      	adds	r3, r6, #4
 800213c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f004 f820 	bl	8006184 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f004 f89d 	bl	800628a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	687e      	ldr	r6, [r7, #4]
 8002158:	466d      	mov	r5, sp
 800215a:	f106 0410 	add.w	r4, r6, #16
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002166:	e894 0003 	ldmia.w	r4, {r0, r1}
 800216a:	e885 0003 	stmia.w	r5, {r0, r1}
 800216e:	1d33      	adds	r3, r6, #4
 8002170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002172:	6838      	ldr	r0, [r7, #0]
 8002174:	f004 f9b0 	bl	80064d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800218a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800218a:	b590      	push	{r4, r7, lr}
 800218c:	b089      	sub	sp, #36	; 0x24
 800218e:	af04      	add	r7, sp, #16
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	4608      	mov	r0, r1
 8002194:	4611      	mov	r1, r2
 8002196:	461a      	mov	r2, r3
 8002198:	4603      	mov	r3, r0
 800219a:	70fb      	strb	r3, [r7, #3]
 800219c:	460b      	mov	r3, r1
 800219e:	70bb      	strb	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_HCD_HC_Init+0x28>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e07f      	b.n	80022b2 <HAL_HCD_HC_Init+0x128>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	333d      	adds	r3, #61	; 0x3d
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3338      	adds	r3, #56	; 0x38
 80021de:	787a      	ldrb	r2, [r7, #1]
 80021e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3340      	adds	r3, #64	; 0x40
 80021f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021f4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3339      	adds	r3, #57	; 0x39
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	333f      	adds	r3, #63	; 0x3f
 800221a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800221e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	78bb      	ldrb	r3, [r7, #2]
 8002224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002228:	b2d8      	uxtb	r0, r3
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	333a      	adds	r3, #58	; 0x3a
 8002238:	4602      	mov	r2, r0
 800223a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800223c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002240:	2b00      	cmp	r3, #0
 8002242:	da0a      	bge.n	800225a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	333b      	adds	r3, #59	; 0x3b
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e009      	b.n	800226e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	333b      	adds	r3, #59	; 0x3b
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800226e:	78fa      	ldrb	r2, [r7, #3]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	333c      	adds	r3, #60	; 0x3c
 800227e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002282:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	787c      	ldrb	r4, [r7, #1]
 800228a:	78ba      	ldrb	r2, [r7, #2]
 800228c:	78f9      	ldrb	r1, [r7, #3]
 800228e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4623      	mov	r3, r4
 80022a0:	f004 fa9c 	bl	80067dc <USB_HC_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}

080022ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_HCD_HC_Halt+0x1e>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e00f      	b.n	80022f8 <HAL_HCD_HC_Halt+0x3e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fcd8 	bl	8006c9e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	70fb      	strb	r3, [r7, #3]
 8002312:	460b      	mov	r3, r1
 8002314:	70bb      	strb	r3, [r7, #2]
 8002316:	4613      	mov	r3, r2
 8002318:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	333b      	adds	r3, #59	; 0x3b
 800232a:	78ba      	ldrb	r2, [r7, #2]
 800232c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	333f      	adds	r3, #63	; 0x3f
 800233e:	787a      	ldrb	r2, [r7, #1]
 8002340:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002342:	7c3b      	ldrb	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d114      	bne.n	8002372 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	3342      	adds	r3, #66	; 0x42
 8002358:	2203      	movs	r2, #3
 800235a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	333d      	adds	r3, #61	; 0x3d
 800236c:	7f3a      	ldrb	r2, [r7, #28]
 800236e:	701a      	strb	r2, [r3, #0]
 8002370:	e009      	b.n	8002386 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3342      	adds	r3, #66	; 0x42
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002386:	787b      	ldrb	r3, [r7, #1]
 8002388:	2b03      	cmp	r3, #3
 800238a:	f200 80d6 	bhi.w	800253a <HAL_HCD_HC_SubmitRequest+0x23a>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	08002525 	.word	0x08002525
 800239c:	08002411 	.word	0x08002411
 80023a0:	0800249b 	.word	0x0800249b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80023a4:	7c3b      	ldrb	r3, [r7, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	f040 80c9 	bne.w	800253e <HAL_HCD_HC_SubmitRequest+0x23e>
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80c5 	bne.w	800253e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80023b4:	8b3b      	ldrh	r3, [r7, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3351      	adds	r3, #81	; 0x51
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3351      	adds	r3, #81	; 0x51
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3342      	adds	r3, #66	; 0x42
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023f8:	e0a1      	b.n	800253e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3342      	adds	r3, #66	; 0x42
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e096      	b.n	800253e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002410:	78bb      	ldrb	r3, [r7, #2]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d120      	bne.n	8002458 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3351      	adds	r3, #81	; 0x51
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3342      	adds	r3, #66	; 0x42
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002440:	e07e      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3342      	adds	r3, #66	; 0x42
 8002452:	2202      	movs	r2, #2
 8002454:	701a      	strb	r2, [r3, #0]
      break;
 8002456:	e073      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3350      	adds	r3, #80	; 0x50
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10a      	bne.n	8002484 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3342      	adds	r3, #66	; 0x42
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
      break;
 8002482:	e05d      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	3342      	adds	r3, #66	; 0x42
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
      break;
 8002498:	e052      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800249a:	78bb      	ldrb	r3, [r7, #2]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d120      	bne.n	80024e2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3351      	adds	r3, #81	; 0x51
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3342      	adds	r3, #66	; 0x42
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024ca:	e039      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3342      	adds	r3, #66	; 0x42
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
      break;
 80024e0:	e02e      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3350      	adds	r3, #80	; 0x50
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	3342      	adds	r3, #66	; 0x42
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
      break;
 800250c:	e018      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	3342      	adds	r3, #66	; 0x42
 800251e:	2202      	movs	r2, #2
 8002520:	701a      	strb	r2, [r3, #0]
      break;
 8002522:	e00d      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	3342      	adds	r3, #66	; 0x42
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
      break;
 8002538:	e002      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800253e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3344      	adds	r3, #68	; 0x44
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	8b39      	ldrh	r1, [r7, #24]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4403      	add	r3, r0
 8002564:	3348      	adds	r3, #72	; 0x48
 8002566:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	334c      	adds	r3, #76	; 0x4c
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	3339      	adds	r3, #57	; 0x39
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	335d      	adds	r3, #93	; 0x5d
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	18d1      	adds	r1, r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	f004 fa0c 	bl	80069f0 <USB_HC_StartXfer>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop

080025e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 ff29 	bl	8006452 <USB_GetMode>
 8002600:	4603      	mov	r3, r0
 8002602:	2b01      	cmp	r3, #1
 8002604:	f040 80ef 	bne.w	80027e6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 ff0d 	bl	800642c <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80e5 	beq.w	80027e4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 ff04 	bl	800642c <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800262e:	d104      	bne.n	800263a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002638:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f003 fef4 	bl	800642c <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264e:	d104      	bne.n	800265a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002658:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fee4 	bl	800642c <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800266a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800266e:	d104      	bne.n	800267a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002678:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fed4 	bl	800642c <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d103      	bne.n	8002696 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2202      	movs	r2, #2
 8002694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 fec6 	bl	800642c <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026aa:	d115      	bne.n	80026d8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80026b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d108      	bne.n	80026d8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f006 fc7e 	bl	8008fc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 ffbc 	bl	8006650 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f003 fea5 	bl	800642c <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d102      	bne.n	80026f4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f001 f966 	bl	80039c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fe97 	bl	800642c <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b08      	cmp	r3, #8
 8002706:	d106      	bne.n	8002716 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f006 fc41 	bl	8008f90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2208      	movs	r2, #8
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fe86 	bl	800642c <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272a:	d138      	bne.n	800279e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 faa3 	bl	8006c7c <USB_HC_ReadInterrupt>
 8002736:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e025      	b.n	800278a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002768:	d106      	bne.n	8002778 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8cf 	bl	8002914 <HCD_HC_IN_IRQHandler>
 8002776:	e005      	b.n	8002784 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fcfd 	bl	800317e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	d3d4      	bcc.n	800273e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fe42 	bl	800642c <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d101      	bne.n	80027b6 <HAL_HCD_IRQHandler+0x1d2>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_HCD_IRQHandler+0x1d4>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d014      	beq.n	80027e6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0210 	bic.w	r2, r2, #16
 80027ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 f84b 	bl	8003868 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0210 	orr.w	r2, r2, #16
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	e000      	b.n	80027e6 <HAL_HCD_IRQHandler+0x202>
      return;
 80027e4:	bf00      	nop
    }
  }
}
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_HCD_Start+0x16>
 80027fe:	2302      	movs	r3, #2
 8002800:	e013      	b.n	800282a <HAL_HCD_Start+0x3e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f003 fd19 	bl	8006246 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f003 ff7c 	bl	8006718 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_HCD_Stop+0x16>
 8002844:	2302      	movs	r3, #2
 8002846:	e00d      	b.n	8002864 <HAL_HCD_Stop+0x32>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f004 fb5d 	bl	8006f14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 ff23 	bl	80066c4 <USB_ResetPort>
 800287e:	4603      	mov	r3, r0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002894:	78fa      	ldrb	r2, [r7, #3]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	335c      	adds	r3, #92	; 0x5c
 80028a4:	781b      	ldrb	r3, [r3, #0]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	334c      	adds	r3, #76	; 0x4c
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 ff65 	bl	80067b8 <USB_GetCurrentFrame>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 ff40 	bl	800678a <USB_GetHostSpeed>
 800290a:	4603      	mov	r3, r0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d119      	bne.n	8002978 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2304      	movs	r3, #4
 8002954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	440a      	add	r2, r1
 800296c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	60d3      	str	r3, [r2, #12]
 8002976:	e0ce      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d12c      	bne.n	80029ea <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	335d      	adds	r3, #93	; 0x5d
 80029b4:	2207      	movs	r2, #7
 80029b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f95b 	bl	8006c9e <USB_HC_Halt>
 80029e8:	e095      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d109      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2320      	movs	r3, #32
 8002a10:	6093      	str	r3, [r2, #8]
 8002a12:	e080      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d134      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	0151      	lsls	r1, r2, #5
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	440a      	add	r2, r1
 8002a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	335d      	adds	r3, #93	; 0x5d
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2308      	movs	r3, #8
 8002a80:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 f906 	bl	8006c9e <USB_HC_Halt>
 8002a92:	e040      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aaa:	d134      	bne.n	8002b16 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 f8e1 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2310      	movs	r3, #16
 8002aec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	335d      	adds	r3, #93	; 0x5d
 8002afe:	2208      	movs	r2, #8
 8002b00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2c:	d122      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 f8a0 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b70:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b72:	e300      	b.n	8003176 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 80fd 	bne.w	8002d86 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3348      	adds	r3, #72	; 0x48
 8002ba4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0159      	lsls	r1, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002bb8:	1ad1      	subs	r1, r2, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4403      	add	r3, r0
 8002bc8:	334c      	adds	r3, #76	; 0x4c
 8002bca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	335d      	adds	r3, #93	; 0x5d
 8002bdc:	2201      	movs	r2, #1
 8002bde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3358      	adds	r3, #88	; 0x58
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	333f      	adds	r3, #63	; 0x3f
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	333f      	adds	r3, #63	; 0x3f
 8002c2c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d121      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	0151      	lsls	r1, r2, #5
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	440a      	add	r2, r1
 8002c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 f81e 	bl	8006c9e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2310      	movs	r3, #16
 8002c72:	6093      	str	r3, [r2, #8]
 8002c74:	e070      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	333f      	adds	r3, #63	; 0x3f
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d12a      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	0151      	lsls	r1, r2, #5
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	440a      	add	r2, r1
 8002ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002caa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4601      	mov	r1, r0
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f006 f982 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ce0:	e03a      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	333f      	adds	r3, #63	; 0x3f
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d12f      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	335c      	adds	r3, #92	; 0x5c
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	440b      	add	r3, r1
 8002d1a:	3350      	adds	r3, #80	; 0x50
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3350      	adds	r3, #80	; 0x50
 8002d34:	4602      	mov	r2, r0
 8002d36:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	b2d8      	uxtb	r0, r3
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	335c      	adds	r3, #92	; 0x5c
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4601      	mov	r1, r0
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f006 f946 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3350      	adds	r3, #80	; 0x50
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2d8      	uxtb	r0, r3
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3350      	adds	r3, #80	; 0x50
 8002d80:	4602      	mov	r2, r0
 8002d82:	701a      	strb	r2, [r3, #0]
}
 8002d84:	e1f7      	b.n	8003176 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f040 811a 	bne.w	8002fd2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	0151      	lsls	r1, r2, #5
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	440a      	add	r2, r1
 8002db4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	335d      	adds	r3, #93	; 0x5d
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10a      	bne.n	8002dea <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e0d9      	b.n	8002f9e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	335d      	adds	r3, #93	; 0x5d
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d10a      	bne.n	8002e16 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	335c      	adds	r3, #92	; 0x5c
 8002e10:	2205      	movs	r2, #5
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e0c3      	b.n	8002f9e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	335d      	adds	r3, #93	; 0x5d
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d00a      	beq.n	8002e42 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	440b      	add	r3, r1
 8002e3a:	335d      	adds	r3, #93	; 0x5d
 8002e3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d156      	bne.n	8002ef0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	3358      	adds	r3, #88	; 0x58
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4403      	add	r3, r0
 8002e64:	3358      	adds	r3, #88	; 0x58
 8002e66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	3358      	adds	r3, #88	; 0x58
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d914      	bls.n	8002ea8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3358      	adds	r3, #88	; 0x58
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	335c      	adds	r3, #92	; 0x5c
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e009      	b.n	8002ebc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ed2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e056      	b.n	8002f9e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	440b      	add	r3, r1
 8002efe:	335d      	adds	r3, #93	; 0x5d
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d123      	bne.n	8002f4e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	335c      	adds	r3, #92	; 0x5c
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f30:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f38:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	461a      	mov	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e027      	b.n	8002f9e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	335d      	adds	r3, #93	; 0x5d
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d11c      	bne.n	8002f9e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3358      	adds	r3, #88	; 0x58
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4403      	add	r3, r0
 8002f86:	3358      	adds	r3, #88	; 0x58
 8002f88:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	335c      	adds	r3, #92	; 0x5c
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002faa:	461a      	mov	r2, r3
 8002fac:	2302      	movs	r3, #2
 8002fae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	b2d8      	uxtb	r0, r3
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	335c      	adds	r3, #92	; 0x5c
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4601      	mov	r1, r0
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f006 f80a 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fd0:	e0d1      	b.n	8003176 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d13e      	bne.n	8003066 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	0151      	lsls	r1, r2, #5
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	440a      	add	r2, r1
 8002ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003002:	f043 0302 	orr.w	r3, r3, #2
 8003006:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	3358      	adds	r3, #88	; 0x58
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4403      	add	r3, r0
 800302a:	3358      	adds	r3, #88	; 0x58
 800302c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	335d      	adds	r3, #93	; 0x5d
 800303e:	2206      	movs	r2, #6
 8003040:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f003 fe26 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305e:	461a      	mov	r2, r3
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	6093      	str	r3, [r2, #8]
}
 8003064:	e087      	b.n	8003176 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d17c      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	333f      	adds	r3, #63	; 0x3f
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b03      	cmp	r3, #3
 8003090:	d122      	bne.n	80030d8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3358      	adds	r3, #88	; 0x58
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	0151      	lsls	r1, r2, #5
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	440a      	add	r2, r1
 80030bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fde4 	bl	8006c9e <USB_HC_Halt>
 80030d6:	e045      	b.n	8003164 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	333f      	adds	r3, #63	; 0x3f
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	333f      	adds	r3, #63	; 0x3f
 80030fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003100:	2b02      	cmp	r3, #2
 8003102:	d12f      	bne.n	8003164 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3358      	adds	r3, #88	; 0x58
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d121      	bne.n	8003164 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	335d      	adds	r3, #93	; 0x5d
 8003130:	2203      	movs	r2, #3
 8003132:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	440a      	add	r2, r1
 800314a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fd9d 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2310      	movs	r3, #16
 8003174:	6093      	str	r3, [r2, #8]
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d119      	bne.n	80031e2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	461a      	mov	r2, r3
 80031bc:	2304      	movs	r3, #4
 80031be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	0151      	lsls	r1, r2, #5
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	440a      	add	r2, r1
 80031d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80031e0:	e33e      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d141      	bne.n	800327c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	461a      	mov	r2, r3
 8003206:	2320      	movs	r3, #32
 8003208:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	333d      	adds	r3, #61	; 0x3d
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	f040 831f 	bne.w	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	333d      	adds	r3, #61	; 0x3d
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	335c      	adds	r3, #92	; 0x5c
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4413      	add	r3, r2
 8003252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	0151      	lsls	r1, r2, #5
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	440a      	add	r2, r1
 8003260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fd12 	bl	8006c9e <USB_HC_Halt>
}
 800327a:	e2f1      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d13f      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	335d      	adds	r3, #93	; 0x5d
 80032a2:	2204      	movs	r2, #4
 80032a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	333d      	adds	r3, #61	; 0x3d
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	3358      	adds	r3, #88	; 0x58
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	0151      	lsls	r1, r2, #5
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	440a      	add	r2, r1
 80032e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fcd0 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	2340      	movs	r3, #64	; 0x40
 800330e:	6093      	str	r3, [r2, #8]
}
 8003310:	e2a6      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003328:	d122      	bne.n	8003370 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	440a      	add	r2, r1
 8003340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fca2 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4413      	add	r3, r2
 8003362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003366:	461a      	mov	r2, r3
 8003368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336c:	6093      	str	r3, [r2, #8]
}
 800336e:	e277      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4413      	add	r3, r2
 8003378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d135      	bne.n	80033f2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	3358      	adds	r3, #88	; 0x58
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fc6a 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2301      	movs	r3, #1
 80033da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	335d      	adds	r3, #93	; 0x5d
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
}
 80033f0:	e236      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b08      	cmp	r3, #8
 8003406:	d12b      	bne.n	8003460 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2308      	movs	r3, #8
 8003418:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	0151      	lsls	r1, r2, #5
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	440a      	add	r2, r1
 8003430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f003 fc2a 	bl	8006c9e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	335d      	adds	r3, #93	; 0x5d
 800345a:	2205      	movs	r2, #5
 800345c:	701a      	strb	r2, [r3, #0]
}
 800345e:	e1ff      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b10      	cmp	r3, #16
 8003474:	d155      	bne.n	8003522 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	3358      	adds	r3, #88	; 0x58
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	335d      	adds	r3, #93	; 0x5d
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	333d      	adds	r3, #61	; 0x3d
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d114      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	333c      	adds	r3, #60	; 0x3c
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	333d      	adds	r3, #61	; 0x3d
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	0151      	lsls	r1, r2, #5
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	440a      	add	r2, r1
 80034f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f003 fbc8 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	461a      	mov	r2, r3
 800351c:	2310      	movs	r3, #16
 800351e:	6093      	str	r3, [r2, #8]
}
 8003520:	e19e      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d12b      	bne.n	8003590 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	440a      	add	r2, r1
 800354e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f003 fb9b 	bl	8006c9e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	335d      	adds	r3, #93	; 0x5d
 8003578:	2206      	movs	r2, #6
 800357a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	461a      	mov	r2, r3
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	6093      	str	r3, [r2, #8]
}
 800358e:	e167      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d135      	bne.n	8003614 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 fb63 	bl	8006c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	2310      	movs	r3, #16
 80035e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	461a      	mov	r2, r3
 80035f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	440b      	add	r3, r1
 800360c:	335d      	adds	r3, #93	; 0x5d
 800360e:	2208      	movs	r2, #8
 8003610:	701a      	strb	r2, [r3, #0]
}
 8003612:	e125      	b.n	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	f040 811a 	bne.w	8003860 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	0151      	lsls	r1, r2, #5
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	440a      	add	r2, r1
 8003642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003646:	f023 0302 	bic.w	r3, r3, #2
 800364a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	440b      	add	r3, r1
 800365a:	335d      	adds	r3, #93	; 0x5d
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d137      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4613      	mov	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	440b      	add	r3, r1
 8003670:	335c      	adds	r3, #92	; 0x5c
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	440b      	add	r3, r1
 8003684:	333f      	adds	r3, #63	; 0x3f
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d00b      	beq.n	80036a4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	440b      	add	r3, r1
 800369a:	333f      	adds	r3, #63	; 0x3f
 800369c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800369e:	2b03      	cmp	r3, #3
 80036a0:	f040 80c5 	bne.w	800382e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	3351      	adds	r3, #81	; 0x51
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	f083 0301 	eor.w	r3, r3, #1
 80036ba:	b2d8      	uxtb	r0, r3
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	3351      	adds	r3, #81	; 0x51
 80036cc:	4602      	mov	r2, r0
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e0ad      	b.n	800382e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	335d      	adds	r3, #93	; 0x5d
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d10a      	bne.n	80036fe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	335c      	adds	r3, #92	; 0x5c
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e097      	b.n	800382e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	335d      	adds	r3, #93	; 0x5d
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b04      	cmp	r3, #4
 8003712:	d10a      	bne.n	800372a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	335c      	adds	r3, #92	; 0x5c
 8003724:	2202      	movs	r2, #2
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e081      	b.n	800382e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	335d      	adds	r3, #93	; 0x5d
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b05      	cmp	r3, #5
 800373e:	d10a      	bne.n	8003756 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	440b      	add	r3, r1
 800374e:	335c      	adds	r3, #92	; 0x5c
 8003750:	2205      	movs	r2, #5
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e06b      	b.n	800382e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	440b      	add	r3, r1
 8003764:	335d      	adds	r3, #93	; 0x5d
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b06      	cmp	r3, #6
 800376a:	d00a      	beq.n	8003782 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	440b      	add	r3, r1
 800377a:	335d      	adds	r3, #93	; 0x5d
 800377c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800377e:	2b08      	cmp	r3, #8
 8003780:	d155      	bne.n	800382e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	440b      	add	r3, r1
 8003790:	3358      	adds	r3, #88	; 0x58
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	1c59      	adds	r1, r3, #1
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4403      	add	r3, r0
 80037a4:	3358      	adds	r3, #88	; 0x58
 80037a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	440b      	add	r3, r1
 80037b6:	3358      	adds	r3, #88	; 0x58
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d914      	bls.n	80037e8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	3358      	adds	r3, #88	; 0x58
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	335c      	adds	r3, #92	; 0x5c
 80037e2:	2204      	movs	r2, #4
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e009      	b.n	80037fc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	440b      	add	r3, r1
 80037f6:	335c      	adds	r3, #92	; 0x5c
 80037f8:	2202      	movs	r2, #2
 80037fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003812:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800381a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	2302      	movs	r3, #2
 800383e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	b2d8      	uxtb	r0, r3
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	335c      	adds	r3, #92	; 0x5c
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	4601      	mov	r1, r0
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f005 fbc2 	bl	8008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003860:	bf00      	nop
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	0c5b      	lsrs	r3, r3, #17
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800389c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d003      	beq.n	80038ac <HCD_RXQLVL_IRQHandler+0x44>
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	f000 8082 	beq.w	80039ae <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038aa:	e083      	b.n	80039b4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d07f      	beq.n	80039b2 <HCD_RXQLVL_IRQHandler+0x14a>
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3344      	adds	r3, #68	; 0x44
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d074      	beq.n	80039b2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	3344      	adds	r3, #68	; 0x44
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	b292      	uxth	r2, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f002 fd79 	bl	80063da <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	3344      	adds	r3, #68	; 0x44
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	18d1      	adds	r1, r2, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4403      	add	r3, r0
 800390c:	3344      	adds	r3, #68	; 0x44
 800390e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	334c      	adds	r3, #76	; 0x4c
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	18d1      	adds	r1, r2, r3
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4403      	add	r3, r0
 8003934:	334c      	adds	r3, #76	; 0x4c
 8003936:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	691a      	ldr	r2, [r3, #16]
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HCD_RXQLVL_IRQHandler+0x154>)
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d031      	beq.n	80039b2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003964:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800396c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	3350      	adds	r3, #80	; 0x50
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2d8      	uxtb	r0, r3
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	3350      	adds	r3, #80	; 0x50
 80039a8:	4602      	mov	r2, r0
 80039aa:	701a      	strb	r2, [r3, #0]
      break;
 80039ac:	e001      	b.n	80039b2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80039b2:	bf00      	nop
  }
}
 80039b4:	bf00      	nop
 80039b6:	3728      	adds	r7, #40	; 0x28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	1ff80000 	.word	0x1ff80000

080039c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d10b      	bne.n	8003a10 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f005 fad2 	bl	8008fac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f043 0302 	orr.w	r3, r3, #2
 8003a0e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d132      	bne.n	8003a80 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d126      	bne.n	8003a7a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d113      	bne.n	8003a5c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a3e:	d106      	bne.n	8003a4e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2102      	movs	r1, #2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 fe02 	bl	8006650 <USB_InitFSLSPClkSel>
 8003a4c:	e011      	b.n	8003a72 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 fdfb 	bl	8006650 <USB_InitFSLSPClkSel>
 8003a5a:	e00a      	b.n	8003a72 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a70:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f005 fac4 	bl	8009000 <HAL_HCD_PortEnabled_Callback>
 8003a78:	e002      	b.n	8003a80 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f005 face 	bl	800901c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d103      	bne.n	8003a92 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6013      	str	r3, [r2, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e11f      	b.n	8003cfa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f93a 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f001 f9de 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8003b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4a7b      	ldr	r2, [pc, #492]	; (8003d04 <HAL_I2C_Init+0x25c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d807      	bhi.n	8003b2c <HAL_I2C_Init+0x84>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a7a      	ldr	r2, [pc, #488]	; (8003d08 <HAL_I2C_Init+0x260>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	bf94      	ite	ls
 8003b24:	2301      	movls	r3, #1
 8003b26:	2300      	movhi	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e006      	b.n	8003b3a <HAL_I2C_Init+0x92>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a77      	ldr	r2, [pc, #476]	; (8003d0c <HAL_I2C_Init+0x264>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bf94      	ite	ls
 8003b34:	2301      	movls	r3, #1
 8003b36:	2300      	movhi	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0db      	b.n	8003cfa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a72      	ldr	r2, [pc, #456]	; (8003d10 <HAL_I2C_Init+0x268>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a64      	ldr	r2, [pc, #400]	; (8003d04 <HAL_I2C_Init+0x25c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d802      	bhi.n	8003b7c <HAL_I2C_Init+0xd4>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e009      	b.n	8003b90 <HAL_I2C_Init+0xe8>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	4a63      	ldr	r2, [pc, #396]	; (8003d14 <HAL_I2C_Init+0x26c>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	3301      	adds	r3, #1
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4956      	ldr	r1, [pc, #344]	; (8003d04 <HAL_I2C_Init+0x25c>)
 8003bac:	428b      	cmp	r3, r1
 8003bae:	d80d      	bhi.n	8003bcc <HAL_I2C_Init+0x124>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e59      	subs	r1, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	bf38      	it	cc
 8003bc8:	2304      	movcc	r3, #4
 8003bca:	e04f      	b.n	8003c6c <HAL_I2C_Init+0x1c4>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d111      	bne.n	8003bf8 <HAL_I2C_Init+0x150>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	e012      	b.n	8003c1e <HAL_I2C_Init+0x176>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	bf0c      	ite	eq
 8003c18:	2301      	moveq	r3, #1
 8003c1a:	2300      	movne	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x17e>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e022      	b.n	8003c6c <HAL_I2C_Init+0x1c4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10e      	bne.n	8003c4c <HAL_I2C_Init+0x1a4>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1e58      	subs	r0, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	440b      	add	r3, r1
 8003c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4a:	e00f      	b.n	8003c6c <HAL_I2C_Init+0x1c4>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	0099      	lsls	r1, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c62:	3301      	adds	r3, #1
 8003c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6911      	ldr	r1, [r2, #16]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	000186a0 	.word	0x000186a0
 8003d08:	001e847f 	.word	0x001e847f
 8003d0c:	003d08ff 	.word	0x003d08ff
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	10624dd3 	.word	0x10624dd3

08003d18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e128      	b.n	8003f7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a90      	ldr	r2, [pc, #576]	; (8003f84 <HAL_I2S_Init+0x26c>)
 8003d42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fd f847 	bl	8000dd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d60:	f023 030f 	bic.w	r3, r3, #15
 8003d64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d060      	beq.n	8003e38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d102      	bne.n	8003d84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d7e:	2310      	movs	r3, #16
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e001      	b.n	8003d88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d802      	bhi.n	8003d96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f001 f9a2 	bl	80050e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d9c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d125      	bne.n	8003df4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	3305      	adds	r3, #5
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e01f      	b.n	8003e12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	3305      	adds	r3, #5
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e00e      	b.n	8003e12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	3305      	adds	r3, #5
 8003e10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a5c      	ldr	r2, [pc, #368]	; (8003f88 <HAL_I2S_Init+0x270>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	08db      	lsrs	r3, r3, #3
 8003e1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e003      	b.n	8003e40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d902      	bls.n	8003e4c <HAL_I2S_Init+0x134>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2bff      	cmp	r3, #255	; 0xff
 8003e4a:	d907      	bls.n	8003e5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e08f      	b.n	8003f7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	ea42 0103 	orr.w	r1, r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e7a:	f023 030f 	bic.w	r3, r3, #15
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6851      	ldr	r1, [r2, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68d2      	ldr	r2, [r2, #12]
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6992      	ldr	r2, [r2, #24]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d161      	bne.n	8003f6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <HAL_I2S_Init+0x274>)
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2S_Init+0x1a4>
 8003eb8:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2S_Init+0x1a8>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	4932      	ldr	r1, [pc, #200]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003ec8:	428a      	cmp	r2, r1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2S_Init+0x1b8>
 8003ecc:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003ece:	e001      	b.n	8003ed4 <HAL_I2S_Init+0x1bc>
 8003ed0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ed4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ed8:	f023 030f 	bic.w	r3, r3, #15
 8003edc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d101      	bne.n	8003eec <HAL_I2S_Init+0x1d4>
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003eea:	e001      	b.n	8003ef0 <HAL_I2S_Init+0x1d8>
 8003eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_I2S_Init+0x1ea>
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003f00:	e001      	b.n	8003f06 <HAL_I2S_Init+0x1ee>
 8003f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f12:	d003      	beq.n	8003f1c <HAL_I2S_Init+0x204>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	e001      	b.n	8003f28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	b299      	uxth	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003f3e:	4303      	orrs	r3, r0
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	430b      	orrs	r3, r1
 8003f44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_I2S_Init+0x278>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2S_Init+0x24c>
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_I2S_Init+0x27c>)
 8003f62:	e001      	b.n	8003f68 <HAL_I2S_Init+0x250>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f68:	897a      	ldrh	r2, [r7, #10]
 8003f6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	0800408f 	.word	0x0800408f
 8003f88:	cccccccd 	.word	0xcccccccd
 8003f8c:	080041a5 	.word	0x080041a5
 8003f90:	40003800 	.word	0x40003800
 8003f94:	40003400 	.word	0x40003400

08003f98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004018:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffb8 	bl	8003f98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	b292      	uxth	r2, r2
 8004044:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	1c9a      	adds	r2, r3, #2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10e      	bne.n	8004086 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004076:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff93 	bl	8003fac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d13a      	bne.n	8004120 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d109      	bne.n	80040c8 <I2S_IRQHandler+0x3a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d102      	bne.n	80040c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff ffb4 	bl	8004030 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d126      	bne.n	8004120 <I2S_IRQHandler+0x92>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d11f      	bne.n	8004120 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f043 0202 	orr.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ff50 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b03      	cmp	r3, #3
 800412a:	d136      	bne.n	800419a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <I2S_IRQHandler+0xbc>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d102      	bne.n	800414a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff45 	bl	8003fd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d122      	bne.n	800419a <I2S_IRQHandler+0x10c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d11b      	bne.n	800419a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004170:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff13 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4aa2      	ldr	r2, [pc, #648]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041be:	4ba2      	ldr	r3, [pc, #648]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041c0:	e001      	b.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a9b      	ldr	r2, [pc, #620]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041dc:	4b9a      	ldr	r3, [pc, #616]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041de:	e001      	b.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d004      	beq.n	80041fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8099 	bne.w	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f925 	bl	8004460 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f9c8 	bl	80045c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d13a      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d035      	beq.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a7e      	ldr	r2, [pc, #504]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800424e:	4b7e      	ldr	r3, [pc, #504]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004250:	e001      	b.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4979      	ldr	r1, [pc, #484]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800425e:	428b      	cmp	r3, r1
 8004260:	d101      	bne.n	8004266 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004262:	4b79      	ldr	r3, [pc, #484]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004264:	e001      	b.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800426e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800427e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f043 0202 	orr.w	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fe88 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	f040 80be 	bne.w	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80b8 	beq.w	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a59      	ldr	r2, [pc, #356]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042e2:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4954      	ldr	r1, [pc, #336]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042f2:	428b      	cmp	r3, r1
 80042f4:	d101      	bne.n	80042fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042f6:	4b54      	ldr	r3, [pc, #336]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042f8:	e001      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004302:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fe4a 	bl	8003fc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800432c:	e084      	b.n	8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d107      	bne.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8be 	bl	80044c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8fd 	bl	800455c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d12f      	bne.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d02a      	beq.n	80043cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004384:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2e      	ldr	r2, [pc, #184]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004392:	e001      	b.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4929      	ldr	r1, [pc, #164]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043a4:	4b28      	ldr	r3, [pc, #160]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043a6:	e001      	b.n	80043ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fdfa 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d131      	bne.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02c      	beq.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a17      	ldr	r2, [pc, #92]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043ec:	e001      	b.n	80043f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4912      	ldr	r1, [pc, #72]	; (8004444 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d101      	bne.n	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004400:	e001      	b.n	8004406 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800440a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800441a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fdc5 	bl	8003fc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004436:	e000      	b.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004438:	bf00      	nop
}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40003800 	.word	0x40003800
 8004448:	40003400 	.word	0x40003400

0800444c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c99      	adds	r1, r3, #2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6251      	str	r1, [r2, #36]	; 0x24
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d113      	bne.n	80044ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7ff ffc9 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c99      	adds	r1, r3, #2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6251      	str	r1, [r2, #36]	; 0x24
 80044d6:	8819      	ldrh	r1, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <I2SEx_TxISR_I2SExt+0x22>
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 80044e4:	e001      	b.n	80044ea <I2SEx_TxISR_I2SExt+0x26>
 80044e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044ea:	460a      	mov	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <I2SEx_TxISR_I2SExt+0x50>
 8004510:	4b11      	ldr	r3, [pc, #68]	; (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 8004512:	e001      	b.n	8004518 <I2SEx_TxISR_I2SExt+0x54>
 8004514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	490d      	ldr	r1, [pc, #52]	; (8004554 <I2SEx_TxISR_I2SExt+0x90>)
 8004520:	428b      	cmp	r3, r1
 8004522:	d101      	bne.n	8004528 <I2SEx_TxISR_I2SExt+0x64>
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <I2SEx_TxISR_I2SExt+0x94>)
 8004526:	e001      	b.n	800452c <I2SEx_TxISR_I2SExt+0x68>
 8004528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800452c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004530:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff ff81 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40003800 	.word	0x40003800
 8004558:	40003400 	.word	0x40003400

0800455c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68d8      	ldr	r0, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	1c99      	adds	r1, r3, #2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004574:	b282      	uxth	r2, r0
 8004576:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800459e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff4a 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a20      	ldr	r2, [pc, #128]	; (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <I2SEx_RxISR_I2SExt+0x16>
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 80045d4:	e001      	b.n	80045da <I2SEx_RxISR_I2SExt+0x1a>
 80045d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045da:	68d8      	ldr	r0, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	1c99      	adds	r1, r3, #2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045e6:	b282      	uxth	r2, r0
 80045e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <I2SEx_RxISR_I2SExt+0x50>
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 800460e:	e001      	b.n	8004614 <I2SEx_RxISR_I2SExt+0x54>
 8004610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	490d      	ldr	r1, [pc, #52]	; (8004650 <I2SEx_RxISR_I2SExt+0x90>)
 800461c:	428b      	cmp	r3, r1
 800461e:	d101      	bne.n	8004624 <I2SEx_RxISR_I2SExt+0x64>
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <I2SEx_RxISR_I2SExt+0x94>)
 8004622:	e001      	b.n	8004628 <I2SEx_RxISR_I2SExt+0x68>
 8004624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004628:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800462c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff03 	bl	800444c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40003800 	.word	0x40003800
 8004654:	40003400 	.word	0x40003400

08004658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e25b      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d075      	beq.n	8004762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004676:	4ba3      	ldr	r3, [pc, #652]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d00c      	beq.n	800469c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4ba0      	ldr	r3, [pc, #640]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468a:	2b08      	cmp	r3, #8
 800468c:	d112      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468e:	4b9d      	ldr	r3, [pc, #628]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004696:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469a:	d10b      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800469c:	4b99      	ldr	r3, [pc, #612]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05b      	beq.n	8004760 <HAL_RCC_OscConfig+0x108>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d157      	bne.n	8004760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e236      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d106      	bne.n	80046cc <HAL_RCC_OscConfig+0x74>
 80046be:	4b91      	ldr	r3, [pc, #580]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a90      	ldr	r2, [pc, #576]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x98>
 80046d6:	4b8b      	ldr	r3, [pc, #556]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a8a      	ldr	r2, [pc, #552]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b88      	ldr	r3, [pc, #544]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a87      	ldr	r2, [pc, #540]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xb0>
 80046f0:	4b84      	ldr	r3, [pc, #528]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a83      	ldr	r2, [pc, #524]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b81      	ldr	r3, [pc, #516]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a80      	ldr	r2, [pc, #512]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd f9ce 	bl	8001ab0 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd f9ca 	bl	8001ab0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	; 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e1fb      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xc0>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd f9ba 	bl	8001ab0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd f9b6 	bl	8001ab0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1e7      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004752:	4b6c      	ldr	r3, [pc, #432]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0xe8>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476e:	4b65      	ldr	r3, [pc, #404]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b62      	ldr	r3, [pc, #392]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004782:	2b08      	cmp	r3, #8
 8004784:	d11c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004786:	4b5f      	ldr	r3, [pc, #380]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	4b5c      	ldr	r3, [pc, #368]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x152>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e1bb      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047aa:	4b56      	ldr	r3, [pc, #344]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4952      	ldr	r1, [pc, #328]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047be:	e03a      	b.n	8004836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d020      	beq.n	800480a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c8:	4b4f      	ldr	r3, [pc, #316]	; (8004908 <HAL_RCC_OscConfig+0x2b0>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd f96f 	bl	8001ab0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fd f96b 	bl	8001ab0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e19c      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e8:	4b46      	ldr	r3, [pc, #280]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b43      	ldr	r3, [pc, #268]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4940      	ldr	r1, [pc, #256]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	4313      	orrs	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
 8004808:	e015      	b.n	8004836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b3f      	ldr	r3, [pc, #252]	; (8004908 <HAL_RCC_OscConfig+0x2b0>)
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fd f94e 	bl	8001ab0 <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004818:	f7fd f94a 	bl	8001ab0 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e17b      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d030      	beq.n	80048a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484a:	4b30      	ldr	r3, [pc, #192]	; (800490c <HAL_RCC_OscConfig+0x2b4>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fd f92e 	bl	8001ab0 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004858:	f7fd f92a 	bl	8001ab0 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e15b      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486a:	4b26      	ldr	r3, [pc, #152]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x200>
 8004876:	e015      	b.n	80048a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_OscConfig+0x2b4>)
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fd f917 	bl	8001ab0 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004886:	f7fd f913 	bl	8001ab0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e144      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a0 	beq.w	80049f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b13      	ldr	r3, [pc, #76]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d121      	bne.n	8004932 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <HAL_RCC_OscConfig+0x2b8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a07      	ldr	r2, [pc, #28]	; (8004910 <HAL_RCC_OscConfig+0x2b8>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fd f8d9 	bl	8001ab0 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	e011      	b.n	8004926 <HAL_RCC_OscConfig+0x2ce>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	42470000 	.word	0x42470000
 800490c:	42470e80 	.word	0x42470e80
 8004910:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004914:	f7fd f8cc 	bl	8001ab0 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e0fd      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004926:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_OscConfig+0x4d4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d106      	bne.n	8004948 <HAL_RCC_OscConfig+0x2f0>
 800493a:	4b7d      	ldr	r3, [pc, #500]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
 8004946:	e01c      	b.n	8004982 <HAL_RCC_OscConfig+0x32a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d10c      	bne.n	800496a <HAL_RCC_OscConfig+0x312>
 8004950:	4b77      	ldr	r3, [pc, #476]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a76      	ldr	r2, [pc, #472]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	4b74      	ldr	r3, [pc, #464]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a73      	ldr	r2, [pc, #460]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004962:	f043 0301 	orr.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	e00b      	b.n	8004982 <HAL_RCC_OscConfig+0x32a>
 800496a:	4b71      	ldr	r3, [pc, #452]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a70      	ldr	r2, [pc, #448]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a6d      	ldr	r2, [pc, #436]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 800497c:	f023 0304 	bic.w	r3, r3, #4
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d015      	beq.n	80049b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd f891 	bl	8001ab0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fd f88d 	bl	8001ab0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0bc      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a8:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0ee      	beq.n	8004992 <HAL_RCC_OscConfig+0x33a>
 80049b4:	e014      	b.n	80049e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd f87b 	bl	8001ab0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fd f877 	bl	8001ab0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0a6      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d4:	4b56      	ldr	r3, [pc, #344]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ee      	bne.n	80049be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e6:	4b52      	ldr	r3, [pc, #328]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a51      	ldr	r2, [pc, #324]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 80049ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8092 	beq.w	8004b20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049fc:	4b4c      	ldr	r3, [pc, #304]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d05c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d141      	bne.n	8004a94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a10:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <HAL_RCC_OscConfig+0x4dc>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a16:	f7fd f84b 	bl	8001ab0 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fd f847 	bl	8001ab0 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e078      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f0      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	019b      	lsls	r3, r3, #6
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	3b01      	subs	r3, #1
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	4933      	ldr	r1, [pc, #204]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <HAL_RCC_OscConfig+0x4dc>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd f820 	bl	8001ab0 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd f81c 	bl	8001ab0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e04d      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x41c>
 8004a92:	e045      	b.n	8004b20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a94:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <HAL_RCC_OscConfig+0x4dc>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9a:	f7fd f809 	bl	8001ab0 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fd f805 	bl	8001ab0 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e036      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x44a>
 8004ac0:	e02e      	b.n	8004b20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e029      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCC_OscConfig+0x4d8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d11c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d115      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af6:	4013      	ands	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40007000 	.word	0x40007000
 8004b30:	40023800 	.word	0x40023800
 8004b34:	42470060 	.word	0x42470060

08004b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0cc      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b68      	ldr	r3, [pc, #416]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d90c      	bls.n	8004b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b63      	ldr	r3, [pc, #396]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0b8      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b8c:	4b59      	ldr	r3, [pc, #356]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4a58      	ldr	r2, [pc, #352]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba4:	4b53      	ldr	r3, [pc, #332]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4a52      	ldr	r2, [pc, #328]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb0:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	494d      	ldr	r1, [pc, #308]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d044      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	4b47      	ldr	r3, [pc, #284]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d119      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e07f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e06f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e067      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f023 0203 	bic.w	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	4934      	ldr	r1, [pc, #208]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c28:	f7fc ff42 	bl	8001ab0 <HAL_GetTick>
 8004c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c30:	f7fc ff3e 	bl	8001ab0 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e04f      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 020c 	and.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1eb      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d20c      	bcs.n	8004c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e032      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	4916      	ldr	r1, [pc, #88]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	490e      	ldr	r1, [pc, #56]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cbe:	f000 f821 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	5cd3      	ldrb	r3, [r2, r3]
 8004cd2:	fa21 f303 	lsr.w	r3, r1, r3
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fc fea2 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023c00 	.word	0x40023c00
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	08009e6c 	.word	0x08009e6c
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	20000004 	.word	0x20000004

08004d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	2300      	movs	r3, #0
 8004d14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1a:	4b63      	ldr	r3, [pc, #396]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d007      	beq.n	8004d36 <HAL_RCC_GetSysClockFreq+0x32>
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d008      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x38>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 80b4 	bne.w	8004e98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b5e      	ldr	r3, [pc, #376]	; (8004eac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d32:	60bb      	str	r3, [r7, #8]
       break;
 8004d34:	e0b3      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d36:	4b5e      	ldr	r3, [pc, #376]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004d38:	60bb      	str	r3, [r7, #8]
      break;
 8004d3a:	e0b0      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d3c:	4b5a      	ldr	r3, [pc, #360]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d46:	4b58      	ldr	r3, [pc, #352]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04a      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b55      	ldr	r3, [pc, #340]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	f04f 0400 	mov.w	r4, #0
 8004d5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	ea03 0501 	and.w	r5, r3, r1
 8004d68:	ea04 0602 	and.w	r6, r4, r2
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4632      	mov	r2, r6
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	f04f 0400 	mov.w	r4, #0
 8004d78:	0154      	lsls	r4, r2, #5
 8004d7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d7e:	014b      	lsls	r3, r1, #5
 8004d80:	4619      	mov	r1, r3
 8004d82:	4622      	mov	r2, r4
 8004d84:	1b49      	subs	r1, r1, r5
 8004d86:	eb62 0206 	sbc.w	r2, r2, r6
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	f04f 0400 	mov.w	r4, #0
 8004d92:	0194      	lsls	r4, r2, #6
 8004d94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d98:	018b      	lsls	r3, r1, #6
 8004d9a:	1a5b      	subs	r3, r3, r1
 8004d9c:	eb64 0402 	sbc.w	r4, r4, r2
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	00e2      	lsls	r2, r4, #3
 8004daa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dae:	00d9      	lsls	r1, r3, #3
 8004db0:	460b      	mov	r3, r1
 8004db2:	4614      	mov	r4, r2
 8004db4:	195b      	adds	r3, r3, r5
 8004db6:	eb44 0406 	adc.w	r4, r4, r6
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	0262      	lsls	r2, r4, #9
 8004dc4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004dc8:	0259      	lsls	r1, r3, #9
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f7fb fa50 	bl	8000280 <__aeabi_uldivmod>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e049      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de8:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	099b      	lsrs	r3, r3, #6
 8004dee:	f04f 0400 	mov.w	r4, #0
 8004df2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	ea03 0501 	and.w	r5, r3, r1
 8004dfe:	ea04 0602 	and.w	r6, r4, r2
 8004e02:	4629      	mov	r1, r5
 8004e04:	4632      	mov	r2, r6
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	f04f 0400 	mov.w	r4, #0
 8004e0e:	0154      	lsls	r4, r2, #5
 8004e10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e14:	014b      	lsls	r3, r1, #5
 8004e16:	4619      	mov	r1, r3
 8004e18:	4622      	mov	r2, r4
 8004e1a:	1b49      	subs	r1, r1, r5
 8004e1c:	eb62 0206 	sbc.w	r2, r2, r6
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	f04f 0400 	mov.w	r4, #0
 8004e28:	0194      	lsls	r4, r2, #6
 8004e2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e2e:	018b      	lsls	r3, r1, #6
 8004e30:	1a5b      	subs	r3, r3, r1
 8004e32:	eb64 0402 	sbc.w	r4, r4, r2
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	00e2      	lsls	r2, r4, #3
 8004e40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e44:	00d9      	lsls	r1, r3, #3
 8004e46:	460b      	mov	r3, r1
 8004e48:	4614      	mov	r4, r2
 8004e4a:	195b      	adds	r3, r3, r5
 8004e4c:	eb44 0406 	adc.w	r4, r4, r6
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	02a2      	lsls	r2, r4, #10
 8004e5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004e5e:	0299      	lsls	r1, r3, #10
 8004e60:	460b      	mov	r3, r1
 8004e62:	4614      	mov	r4, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	4621      	mov	r1, r4
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f04f 0400 	mov.w	r4, #0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4623      	mov	r3, r4
 8004e72:	f7fb fa05 	bl	8000280 <__aeabi_uldivmod>
 8004e76:	4603      	mov	r3, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	3301      	adds	r3, #1
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	60bb      	str	r3, [r7, #8]
      break;
 8004e96:	e002      	b.n	8004e9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e9a:	60bb      	str	r3, [r7, #8]
      break;
 8004e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	00f42400 	.word	0x00f42400
 8004eb0:	007a1200 	.word	0x007a1200

08004eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000000 	.word	0x20000000

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004ed4:	4601      	mov	r1, r0
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	4a03      	ldr	r2, [pc, #12]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee2:	5cd3      	ldrb	r3, [r2, r3]
 8004ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	08009e7c 	.word	0x08009e7c

08004ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ef8:	f7ff ffdc 	bl	8004eb4 <HAL_RCC_GetHCLKFreq>
 8004efc:	4601      	mov	r1, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0b5b      	lsrs	r3, r3, #13
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4a03      	ldr	r2, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0a:	5cd3      	ldrb	r3, [r2, r3]
 8004f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	08009e7c 	.word	0x08009e7c

08004f1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d035      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f44:	4b62      	ldr	r3, [pc, #392]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fdb1 	bl	8001ab0 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f52:	f7fc fdad 	bl	8001ab0 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0b0      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f64:	4b5b      	ldr	r3, [pc, #364]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	019a      	lsls	r2, r3, #6
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	071b      	lsls	r3, r3, #28
 8004f7c:	4955      	ldr	r1, [pc, #340]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f84:	4b52      	ldr	r3, [pc, #328]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f8a:	f7fc fd91 	bl	8001ab0 <HAL_GetTick>
 8004f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f92:	f7fc fd8d 	bl	8001ab0 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e090      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8083 	beq.w	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	4a43      	ldr	r2, [pc, #268]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a3e      	ldr	r2, [pc, #248]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe6:	f7fc fd63 	bl	8001ab0 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fc fd5f 	bl	8001ab0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e062      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800500c:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005014:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02f      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	429a      	cmp	r2, r3
 8005028:	d028      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800503a:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005040:	4a24      	ldr	r2, [pc, #144]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005046:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b01      	cmp	r3, #1
 8005050:	d114      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005052:	f7fc fd2d 	bl	8001ab0 <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	e00a      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800505a:	f7fc fd29 	bl	8001ab0 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	f241 3288 	movw	r2, #5000	; 0x1388
 8005068:	4293      	cmp	r3, r2
 800506a:	d901      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e02a      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ee      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005088:	d10d      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	490d      	ldr	r1, [pc, #52]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]
 80050a4:	e005      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050b0:	6093      	str	r3, [r2, #8]
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050be:	4905      	ldr	r1, [pc, #20]	; (80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	42470068 	.word	0x42470068
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42470e40 	.word	0x42470e40

080050e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d13d      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005106:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800510e:	2b01      	cmp	r3, #1
 8005110:	d12f      	bne.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005112:	4b1e      	ldr	r3, [pc, #120]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005114:	617b      	str	r3, [r7, #20]
          break;
 8005116:	e02f      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005124:	d108      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005126:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800512e:	4a18      	ldr	r2, [pc, #96]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	e007      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005140:	4a14      	ldr	r2, [pc, #80]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800514a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800515e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005162:	0f1b      	lsrs	r3, r3, #28
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	617b      	str	r3, [r7, #20]
          break;
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
          break;
 8005176:	bf00      	nop
        }
      }
      break;
 8005178:	bf00      	nop
    }
  }
  return frequency;
 800517a:	697b      	ldr	r3, [r7, #20]
}
 800517c:	4618      	mov	r0, r3
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40023800 	.word	0x40023800
 800518c:	00bb8000 	.word	0x00bb8000
 8005190:	007a1200 	.word	0x007a1200
 8005194:	00f42400 	.word	0x00f42400

08005198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e056      	b.n	8005258 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7fb fe6f 	bl	8000ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	ea42 0103 	orr.w	r1, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	f003 0104 	and.w	r1, r3, #4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005246:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e01d      	b.n	80052ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb fe56 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f000 f8e4 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b06      	cmp	r3, #6
 80052d6:	d007      	beq.n	80052e8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_TIM_ConfigClockSource+0x18>
 8005312:	2302      	movs	r3, #2
 8005314:	e0a6      	b.n	8005464 <HAL_TIM_ConfigClockSource+0x166>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005334:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800533c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d067      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x120>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d80b      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x6c>
 8005352:	2b10      	cmp	r3, #16
 8005354:	d073      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x140>
 8005356:	2b10      	cmp	r3, #16
 8005358:	d802      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x62>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d06f      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800535e:	e078      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005360:	2b20      	cmp	r3, #32
 8005362:	d06c      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x140>
 8005364:	2b30      	cmp	r3, #48	; 0x30
 8005366:	d06a      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005368:	e073      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800536a:	2b70      	cmp	r3, #112	; 0x70
 800536c:	d00d      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x8c>
 800536e:	2b70      	cmp	r3, #112	; 0x70
 8005370:	d804      	bhi.n	800537c <HAL_TIM_ConfigClockSource+0x7e>
 8005372:	2b50      	cmp	r3, #80	; 0x50
 8005374:	d033      	beq.n	80053de <HAL_TIM_ConfigClockSource+0xe0>
 8005376:	2b60      	cmp	r3, #96	; 0x60
 8005378:	d041      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x100>
      break;
 800537a:	e06a      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	d066      	beq.n	8005450 <HAL_TIM_ConfigClockSource+0x152>
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	d017      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005388:	e063      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6899      	ldr	r1, [r3, #8]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f000 f981 	bl	80056a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	609a      	str	r2, [r3, #8]
      break;
 80053b6:	e04c      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6899      	ldr	r1, [r3, #8]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f000 f96a 	bl	80056a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053da:	609a      	str	r2, [r3, #8]
      break;
 80053dc:	e039      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 f8de 	bl	80055ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2150      	movs	r1, #80	; 0x50
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f937 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80053fc:	e029      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	f000 f8fd 	bl	800560a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2160      	movs	r1, #96	; 0x60
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f927 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 800541c:	e019      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	461a      	mov	r2, r3
 800542c:	f000 f8be 	bl	80055ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f917 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 800543c:	e009      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 f90e 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 800544e:	e000      	b.n	8005452 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005450:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a40      	ldr	r2, [pc, #256]	; (8005580 <TIM_Base_SetConfig+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a3d      	ldr	r2, [pc, #244]	; (8005584 <TIM_Base_SetConfig+0x118>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a3c      	ldr	r2, [pc, #240]	; (8005588 <TIM_Base_SetConfig+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3b      	ldr	r2, [pc, #236]	; (800558c <TIM_Base_SetConfig+0x120>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3a      	ldr	r2, [pc, #232]	; (8005590 <TIM_Base_SetConfig+0x124>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <TIM_Base_SetConfig+0x114>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d027      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <TIM_Base_SetConfig+0x118>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d023      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <TIM_Base_SetConfig+0x11c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01f      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	; (800558c <TIM_Base_SetConfig+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a29      	ldr	r2, [pc, #164]	; (8005590 <TIM_Base_SetConfig+0x124>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d017      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a28      	ldr	r2, [pc, #160]	; (8005594 <TIM_Base_SetConfig+0x128>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a27      	ldr	r2, [pc, #156]	; (8005598 <TIM_Base_SetConfig+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00f      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <TIM_Base_SetConfig+0x130>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <TIM_Base_SetConfig+0x134>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <TIM_Base_SetConfig+0x138>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <TIM_Base_SetConfig+0x13c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <TIM_Base_SetConfig+0x114>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0xf8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <TIM_Base_SetConfig+0x124>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d103      	bne.n	800556c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	615a      	str	r2, [r3, #20]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800
 80055a0:	40001800 	.word	0x40001800
 80055a4:	40001c00 	.word	0x40001c00
 80055a8:	40002000 	.word	0x40002000

080055ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 030a 	bic.w	r3, r3, #10
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560a:	b480      	push	{r7}
 800560c:	b087      	sub	sp, #28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0210 	bic.w	r2, r3, #16
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	031b      	lsls	r3, r3, #12
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	f043 0307 	orr.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	021a      	lsls	r2, r3, #8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	609a      	str	r2, [r3, #8]
}
 80056d4:	bf00      	nop
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e03f      	b.n	8005772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb fc38 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2224      	movs	r2, #36	; 0x24
 8005710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f9b1 	bl	8005a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b088      	sub	sp, #32
 800577e:	af02      	add	r7, sp, #8
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	f040 8083 	bne.w	80058a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Transmit+0x2e>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e07b      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Transmit+0x40>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e074      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2221      	movs	r2, #33	; 0x21
 80057cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057d0:	f7fc f96e 	bl	8001ab0 <HAL_GetTick>
 80057d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80057ea:	e042      	b.n	8005872 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d122      	bne.n	800584a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2200      	movs	r2, #0
 800580c:	2180      	movs	r1, #128	; 0x80
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f8f2 	bl	80059f8 <UART_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e042      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3302      	adds	r3, #2
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	e017      	b.n	8005872 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3301      	adds	r3, #1
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	e013      	b.n	8005872 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f8cf 	bl	80059f8 <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e01f      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	60ba      	str	r2, [r7, #8]
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1b7      	bne.n	80057ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f8b6 	bl	80059f8 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e006      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	f040 8090 	bne.w	80059ee <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_Receive+0x2e>
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e088      	b.n	80059f0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Receive+0x40>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e081      	b.n	80059f0 <HAL_UART_Receive+0x144>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2222      	movs	r2, #34	; 0x22
 80058fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005902:	f7fc f8d5 	bl	8001ab0 <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	88fa      	ldrh	r2, [r7, #6]
 800590c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	88fa      	ldrh	r2, [r7, #6]
 8005912:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800591c:	e05c      	b.n	80059d8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d12b      	bne.n	800598e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2200      	movs	r2, #0
 800593e:	2120      	movs	r1, #32
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f859 	bl	80059f8 <UART_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e04f      	b.n	80059f0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	b29a      	uxth	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	3302      	adds	r3, #2
 8005972:	60bb      	str	r3, [r7, #8]
 8005974:	e030      	b.n	80059d8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	b29b      	uxth	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	b29a      	uxth	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3301      	adds	r3, #1
 800598a:	60bb      	str	r3, [r7, #8]
 800598c:	e024      	b.n	80059d8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	2120      	movs	r1, #32
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f82d 	bl	80059f8 <UART_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e023      	b.n	80059f0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d108      	bne.n	80059c2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	60ba      	str	r2, [r7, #8]
 80059bc:	b2ca      	uxtb	r2, r1
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e00a      	b.n	80059d8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d19d      	bne.n	800591e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e000      	b.n	80059f0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a08:	e02c      	b.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d028      	beq.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a18:	f7fc f84a 	bl	8001ab0 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d21d      	bcs.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e00f      	b.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	bf0c      	ite	eq
 8005a74:	2301      	moveq	r3, #1
 8005a76:	2300      	movne	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d0c3      	beq.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ace:	f023 030c 	bic.w	r3, r3, #12
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	f040 818b 	bne.w	8005e14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4ac1      	ldr	r2, [pc, #772]	; (8005e08 <UART_SetConfig+0x37c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d005      	beq.n	8005b14 <UART_SetConfig+0x88>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4abf      	ldr	r2, [pc, #764]	; (8005e0c <UART_SetConfig+0x380>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f040 80bd 	bne.w	8005c8e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7ff f9ee 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 8005b18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	461d      	mov	r5, r3
 8005b1e:	f04f 0600 	mov.w	r6, #0
 8005b22:	46a8      	mov	r8, r5
 8005b24:	46b1      	mov	r9, r6
 8005b26:	eb18 0308 	adds.w	r3, r8, r8
 8005b2a:	eb49 0409 	adc.w	r4, r9, r9
 8005b2e:	4698      	mov	r8, r3
 8005b30:	46a1      	mov	r9, r4
 8005b32:	eb18 0805 	adds.w	r8, r8, r5
 8005b36:	eb49 0906 	adc.w	r9, r9, r6
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b4e:	4688      	mov	r8, r1
 8005b50:	4691      	mov	r9, r2
 8005b52:	eb18 0005 	adds.w	r0, r8, r5
 8005b56:	eb49 0106 	adc.w	r1, r9, r6
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	461d      	mov	r5, r3
 8005b60:	f04f 0600 	mov.w	r6, #0
 8005b64:	196b      	adds	r3, r5, r5
 8005b66:	eb46 0406 	adc.w	r4, r6, r6
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	f7fa fb87 	bl	8000280 <__aeabi_uldivmod>
 8005b72:	4603      	mov	r3, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	461a      	mov	r2, r3
 8005b78:	4ba5      	ldr	r3, [pc, #660]	; (8005e10 <UART_SetConfig+0x384>)
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	461d      	mov	r5, r3
 8005b88:	f04f 0600 	mov.w	r6, #0
 8005b8c:	46a9      	mov	r9, r5
 8005b8e:	46b2      	mov	sl, r6
 8005b90:	eb19 0309 	adds.w	r3, r9, r9
 8005b94:	eb4a 040a 	adc.w	r4, sl, sl
 8005b98:	4699      	mov	r9, r3
 8005b9a:	46a2      	mov	sl, r4
 8005b9c:	eb19 0905 	adds.w	r9, r9, r5
 8005ba0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4692      	mov	sl, r2
 8005bbc:	eb19 0005 	adds.w	r0, r9, r5
 8005bc0:	eb4a 0106 	adc.w	r1, sl, r6
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f04f 0600 	mov.w	r6, #0
 8005bce:	196b      	adds	r3, r5, r5
 8005bd0:	eb46 0406 	adc.w	r4, r6, r6
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	f7fa fb52 	bl	8000280 <__aeabi_uldivmod>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	460c      	mov	r4, r1
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b8b      	ldr	r3, [pc, #556]	; (8005e10 <UART_SetConfig+0x384>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a86      	ldr	r2, [pc, #536]	; (8005e10 <UART_SetConfig+0x384>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	4498      	add	r8, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	461d      	mov	r5, r3
 8005c0a:	f04f 0600 	mov.w	r6, #0
 8005c0e:	46a9      	mov	r9, r5
 8005c10:	46b2      	mov	sl, r6
 8005c12:	eb19 0309 	adds.w	r3, r9, r9
 8005c16:	eb4a 040a 	adc.w	r4, sl, sl
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	eb19 0905 	adds.w	r9, r9, r5
 8005c22:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c3a:	4689      	mov	r9, r1
 8005c3c:	4692      	mov	sl, r2
 8005c3e:	eb19 0005 	adds.w	r0, r9, r5
 8005c42:	eb4a 0106 	adc.w	r1, sl, r6
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	f04f 0600 	mov.w	r6, #0
 8005c50:	196b      	adds	r3, r5, r5
 8005c52:	eb46 0406 	adc.w	r4, r6, r6
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	f7fa fb11 	bl	8000280 <__aeabi_uldivmod>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
 8005c62:	461a      	mov	r2, r3
 8005c64:	4b6a      	ldr	r3, [pc, #424]	; (8005e10 <UART_SetConfig+0x384>)
 8005c66:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	3332      	adds	r3, #50	; 0x32
 8005c78:	4a65      	ldr	r2, [pc, #404]	; (8005e10 <UART_SetConfig+0x384>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f003 0207 	and.w	r2, r3, #7
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4442      	add	r2, r8
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	e26f      	b.n	800616e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c8e:	f7ff f91d 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005c92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	461d      	mov	r5, r3
 8005c98:	f04f 0600 	mov.w	r6, #0
 8005c9c:	46a8      	mov	r8, r5
 8005c9e:	46b1      	mov	r9, r6
 8005ca0:	eb18 0308 	adds.w	r3, r8, r8
 8005ca4:	eb49 0409 	adc.w	r4, r9, r9
 8005ca8:	4698      	mov	r8, r3
 8005caa:	46a1      	mov	r9, r4
 8005cac:	eb18 0805 	adds.w	r8, r8, r5
 8005cb0:	eb49 0906 	adc.w	r9, r9, r6
 8005cb4:	f04f 0100 	mov.w	r1, #0
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cc8:	4688      	mov	r8, r1
 8005cca:	4691      	mov	r9, r2
 8005ccc:	eb18 0005 	adds.w	r0, r8, r5
 8005cd0:	eb49 0106 	adc.w	r1, r9, r6
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	461d      	mov	r5, r3
 8005cda:	f04f 0600 	mov.w	r6, #0
 8005cde:	196b      	adds	r3, r5, r5
 8005ce0:	eb46 0406 	adc.w	r4, r6, r6
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	f7fa faca 	bl	8000280 <__aeabi_uldivmod>
 8005cec:	4603      	mov	r3, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	4b47      	ldr	r3, [pc, #284]	; (8005e10 <UART_SetConfig+0x384>)
 8005cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf8:	095b      	lsrs	r3, r3, #5
 8005cfa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	461d      	mov	r5, r3
 8005d02:	f04f 0600 	mov.w	r6, #0
 8005d06:	46a9      	mov	r9, r5
 8005d08:	46b2      	mov	sl, r6
 8005d0a:	eb19 0309 	adds.w	r3, r9, r9
 8005d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8005d12:	4699      	mov	r9, r3
 8005d14:	46a2      	mov	sl, r4
 8005d16:	eb19 0905 	adds.w	r9, r9, r5
 8005d1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d32:	4689      	mov	r9, r1
 8005d34:	4692      	mov	sl, r2
 8005d36:	eb19 0005 	adds.w	r0, r9, r5
 8005d3a:	eb4a 0106 	adc.w	r1, sl, r6
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	461d      	mov	r5, r3
 8005d44:	f04f 0600 	mov.w	r6, #0
 8005d48:	196b      	adds	r3, r5, r5
 8005d4a:	eb46 0406 	adc.w	r4, r6, r6
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4623      	mov	r3, r4
 8005d52:	f7fa fa95 	bl	8000280 <__aeabi_uldivmod>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <UART_SetConfig+0x384>)
 8005d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2164      	movs	r1, #100	; 0x64
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	3332      	adds	r3, #50	; 0x32
 8005d70:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <UART_SetConfig+0x384>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d7e:	4498      	add	r8, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	461d      	mov	r5, r3
 8005d84:	f04f 0600 	mov.w	r6, #0
 8005d88:	46a9      	mov	r9, r5
 8005d8a:	46b2      	mov	sl, r6
 8005d8c:	eb19 0309 	adds.w	r3, r9, r9
 8005d90:	eb4a 040a 	adc.w	r4, sl, sl
 8005d94:	4699      	mov	r9, r3
 8005d96:	46a2      	mov	sl, r4
 8005d98:	eb19 0905 	adds.w	r9, r9, r5
 8005d9c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005da0:	f04f 0100 	mov.w	r1, #0
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005db0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005db4:	4689      	mov	r9, r1
 8005db6:	4692      	mov	sl, r2
 8005db8:	eb19 0005 	adds.w	r0, r9, r5
 8005dbc:	eb4a 0106 	adc.w	r1, sl, r6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	f04f 0600 	mov.w	r6, #0
 8005dca:	196b      	adds	r3, r5, r5
 8005dcc:	eb46 0406 	adc.w	r4, r6, r6
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	f7fa fa54 	bl	8000280 <__aeabi_uldivmod>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <UART_SetConfig+0x384>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <UART_SetConfig+0x384>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 0207 	and.w	r2, r3, #7
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4442      	add	r2, r8
 8005e04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e06:	e1b2      	b.n	800616e <UART_SetConfig+0x6e2>
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	40011400 	.word	0x40011400
 8005e10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4ad7      	ldr	r2, [pc, #860]	; (8006178 <UART_SetConfig+0x6ec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d005      	beq.n	8005e2a <UART_SetConfig+0x39e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4ad6      	ldr	r2, [pc, #856]	; (800617c <UART_SetConfig+0x6f0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	f040 80d1 	bne.w	8005fcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e2a:	f7ff f863 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 8005e2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	469a      	mov	sl, r3
 8005e34:	f04f 0b00 	mov.w	fp, #0
 8005e38:	46d0      	mov	r8, sl
 8005e3a:	46d9      	mov	r9, fp
 8005e3c:	eb18 0308 	adds.w	r3, r8, r8
 8005e40:	eb49 0409 	adc.w	r4, r9, r9
 8005e44:	4698      	mov	r8, r3
 8005e46:	46a1      	mov	r9, r4
 8005e48:	eb18 080a 	adds.w	r8, r8, sl
 8005e4c:	eb49 090b 	adc.w	r9, r9, fp
 8005e50:	f04f 0100 	mov.w	r1, #0
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e64:	4688      	mov	r8, r1
 8005e66:	4691      	mov	r9, r2
 8005e68:	eb1a 0508 	adds.w	r5, sl, r8
 8005e6c:	eb4b 0609 	adc.w	r6, fp, r9
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4619      	mov	r1, r3
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f04f 0400 	mov.w	r4, #0
 8005e82:	0094      	lsls	r4, r2, #2
 8005e84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e88:	008b      	lsls	r3, r1, #2
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	4631      	mov	r1, r6
 8005e92:	f7fa f9f5 	bl	8000280 <__aeabi_uldivmod>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4bb8      	ldr	r3, [pc, #736]	; (8006180 <UART_SetConfig+0x6f4>)
 8005e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	469b      	mov	fp, r3
 8005eac:	f04f 0c00 	mov.w	ip, #0
 8005eb0:	46d9      	mov	r9, fp
 8005eb2:	46e2      	mov	sl, ip
 8005eb4:	eb19 0309 	adds.w	r3, r9, r9
 8005eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ebc:	4699      	mov	r9, r3
 8005ebe:	46a2      	mov	sl, r4
 8005ec0:	eb19 090b 	adds.w	r9, r9, fp
 8005ec4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005edc:	4689      	mov	r9, r1
 8005ede:	4692      	mov	sl, r2
 8005ee0:	eb1b 0509 	adds.w	r5, fp, r9
 8005ee4:	eb4c 060a 	adc.w	r6, ip, sl
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	f04f 0400 	mov.w	r4, #0
 8005efa:	0094      	lsls	r4, r2, #2
 8005efc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f00:	008b      	lsls	r3, r1, #2
 8005f02:	461a      	mov	r2, r3
 8005f04:	4623      	mov	r3, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	4631      	mov	r1, r6
 8005f0a:	f7fa f9b9 	bl	8000280 <__aeabi_uldivmod>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	460c      	mov	r4, r1
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <UART_SetConfig+0x6f4>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a95      	ldr	r2, [pc, #596]	; (8006180 <UART_SetConfig+0x6f4>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f34:	4498      	add	r8, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	469b      	mov	fp, r3
 8005f3a:	f04f 0c00 	mov.w	ip, #0
 8005f3e:	46d9      	mov	r9, fp
 8005f40:	46e2      	mov	sl, ip
 8005f42:	eb19 0309 	adds.w	r3, r9, r9
 8005f46:	eb4a 040a 	adc.w	r4, sl, sl
 8005f4a:	4699      	mov	r9, r3
 8005f4c:	46a2      	mov	sl, r4
 8005f4e:	eb19 090b 	adds.w	r9, r9, fp
 8005f52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	4692      	mov	sl, r2
 8005f6e:	eb1b 0509 	adds.w	r5, fp, r9
 8005f72:	eb4c 060a 	adc.w	r6, ip, sl
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	f04f 0400 	mov.w	r4, #0
 8005f88:	0094      	lsls	r4, r2, #2
 8005f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f8e:	008b      	lsls	r3, r1, #2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4623      	mov	r3, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	4631      	mov	r1, r6
 8005f98:	f7fa f972 	bl	8000280 <__aeabi_uldivmod>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4b77      	ldr	r3, [pc, #476]	; (8006180 <UART_SetConfig+0x6f4>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	; 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	3332      	adds	r3, #50	; 0x32
 8005fb6:	4a72      	ldr	r2, [pc, #456]	; (8006180 <UART_SetConfig+0x6f4>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4442      	add	r2, r8
 8005fc8:	609a      	str	r2, [r3, #8]
 8005fca:	e0d0      	b.n	800616e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fe ff7e 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005fd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	469a      	mov	sl, r3
 8005fd6:	f04f 0b00 	mov.w	fp, #0
 8005fda:	46d0      	mov	r8, sl
 8005fdc:	46d9      	mov	r9, fp
 8005fde:	eb18 0308 	adds.w	r3, r8, r8
 8005fe2:	eb49 0409 	adc.w	r4, r9, r9
 8005fe6:	4698      	mov	r8, r3
 8005fe8:	46a1      	mov	r9, r4
 8005fea:	eb18 080a 	adds.w	r8, r8, sl
 8005fee:	eb49 090b 	adc.w	r9, r9, fp
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ffe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006002:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006006:	4688      	mov	r8, r1
 8006008:	4691      	mov	r9, r2
 800600a:	eb1a 0508 	adds.w	r5, sl, r8
 800600e:	eb4b 0609 	adc.w	r6, fp, r9
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	4619      	mov	r1, r3
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	0094      	lsls	r4, r2, #2
 8006026:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800602a:	008b      	lsls	r3, r1, #2
 800602c:	461a      	mov	r2, r3
 800602e:	4623      	mov	r3, r4
 8006030:	4628      	mov	r0, r5
 8006032:	4631      	mov	r1, r6
 8006034:	f7fa f924 	bl	8000280 <__aeabi_uldivmod>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	461a      	mov	r2, r3
 800603e:	4b50      	ldr	r3, [pc, #320]	; (8006180 <UART_SetConfig+0x6f4>)
 8006040:	fba3 2302 	umull	r2, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	469b      	mov	fp, r3
 800604e:	f04f 0c00 	mov.w	ip, #0
 8006052:	46d9      	mov	r9, fp
 8006054:	46e2      	mov	sl, ip
 8006056:	eb19 0309 	adds.w	r3, r9, r9
 800605a:	eb4a 040a 	adc.w	r4, sl, sl
 800605e:	4699      	mov	r9, r3
 8006060:	46a2      	mov	sl, r4
 8006062:	eb19 090b 	adds.w	r9, r9, fp
 8006066:	eb4a 0a0c 	adc.w	sl, sl, ip
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800607a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800607e:	4689      	mov	r9, r1
 8006080:	4692      	mov	sl, r2
 8006082:	eb1b 0509 	adds.w	r5, fp, r9
 8006086:	eb4c 060a 	adc.w	r6, ip, sl
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	f04f 0400 	mov.w	r4, #0
 800609c:	0094      	lsls	r4, r2, #2
 800609e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060a2:	008b      	lsls	r3, r1, #2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	4631      	mov	r1, r6
 80060ac:	f7fa f8e8 	bl	8000280 <__aeabi_uldivmod>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b32      	ldr	r3, [pc, #200]	; (8006180 <UART_SetConfig+0x6f4>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a2d      	ldr	r2, [pc, #180]	; (8006180 <UART_SetConfig+0x6f4>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d6:	4498      	add	r8, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	469b      	mov	fp, r3
 80060dc:	f04f 0c00 	mov.w	ip, #0
 80060e0:	46d9      	mov	r9, fp
 80060e2:	46e2      	mov	sl, ip
 80060e4:	eb19 0309 	adds.w	r3, r9, r9
 80060e8:	eb4a 040a 	adc.w	r4, sl, sl
 80060ec:	4699      	mov	r9, r3
 80060ee:	46a2      	mov	sl, r4
 80060f0:	eb19 090b 	adds.w	r9, r9, fp
 80060f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006104:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006108:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800610c:	4689      	mov	r9, r1
 800610e:	4692      	mov	sl, r2
 8006110:	eb1b 0509 	adds.w	r5, fp, r9
 8006114:	eb4c 060a 	adc.w	r6, ip, sl
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4619      	mov	r1, r3
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	0094      	lsls	r4, r2, #2
 800612c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	461a      	mov	r2, r3
 8006134:	4623      	mov	r3, r4
 8006136:	4628      	mov	r0, r5
 8006138:	4631      	mov	r1, r6
 800613a:	f7fa f8a1 	bl	8000280 <__aeabi_uldivmod>
 800613e:	4603      	mov	r3, r0
 8006140:	460c      	mov	r4, r1
 8006142:	461a      	mov	r2, r3
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <UART_SetConfig+0x6f4>)
 8006146:	fba3 1302 	umull	r1, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2164      	movs	r1, #100	; 0x64
 800614e:	fb01 f303 	mul.w	r3, r1, r3
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	3332      	adds	r3, #50	; 0x32
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <UART_SetConfig+0x6f4>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	f003 020f 	and.w	r2, r3, #15
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4442      	add	r2, r8
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	e7ff      	b.n	800616e <UART_SetConfig+0x6e2>
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006178:	40011000 	.word	0x40011000
 800617c:	40011400 	.word	0x40011400
 8006180:	51eb851f 	.word	0x51eb851f

08006184 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006184:	b084      	sub	sp, #16
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	f107 001c 	add.w	r0, r7, #28
 8006192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2b01      	cmp	r3, #1
 800619a:	d122      	bne.n	80061e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f94a 	bl	8006470 <USB_CoreReset>
 80061dc:	4603      	mov	r3, r0
 80061de:	73fb      	strb	r3, [r7, #15]
 80061e0:	e01a      	b.n	8006218 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f93e 	bl	8006470 <USB_CoreReset>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
 800620a:	e005      	b.n	8006218 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10b      	bne.n	8006236 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f043 0206 	orr.w	r2, r3, #6
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006242:	b004      	add	sp, #16
 8006244:	4770      	bx	lr

08006246 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 0201 	bic.w	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d106      	bne.n	80062b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
 80062b4:	e00b      	b.n	80062ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e001      	b.n	80062ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e003      	b.n	80062d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80062ce:	2032      	movs	r0, #50	; 0x32
 80062d0:	f7fb fbfa 	bl	8001ac8 <HAL_Delay>

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	019b      	lsls	r3, r3, #6
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a09      	ldr	r2, [pc, #36]	; (8006328 <USB_FlushTxFifo+0x48>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e006      	b.n	800631a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f003 0320 	and.w	r3, r3, #32
 8006314:	2b20      	cmp	r3, #32
 8006316:	d0f0      	beq.n	80062fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	00030d40 	.word	0x00030d40

0800632c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2210      	movs	r2, #16
 800633c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3301      	adds	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <USB_FlushRxFifo+0x40>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d901      	bls.n	8006350 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e006      	b.n	800635e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d0f0      	beq.n	800633e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	00030d40 	.word	0x00030d40

08006370 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006370:	b480      	push	{r7}
 8006372:	b089      	sub	sp, #36	; 0x24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	460b      	mov	r3, r1
 8006380:	71fb      	strb	r3, [r7, #7]
 8006382:	4613      	mov	r3, r2
 8006384:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800638e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11a      	bne.n	80063cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006396:	88bb      	ldrh	r3, [r7, #4]
 8006398:	3303      	adds	r3, #3
 800639a:	089b      	lsrs	r3, r3, #2
 800639c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e00f      	b.n	80063c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	031a      	lsls	r2, r3, #12
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	461a      	mov	r2, r3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3304      	adds	r3, #4
 80063bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	3301      	adds	r3, #1
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3eb      	bcc.n	80063a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3724      	adds	r7, #36	; 0x24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063da:	b480      	push	{r7}
 80063dc:	b089      	sub	sp, #36	; 0x24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	3303      	adds	r3, #3
 80063f4:	089b      	lsrs	r3, r3, #2
 80063f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e00b      	b.n	8006416 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	601a      	str	r2, [r3, #0]
    pDest++;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	3304      	adds	r3, #4
 800640e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	3301      	adds	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	429a      	cmp	r2, r3
 800641c:	d3ef      	bcc.n	80063fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800641e:	69fb      	ldr	r3, [r7, #28]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3724      	adds	r7, #36	; 0x24
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4013      	ands	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 0301 	and.w	r3, r3, #1
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <USB_CoreReset+0x64>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e01b      	b.n	80064c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	daf2      	bge.n	800647c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f043 0201 	orr.w	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <USB_CoreReset+0x64>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e006      	b.n	80064c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d0f0      	beq.n	80064a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	00030d40 	.word	0x00030d40

080064d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d8:	b084      	sub	sp, #16
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	f107 001c 	add.w	r0, r7, #28
 80064e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f4:	461a      	mov	r2, r3
 80064f6:	2300      	movs	r3, #0
 80064f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10a      	bne.n	8006546 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800653e:	f043 0304 	orr.w	r3, r3, #4
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	e014      	b.n	8006570 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e009      	b.n	8006570 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800656a:	f023 0304 	bic.w	r3, r3, #4
 800656e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006570:	2110      	movs	r1, #16
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff feb4 	bl	80062e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fed7 	bl	800632c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	e015      	b.n	80065b0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	461a      	mov	r2, r3
 8006592:	f04f 33ff 	mov.w	r3, #4294967295
 8006596:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3e5      	bcc.n	8006584 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80065b8:	2101      	movs	r1, #1
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8ac 	bl	8006718 <USB_DriveVbus>

  HAL_Delay(200U);
 80065c0:	20c8      	movs	r0, #200	; 0xc8
 80065c2:	f7fb fa81 	bl	8001ac8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f04f 32ff 	mov.w	r2, #4294967295
 80065d2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a14      	ldr	r2, [pc, #80]	; (800663c <USB_HostInit+0x164>)
 80065ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <USB_HostInit+0x168>)
 80065f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80065f6:	e009      	b.n	800660c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2280      	movs	r2, #128	; 0x80
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a10      	ldr	r2, [pc, #64]	; (8006644 <USB_HostInit+0x16c>)
 8006602:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a10      	ldr	r2, [pc, #64]	; (8006648 <USB_HostInit+0x170>)
 8006608:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	2b00      	cmp	r3, #0
 8006610:	d105      	bne.n	800661e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f043 0210 	orr.w	r2, r3, #16
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	4b0a      	ldr	r3, [pc, #40]	; (800664c <USB_HostInit+0x174>)
 8006624:	4313      	orrs	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006636:	b004      	add	sp, #16
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	01000200 	.word	0x01000200
 8006640:	00e00300 	.word	0x00e00300
 8006644:	00600080 	.word	0x00600080
 8006648:	004000e0 	.word	0x004000e0
 800664c:	a3200008 	.word	0xa3200008

08006650 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006688:	4313      	orrs	r3, r2
 800668a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006698:	461a      	mov	r2, r3
 800669a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800669e:	6053      	str	r3, [r2, #4]
 80066a0:	e009      	b.n	80066b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d106      	bne.n	80066b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ae:	461a      	mov	r2, r3
 80066b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80066b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066f4:	2064      	movs	r0, #100	; 0x64
 80066f6:	f7fb f9e7 	bl	8001ac8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006708:	200a      	movs	r0, #10
 800670a:	f7fb f9dd 	bl	8001ac8 <HAL_Delay>

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800673c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <USB_DriveVbus+0x44>
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d106      	bne.n	800675c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800675a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006766:	d109      	bne.n	800677c <USB_DriveVbus+0x64>
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800677a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	0c5b      	lsrs	r3, r3, #17
 80067a8:	f003 0303 	and.w	r3, r3, #3
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	b29b      	uxth	r3, r3
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
	...

080067dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	70fb      	strb	r3, [r7, #3]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70bb      	strb	r3, [r7, #2]
 80067f2:	4613      	mov	r3, r2
 80067f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006812:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006816:	2b03      	cmp	r3, #3
 8006818:	d87e      	bhi.n	8006918 <USB_HC_Init+0x13c>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <USB_HC_Init+0x44>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006831 	.word	0x08006831
 8006824:	080068db 	.word	0x080068db
 8006828:	08006831 	.word	0x08006831
 800682c:	0800689d 	.word	0x0800689d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	461a      	mov	r2, r3
 800683e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006842:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006844:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006848:	2b00      	cmp	r3, #0
 800684a:	da10      	bge.n	800686e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	78fa      	ldrb	r2, [r7, #3]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	440a      	add	r2, r1
 8006862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800686c:	e057      	b.n	800691e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d051      	beq.n	800691e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	440a      	add	r2, r1
 8006890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006894:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006898:	60d3      	str	r3, [r2, #12]
      break;
 800689a:	e040      	b.n	800691e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800689c:	78fb      	ldrb	r3, [r7, #3]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a8:	461a      	mov	r2, r3
 80068aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80068ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da34      	bge.n	8006922 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	78fa      	ldrb	r2, [r7, #3]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068d8:	e023      	b.n	8006922 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	f240 2325 	movw	r3, #549	; 0x225
 80068ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	da17      	bge.n	8006926 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	440a      	add	r2, r1
 800690c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006910:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006914:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006916:	e006      	b.n	8006926 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	75fb      	strb	r3, [r7, #23]
      break;
 800691c:	e004      	b.n	8006928 <USB_HC_Init+0x14c>
      break;
 800691e:	bf00      	nop
 8006920:	e002      	b.n	8006928 <USB_HC_Init+0x14c>
      break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <USB_HC_Init+0x14c>
      break;
 8006926:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	2101      	movs	r1, #1
 8006938:	fa01 f303 	lsl.w	r3, r1, r3
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006942:	4313      	orrs	r3, r2
 8006944:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006952:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006956:	2b00      	cmp	r3, #0
 8006958:	da03      	bge.n	8006962 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	e001      	b.n	8006966 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d103      	bne.n	8006976 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800696e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e001      	b.n	800697a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800697a:	787b      	ldrb	r3, [r7, #1]
 800697c:	059b      	lsls	r3, r3, #22
 800697e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006982:	78bb      	ldrb	r3, [r7, #2]
 8006984:	02db      	lsls	r3, r3, #11
 8006986:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800698a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800698c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006990:	049b      	lsls	r3, r3, #18
 8006992:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006996:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006998:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800699a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800699e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	0159      	lsls	r1, r3, #5
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069b6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80069b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d10f      	bne.n	80069e0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069de:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop

080069f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08c      	sub	sp, #48	; 0x30
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a0c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d028      	beq.n	8006a6c <USB_HC_StartXfer+0x7c>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d124      	bne.n	8006a6c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10b      	bne.n	8006a40 <USB_HC_StartXfer+0x50>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	795b      	ldrb	r3, [r3, #5]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d107      	bne.n	8006a40 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	4619      	mov	r1, r3
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fa30 	bl	8006e9c <USB_DoPing>
      return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e114      	b.n	8006c6a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d112      	bne.n	8006a6c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	6a3a      	ldr	r2, [r7, #32]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a60:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006a64:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d018      	beq.n	8006aa6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	8912      	ldrh	r2, [r2, #8]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	8912      	ldrh	r2, [r2, #8]
 8006a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a88:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a8c:	8b7b      	ldrh	r3, [r7, #26]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d90b      	bls.n	8006aaa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006a92:	8b7b      	ldrh	r3, [r7, #26]
 8006a94:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	8912      	ldrh	r2, [r2, #8]
 8006a9c:	fb02 f203 	mul.w	r2, r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	611a      	str	r2, [r3, #16]
 8006aa4:	e001      	b.n	8006aaa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d006      	beq.n	8006ac0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006ab2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	8912      	ldrh	r2, [r2, #8]
 8006ab8:	fb02 f203 	mul.w	r2, r2, r3
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006aca:	04d9      	lsls	r1, r3, #19
 8006acc:	4b69      	ldr	r3, [pc, #420]	; (8006c74 <USB_HC_StartXfer+0x284>)
 8006ace:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ad0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	7a9b      	ldrb	r3, [r3, #10]
 8006ad6:	075b      	lsls	r3, r3, #29
 8006ad8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006adc:	69f9      	ldr	r1, [r7, #28]
 8006ade:	0148      	lsls	r0, r1, #5
 8006ae0:	6a39      	ldr	r1, [r7, #32]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ae8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006aea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d009      	beq.n	8006b06 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	460a      	mov	r2, r1
 8006b04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	bf0c      	ite	eq
 8006b16:	2301      	moveq	r3, #1
 8006b18:	2300      	movne	r3, #0
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	6a3a      	ldr	r2, [r7, #32]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	7e7b      	ldrb	r3, [r7, #25]
 8006b4e:	075b      	lsls	r3, r3, #29
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	0148      	lsls	r0, r1, #5
 8006b54:	6a39      	ldr	r1, [r7, #32]
 8006b56:	4401      	add	r1, r0
 8006b58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a42      	ldr	r2, [pc, #264]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b70:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b72:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b7a:	4a3f      	ldr	r2, [pc, #252]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b7c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b86:	4b3c      	ldr	r3, [pc, #240]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b8e:	4a3a      	ldr	r2, [pc, #232]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e005      	b.n	8006ba0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b94:	4b38      	ldr	r3, [pc, #224]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b9c:	4a36      	ldr	r2, [pc, #216]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006b9e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ba0:	4b35      	ldr	r3, [pc, #212]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	4a33      	ldr	r2, [pc, #204]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006baa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <USB_HC_StartXfer+0x288>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e04f      	b.n	8006c6a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	78db      	ldrb	r3, [r3, #3]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d14a      	bne.n	8006c68 <USB_HC_StartXfer+0x278>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d046      	beq.n	8006c68 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	79db      	ldrb	r3, [r3, #7]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d830      	bhi.n	8006c44 <USB_HC_StartXfer+0x254>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <USB_HC_StartXfer+0x1f8>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006bf9 	.word	0x08006bf9
 8006bec:	08006c1d 	.word	0x08006c1d
 8006bf0:	08006bf9 	.word	0x08006bf9
 8006bf4:	08006c1d 	.word	0x08006c1d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	3303      	adds	r3, #3
 8006bfe:	089b      	lsrs	r3, r3, #2
 8006c00:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c02:	8afa      	ldrh	r2, [r7, #22]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d91c      	bls.n	8006c48 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f043 0220 	orr.w	r2, r3, #32
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c1a:	e015      	b.n	8006c48 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	3303      	adds	r3, #3
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c26:	8afa      	ldrh	r2, [r7, #22]
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d90a      	bls.n	8006c4c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c42:	e003      	b.n	8006c4c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006c44:	bf00      	nop
 8006c46:	e002      	b.n	8006c4e <USB_HC_StartXfer+0x25e>
        break;
 8006c48:	bf00      	nop
 8006c4a:	e000      	b.n	8006c4e <USB_HC_StartXfer+0x25e>
        break;
 8006c4c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	68d9      	ldr	r1, [r3, #12]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	785a      	ldrb	r2, [r3, #1]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	b298      	uxth	r0, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4603      	mov	r3, r0
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff fb84 	bl	8006370 <USB_WritePacket>
  }

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3728      	adds	r7, #40	; 0x28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	1ff80000 	.word	0x1ff80000
 8006c78:	200000b4 	.word	0x200000b4

08006c7c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	b29b      	uxth	r3, r3
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	b087      	sub	sp, #28
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	0c9b      	lsrs	r3, r3, #18
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <USB_HC_Halt+0x3a>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d16c      	bne.n	8006db2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cf6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d143      	bne.n	8006d8c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	0151      	lsls	r1, r2, #5
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	440a      	add	r2, r1
 8006d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d62:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	3301      	adds	r3, #1
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d70:	d81d      	bhi.n	8006dae <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d88:	d0ec      	beq.n	8006d64 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d8a:	e080      	b.n	8006e8e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006daa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dac:	e06f      	b.n	8006e8e <USB_HC_Halt+0x1f0>
          break;
 8006dae:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006db0:	e06d      	b.n	8006e8e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	0151      	lsls	r1, r2, #5
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	440a      	add	r2, r1
 8006dc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d143      	bne.n	8006e6a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e40:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	3301      	adds	r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e4e:	d81d      	bhi.n	8006e8c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e66:	d0ec      	beq.n	8006e42 <USB_HC_Halt+0x1a4>
 8006e68:	e011      	b.n	8006e8e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	e000      	b.n	8006e8e <USB_HC_Halt+0x1f0>
          break;
 8006e8c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	04da      	lsls	r2, r3, #19
 8006eb8:	4b15      	ldr	r3, [pc, #84]	; (8006f10 <USB_DoPing+0x74>)
 8006eba:	4013      	ands	r3, r2
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ecc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ee4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	461a      	mov	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	1ff80000 	.word	0x1ff80000

08006f14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7ff f99f 	bl	8006268 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006f2a:	2110      	movs	r1, #16
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff f9d7 	bl	80062e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff f9fa 	bl	800632c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	e01f      	b.n	8006f7e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f54:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f64:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d9dc      	bls.n	8006f3e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	e034      	b.n	8006ff4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fa8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fb0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fd0:	d80c      	bhi.n	8006fec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fe8:	d0ec      	beq.n	8006fc4 <USB_StopHost+0xb0>
 8006fea:	e000      	b.n	8006fee <USB_StopHost+0xda>
        break;
 8006fec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b0f      	cmp	r3, #15
 8006ff8:	d9c7      	bls.n	8006f8a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007000:	461a      	mov	r2, r3
 8007002:	f04f 33ff 	mov.w	r3, #4294967295
 8007006:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f04f 32ff 	mov.w	r2, #4294967295
 800700e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff f918 	bl	8006246 <USB_EnableGlobalInt>

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007020:	b590      	push	{r4, r7, lr}
 8007022:	b089      	sub	sp, #36	; 0x24
 8007024:	af04      	add	r7, sp, #16
 8007026:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007028:	2301      	movs	r3, #1
 800702a:	2202      	movs	r2, #2
 800702c:	2102      	movs	r1, #2
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fc68 	bl	8007904 <USBH_FindInterface>
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2bff      	cmp	r3, #255	; 0xff
 800703c:	d002      	beq.n	8007044 <USBH_CDC_InterfaceInit+0x24>
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d901      	bls.n	8007048 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007044:	2302      	movs	r3, #2
 8007046:	e13d      	b.n	80072c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc3d 	bl	80078cc <USBH_SelectInterface>
 8007052:	4603      	mov	r3, r0
 8007054:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800705c:	2302      	movs	r3, #2
 800705e:	e131      	b.n	80072c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007066:	2050      	movs	r0, #80	; 0x50
 8007068:	f002 fa04 	bl	8009474 <malloc>
 800706c:	4603      	mov	r3, r0
 800706e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	e11f      	b.n	80072c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007084:	2250      	movs	r2, #80	; 0x50
 8007086:	2100      	movs	r1, #0
 8007088:	68b8      	ldr	r0, [r7, #8]
 800708a:	f002 fa03 	bl	8009494 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	211a      	movs	r1, #26
 8007094:	fb01 f303 	mul.w	r3, r1, r3
 8007098:	4413      	add	r3, r2
 800709a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da15      	bge.n	80070d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	211a      	movs	r1, #26
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070b6:	781a      	ldrb	r2, [r3, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	211a      	movs	r1, #26
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070cc:	881a      	ldrh	r2, [r3, #0]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fe36 	bl	8008d4a <USBH_AllocPipe>
 80070de:	4603      	mov	r3, r0
 80070e0:	461a      	mov	r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	7819      	ldrb	r1, [r3, #0]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	7858      	ldrb	r0, [r3, #1]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	8952      	ldrh	r2, [r2, #10]
 80070fe:	9202      	str	r2, [sp, #8]
 8007100:	2203      	movs	r2, #3
 8007102:	9201      	str	r2, [sp, #4]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4623      	mov	r3, r4
 8007108:	4602      	mov	r2, r0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fdee 	bl	8008cec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2200      	movs	r2, #0
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f002 f8fb 	bl	8009314 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800711e:	2300      	movs	r3, #0
 8007120:	2200      	movs	r2, #0
 8007122:	210a      	movs	r1, #10
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fbed 	bl	8007904 <USBH_FindInterface>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2bff      	cmp	r3, #255	; 0xff
 8007132:	d002      	beq.n	800713a <USBH_CDC_InterfaceInit+0x11a>
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d901      	bls.n	800713e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800713a:	2302      	movs	r3, #2
 800713c:	e0c2      	b.n	80072c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	211a      	movs	r1, #26
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b25b      	sxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	da16      	bge.n	8007184 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	211a      	movs	r1, #26
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	211a      	movs	r1, #26
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	835a      	strh	r2, [r3, #26]
 8007182:	e015      	b.n	80071b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	211a      	movs	r1, #26
 800718a:	fb01 f303 	mul.w	r3, r1, r3
 800718e:	4413      	add	r3, r2
 8007190:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007194:	781a      	ldrb	r2, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	211a      	movs	r1, #26
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071aa:	881a      	ldrh	r2, [r3, #0]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	211a      	movs	r1, #26
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	b25b      	sxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da16      	bge.n	80071f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	211a      	movs	r1, #26
 80071ce:	fb01 f303 	mul.w	r3, r1, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	211a      	movs	r1, #26
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	835a      	strh	r2, [r3, #26]
 80071f4:	e015      	b.n	8007222 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	211a      	movs	r1, #26
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	4413      	add	r3, r2
 8007202:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	211a      	movs	r1, #26
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800721c:	881a      	ldrh	r2, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	7b9b      	ldrb	r3, [r3, #14]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fd8e 	bl	8008d4a <USBH_AllocPipe>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	7bdb      	ldrb	r3, [r3, #15]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fd84 	bl	8008d4a <USBH_AllocPipe>
 8007242:	4603      	mov	r3, r0
 8007244:	461a      	mov	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	7b59      	ldrb	r1, [r3, #13]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	7b98      	ldrb	r0, [r3, #14]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	8b12      	ldrh	r2, [r2, #24]
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	2202      	movs	r2, #2
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4623      	mov	r3, r4
 800726c:	4602      	mov	r2, r0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fd3c 	bl	8008cec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	7b19      	ldrb	r1, [r3, #12]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	7bd8      	ldrb	r0, [r3, #15]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	8b52      	ldrh	r2, [r2, #26]
 800728c:	9202      	str	r2, [sp, #8]
 800728e:	2202      	movs	r2, #2
 8007290:	9201      	str	r2, [sp, #4]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4623      	mov	r3, r4
 8007296:	4602      	mov	r2, r0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fd27 	bl	8008cec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	7b5b      	ldrb	r3, [r3, #13]
 80072aa:	2200      	movs	r2, #0
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f002 f830 	bl	8009314 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	7b1b      	ldrb	r3, [r3, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f002 f829 	bl	8009314 <USBH_LL_SetToggle>

  return USBH_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd90      	pop	{r4, r7, pc}

080072cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fd1c 	bl	8008d2a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fd47 	bl	8008d8c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	7b1b      	ldrb	r3, [r3, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	7b1b      	ldrb	r3, [r3, #12]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 fd09 	bl	8008d2a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	7b1b      	ldrb	r3, [r3, #12]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f001 fd34 	bl	8008d8c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	7b5b      	ldrb	r3, [r3, #13]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00e      	beq.n	8007350 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	7b5b      	ldrb	r3, [r3, #13]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fcf6 	bl	8008d2a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	7b5b      	ldrb	r3, [r3, #13]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fd21 	bl	8008d8c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	4618      	mov	r0, r3
 8007366:	f002 f88d 	bl	8009484 <free>
    phost->pActiveClass->pData = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007370:	2200      	movs	r2, #0
 8007372:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3340      	adds	r3, #64	; 0x40
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f8b1 	bl	80074fe <GetLineCoding>
 800739c:	4603      	mov	r3, r0
 800739e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073ac:	2102      	movs	r1, #2
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073b2:	7afb      	ldrb	r3, [r7, #11]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d877      	bhi.n	80074d0 <USBH_CDC_Process+0x114>
 80073e0:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <USBH_CDC_Process+0x2c>)
 80073e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e6:	bf00      	nop
 80073e8:	080073fd 	.word	0x080073fd
 80073ec:	08007403 	.word	0x08007403
 80073f0:	08007433 	.word	0x08007433
 80073f4:	080074a7 	.word	0x080074a7
 80073f8:	080074b5 	.word	0x080074b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e06d      	b.n	80074de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f897 	bl	800753c <SetLineCoding>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d104      	bne.n	8007422 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007420:	e058      	b.n	80074d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d055      	beq.n	80074d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2204      	movs	r2, #4
 800742c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007430:	e050      	b.n	80074d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	3340      	adds	r3, #64	; 0x40
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f860 	bl	80074fe <GetLineCoding>
 800743e:	4603      	mov	r3, r0
 8007440:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d126      	bne.n	8007496 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745a:	791b      	ldrb	r3, [r3, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d13b      	bne.n	80074d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800746a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800746c:	429a      	cmp	r2, r3
 800746e:	d133      	bne.n	80074d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800747a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800747c:	429a      	cmp	r2, r3
 800747e:	d12b      	bne.n	80074d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800748a:	429a      	cmp	r2, r3
 800748c:	d124      	bne.n	80074d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f95a 	bl	8007748 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007494:	e020      	b.n	80074d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d01d      	beq.n	80074d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2204      	movs	r2, #4
 80074a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074a4:	e018      	b.n	80074d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f867 	bl	800757a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8dc 	bl	800766a <CDC_ProcessReception>
      break;
 80074b2:	e014      	b.n	80074de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074b4:	2100      	movs	r1, #0
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 ffe5 	bl	8008486 <USBH_ClrFeature>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80074ce:	e005      	b.n	80074dc <USBH_CDC_Process+0x120>

    default:
      break;
 80074d0:	bf00      	nop
 80074d2:	e004      	b.n	80074de <USBH_CDC_Process+0x122>
      break;
 80074d4:	bf00      	nop
 80074d6:	e002      	b.n	80074de <USBH_CDC_Process+0x122>
      break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <USBH_CDC_Process+0x122>
      break;
 80074dc:	bf00      	nop

  }

  return status;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	22a1      	movs	r2, #161	; 0xa1
 800750c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2221      	movs	r2, #33	; 0x21
 8007512:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2207      	movs	r2, #7
 8007524:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2207      	movs	r2, #7
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f98a 	bl	8008846 <USBH_CtlReq>
 8007532:	4603      	mov	r3, r0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2221      	movs	r2, #33	; 0x21
 800754a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2207      	movs	r2, #7
 8007562:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2207      	movs	r2, #7
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 f96b 	bl	8008846 <USBH_CtlReq>
 8007570:	4603      	mov	r3, r0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b086      	sub	sp, #24
 800757e:	af02      	add	r7, sp, #8
 8007580:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800758c:	2300      	movs	r3, #0
 800758e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007596:	2b01      	cmp	r3, #1
 8007598:	d002      	beq.n	80075a0 <CDC_ProcessTransmission+0x26>
 800759a:	2b02      	cmp	r3, #2
 800759c:	d025      	beq.n	80075ea <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800759e:	e060      	b.n	8007662 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	8b12      	ldrh	r2, [r2, #24]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d90c      	bls.n	80075c6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	69d9      	ldr	r1, [r3, #28]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8b1a      	ldrh	r2, [r3, #24]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	7b58      	ldrb	r0, [r3, #13]
 80075b8:	2301      	movs	r3, #1
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	4603      	mov	r3, r0
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fb51 	bl	8008c66 <USBH_BulkSendData>
 80075c4:	e00c      	b.n	80075e0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	7b58      	ldrb	r0, [r3, #13]
 80075d4:	2301      	movs	r3, #1
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4603      	mov	r3, r0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 fb43 	bl	8008c66 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075e8:	e03b      	b.n	8007662 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	7b5b      	ldrb	r3, [r3, #13]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fe65 	bl	80092c0 <USBH_LL_GetURBState>
 80075f6:	4603      	mov	r3, r0
 80075f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d128      	bne.n	8007652 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	8b12      	ldrh	r2, [r2, #24]
 8007608:	4293      	cmp	r3, r2
 800760a:	d90e      	bls.n	800762a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	8b12      	ldrh	r2, [r2, #24]
 8007614:	1a9a      	subs	r2, r3, r2
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	8b12      	ldrh	r2, [r2, #24]
 8007622:	441a      	add	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	61da      	str	r2, [r3, #28]
 8007628:	e002      	b.n	8007630 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007640:	e00e      	b.n	8007660 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f868 	bl	8007720 <USBH_CDC_TransmitCallback>
      break;
 8007650:	e006      	b.n	8007660 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007652:	7afb      	ldrb	r3, [r7, #11]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d103      	bne.n	8007660 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007660:	bf00      	nop
  }
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800767c:	2300      	movs	r3, #0
 800767e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007686:	2b03      	cmp	r3, #3
 8007688:	d002      	beq.n	8007690 <CDC_ProcessReception+0x26>
 800768a:	2b04      	cmp	r3, #4
 800768c:	d00e      	beq.n	80076ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800768e:	e043      	b.n	8007718 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	6a19      	ldr	r1, [r3, #32]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	8b5a      	ldrh	r2, [r3, #26]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	7b1b      	ldrb	r3, [r3, #12]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fb07 	bl	8008cb0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2204      	movs	r2, #4
 80076a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80076aa:	e035      	b.n	8007718 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	7b1b      	ldrb	r3, [r3, #12]
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fe04 	bl	80092c0 <USBH_LL_GetURBState>
 80076b8:	4603      	mov	r3, r0
 80076ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80076bc:	7cfb      	ldrb	r3, [r7, #19]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d129      	bne.n	8007716 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	7b1b      	ldrb	r3, [r3, #12]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 fd67 	bl	800919c <USBH_LL_GetLastXferSize>
 80076ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d016      	beq.n	8007708 <CDC_ProcessReception+0x9e>
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	8b5b      	ldrh	r3, [r3, #26]
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d910      	bls.n	8007708 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad2      	subs	r2, r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6a1a      	ldr	r2, [r3, #32]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	441a      	add	r2, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2203      	movs	r2, #3
 8007702:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007706:	e006      	b.n	8007716 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f80f 	bl	8007734 <USBH_CDC_ReceiveCallback>
      break;
 8007716:	bf00      	nop
  }
}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007770:	2302      	movs	r3, #2
 8007772:	e029      	b.n	80077c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	79fa      	ldrb	r2, [r7, #7]
 8007778:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f81f 	bl	80077d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f001 fc39 	bl	8009038 <USBH_LL_Init>

  return USBH_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e009      	b.n	80077f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	33e0      	adds	r3, #224	; 0xe0
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b0e      	cmp	r3, #14
 80077fa:	d9f2      	bls.n	80077e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	e009      	b.n	8007816 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3301      	adds	r3, #1
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d3f1      	bcc.n	8007802 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2240      	movs	r2, #64	; 0x40
 8007842:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d016      	beq.n	80078ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10e      	bne.n	80078b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800789c:	1c59      	adds	r1, r3, #1
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	33de      	adds	r3, #222	; 0xde
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
 80078b2:	e004      	b.n	80078be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80078b4:	2302      	movs	r3, #2
 80078b6:	73fb      	strb	r3, [r7, #15]
 80078b8:	e001      	b.n	80078be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80078ba:	2302      	movs	r3, #2
 80078bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d204      	bcs.n	80078f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80078f0:	e001      	b.n	80078f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80078f2:	2302      	movs	r3, #2
 80078f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	461a      	mov	r2, r3
 8007912:	4603      	mov	r3, r0
 8007914:	70fb      	strb	r3, [r7, #3]
 8007916:	460b      	mov	r3, r1
 8007918:	70bb      	strb	r3, [r7, #2]
 800791a:	4613      	mov	r3, r2
 800791c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800792c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800792e:	e025      	b.n	800797c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	221a      	movs	r2, #26
 8007934:	fb02 f303 	mul.w	r3, r2, r3
 8007938:	3308      	adds	r3, #8
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	3302      	adds	r3, #2
 8007940:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	429a      	cmp	r2, r3
 800794a:	d002      	beq.n	8007952 <USBH_FindInterface+0x4e>
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d111      	bne.n	8007976 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007956:	78ba      	ldrb	r2, [r7, #2]
 8007958:	429a      	cmp	r2, r3
 800795a:	d002      	beq.n	8007962 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800795c:	78bb      	ldrb	r3, [r7, #2]
 800795e:	2bff      	cmp	r3, #255	; 0xff
 8007960:	d109      	bne.n	8007976 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007966:	787a      	ldrb	r2, [r7, #1]
 8007968:	429a      	cmp	r2, r3
 800796a:	d002      	beq.n	8007972 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800796c:	787b      	ldrb	r3, [r7, #1]
 800796e:	2bff      	cmp	r3, #255	; 0xff
 8007970:	d101      	bne.n	8007976 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	e006      	b.n	8007984 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	3301      	adds	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d9d6      	bls.n	8007930 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007982:	23ff      	movs	r3, #255	; 0xff
}
 8007984:	4618      	mov	r0, r3
 8007986:	371c      	adds	r7, #28
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fb89 	bl	80090b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800799e:	2101      	movs	r1, #1
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fca0 	bl	80092e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af04      	add	r7, sp, #16
 80079b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80079b8:	2302      	movs	r3, #2
 80079ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d102      	bne.n	80079d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2203      	movs	r2, #3
 80079d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b0b      	cmp	r3, #11
 80079da:	f200 81b3 	bhi.w	8007d44 <USBH_Process+0x394>
 80079de:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <USBH_Process+0x34>)
 80079e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e4:	08007a15 	.word	0x08007a15
 80079e8:	08007a47 	.word	0x08007a47
 80079ec:	08007aaf 	.word	0x08007aaf
 80079f0:	08007cdf 	.word	0x08007cdf
 80079f4:	08007d45 	.word	0x08007d45
 80079f8:	08007b53 	.word	0x08007b53
 80079fc:	08007c85 	.word	0x08007c85
 8007a00:	08007b89 	.word	0x08007b89
 8007a04:	08007ba9 	.word	0x08007ba9
 8007a08:	08007bc9 	.word	0x08007bc9
 8007a0c:	08007bf7 	.word	0x08007bf7
 8007a10:	08007cc7 	.word	0x08007cc7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8193 	beq.w	8007d48 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a28:	20c8      	movs	r0, #200	; 0xc8
 8007a2a:	f001 fca6 	bl	800937a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fb99 	bl	8009166 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a44:	e180      	b.n	8007d48 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d107      	bne.n	8007a60 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a5e:	e182      	b.n	8007d66 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a6a:	d914      	bls.n	8007a96 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a72:	3301      	adds	r3, #1
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d903      	bls.n	8007a8e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	220d      	movs	r2, #13
 8007a8a:	701a      	strb	r2, [r3, #0]
      break;
 8007a8c:	e16b      	b.n	8007d66 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
      break;
 8007a94:	e167      	b.n	8007d66 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a9c:	f103 020a 	add.w	r2, r3, #10
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007aa6:	200a      	movs	r0, #10
 8007aa8:	f001 fc67 	bl	800937a <USBH_Delay>
      break;
 8007aac:	e15b      	b.n	8007d66 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007abe:	2104      	movs	r1, #4
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ac4:	2064      	movs	r0, #100	; 0x64
 8007ac6:	f001 fc58 	bl	800937a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 fb26 	bl	800911c <USBH_LL_GetSpeed>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2205      	movs	r2, #5
 8007ade:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f931 	bl	8008d4a <USBH_AllocPipe>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 f929 	bl	8008d4a <USBH_AllocPipe>
 8007af8:	4603      	mov	r3, r0
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	7919      	ldrb	r1, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b14:	b292      	uxth	r2, r2
 8007b16:	9202      	str	r2, [sp, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	9201      	str	r2, [sp, #4]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2280      	movs	r2, #128	; 0x80
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 f8e2 	bl	8008cec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7959      	ldrb	r1, [r3, #5]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	9202      	str	r2, [sp, #8]
 8007b40:	2200      	movs	r2, #0
 8007b42:	9201      	str	r2, [sp, #4]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4603      	mov	r3, r0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 f8ce 	bl	8008cec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b50:	e109      	b.n	8007d66 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f90c 	bl	8007d70 <USBH_HandleEnum>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 80f3 	bne.w	8007d4c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d103      	bne.n	8007b80 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b7e:	e0e5      	b.n	8007d4c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2207      	movs	r2, #7
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	e0e1      	b.n	8007d4c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80de 	beq.w	8007d50 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007ba6:	e0d3      	b.n	8007d50 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fc20 	bl	80083f8 <USBH_SetCfg>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 80ca 	bne.w	8007d54 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2209      	movs	r2, #9
 8007bc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bc6:	e0c5      	b.n	8007d54 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00b      	beq.n	8007bee <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fc30 	bl	800843e <USBH_SetFeature>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 80b9 	bne.w	8007d58 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	220a      	movs	r2, #10
 8007bea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bec:	e0b4      	b.n	8007d58 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	701a      	strb	r2, [r3, #0]
      break;
 8007bf4:	e0b0      	b.n	8007d58 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 80ad 	beq.w	8007d5c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
 8007c0e:	e016      	b.n	8007c3e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c10:	7bfa      	ldrb	r2, [r7, #15]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	32de      	adds	r2, #222	; 0xde
 8007c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1a:	791a      	ldrb	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d108      	bne.n	8007c38 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	32de      	adds	r2, #222	; 0xde
 8007c2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007c36:	e005      	b.n	8007c44 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0e5      	beq.n	8007c10 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d016      	beq.n	8007c7c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2206      	movs	r2, #6
 8007c64:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c6c:	2103      	movs	r1, #3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c72:	e073      	b.n	8007d5c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	220d      	movs	r2, #13
 8007c78:	701a      	strb	r2, [r3, #0]
      break;
 8007c7a:	e06f      	b.n	8007d5c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	220d      	movs	r2, #13
 8007c80:	701a      	strb	r2, [r3, #0]
      break;
 8007c82:	e06b      	b.n	8007d5c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d017      	beq.n	8007cbe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	220b      	movs	r2, #11
 8007caa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cac:	e058      	b.n	8007d60 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d154      	bne.n	8007d60 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220d      	movs	r2, #13
 8007cba:	701a      	strb	r2, [r3, #0]
      break;
 8007cbc:	e050      	b.n	8007d60 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220d      	movs	r2, #13
 8007cc2:	701a      	strb	r2, [r3, #0]
      break;
 8007cc4:	e04c      	b.n	8007d60 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d049      	beq.n	8007d64 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
      }
      break;
 8007cdc:	e042      	b.n	8007d64 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff fd72 	bl	80077d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d1a:	2105      	movs	r1, #5
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d107      	bne.n	8007d3c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff fe2b 	bl	8007990 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d3a:	e014      	b.n	8007d66 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 f9b7 	bl	80090b0 <USBH_LL_Start>
      break;
 8007d42:	e010      	b.n	8007d66 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007d44:	bf00      	nop
 8007d46:	e00e      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d48:	bf00      	nop
 8007d4a:	e00c      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d4c:	bf00      	nop
 8007d4e:	e00a      	b.n	8007d66 <USBH_Process+0x3b6>
    break;
 8007d50:	bf00      	nop
 8007d52:	e008      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d54:	bf00      	nop
 8007d56:	e006      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d58:	bf00      	nop
 8007d5a:	e004      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d5c:	bf00      	nop
 8007d5e:	e002      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d60:	bf00      	nop
 8007d62:	e000      	b.n	8007d66 <USBH_Process+0x3b6>
      break;
 8007d64:	bf00      	nop
  }
  return USBH_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af04      	add	r7, sp, #16
 8007d76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	f200 81c1 	bhi.w	800810c <USBH_HandleEnum+0x39c>
 8007d8a:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <USBH_HandleEnum+0x20>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007e6f 	.word	0x08007e6f
 8007d98:	08007ed9 	.word	0x08007ed9
 8007d9c:	08007f67 	.word	0x08007f67
 8007da0:	08007fd1 	.word	0x08007fd1
 8007da4:	08008041 	.word	0x08008041
 8007da8:	08008087 	.word	0x08008087
 8007dac:	080080cd 	.word	0x080080cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007db0:	2108      	movs	r1, #8
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa50 	bl	8008258 <USBH_Get_DevDesc>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d130      	bne.n	8007e24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7919      	ldrb	r1, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007de6:	b292      	uxth	r2, r2
 8007de8:	9202      	str	r2, [sp, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	9201      	str	r2, [sp, #4]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4603      	mov	r3, r0
 8007df2:	2280      	movs	r2, #128	; 0x80
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 ff79 	bl	8008cec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7959      	ldrb	r1, [r3, #5]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	9202      	str	r2, [sp, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 ff65 	bl	8008cec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e22:	e175      	b.n	8008110 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	f040 8172 	bne.w	8008110 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d903      	bls.n	8007e4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	220d      	movs	r2, #13
 8007e4a:	701a      	strb	r2, [r3, #0]
      break;
 8007e4c:	e160      	b.n	8008110 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	795b      	ldrb	r3, [r3, #5]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 ff99 	bl	8008d8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 ff93 	bl	8008d8c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
      break;
 8007e6c:	e150      	b.n	8008110 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007e6e:	2112      	movs	r1, #18
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f9f1 	bl	8008258 <USBH_Get_DevDesc>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e86:	e145      	b.n	8008114 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	f040 8142 	bne.w	8008114 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e96:	3301      	adds	r3, #1
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d903      	bls.n	8007eb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	220d      	movs	r2, #13
 8007eae:	701a      	strb	r2, [r3, #0]
      break;
 8007eb0:	e130      	b.n	8008114 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	795b      	ldrb	r3, [r3, #5]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 ff67 	bl	8008d8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 ff61 	bl	8008d8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
      break;
 8007ed6:	e11d      	b.n	8008114 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ed8:	2101      	movs	r1, #1
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa68 	bl	80083b0 <USBH_SetAddress>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d132      	bne.n	8007f50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007eea:	2002      	movs	r0, #2
 8007eec:	f001 fa45 	bl	800937a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2203      	movs	r2, #3
 8007efc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7919      	ldrb	r1, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f12:	b292      	uxth	r2, r2
 8007f14:	9202      	str	r2, [sp, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	9201      	str	r2, [sp, #4]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2280      	movs	r2, #128	; 0x80
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fee3 	bl	8008cec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7959      	ldrb	r1, [r3, #5]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f3a:	b292      	uxth	r2, r2
 8007f3c:	9202      	str	r2, [sp, #8]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	9201      	str	r2, [sp, #4]
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4603      	mov	r3, r0
 8007f46:	2200      	movs	r2, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fecf 	bl	8008cec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f4e:	e0e3      	b.n	8008118 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	f040 80e0 	bne.w	8008118 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	220d      	movs	r2, #13
 8007f5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	705a      	strb	r2, [r3, #1]
      break;
 8007f64:	e0d8      	b.n	8008118 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007f66:	2109      	movs	r1, #9
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f99d 	bl	80082a8 <USBH_Get_CfgDesc>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f7e:	e0cd      	b.n	800811c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	f040 80ca 	bne.w	800811c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f8e:	3301      	adds	r3, #1
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d903      	bls.n	8007faa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	220d      	movs	r2, #13
 8007fa6:	701a      	strb	r2, [r3, #0]
      break;
 8007fa8:	e0b8      	b.n	800811c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	795b      	ldrb	r3, [r3, #5]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 feeb 	bl	8008d8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fee5 	bl	8008d8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e0a5      	b.n	800811c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f965 	bl	80082a8 <USBH_Get_CfgDesc>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2205      	movs	r2, #5
 8007fec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fee:	e097      	b.n	8008120 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	f040 8094 	bne.w	8008120 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ffe:	3301      	adds	r3, #1
 8008000:	b2da      	uxtb	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800800e:	2b03      	cmp	r3, #3
 8008010:	d903      	bls.n	800801a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	220d      	movs	r2, #13
 8008016:	701a      	strb	r2, [r3, #0]
      break;
 8008018:	e082      	b.n	8008120 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	795b      	ldrb	r3, [r3, #5]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 feb3 	bl	8008d8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	791b      	ldrb	r3, [r3, #4]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fead 	bl	8008d8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
      break;
 800803e:	e06f      	b.n	8008120 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008046:	2b00      	cmp	r3, #0
 8008048:	d019      	beq.n	800807e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008056:	23ff      	movs	r3, #255	; 0xff
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f949 	bl	80082f0 <USBH_Get_StringDesc>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d103      	bne.n	8008070 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2206      	movs	r2, #6
 800806c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800806e:	e059      	b.n	8008124 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	2b03      	cmp	r3, #3
 8008074:	d156      	bne.n	8008124 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2206      	movs	r2, #6
 800807a:	705a      	strb	r2, [r3, #1]
      break;
 800807c:	e052      	b.n	8008124 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2206      	movs	r2, #6
 8008082:	705a      	strb	r2, [r3, #1]
      break;
 8008084:	e04e      	b.n	8008124 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800809c:	23ff      	movs	r3, #255	; 0xff
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f926 	bl	80082f0 <USBH_Get_StringDesc>
 80080a4:	4603      	mov	r3, r0
 80080a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2207      	movs	r2, #7
 80080b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80080b4:	e038      	b.n	8008128 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d135      	bne.n	8008128 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2207      	movs	r2, #7
 80080c0:	705a      	strb	r2, [r3, #1]
      break;
 80080c2:	e031      	b.n	8008128 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2207      	movs	r2, #7
 80080c8:	705a      	strb	r2, [r3, #1]
      break;
 80080ca:	e02d      	b.n	8008128 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d017      	beq.n	8008106 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80080e2:	23ff      	movs	r3, #255	; 0xff
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f903 	bl	80082f0 <USBH_Get_StringDesc>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80080f8:	e018      	b.n	800812c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d115      	bne.n	800812c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
      break;
 8008104:	e012      	b.n	800812c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	73fb      	strb	r3, [r7, #15]
      break;
 800810a:	e00f      	b.n	800812c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800810c:	bf00      	nop
 800810e:	e00e      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 8008110:	bf00      	nop
 8008112:	e00c      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 8008114:	bf00      	nop
 8008116:	e00a      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 8008118:	bf00      	nop
 800811a:	e008      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 800811c:	bf00      	nop
 800811e:	e006      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 8008120:	bf00      	nop
 8008122:	e004      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 8008124:	bf00      	nop
 8008126:	e002      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 8008128:	bf00      	nop
 800812a:	e000      	b.n	800812e <USBH_HandleEnum+0x3be>
      break;
 800812c:	bf00      	nop
  }
  return Status;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f804 	bl	800817a <USBH_HandleSof>
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b0b      	cmp	r3, #11
 800818a:	d10a      	bne.n	80081a2 <USBH_HandleSof+0x28>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008192:	2b00      	cmp	r3, #0
 8008194:	d005      	beq.n	80081a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
  }
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80081ba:	bf00      	nop
}
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80081d6:	bf00      	nop
}
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 ff58 	bl	80090e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	791b      	ldrb	r3, [r3, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fda5 	bl	8008d8c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fd9f 	bl	8008d8c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af02      	add	r7, sp, #8
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	b29b      	uxth	r3, r3
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4613      	mov	r3, r2
 8008272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008276:	2100      	movs	r1, #0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f864 	bl	8008346 <USBH_GetDescriptor>
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	b292      	uxth	r2, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f000 f918 	bl	80084ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	331c      	adds	r3, #28
 80082b8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80082ba:	887b      	ldrh	r3, [r7, #2]
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c4:	2100      	movs	r1, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f83d 	bl	8008346 <USBH_GetDescriptor>
 80082cc:	4603      	mov	r3, r0
 80082ce:	72fb      	strb	r3, [r7, #11]
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d107      	bne.n	80082e6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80082dc:	887a      	ldrh	r2, [r7, #2]
 80082de:	68f9      	ldr	r1, [r7, #12]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f964 	bl	80085ae <USBH_ParseCfgDesc>
  }

  return status;
 80082e6:	7afb      	ldrb	r3, [r7, #11]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	461a      	mov	r2, r3
 80082fc:	460b      	mov	r3, r1
 80082fe:	72fb      	strb	r3, [r7, #11]
 8008300:	4613      	mov	r3, r2
 8008302:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	b29b      	uxth	r3, r3
 8008308:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800830c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008314:	893b      	ldrh	r3, [r7, #8]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	460b      	mov	r3, r1
 800831a:	2100      	movs	r1, #0
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f812 	bl	8008346 <USBH_GetDescriptor>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d107      	bne.n	800833c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008332:	893a      	ldrh	r2, [r7, #8]
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fa37 	bl	80087aa <USBH_ParseStringDesc>
  }

  return status;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	72fb      	strb	r3, [r7, #11]
 8008354:	4613      	mov	r3, r2
 8008356:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	789b      	ldrb	r3, [r3, #2]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d11c      	bne.n	800839a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008366:	b2da      	uxtb	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2206      	movs	r2, #6
 8008370:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	893a      	ldrh	r2, [r7, #8]
 8008376:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008378:	893b      	ldrh	r3, [r7, #8]
 800837a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800837e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008382:	d104      	bne.n	800838e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f240 4209 	movw	r2, #1033	; 0x409
 800838a:	829a      	strh	r2, [r3, #20]
 800838c:	e002      	b.n	8008394 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8b3a      	ldrh	r2, [r7, #24]
 8008398:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800839a:	8b3b      	ldrh	r3, [r7, #24]
 800839c:	461a      	mov	r2, r3
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fa50 	bl	8008846 <USBH_CtlReq>
 80083a6:	4603      	mov	r3, r0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	789b      	ldrb	r3, [r3, #2]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d10f      	bne.n	80083e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2205      	movs	r2, #5
 80083ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa2c 	bl	8008846 <USBH_CtlReq>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	460b      	mov	r3, r1
 8008402:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	789b      	ldrb	r3, [r3, #2]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d10e      	bne.n	800842a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2209      	movs	r2, #9
 8008416:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	887a      	ldrh	r2, [r7, #2]
 800841c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa09 	bl	8008846 <USBH_CtlReq>
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	789b      	ldrb	r3, [r3, #2]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d10f      	bne.n	8008472 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2203      	movs	r2, #3
 800845c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9e5 	bl	8008846 <USBH_CtlReq>
 800847c:	4603      	mov	r3, r0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	789b      	ldrb	r3, [r3, #2]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d10f      	bne.n	80084ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f9c1 	bl	8008846 <USBH_CtlReq>
 80084c4:	4603      	mov	r3, r0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b085      	sub	sp, #20
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	4613      	mov	r3, r2
 80084da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	785a      	ldrb	r2, [r3, #1]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	3302      	adds	r3, #2
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3303      	adds	r3, #3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	b29b      	uxth	r3, r3
 8008500:	4313      	orrs	r3, r2
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	791a      	ldrb	r2, [r3, #4]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	795a      	ldrb	r2, [r3, #5]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	799a      	ldrb	r2, [r3, #6]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	79da      	ldrb	r2, [r3, #7]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	2b08      	cmp	r3, #8
 800852c:	d939      	bls.n	80085a2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	3308      	adds	r3, #8
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b29a      	uxth	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	3309      	adds	r3, #9
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	4313      	orrs	r3, r2
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	330a      	adds	r3, #10
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	b29a      	uxth	r2, r3
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	330b      	adds	r3, #11
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	b29b      	uxth	r3, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	330c      	adds	r3, #12
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	b29a      	uxth	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	330d      	adds	r3, #13
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	b29b      	uxth	r3, r3
 800857a:	4313      	orrs	r3, r2
 800857c:	b29a      	uxth	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	7b9a      	ldrb	r2, [r3, #14]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	7bda      	ldrb	r2, [r3, #15]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	7c1a      	ldrb	r2, [r3, #16]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	7c5a      	ldrb	r2, [r3, #17]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	745a      	strb	r2, [r3, #17]
  }
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b08a      	sub	sp, #40	; 0x28
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	4613      	mov	r3, r2
 80085ba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	781a      	ldrb	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	785a      	ldrb	r2, [r3, #1]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	3302      	adds	r3, #2
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3303      	adds	r3, #3
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	791a      	ldrb	r2, [r3, #4]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	795a      	ldrb	r2, [r3, #5]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	799a      	ldrb	r2, [r3, #6]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	79da      	ldrb	r2, [r3, #7]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	7a1a      	ldrb	r2, [r3, #8]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	2b09      	cmp	r3, #9
 8008628:	d95f      	bls.n	80086ea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800862a:	2309      	movs	r3, #9
 800862c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800862e:	2300      	movs	r3, #0
 8008630:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008632:	e051      	b.n	80086d8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008634:	f107 0316 	add.w	r3, r7, #22
 8008638:	4619      	mov	r1, r3
 800863a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800863c:	f000 f8e8 	bl	8008810 <USBH_GetNextDesc>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b04      	cmp	r3, #4
 8008648:	d146      	bne.n	80086d8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800864a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800864e:	221a      	movs	r2, #26
 8008650:	fb02 f303 	mul.w	r3, r2, r3
 8008654:	3308      	adds	r3, #8
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4413      	add	r3, r2
 800865a:	3302      	adds	r3, #2
 800865c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800865e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008660:	69f8      	ldr	r0, [r7, #28]
 8008662:	f000 f846 	bl	80086f2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800866c:	2300      	movs	r3, #0
 800866e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008670:	e022      	b.n	80086b8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008672:	f107 0316 	add.w	r3, r7, #22
 8008676:	4619      	mov	r1, r3
 8008678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800867a:	f000 f8c9 	bl	8008810 <USBH_GetNextDesc>
 800867e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b05      	cmp	r3, #5
 8008686:	d117      	bne.n	80086b8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800868c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008690:	3201      	adds	r2, #1
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	211a      	movs	r1, #26
 8008696:	fb01 f303 	mul.w	r3, r1, r3
 800869a:	4413      	add	r3, r2
 800869c:	3308      	adds	r3, #8
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4413      	add	r3, r2
 80086a2:	3304      	adds	r3, #4
 80086a4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80086a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086a8:	69b8      	ldr	r0, [r7, #24]
 80086aa:	f000 f851 	bl	8008750 <USBH_ParseEPDesc>
            ep_ix++;
 80086ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80086b2:	3301      	adds	r3, #1
 80086b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	791b      	ldrb	r3, [r3, #4]
 80086bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d204      	bcs.n	80086ce <USBH_ParseCfgDesc+0x120>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	885a      	ldrh	r2, [r3, #2]
 80086c8:	8afb      	ldrh	r3, [r7, #22]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d8d1      	bhi.n	8008672 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80086ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086d2:	3301      	adds	r3, #1
 80086d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80086d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d804      	bhi.n	80086ea <USBH_ParseCfgDesc+0x13c>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	885a      	ldrh	r2, [r3, #2]
 80086e4:	8afb      	ldrh	r3, [r7, #22]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d8a4      	bhi.n	8008634 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80086ea:	bf00      	nop
 80086ec:	3728      	adds	r7, #40	; 0x28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	781a      	ldrb	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	785a      	ldrb	r2, [r3, #1]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	789a      	ldrb	r2, [r3, #2]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	78da      	ldrb	r2, [r3, #3]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	791a      	ldrb	r2, [r3, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	795a      	ldrb	r2, [r3, #5]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	799a      	ldrb	r2, [r3, #6]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	79da      	ldrb	r2, [r3, #7]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	7a1a      	ldrb	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	721a      	strb	r2, [r3, #8]
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781a      	ldrb	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	785a      	ldrb	r2, [r3, #1]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	789a      	ldrb	r2, [r3, #2]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	78da      	ldrb	r2, [r3, #3]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	3304      	adds	r3, #4
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	3305      	adds	r3, #5
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	b29b      	uxth	r3, r3
 800878e:	4313      	orrs	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	799a      	ldrb	r2, [r3, #6]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	719a      	strb	r2, [r3, #6]
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b087      	sub	sp, #28
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	4613      	mov	r3, r2
 80087b6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d120      	bne.n	8008804 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	1e9a      	subs	r2, r3, #2
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	4293      	cmp	r3, r2
 80087cc:	bf28      	it	cs
 80087ce:	4613      	movcs	r3, r2
 80087d0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3302      	adds	r3, #2
 80087d6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087d8:	2300      	movs	r3, #0
 80087da:	82fb      	strh	r3, [r7, #22]
 80087dc:	e00b      	b.n	80087f6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087de:	8afb      	ldrh	r3, [r7, #22]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	781a      	ldrb	r2, [r3, #0]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	3301      	adds	r3, #1
 80087ee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087f0:	8afb      	ldrh	r3, [r7, #22]
 80087f2:	3302      	adds	r3, #2
 80087f4:	82fb      	strh	r3, [r7, #22]
 80087f6:	8afa      	ldrh	r2, [r7, #22]
 80087f8:	8abb      	ldrh	r3, [r7, #20]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d3ef      	bcc.n	80087de <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]
  }
}
 8008804:	bf00      	nop
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	881a      	ldrh	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	4413      	add	r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4413      	add	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008838:	68fb      	ldr	r3, [r7, #12]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b086      	sub	sp, #24
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	4613      	mov	r3, r2
 8008852:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008854:	2301      	movs	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	789b      	ldrb	r3, [r3, #2]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d002      	beq.n	8008866 <USBH_CtlReq+0x20>
 8008860:	2b02      	cmp	r3, #2
 8008862:	d00f      	beq.n	8008884 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008864:	e027      	b.n	80088b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	88fa      	ldrh	r2, [r7, #6]
 8008870:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2201      	movs	r2, #1
 8008876:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2202      	movs	r2, #2
 800887c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800887e:	2301      	movs	r3, #1
 8008880:	75fb      	strb	r3, [r7, #23]
      break;
 8008882:	e018      	b.n	80088b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f81b 	bl	80088c0 <USBH_HandleControl>
 800888a:	4603      	mov	r3, r0
 800888c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <USBH_CtlReq+0x54>
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	2b03      	cmp	r3, #3
 8008898:	d106      	bne.n	80088a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	761a      	strb	r2, [r3, #24]
      break;
 80088a6:	e005      	b.n	80088b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d102      	bne.n	80088b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	709a      	strb	r2, [r3, #2]
      break;
 80088b4:	bf00      	nop
  }
  return status;
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7e1b      	ldrb	r3, [r3, #24]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	f200 8158 	bhi.w	8008b8c <USBH_HandleControl+0x2cc>
 80088dc:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <USBH_HandleControl+0x24>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	08008911 	.word	0x08008911
 80088e8:	0800892b 	.word	0x0800892b
 80088ec:	08008995 	.word	0x08008995
 80088f0:	080089bb 	.word	0x080089bb
 80088f4:	080089f3 	.word	0x080089f3
 80088f8:	08008a1f 	.word	0x08008a1f
 80088fc:	08008a71 	.word	0x08008a71
 8008900:	08008a93 	.word	0x08008a93
 8008904:	08008acf 	.word	0x08008acf
 8008908:	08008af7 	.word	0x08008af7
 800890c:	08008b35 	.word	0x08008b35
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f103 0110 	add.w	r1, r3, #16
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	795b      	ldrb	r3, [r3, #5]
 800891a:	461a      	mov	r2, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f945 	bl	8008bac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	761a      	strb	r2, [r3, #24]
      break;
 8008928:	e13b      	b.n	8008ba2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fcc5 	bl	80092c0 <USBH_LL_GetURBState>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d11e      	bne.n	800897e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	7c1b      	ldrb	r3, [r3, #16]
 8008944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008948:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	8adb      	ldrh	r3, [r3, #22]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008952:	7b7b      	ldrb	r3, [r7, #13]
 8008954:	2b80      	cmp	r3, #128	; 0x80
 8008956:	d103      	bne.n	8008960 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2203      	movs	r2, #3
 800895c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800895e:	e117      	b.n	8008b90 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2205      	movs	r2, #5
 8008964:	761a      	strb	r2, [r3, #24]
      break;
 8008966:	e113      	b.n	8008b90 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008968:	7b7b      	ldrb	r3, [r7, #13]
 800896a:	2b80      	cmp	r3, #128	; 0x80
 800896c:	d103      	bne.n	8008976 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2209      	movs	r2, #9
 8008972:	761a      	strb	r2, [r3, #24]
      break;
 8008974:	e10c      	b.n	8008b90 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2207      	movs	r2, #7
 800897a:	761a      	strb	r2, [r3, #24]
      break;
 800897c:	e108      	b.n	8008b90 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b04      	cmp	r3, #4
 8008982:	d003      	beq.n	800898c <USBH_HandleControl+0xcc>
 8008984:	7bbb      	ldrb	r3, [r7, #14]
 8008986:	2b02      	cmp	r3, #2
 8008988:	f040 8102 	bne.w	8008b90 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	220b      	movs	r2, #11
 8008990:	761a      	strb	r2, [r3, #24]
      break;
 8008992:	e0fd      	b.n	8008b90 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6899      	ldr	r1, [r3, #8]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	899a      	ldrh	r2, [r3, #12]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	791b      	ldrb	r3, [r3, #4]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f93c 	bl	8008c2a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2204      	movs	r2, #4
 80089b6:	761a      	strb	r2, [r3, #24]
      break;
 80089b8:	e0f3      	b.n	8008ba2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	791b      	ldrb	r3, [r3, #4]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fc7d 	bl	80092c0 <USBH_LL_GetURBState>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d102      	bne.n	80089d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2209      	movs	r2, #9
 80089d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	2b05      	cmp	r3, #5
 80089da:	d102      	bne.n	80089e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089dc:	2303      	movs	r3, #3
 80089de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089e0:	e0d8      	b.n	8008b94 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	f040 80d5 	bne.w	8008b94 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	220b      	movs	r2, #11
 80089ee:	761a      	strb	r2, [r3, #24]
      break;
 80089f0:	e0d0      	b.n	8008b94 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6899      	ldr	r1, [r3, #8]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	899a      	ldrh	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7958      	ldrb	r0, [r3, #5]
 80089fe:	2301      	movs	r3, #1
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	4603      	mov	r3, r0
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f8eb 	bl	8008be0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2206      	movs	r2, #6
 8008a1a:	761a      	strb	r2, [r3, #24]
      break;
 8008a1c:	e0c1      	b.n	8008ba2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	795b      	ldrb	r3, [r3, #5]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc4b 	bl	80092c0 <USBH_LL_GetURBState>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a2e:	7bbb      	ldrb	r3, [r7, #14]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d103      	bne.n	8008a3c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2207      	movs	r2, #7
 8008a38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a3a:	e0ad      	b.n	8008b98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d105      	bne.n	8008a4e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	220c      	movs	r2, #12
 8008a46:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4c:	e0a4      	b.n	8008b98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d103      	bne.n	8008a5c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2205      	movs	r2, #5
 8008a58:	761a      	strb	r2, [r3, #24]
      break;
 8008a5a:	e09d      	b.n	8008b98 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	f040 809a 	bne.w	8008b98 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	220b      	movs	r2, #11
 8008a68:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a6e:	e093      	b.n	8008b98 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	2100      	movs	r1, #0
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f8d6 	bl	8008c2a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2208      	movs	r2, #8
 8008a8e:	761a      	strb	r2, [r3, #24]

      break;
 8008a90:	e087      	b.n	8008ba2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	791b      	ldrb	r3, [r3, #4]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fc11 	bl	80092c0 <USBH_LL_GetURBState>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d105      	bne.n	8008ab4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220d      	movs	r2, #13
 8008aac:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ab2:	e073      	b.n	8008b9c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d103      	bne.n	8008ac2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	220b      	movs	r2, #11
 8008abe:	761a      	strb	r2, [r3, #24]
      break;
 8008ac0:	e06c      	b.n	8008b9c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b05      	cmp	r3, #5
 8008ac6:	d169      	bne.n	8008b9c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	73fb      	strb	r3, [r7, #15]
      break;
 8008acc:	e066      	b.n	8008b9c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	795a      	ldrb	r2, [r3, #5]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2100      	movs	r1, #0
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f87f 	bl	8008be0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	220a      	movs	r2, #10
 8008af2:	761a      	strb	r2, [r3, #24]
      break;
 8008af4:	e055      	b.n	8008ba2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	795b      	ldrb	r3, [r3, #5]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fbdf 	bl	80092c0 <USBH_LL_GetURBState>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d105      	bne.n	8008b18 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	220d      	movs	r2, #13
 8008b14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b16:	e043      	b.n	8008ba0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d103      	bne.n	8008b26 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2209      	movs	r2, #9
 8008b22:	761a      	strb	r2, [r3, #24]
      break;
 8008b24:	e03c      	b.n	8008ba0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d139      	bne.n	8008ba0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	220b      	movs	r2, #11
 8008b30:	761a      	strb	r2, [r3, #24]
      break;
 8008b32:	e035      	b.n	8008ba0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7e5b      	ldrb	r3, [r3, #25]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	765a      	strb	r2, [r3, #25]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	7e5b      	ldrb	r3, [r3, #25]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d806      	bhi.n	8008b56 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b54:	e025      	b.n	8008ba2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b5c:	2106      	movs	r1, #6
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	795b      	ldrb	r3, [r3, #5]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f90c 	bl	8008d8c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	791b      	ldrb	r3, [r3, #4]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f906 	bl	8008d8c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b86:	2302      	movs	r3, #2
 8008b88:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8a:	e00a      	b.n	8008ba2 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008b8c:	bf00      	nop
 8008b8e:	e008      	b.n	8008ba2 <USBH_HandleControl+0x2e2>
      break;
 8008b90:	bf00      	nop
 8008b92:	e006      	b.n	8008ba2 <USBH_HandleControl+0x2e2>
      break;
 8008b94:	bf00      	nop
 8008b96:	e004      	b.n	8008ba2 <USBH_HandleControl+0x2e2>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e002      	b.n	8008ba2 <USBH_HandleControl+0x2e2>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <USBH_HandleControl+0x2e2>
      break;
 8008ba0:	bf00      	nop
  }

  return status;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af04      	add	r7, sp, #16
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bba:	79f9      	ldrb	r1, [r7, #7]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9303      	str	r3, [sp, #12]
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	9302      	str	r3, [sp, #8]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2200      	movs	r2, #0
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 fb44 	bl	800925e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af04      	add	r7, sp, #16
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4611      	mov	r1, r2
 8008bec:	461a      	mov	r2, r3
 8008bee:	460b      	mov	r3, r1
 8008bf0:	80fb      	strh	r3, [r7, #6]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c04:	7979      	ldrb	r1, [r7, #5]
 8008c06:	7e3b      	ldrb	r3, [r7, #24]
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	2301      	movs	r3, #1
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	2300      	movs	r3, #0
 8008c18:	2200      	movs	r2, #0
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fb1f 	bl	800925e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b088      	sub	sp, #32
 8008c2e:	af04      	add	r7, sp, #16
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	4611      	mov	r1, r2
 8008c36:	461a      	mov	r2, r3
 8008c38:	460b      	mov	r3, r1
 8008c3a:	80fb      	strh	r3, [r7, #6]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c40:	7979      	ldrb	r1, [r7, #5]
 8008c42:	2300      	movs	r3, #0
 8008c44:	9303      	str	r3, [sp, #12]
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	9302      	str	r3, [sp, #8]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	2301      	movs	r3, #1
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	2300      	movs	r3, #0
 8008c54:	2201      	movs	r2, #1
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 fb01 	bl	800925e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c5c:	2300      	movs	r3, #0

}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b088      	sub	sp, #32
 8008c6a:	af04      	add	r7, sp, #16
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	4611      	mov	r1, r2
 8008c72:	461a      	mov	r2, r3
 8008c74:	460b      	mov	r3, r1
 8008c76:	80fb      	strh	r3, [r7, #6]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c8a:	7979      	ldrb	r1, [r7, #5]
 8008c8c:	7e3b      	ldrb	r3, [r7, #24]
 8008c8e:	9303      	str	r3, [sp, #12]
 8008c90:	88fb      	ldrh	r3, [r7, #6]
 8008c92:	9302      	str	r3, [sp, #8]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	2301      	movs	r3, #1
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fadc 	bl	800925e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af04      	add	r7, sp, #16
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	80fb      	strh	r3, [r7, #6]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cc6:	7979      	ldrb	r1, [r7, #5]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	88fb      	ldrh	r3, [r7, #6]
 8008cce:	9302      	str	r3, [sp, #8]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	2302      	movs	r3, #2
 8008cda:	2201      	movs	r2, #1
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 fabe 	bl	800925e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af04      	add	r7, sp, #16
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	70fb      	strb	r3, [r7, #3]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70bb      	strb	r3, [r7, #2]
 8008d02:	4613      	mov	r3, r2
 8008d04:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d06:	7878      	ldrb	r0, [r7, #1]
 8008d08:	78ba      	ldrb	r2, [r7, #2]
 8008d0a:	78f9      	ldrb	r1, [r7, #3]
 8008d0c:	8b3b      	ldrh	r3, [r7, #24]
 8008d0e:	9302      	str	r3, [sp, #8]
 8008d10:	7d3b      	ldrb	r3, [r7, #20]
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	7c3b      	ldrb	r3, [r7, #16]
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	4603      	mov	r3, r0
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fa51 	bl	80091c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fa70 	bl	8009220 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f836 	bl	8008dc8 <USBH_GetFreePipe>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d60:	89fb      	ldrh	r3, [r7, #14]
 8008d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00a      	beq.n	8008d80 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	89fb      	ldrh	r3, [r7, #14]
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	33e0      	adds	r3, #224	; 0xe0
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d80:	89fb      	ldrh	r3, [r7, #14]
 8008d82:	b2db      	uxtb	r3, r3
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	2b0a      	cmp	r3, #10
 8008d9c:	d80d      	bhi.n	8008dba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	33e0      	adds	r3, #224	; 0xe0
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	33e0      	adds	r3, #224	; 0xe0
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
 8008dd8:	e00f      	b.n	8008dfa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	33e0      	adds	r3, #224	; 0xe0
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	e007      	b.n	8008e04 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	3301      	adds	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2b0a      	cmp	r3, #10
 8008dfe:	d9ec      	bls.n	8008dda <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e14:	2201      	movs	r2, #1
 8008e16:	490e      	ldr	r1, [pc, #56]	; (8008e50 <MX_USB_HOST_Init+0x40>)
 8008e18:	480e      	ldr	r0, [pc, #56]	; (8008e54 <MX_USB_HOST_Init+0x44>)
 8008e1a:	f7fe fc9f 	bl	800775c <USBH_Init>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e24:	f7f7 ff64 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e28:	490b      	ldr	r1, [pc, #44]	; (8008e58 <MX_USB_HOST_Init+0x48>)
 8008e2a:	480a      	ldr	r0, [pc, #40]	; (8008e54 <MX_USB_HOST_Init+0x44>)
 8008e2c:	f7fe fd24 	bl	8007878 <USBH_RegisterClass>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e36:	f7f7 ff5b 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e3a:	4806      	ldr	r0, [pc, #24]	; (8008e54 <MX_USB_HOST_Init+0x44>)
 8008e3c:	f7fe fda8 	bl	8007990 <USBH_Start>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e46:	f7f7 ff53 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e4a:	bf00      	nop
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	08008e71 	.word	0x08008e71
 8008e54:	20000290 	.word	0x20000290
 8008e58:	2000000c 	.word	0x2000000c

08008e5c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e60:	4802      	ldr	r0, [pc, #8]	; (8008e6c <MX_USB_HOST_Process+0x10>)
 8008e62:	f7fe fda5 	bl	80079b0 <USBH_Process>
}
 8008e66:	bf00      	nop
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000290 	.word	0x20000290

08008e70 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e7c:	78fb      	ldrb	r3, [r7, #3]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d819      	bhi.n	8008eb8 <USBH_UserProcess+0x48>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <USBH_UserProcess+0x1c>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb9 	.word	0x08008eb9
 8008e98:	08008eb1 	.word	0x08008eb1
 8008e9c:	08008ea1 	.word	0x08008ea1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ea0:	4b09      	ldr	r3, [pc, #36]	; (8008ec8 <USBH_UserProcess+0x58>)
 8008ea2:	2203      	movs	r2, #3
 8008ea4:	701a      	strb	r2, [r3, #0]
  break;
 8008ea6:	e008      	b.n	8008eba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ea8:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <USBH_UserProcess+0x58>)
 8008eaa:	2202      	movs	r2, #2
 8008eac:	701a      	strb	r2, [r3, #0]
  break;
 8008eae:	e004      	b.n	8008eba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <USBH_UserProcess+0x58>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	701a      	strb	r2, [r3, #0]
  break;
 8008eb6:	e000      	b.n	8008eba <USBH_UserProcess+0x4a>

  default:
  break;
 8008eb8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	200000b8 	.word	0x200000b8

08008ecc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	609a      	str	r2, [r3, #8]
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eec:	d147      	bne.n	8008f7e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008ef8:	f043 0301 	orr.w	r3, r3, #1
 8008efc:	6313      	str	r3, [r2, #48]	; 0x30
 8008efe:	4b22      	ldr	r3, [pc, #136]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	481b      	ldr	r0, [pc, #108]	; (8008f8c <HAL_HCD_MspInit+0xc0>)
 8008f20:	f7f8 ff06 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f32:	2300      	movs	r3, #0
 8008f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f36:	230a      	movs	r3, #10
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3a:	f107 0314 	add.w	r3, r7, #20
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4812      	ldr	r0, [pc, #72]	; (8008f8c <HAL_HCD_MspInit+0xc0>)
 8008f42:	f7f8 fef5 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f46:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	4a0f      	ldr	r2, [pc, #60]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f50:	6353      	str	r3, [r2, #52]	; 0x34
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	4a0b      	ldr	r2, [pc, #44]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f60:	6453      	str	r3, [r2, #68]	; 0x44
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <HAL_HCD_MspInit+0xbc>)
 8008f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	2043      	movs	r0, #67	; 0x43
 8008f74:	f7f8 fea5 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f78:	2043      	movs	r0, #67	; 0x43
 8008f7a:	f7f8 febe 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	40020000 	.word	0x40020000

08008f90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff f8d9 	bl	8008156 <USBH_LL_IncTimer>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff f911 	bl	80081e2 <USBH_LL_Connect>
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff f91a 	bl	8008210 <USBH_LL_Disconnect>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff f8cb 	bl	80081aa <USBH_LL_PortEnabled>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff f8cb 	bl	80081c6 <USBH_LL_PortDisabled>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009046:	2b01      	cmp	r3, #1
 8009048:	d12a      	bne.n	80090a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800904a:	4a18      	ldr	r2, [pc, #96]	; (80090ac <USBH_LL_Init+0x74>)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a15      	ldr	r2, [pc, #84]	; (80090ac <USBH_LL_Init+0x74>)
 8009056:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800905a:	4b14      	ldr	r3, [pc, #80]	; (80090ac <USBH_LL_Init+0x74>)
 800905c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009060:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009062:	4b12      	ldr	r3, [pc, #72]	; (80090ac <USBH_LL_Init+0x74>)
 8009064:	2208      	movs	r2, #8
 8009066:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009068:	4b10      	ldr	r3, [pc, #64]	; (80090ac <USBH_LL_Init+0x74>)
 800906a:	2201      	movs	r2, #1
 800906c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <USBH_LL_Init+0x74>)
 8009070:	2200      	movs	r2, #0
 8009072:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <USBH_LL_Init+0x74>)
 8009076:	2202      	movs	r2, #2
 8009078:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800907a:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <USBH_LL_Init+0x74>)
 800907c:	2200      	movs	r2, #0
 800907e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009080:	480a      	ldr	r0, [pc, #40]	; (80090ac <USBH_LL_Init+0x74>)
 8009082:	f7f9 f820 	bl	80020c6 <HAL_HCD_Init>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800908c:	f7f7 fe30 	bl	8000cf0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009090:	4806      	ldr	r0, [pc, #24]	; (80090ac <USBH_LL_Init+0x74>)
 8009092:	f7f9 fc23 	bl	80028dc <HAL_HCD_GetCurrentFrame>
 8009096:	4603      	mov	r3, r0
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff f84c 	bl	8008138 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20000668 	.word	0x20000668

080090b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f9 fb90 	bl	80027ec <HAL_HCD_Start>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f95c 	bl	8009390 <USBH_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f9 fb98 	bl	8002832 <HAL_HCD_Stop>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f941 	bl	8009390 <USBH_Get_USB_Status>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009112:	7bbb      	ldrb	r3, [r7, #14]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800912e:	4618      	mov	r0, r3
 8009130:	f7f9 fbe2 	bl	80028f8 <HAL_HCD_GetCurrentSpeed>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d007      	beq.n	800914a <USBH_LL_GetSpeed+0x2e>
 800913a:	2b01      	cmp	r3, #1
 800913c:	d302      	bcc.n	8009144 <USBH_LL_GetSpeed+0x28>
 800913e:	2b02      	cmp	r3, #2
 8009140:	d006      	beq.n	8009150 <USBH_LL_GetSpeed+0x34>
 8009142:	e008      	b.n	8009156 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e008      	b.n	800915c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800914a:	2301      	movs	r3, #1
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e005      	b.n	800915c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009150:	2302      	movs	r3, #2
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	e002      	b.n	800915c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009156:	2301      	movs	r3, #1
 8009158:	73fb      	strb	r3, [r7, #15]
    break;
 800915a:	bf00      	nop
  }
  return  speed;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800917c:	4618      	mov	r0, r3
 800917e:	f7f9 fb75 	bl	800286c <HAL_HCD_ResetPort>
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f901 	bl	8009390 <USBH_Get_USB_Status>
 800918e:	4603      	mov	r3, r0
 8009190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009192:	7bbb      	ldrb	r3, [r7, #14]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f9 fb7d 	bl	80028b2 <HAL_HCD_HC_GetXferCount>
 80091b8:	4603      	mov	r3, r0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091c2:	b590      	push	{r4, r7, lr}
 80091c4:	b089      	sub	sp, #36	; 0x24
 80091c6:	af04      	add	r7, sp, #16
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	461a      	mov	r2, r3
 80091d0:	4603      	mov	r3, r0
 80091d2:	70fb      	strb	r3, [r7, #3]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70bb      	strb	r3, [r7, #2]
 80091d8:	4613      	mov	r3, r2
 80091da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80091ea:	787c      	ldrb	r4, [r7, #1]
 80091ec:	78ba      	ldrb	r2, [r7, #2]
 80091ee:	78f9      	ldrb	r1, [r7, #3]
 80091f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091f2:	9302      	str	r3, [sp, #8]
 80091f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4623      	mov	r3, r4
 8009202:	f7f8 ffc2 	bl	800218a <HAL_HCD_HC_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8bf 	bl	8009390 <USBH_Get_USB_Status>
 8009212:	4603      	mov	r3, r0
 8009214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009216:	7bbb      	ldrb	r3, [r7, #14]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	bd90      	pop	{r4, r7, pc}

08009220 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7f9 f83b 	bl	80022ba <HAL_HCD_HC_Halt>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f8a0 	bl	8009390 <USBH_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009254:	7bbb      	ldrb	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800925e:	b590      	push	{r4, r7, lr}
 8009260:	b089      	sub	sp, #36	; 0x24
 8009262:	af04      	add	r7, sp, #16
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	4608      	mov	r0, r1
 8009268:	4611      	mov	r1, r2
 800926a:	461a      	mov	r2, r3
 800926c:	4603      	mov	r3, r0
 800926e:	70fb      	strb	r3, [r7, #3]
 8009270:	460b      	mov	r3, r1
 8009272:	70bb      	strb	r3, [r7, #2]
 8009274:	4613      	mov	r3, r2
 8009276:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009286:	787c      	ldrb	r4, [r7, #1]
 8009288:	78ba      	ldrb	r2, [r7, #2]
 800928a:	78f9      	ldrb	r1, [r7, #3]
 800928c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	4623      	mov	r3, r4
 80092a2:	f7f9 f82d 	bl	8002300 <HAL_HCD_HC_SubmitRequest>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f86f 	bl	8009390 <USBH_Get_USB_Status>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd90      	pop	{r4, r7, pc}

080092c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092d2:	78fa      	ldrb	r2, [r7, #3]
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f9 fad6 	bl	8002888 <HAL_HCD_HC_GetURBState>
 80092dc:	4603      	mov	r3, r0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d103      	bne.n	8009304 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f872 	bl	80093e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009304:	20c8      	movs	r0, #200	; 0xc8
 8009306:	f7f8 fbdf 	bl	8001ac8 <HAL_Delay>
  return USBH_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	4613      	mov	r3, r2
 8009322:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800932a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800932c:	78fa      	ldrb	r2, [r7, #3]
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	440b      	add	r3, r1
 800933a:	333b      	adds	r3, #59	; 0x3b
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	440b      	add	r3, r1
 8009350:	3350      	adds	r3, #80	; 0x50
 8009352:	78ba      	ldrb	r2, [r7, #2]
 8009354:	701a      	strb	r2, [r3, #0]
 8009356:	e009      	b.n	800936c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	440b      	add	r3, r1
 8009366:	3351      	adds	r3, #81	; 0x51
 8009368:	78ba      	ldrb	r2, [r7, #2]
 800936a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f8 fba0 	bl	8001ac8 <HAL_Delay>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d817      	bhi.n	80093d4 <USBH_Get_USB_Status+0x44>
 80093a4:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <USBH_Get_USB_Status+0x1c>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	080093c3 	.word	0x080093c3
 80093b4:	080093c9 	.word	0x080093c9
 80093b8:	080093cf 	.word	0x080093cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e00b      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093c2:	2302      	movs	r3, #2
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	e008      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	e005      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093ce:	2302      	movs	r3, #2
 80093d0:	73fb      	strb	r3, [r7, #15]
    break;
 80093d2:	e002      	b.n	80093da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093d4:	2302      	movs	r3, #2
 80093d6:	73fb      	strb	r3, [r7, #15]
    break;
 80093d8:	bf00      	nop
  }
  return usb_status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093f6:	79fb      	ldrb	r3, [r7, #7]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80093fc:	2301      	movs	r3, #1
 80093fe:	73fb      	strb	r3, [r7, #15]
 8009400:	e001      	b.n	8009406 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	461a      	mov	r2, r3
 800940a:	2101      	movs	r1, #1
 800940c:	4803      	ldr	r0, [pc, #12]	; (800941c <MX_DriverVbusFS+0x34>)
 800940e:	f7f8 fe41 	bl	8002094 <HAL_GPIO_WritePin>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40020800 	.word	0x40020800

08009420 <__errno>:
 8009420:	4b01      	ldr	r3, [pc, #4]	; (8009428 <__errno+0x8>)
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	2000002c 	.word	0x2000002c

0800942c <__libc_init_array>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4e0d      	ldr	r6, [pc, #52]	; (8009464 <__libc_init_array+0x38>)
 8009430:	4c0d      	ldr	r4, [pc, #52]	; (8009468 <__libc_init_array+0x3c>)
 8009432:	1ba4      	subs	r4, r4, r6
 8009434:	10a4      	asrs	r4, r4, #2
 8009436:	2500      	movs	r5, #0
 8009438:	42a5      	cmp	r5, r4
 800943a:	d109      	bne.n	8009450 <__libc_init_array+0x24>
 800943c:	4e0b      	ldr	r6, [pc, #44]	; (800946c <__libc_init_array+0x40>)
 800943e:	4c0c      	ldr	r4, [pc, #48]	; (8009470 <__libc_init_array+0x44>)
 8009440:	f000 fc50 	bl	8009ce4 <_init>
 8009444:	1ba4      	subs	r4, r4, r6
 8009446:	10a4      	asrs	r4, r4, #2
 8009448:	2500      	movs	r5, #0
 800944a:	42a5      	cmp	r5, r4
 800944c:	d105      	bne.n	800945a <__libc_init_array+0x2e>
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009454:	4798      	blx	r3
 8009456:	3501      	adds	r5, #1
 8009458:	e7ee      	b.n	8009438 <__libc_init_array+0xc>
 800945a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800945e:	4798      	blx	r3
 8009460:	3501      	adds	r5, #1
 8009462:	e7f2      	b.n	800944a <__libc_init_array+0x1e>
 8009464:	08009ec0 	.word	0x08009ec0
 8009468:	08009ec0 	.word	0x08009ec0
 800946c:	08009ec0 	.word	0x08009ec0
 8009470:	08009ec4 	.word	0x08009ec4

08009474 <malloc>:
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <malloc+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f000 b861 	b.w	8009540 <_malloc_r>
 800947e:	bf00      	nop
 8009480:	2000002c 	.word	0x2000002c

08009484 <free>:
 8009484:	4b02      	ldr	r3, [pc, #8]	; (8009490 <free+0xc>)
 8009486:	4601      	mov	r1, r0
 8009488:	6818      	ldr	r0, [r3, #0]
 800948a:	f000 b80b 	b.w	80094a4 <_free_r>
 800948e:	bf00      	nop
 8009490:	2000002c 	.word	0x2000002c

08009494 <memset>:
 8009494:	4402      	add	r2, r0
 8009496:	4603      	mov	r3, r0
 8009498:	4293      	cmp	r3, r2
 800949a:	d100      	bne.n	800949e <memset+0xa>
 800949c:	4770      	bx	lr
 800949e:	f803 1b01 	strb.w	r1, [r3], #1
 80094a2:	e7f9      	b.n	8009498 <memset+0x4>

080094a4 <_free_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4605      	mov	r5, r0
 80094a8:	2900      	cmp	r1, #0
 80094aa:	d045      	beq.n	8009538 <_free_r+0x94>
 80094ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b0:	1f0c      	subs	r4, r1, #4
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bfb8      	it	lt
 80094b6:	18e4      	addlt	r4, r4, r3
 80094b8:	f000 f8e6 	bl	8009688 <__malloc_lock>
 80094bc:	4a1f      	ldr	r2, [pc, #124]	; (800953c <_free_r+0x98>)
 80094be:	6813      	ldr	r3, [r2, #0]
 80094c0:	4610      	mov	r0, r2
 80094c2:	b933      	cbnz	r3, 80094d2 <_free_r+0x2e>
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	6014      	str	r4, [r2, #0]
 80094c8:	4628      	mov	r0, r5
 80094ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ce:	f000 b8dc 	b.w	800968a <__malloc_unlock>
 80094d2:	42a3      	cmp	r3, r4
 80094d4:	d90c      	bls.n	80094f0 <_free_r+0x4c>
 80094d6:	6821      	ldr	r1, [r4, #0]
 80094d8:	1862      	adds	r2, r4, r1
 80094da:	4293      	cmp	r3, r2
 80094dc:	bf04      	itt	eq
 80094de:	681a      	ldreq	r2, [r3, #0]
 80094e0:	685b      	ldreq	r3, [r3, #4]
 80094e2:	6063      	str	r3, [r4, #4]
 80094e4:	bf04      	itt	eq
 80094e6:	1852      	addeq	r2, r2, r1
 80094e8:	6022      	streq	r2, [r4, #0]
 80094ea:	6004      	str	r4, [r0, #0]
 80094ec:	e7ec      	b.n	80094c8 <_free_r+0x24>
 80094ee:	4613      	mov	r3, r2
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	b10a      	cbz	r2, 80094f8 <_free_r+0x54>
 80094f4:	42a2      	cmp	r2, r4
 80094f6:	d9fa      	bls.n	80094ee <_free_r+0x4a>
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	1858      	adds	r0, r3, r1
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d10b      	bne.n	8009518 <_free_r+0x74>
 8009500:	6820      	ldr	r0, [r4, #0]
 8009502:	4401      	add	r1, r0
 8009504:	1858      	adds	r0, r3, r1
 8009506:	4282      	cmp	r2, r0
 8009508:	6019      	str	r1, [r3, #0]
 800950a:	d1dd      	bne.n	80094c8 <_free_r+0x24>
 800950c:	6810      	ldr	r0, [r2, #0]
 800950e:	6852      	ldr	r2, [r2, #4]
 8009510:	605a      	str	r2, [r3, #4]
 8009512:	4401      	add	r1, r0
 8009514:	6019      	str	r1, [r3, #0]
 8009516:	e7d7      	b.n	80094c8 <_free_r+0x24>
 8009518:	d902      	bls.n	8009520 <_free_r+0x7c>
 800951a:	230c      	movs	r3, #12
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	e7d3      	b.n	80094c8 <_free_r+0x24>
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	1821      	adds	r1, r4, r0
 8009524:	428a      	cmp	r2, r1
 8009526:	bf04      	itt	eq
 8009528:	6811      	ldreq	r1, [r2, #0]
 800952a:	6852      	ldreq	r2, [r2, #4]
 800952c:	6062      	str	r2, [r4, #4]
 800952e:	bf04      	itt	eq
 8009530:	1809      	addeq	r1, r1, r0
 8009532:	6021      	streq	r1, [r4, #0]
 8009534:	605c      	str	r4, [r3, #4]
 8009536:	e7c7      	b.n	80094c8 <_free_r+0x24>
 8009538:	bd38      	pop	{r3, r4, r5, pc}
 800953a:	bf00      	nop
 800953c:	200000bc 	.word	0x200000bc

08009540 <_malloc_r>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	1ccd      	adds	r5, r1, #3
 8009544:	f025 0503 	bic.w	r5, r5, #3
 8009548:	3508      	adds	r5, #8
 800954a:	2d0c      	cmp	r5, #12
 800954c:	bf38      	it	cc
 800954e:	250c      	movcc	r5, #12
 8009550:	2d00      	cmp	r5, #0
 8009552:	4606      	mov	r6, r0
 8009554:	db01      	blt.n	800955a <_malloc_r+0x1a>
 8009556:	42a9      	cmp	r1, r5
 8009558:	d903      	bls.n	8009562 <_malloc_r+0x22>
 800955a:	230c      	movs	r3, #12
 800955c:	6033      	str	r3, [r6, #0]
 800955e:	2000      	movs	r0, #0
 8009560:	bd70      	pop	{r4, r5, r6, pc}
 8009562:	f000 f891 	bl	8009688 <__malloc_lock>
 8009566:	4a21      	ldr	r2, [pc, #132]	; (80095ec <_malloc_r+0xac>)
 8009568:	6814      	ldr	r4, [r2, #0]
 800956a:	4621      	mov	r1, r4
 800956c:	b991      	cbnz	r1, 8009594 <_malloc_r+0x54>
 800956e:	4c20      	ldr	r4, [pc, #128]	; (80095f0 <_malloc_r+0xb0>)
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	b91b      	cbnz	r3, 800957c <_malloc_r+0x3c>
 8009574:	4630      	mov	r0, r6
 8009576:	f000 f83d 	bl	80095f4 <_sbrk_r>
 800957a:	6020      	str	r0, [r4, #0]
 800957c:	4629      	mov	r1, r5
 800957e:	4630      	mov	r0, r6
 8009580:	f000 f838 	bl	80095f4 <_sbrk_r>
 8009584:	1c43      	adds	r3, r0, #1
 8009586:	d124      	bne.n	80095d2 <_malloc_r+0x92>
 8009588:	230c      	movs	r3, #12
 800958a:	6033      	str	r3, [r6, #0]
 800958c:	4630      	mov	r0, r6
 800958e:	f000 f87c 	bl	800968a <__malloc_unlock>
 8009592:	e7e4      	b.n	800955e <_malloc_r+0x1e>
 8009594:	680b      	ldr	r3, [r1, #0]
 8009596:	1b5b      	subs	r3, r3, r5
 8009598:	d418      	bmi.n	80095cc <_malloc_r+0x8c>
 800959a:	2b0b      	cmp	r3, #11
 800959c:	d90f      	bls.n	80095be <_malloc_r+0x7e>
 800959e:	600b      	str	r3, [r1, #0]
 80095a0:	50cd      	str	r5, [r1, r3]
 80095a2:	18cc      	adds	r4, r1, r3
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 f870 	bl	800968a <__malloc_unlock>
 80095aa:	f104 000b 	add.w	r0, r4, #11
 80095ae:	1d23      	adds	r3, r4, #4
 80095b0:	f020 0007 	bic.w	r0, r0, #7
 80095b4:	1ac3      	subs	r3, r0, r3
 80095b6:	d0d3      	beq.n	8009560 <_malloc_r+0x20>
 80095b8:	425a      	negs	r2, r3
 80095ba:	50e2      	str	r2, [r4, r3]
 80095bc:	e7d0      	b.n	8009560 <_malloc_r+0x20>
 80095be:	428c      	cmp	r4, r1
 80095c0:	684b      	ldr	r3, [r1, #4]
 80095c2:	bf16      	itet	ne
 80095c4:	6063      	strne	r3, [r4, #4]
 80095c6:	6013      	streq	r3, [r2, #0]
 80095c8:	460c      	movne	r4, r1
 80095ca:	e7eb      	b.n	80095a4 <_malloc_r+0x64>
 80095cc:	460c      	mov	r4, r1
 80095ce:	6849      	ldr	r1, [r1, #4]
 80095d0:	e7cc      	b.n	800956c <_malloc_r+0x2c>
 80095d2:	1cc4      	adds	r4, r0, #3
 80095d4:	f024 0403 	bic.w	r4, r4, #3
 80095d8:	42a0      	cmp	r0, r4
 80095da:	d005      	beq.n	80095e8 <_malloc_r+0xa8>
 80095dc:	1a21      	subs	r1, r4, r0
 80095de:	4630      	mov	r0, r6
 80095e0:	f000 f808 	bl	80095f4 <_sbrk_r>
 80095e4:	3001      	adds	r0, #1
 80095e6:	d0cf      	beq.n	8009588 <_malloc_r+0x48>
 80095e8:	6025      	str	r5, [r4, #0]
 80095ea:	e7db      	b.n	80095a4 <_malloc_r+0x64>
 80095ec:	200000bc 	.word	0x200000bc
 80095f0:	200000c0 	.word	0x200000c0

080095f4 <_sbrk_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4c06      	ldr	r4, [pc, #24]	; (8009610 <_sbrk_r+0x1c>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4605      	mov	r5, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	f7f7 fd94 	bl	800112c <_sbrk>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_sbrk_r+0x1a>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	b103      	cbz	r3, 800960e <_sbrk_r+0x1a>
 800960c:	602b      	str	r3, [r5, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	2000092c 	.word	0x2000092c

08009614 <siprintf>:
 8009614:	b40e      	push	{r1, r2, r3}
 8009616:	b500      	push	{lr}
 8009618:	b09c      	sub	sp, #112	; 0x70
 800961a:	ab1d      	add	r3, sp, #116	; 0x74
 800961c:	9002      	str	r0, [sp, #8]
 800961e:	9006      	str	r0, [sp, #24]
 8009620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009624:	4809      	ldr	r0, [pc, #36]	; (800964c <siprintf+0x38>)
 8009626:	9107      	str	r1, [sp, #28]
 8009628:	9104      	str	r1, [sp, #16]
 800962a:	4909      	ldr	r1, [pc, #36]	; (8009650 <siprintf+0x3c>)
 800962c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009630:	9105      	str	r1, [sp, #20]
 8009632:	6800      	ldr	r0, [r0, #0]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	a902      	add	r1, sp, #8
 8009638:	f000 f882 	bl	8009740 <_svfiprintf_r>
 800963c:	9b02      	ldr	r3, [sp, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
 8009642:	b01c      	add	sp, #112	; 0x70
 8009644:	f85d eb04 	ldr.w	lr, [sp], #4
 8009648:	b003      	add	sp, #12
 800964a:	4770      	bx	lr
 800964c:	2000002c 	.word	0x2000002c
 8009650:	ffff0208 	.word	0xffff0208

08009654 <strstr>:
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	7803      	ldrb	r3, [r0, #0]
 8009658:	b17b      	cbz	r3, 800967a <strstr+0x26>
 800965a:	4604      	mov	r4, r0
 800965c:	7823      	ldrb	r3, [r4, #0]
 800965e:	4620      	mov	r0, r4
 8009660:	1c66      	adds	r6, r4, #1
 8009662:	b17b      	cbz	r3, 8009684 <strstr+0x30>
 8009664:	1e4a      	subs	r2, r1, #1
 8009666:	1e63      	subs	r3, r4, #1
 8009668:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800966c:	b14d      	cbz	r5, 8009682 <strstr+0x2e>
 800966e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009672:	42af      	cmp	r7, r5
 8009674:	4634      	mov	r4, r6
 8009676:	d0f7      	beq.n	8009668 <strstr+0x14>
 8009678:	e7f0      	b.n	800965c <strstr+0x8>
 800967a:	780b      	ldrb	r3, [r1, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	bf18      	it	ne
 8009680:	2000      	movne	r0, #0
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009684:	4618      	mov	r0, r3
 8009686:	e7fc      	b.n	8009682 <strstr+0x2e>

08009688 <__malloc_lock>:
 8009688:	4770      	bx	lr

0800968a <__malloc_unlock>:
 800968a:	4770      	bx	lr

0800968c <__ssputs_r>:
 800968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	688e      	ldr	r6, [r1, #8]
 8009692:	429e      	cmp	r6, r3
 8009694:	4682      	mov	sl, r0
 8009696:	460c      	mov	r4, r1
 8009698:	4690      	mov	r8, r2
 800969a:	4699      	mov	r9, r3
 800969c:	d837      	bhi.n	800970e <__ssputs_r+0x82>
 800969e:	898a      	ldrh	r2, [r1, #12]
 80096a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096a4:	d031      	beq.n	800970a <__ssputs_r+0x7e>
 80096a6:	6825      	ldr	r5, [r4, #0]
 80096a8:	6909      	ldr	r1, [r1, #16]
 80096aa:	1a6f      	subs	r7, r5, r1
 80096ac:	6965      	ldr	r5, [r4, #20]
 80096ae:	2302      	movs	r3, #2
 80096b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80096b8:	f109 0301 	add.w	r3, r9, #1
 80096bc:	443b      	add	r3, r7
 80096be:	429d      	cmp	r5, r3
 80096c0:	bf38      	it	cc
 80096c2:	461d      	movcc	r5, r3
 80096c4:	0553      	lsls	r3, r2, #21
 80096c6:	d530      	bpl.n	800972a <__ssputs_r+0x9e>
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7ff ff39 	bl	8009540 <_malloc_r>
 80096ce:	4606      	mov	r6, r0
 80096d0:	b950      	cbnz	r0, 80096e8 <__ssputs_r+0x5c>
 80096d2:	230c      	movs	r3, #12
 80096d4:	f8ca 3000 	str.w	r3, [sl]
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295
 80096e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e8:	463a      	mov	r2, r7
 80096ea:	6921      	ldr	r1, [r4, #16]
 80096ec:	f000 faa8 	bl	8009c40 <memcpy>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	6126      	str	r6, [r4, #16]
 80096fe:	6165      	str	r5, [r4, #20]
 8009700:	443e      	add	r6, r7
 8009702:	1bed      	subs	r5, r5, r7
 8009704:	6026      	str	r6, [r4, #0]
 8009706:	60a5      	str	r5, [r4, #8]
 8009708:	464e      	mov	r6, r9
 800970a:	454e      	cmp	r6, r9
 800970c:	d900      	bls.n	8009710 <__ssputs_r+0x84>
 800970e:	464e      	mov	r6, r9
 8009710:	4632      	mov	r2, r6
 8009712:	4641      	mov	r1, r8
 8009714:	6820      	ldr	r0, [r4, #0]
 8009716:	f000 fa9e 	bl	8009c56 <memmove>
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	1b9b      	subs	r3, r3, r6
 800971e:	60a3      	str	r3, [r4, #8]
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	441e      	add	r6, r3
 8009724:	6026      	str	r6, [r4, #0]
 8009726:	2000      	movs	r0, #0
 8009728:	e7dc      	b.n	80096e4 <__ssputs_r+0x58>
 800972a:	462a      	mov	r2, r5
 800972c:	f000 faac 	bl	8009c88 <_realloc_r>
 8009730:	4606      	mov	r6, r0
 8009732:	2800      	cmp	r0, #0
 8009734:	d1e2      	bne.n	80096fc <__ssputs_r+0x70>
 8009736:	6921      	ldr	r1, [r4, #16]
 8009738:	4650      	mov	r0, sl
 800973a:	f7ff feb3 	bl	80094a4 <_free_r>
 800973e:	e7c8      	b.n	80096d2 <__ssputs_r+0x46>

08009740 <_svfiprintf_r>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	461d      	mov	r5, r3
 8009746:	898b      	ldrh	r3, [r1, #12]
 8009748:	061f      	lsls	r7, r3, #24
 800974a:	b09d      	sub	sp, #116	; 0x74
 800974c:	4680      	mov	r8, r0
 800974e:	460c      	mov	r4, r1
 8009750:	4616      	mov	r6, r2
 8009752:	d50f      	bpl.n	8009774 <_svfiprintf_r+0x34>
 8009754:	690b      	ldr	r3, [r1, #16]
 8009756:	b96b      	cbnz	r3, 8009774 <_svfiprintf_r+0x34>
 8009758:	2140      	movs	r1, #64	; 0x40
 800975a:	f7ff fef1 	bl	8009540 <_malloc_r>
 800975e:	6020      	str	r0, [r4, #0]
 8009760:	6120      	str	r0, [r4, #16]
 8009762:	b928      	cbnz	r0, 8009770 <_svfiprintf_r+0x30>
 8009764:	230c      	movs	r3, #12
 8009766:	f8c8 3000 	str.w	r3, [r8]
 800976a:	f04f 30ff 	mov.w	r0, #4294967295
 800976e:	e0c8      	b.n	8009902 <_svfiprintf_r+0x1c2>
 8009770:	2340      	movs	r3, #64	; 0x40
 8009772:	6163      	str	r3, [r4, #20]
 8009774:	2300      	movs	r3, #0
 8009776:	9309      	str	r3, [sp, #36]	; 0x24
 8009778:	2320      	movs	r3, #32
 800977a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800977e:	2330      	movs	r3, #48	; 0x30
 8009780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009784:	9503      	str	r5, [sp, #12]
 8009786:	f04f 0b01 	mov.w	fp, #1
 800978a:	4637      	mov	r7, r6
 800978c:	463d      	mov	r5, r7
 800978e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009792:	b10b      	cbz	r3, 8009798 <_svfiprintf_r+0x58>
 8009794:	2b25      	cmp	r3, #37	; 0x25
 8009796:	d13e      	bne.n	8009816 <_svfiprintf_r+0xd6>
 8009798:	ebb7 0a06 	subs.w	sl, r7, r6
 800979c:	d00b      	beq.n	80097b6 <_svfiprintf_r+0x76>
 800979e:	4653      	mov	r3, sl
 80097a0:	4632      	mov	r2, r6
 80097a2:	4621      	mov	r1, r4
 80097a4:	4640      	mov	r0, r8
 80097a6:	f7ff ff71 	bl	800968c <__ssputs_r>
 80097aa:	3001      	adds	r0, #1
 80097ac:	f000 80a4 	beq.w	80098f8 <_svfiprintf_r+0x1b8>
 80097b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b2:	4453      	add	r3, sl
 80097b4:	9309      	str	r3, [sp, #36]	; 0x24
 80097b6:	783b      	ldrb	r3, [r7, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 809d 	beq.w	80098f8 <_svfiprintf_r+0x1b8>
 80097be:	2300      	movs	r3, #0
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295
 80097c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097d0:	931a      	str	r3, [sp, #104]	; 0x68
 80097d2:	462f      	mov	r7, r5
 80097d4:	2205      	movs	r2, #5
 80097d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80097da:	4850      	ldr	r0, [pc, #320]	; (800991c <_svfiprintf_r+0x1dc>)
 80097dc:	f7f6 fd00 	bl	80001e0 <memchr>
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	b9d0      	cbnz	r0, 800981a <_svfiprintf_r+0xda>
 80097e4:	06d9      	lsls	r1, r3, #27
 80097e6:	bf44      	itt	mi
 80097e8:	2220      	movmi	r2, #32
 80097ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097ee:	071a      	lsls	r2, r3, #28
 80097f0:	bf44      	itt	mi
 80097f2:	222b      	movmi	r2, #43	; 0x2b
 80097f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097f8:	782a      	ldrb	r2, [r5, #0]
 80097fa:	2a2a      	cmp	r2, #42	; 0x2a
 80097fc:	d015      	beq.n	800982a <_svfiprintf_r+0xea>
 80097fe:	9a07      	ldr	r2, [sp, #28]
 8009800:	462f      	mov	r7, r5
 8009802:	2000      	movs	r0, #0
 8009804:	250a      	movs	r5, #10
 8009806:	4639      	mov	r1, r7
 8009808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800980c:	3b30      	subs	r3, #48	; 0x30
 800980e:	2b09      	cmp	r3, #9
 8009810:	d94d      	bls.n	80098ae <_svfiprintf_r+0x16e>
 8009812:	b1b8      	cbz	r0, 8009844 <_svfiprintf_r+0x104>
 8009814:	e00f      	b.n	8009836 <_svfiprintf_r+0xf6>
 8009816:	462f      	mov	r7, r5
 8009818:	e7b8      	b.n	800978c <_svfiprintf_r+0x4c>
 800981a:	4a40      	ldr	r2, [pc, #256]	; (800991c <_svfiprintf_r+0x1dc>)
 800981c:	1a80      	subs	r0, r0, r2
 800981e:	fa0b f000 	lsl.w	r0, fp, r0
 8009822:	4318      	orrs	r0, r3
 8009824:	9004      	str	r0, [sp, #16]
 8009826:	463d      	mov	r5, r7
 8009828:	e7d3      	b.n	80097d2 <_svfiprintf_r+0x92>
 800982a:	9a03      	ldr	r2, [sp, #12]
 800982c:	1d11      	adds	r1, r2, #4
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	9103      	str	r1, [sp, #12]
 8009832:	2a00      	cmp	r2, #0
 8009834:	db01      	blt.n	800983a <_svfiprintf_r+0xfa>
 8009836:	9207      	str	r2, [sp, #28]
 8009838:	e004      	b.n	8009844 <_svfiprintf_r+0x104>
 800983a:	4252      	negs	r2, r2
 800983c:	f043 0302 	orr.w	r3, r3, #2
 8009840:	9207      	str	r2, [sp, #28]
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	783b      	ldrb	r3, [r7, #0]
 8009846:	2b2e      	cmp	r3, #46	; 0x2e
 8009848:	d10c      	bne.n	8009864 <_svfiprintf_r+0x124>
 800984a:	787b      	ldrb	r3, [r7, #1]
 800984c:	2b2a      	cmp	r3, #42	; 0x2a
 800984e:	d133      	bne.n	80098b8 <_svfiprintf_r+0x178>
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	9203      	str	r2, [sp, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	bfb8      	it	lt
 800985c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009860:	3702      	adds	r7, #2
 8009862:	9305      	str	r3, [sp, #20]
 8009864:	4d2e      	ldr	r5, [pc, #184]	; (8009920 <_svfiprintf_r+0x1e0>)
 8009866:	7839      	ldrb	r1, [r7, #0]
 8009868:	2203      	movs	r2, #3
 800986a:	4628      	mov	r0, r5
 800986c:	f7f6 fcb8 	bl	80001e0 <memchr>
 8009870:	b138      	cbz	r0, 8009882 <_svfiprintf_r+0x142>
 8009872:	2340      	movs	r3, #64	; 0x40
 8009874:	1b40      	subs	r0, r0, r5
 8009876:	fa03 f000 	lsl.w	r0, r3, r0
 800987a:	9b04      	ldr	r3, [sp, #16]
 800987c:	4303      	orrs	r3, r0
 800987e:	3701      	adds	r7, #1
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	7839      	ldrb	r1, [r7, #0]
 8009884:	4827      	ldr	r0, [pc, #156]	; (8009924 <_svfiprintf_r+0x1e4>)
 8009886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800988a:	2206      	movs	r2, #6
 800988c:	1c7e      	adds	r6, r7, #1
 800988e:	f7f6 fca7 	bl	80001e0 <memchr>
 8009892:	2800      	cmp	r0, #0
 8009894:	d038      	beq.n	8009908 <_svfiprintf_r+0x1c8>
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <_svfiprintf_r+0x1e8>)
 8009898:	bb13      	cbnz	r3, 80098e0 <_svfiprintf_r+0x1a0>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	3307      	adds	r3, #7
 800989e:	f023 0307 	bic.w	r3, r3, #7
 80098a2:	3308      	adds	r3, #8
 80098a4:	9303      	str	r3, [sp, #12]
 80098a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098a8:	444b      	add	r3, r9
 80098aa:	9309      	str	r3, [sp, #36]	; 0x24
 80098ac:	e76d      	b.n	800978a <_svfiprintf_r+0x4a>
 80098ae:	fb05 3202 	mla	r2, r5, r2, r3
 80098b2:	2001      	movs	r0, #1
 80098b4:	460f      	mov	r7, r1
 80098b6:	e7a6      	b.n	8009806 <_svfiprintf_r+0xc6>
 80098b8:	2300      	movs	r3, #0
 80098ba:	3701      	adds	r7, #1
 80098bc:	9305      	str	r3, [sp, #20]
 80098be:	4619      	mov	r1, r3
 80098c0:	250a      	movs	r5, #10
 80098c2:	4638      	mov	r0, r7
 80098c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098c8:	3a30      	subs	r2, #48	; 0x30
 80098ca:	2a09      	cmp	r2, #9
 80098cc:	d903      	bls.n	80098d6 <_svfiprintf_r+0x196>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0c8      	beq.n	8009864 <_svfiprintf_r+0x124>
 80098d2:	9105      	str	r1, [sp, #20]
 80098d4:	e7c6      	b.n	8009864 <_svfiprintf_r+0x124>
 80098d6:	fb05 2101 	mla	r1, r5, r1, r2
 80098da:	2301      	movs	r3, #1
 80098dc:	4607      	mov	r7, r0
 80098de:	e7f0      	b.n	80098c2 <_svfiprintf_r+0x182>
 80098e0:	ab03      	add	r3, sp, #12
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	4622      	mov	r2, r4
 80098e6:	4b11      	ldr	r3, [pc, #68]	; (800992c <_svfiprintf_r+0x1ec>)
 80098e8:	a904      	add	r1, sp, #16
 80098ea:	4640      	mov	r0, r8
 80098ec:	f3af 8000 	nop.w
 80098f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80098f4:	4681      	mov	r9, r0
 80098f6:	d1d6      	bne.n	80098a6 <_svfiprintf_r+0x166>
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	065b      	lsls	r3, r3, #25
 80098fc:	f53f af35 	bmi.w	800976a <_svfiprintf_r+0x2a>
 8009900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009902:	b01d      	add	sp, #116	; 0x74
 8009904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009908:	ab03      	add	r3, sp, #12
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	4622      	mov	r2, r4
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <_svfiprintf_r+0x1ec>)
 8009910:	a904      	add	r1, sp, #16
 8009912:	4640      	mov	r0, r8
 8009914:	f000 f882 	bl	8009a1c <_printf_i>
 8009918:	e7ea      	b.n	80098f0 <_svfiprintf_r+0x1b0>
 800991a:	bf00      	nop
 800991c:	08009e84 	.word	0x08009e84
 8009920:	08009e8a 	.word	0x08009e8a
 8009924:	08009e8e 	.word	0x08009e8e
 8009928:	00000000 	.word	0x00000000
 800992c:	0800968d 	.word	0x0800968d

08009930 <_printf_common>:
 8009930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	4691      	mov	r9, r2
 8009936:	461f      	mov	r7, r3
 8009938:	688a      	ldr	r2, [r1, #8]
 800993a:	690b      	ldr	r3, [r1, #16]
 800993c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009940:	4293      	cmp	r3, r2
 8009942:	bfb8      	it	lt
 8009944:	4613      	movlt	r3, r2
 8009946:	f8c9 3000 	str.w	r3, [r9]
 800994a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800994e:	4606      	mov	r6, r0
 8009950:	460c      	mov	r4, r1
 8009952:	b112      	cbz	r2, 800995a <_printf_common+0x2a>
 8009954:	3301      	adds	r3, #1
 8009956:	f8c9 3000 	str.w	r3, [r9]
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	0699      	lsls	r1, r3, #26
 800995e:	bf42      	ittt	mi
 8009960:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009964:	3302      	addmi	r3, #2
 8009966:	f8c9 3000 	strmi.w	r3, [r9]
 800996a:	6825      	ldr	r5, [r4, #0]
 800996c:	f015 0506 	ands.w	r5, r5, #6
 8009970:	d107      	bne.n	8009982 <_printf_common+0x52>
 8009972:	f104 0a19 	add.w	sl, r4, #25
 8009976:	68e3      	ldr	r3, [r4, #12]
 8009978:	f8d9 2000 	ldr.w	r2, [r9]
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	42ab      	cmp	r3, r5
 8009980:	dc28      	bgt.n	80099d4 <_printf_common+0xa4>
 8009982:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009986:	6822      	ldr	r2, [r4, #0]
 8009988:	3300      	adds	r3, #0
 800998a:	bf18      	it	ne
 800998c:	2301      	movne	r3, #1
 800998e:	0692      	lsls	r2, r2, #26
 8009990:	d42d      	bmi.n	80099ee <_printf_common+0xbe>
 8009992:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009996:	4639      	mov	r1, r7
 8009998:	4630      	mov	r0, r6
 800999a:	47c0      	blx	r8
 800999c:	3001      	adds	r0, #1
 800999e:	d020      	beq.n	80099e2 <_printf_common+0xb2>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	68e5      	ldr	r5, [r4, #12]
 80099a4:	f8d9 2000 	ldr.w	r2, [r9]
 80099a8:	f003 0306 	and.w	r3, r3, #6
 80099ac:	2b04      	cmp	r3, #4
 80099ae:	bf08      	it	eq
 80099b0:	1aad      	subeq	r5, r5, r2
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	6922      	ldr	r2, [r4, #16]
 80099b6:	bf0c      	ite	eq
 80099b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099bc:	2500      	movne	r5, #0
 80099be:	4293      	cmp	r3, r2
 80099c0:	bfc4      	itt	gt
 80099c2:	1a9b      	subgt	r3, r3, r2
 80099c4:	18ed      	addgt	r5, r5, r3
 80099c6:	f04f 0900 	mov.w	r9, #0
 80099ca:	341a      	adds	r4, #26
 80099cc:	454d      	cmp	r5, r9
 80099ce:	d11a      	bne.n	8009a06 <_printf_common+0xd6>
 80099d0:	2000      	movs	r0, #0
 80099d2:	e008      	b.n	80099e6 <_printf_common+0xb6>
 80099d4:	2301      	movs	r3, #1
 80099d6:	4652      	mov	r2, sl
 80099d8:	4639      	mov	r1, r7
 80099da:	4630      	mov	r0, r6
 80099dc:	47c0      	blx	r8
 80099de:	3001      	adds	r0, #1
 80099e0:	d103      	bne.n	80099ea <_printf_common+0xba>
 80099e2:	f04f 30ff 	mov.w	r0, #4294967295
 80099e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ea:	3501      	adds	r5, #1
 80099ec:	e7c3      	b.n	8009976 <_printf_common+0x46>
 80099ee:	18e1      	adds	r1, r4, r3
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	2030      	movs	r0, #48	; 0x30
 80099f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099f8:	4422      	add	r2, r4
 80099fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a02:	3302      	adds	r3, #2
 8009a04:	e7c5      	b.n	8009992 <_printf_common+0x62>
 8009a06:	2301      	movs	r3, #1
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	47c0      	blx	r8
 8009a10:	3001      	adds	r0, #1
 8009a12:	d0e6      	beq.n	80099e2 <_printf_common+0xb2>
 8009a14:	f109 0901 	add.w	r9, r9, #1
 8009a18:	e7d8      	b.n	80099cc <_printf_common+0x9c>
	...

08009a1c <_printf_i>:
 8009a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a24:	460c      	mov	r4, r1
 8009a26:	7e09      	ldrb	r1, [r1, #24]
 8009a28:	b085      	sub	sp, #20
 8009a2a:	296e      	cmp	r1, #110	; 0x6e
 8009a2c:	4617      	mov	r7, r2
 8009a2e:	4606      	mov	r6, r0
 8009a30:	4698      	mov	r8, r3
 8009a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a34:	f000 80b3 	beq.w	8009b9e <_printf_i+0x182>
 8009a38:	d822      	bhi.n	8009a80 <_printf_i+0x64>
 8009a3a:	2963      	cmp	r1, #99	; 0x63
 8009a3c:	d036      	beq.n	8009aac <_printf_i+0x90>
 8009a3e:	d80a      	bhi.n	8009a56 <_printf_i+0x3a>
 8009a40:	2900      	cmp	r1, #0
 8009a42:	f000 80b9 	beq.w	8009bb8 <_printf_i+0x19c>
 8009a46:	2958      	cmp	r1, #88	; 0x58
 8009a48:	f000 8083 	beq.w	8009b52 <_printf_i+0x136>
 8009a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009a54:	e032      	b.n	8009abc <_printf_i+0xa0>
 8009a56:	2964      	cmp	r1, #100	; 0x64
 8009a58:	d001      	beq.n	8009a5e <_printf_i+0x42>
 8009a5a:	2969      	cmp	r1, #105	; 0x69
 8009a5c:	d1f6      	bne.n	8009a4c <_printf_i+0x30>
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	6813      	ldr	r3, [r2, #0]
 8009a62:	0605      	lsls	r5, r0, #24
 8009a64:	f103 0104 	add.w	r1, r3, #4
 8009a68:	d52a      	bpl.n	8009ac0 <_printf_i+0xa4>
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6011      	str	r1, [r2, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da03      	bge.n	8009a7a <_printf_i+0x5e>
 8009a72:	222d      	movs	r2, #45	; 0x2d
 8009a74:	425b      	negs	r3, r3
 8009a76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a7a:	486f      	ldr	r0, [pc, #444]	; (8009c38 <_printf_i+0x21c>)
 8009a7c:	220a      	movs	r2, #10
 8009a7e:	e039      	b.n	8009af4 <_printf_i+0xd8>
 8009a80:	2973      	cmp	r1, #115	; 0x73
 8009a82:	f000 809d 	beq.w	8009bc0 <_printf_i+0x1a4>
 8009a86:	d808      	bhi.n	8009a9a <_printf_i+0x7e>
 8009a88:	296f      	cmp	r1, #111	; 0x6f
 8009a8a:	d020      	beq.n	8009ace <_printf_i+0xb2>
 8009a8c:	2970      	cmp	r1, #112	; 0x70
 8009a8e:	d1dd      	bne.n	8009a4c <_printf_i+0x30>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	f043 0320 	orr.w	r3, r3, #32
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	e003      	b.n	8009aa2 <_printf_i+0x86>
 8009a9a:	2975      	cmp	r1, #117	; 0x75
 8009a9c:	d017      	beq.n	8009ace <_printf_i+0xb2>
 8009a9e:	2978      	cmp	r1, #120	; 0x78
 8009aa0:	d1d4      	bne.n	8009a4c <_printf_i+0x30>
 8009aa2:	2378      	movs	r3, #120	; 0x78
 8009aa4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aa8:	4864      	ldr	r0, [pc, #400]	; (8009c3c <_printf_i+0x220>)
 8009aaa:	e055      	b.n	8009b58 <_printf_i+0x13c>
 8009aac:	6813      	ldr	r3, [r2, #0]
 8009aae:	1d19      	adds	r1, r3, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6011      	str	r1, [r2, #0]
 8009ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009abc:	2301      	movs	r3, #1
 8009abe:	e08c      	b.n	8009bda <_printf_i+0x1be>
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6011      	str	r1, [r2, #0]
 8009ac4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ac8:	bf18      	it	ne
 8009aca:	b21b      	sxthne	r3, r3
 8009acc:	e7cf      	b.n	8009a6e <_printf_i+0x52>
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	6825      	ldr	r5, [r4, #0]
 8009ad2:	1d18      	adds	r0, r3, #4
 8009ad4:	6010      	str	r0, [r2, #0]
 8009ad6:	0628      	lsls	r0, r5, #24
 8009ad8:	d501      	bpl.n	8009ade <_printf_i+0xc2>
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	e002      	b.n	8009ae4 <_printf_i+0xc8>
 8009ade:	0668      	lsls	r0, r5, #25
 8009ae0:	d5fb      	bpl.n	8009ada <_printf_i+0xbe>
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	4854      	ldr	r0, [pc, #336]	; (8009c38 <_printf_i+0x21c>)
 8009ae6:	296f      	cmp	r1, #111	; 0x6f
 8009ae8:	bf14      	ite	ne
 8009aea:	220a      	movne	r2, #10
 8009aec:	2208      	moveq	r2, #8
 8009aee:	2100      	movs	r1, #0
 8009af0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009af4:	6865      	ldr	r5, [r4, #4]
 8009af6:	60a5      	str	r5, [r4, #8]
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	f2c0 8095 	blt.w	8009c28 <_printf_i+0x20c>
 8009afe:	6821      	ldr	r1, [r4, #0]
 8009b00:	f021 0104 	bic.w	r1, r1, #4
 8009b04:	6021      	str	r1, [r4, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d13d      	bne.n	8009b86 <_printf_i+0x16a>
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	f040 808e 	bne.w	8009c2c <_printf_i+0x210>
 8009b10:	4665      	mov	r5, ip
 8009b12:	2a08      	cmp	r2, #8
 8009b14:	d10b      	bne.n	8009b2e <_printf_i+0x112>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	07db      	lsls	r3, r3, #31
 8009b1a:	d508      	bpl.n	8009b2e <_printf_i+0x112>
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	6862      	ldr	r2, [r4, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	bfde      	ittt	le
 8009b24:	2330      	movle	r3, #48	; 0x30
 8009b26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b2e:	ebac 0305 	sub.w	r3, ip, r5
 8009b32:	6123      	str	r3, [r4, #16]
 8009b34:	f8cd 8000 	str.w	r8, [sp]
 8009b38:	463b      	mov	r3, r7
 8009b3a:	aa03      	add	r2, sp, #12
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f7ff fef6 	bl	8009930 <_printf_common>
 8009b44:	3001      	adds	r0, #1
 8009b46:	d14d      	bne.n	8009be4 <_printf_i+0x1c8>
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	b005      	add	sp, #20
 8009b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b52:	4839      	ldr	r0, [pc, #228]	; (8009c38 <_printf_i+0x21c>)
 8009b54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009b58:	6813      	ldr	r3, [r2, #0]
 8009b5a:	6821      	ldr	r1, [r4, #0]
 8009b5c:	1d1d      	adds	r5, r3, #4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6015      	str	r5, [r2, #0]
 8009b62:	060a      	lsls	r2, r1, #24
 8009b64:	d50b      	bpl.n	8009b7e <_printf_i+0x162>
 8009b66:	07ca      	lsls	r2, r1, #31
 8009b68:	bf44      	itt	mi
 8009b6a:	f041 0120 	orrmi.w	r1, r1, #32
 8009b6e:	6021      	strmi	r1, [r4, #0]
 8009b70:	b91b      	cbnz	r3, 8009b7a <_printf_i+0x15e>
 8009b72:	6822      	ldr	r2, [r4, #0]
 8009b74:	f022 0220 	bic.w	r2, r2, #32
 8009b78:	6022      	str	r2, [r4, #0]
 8009b7a:	2210      	movs	r2, #16
 8009b7c:	e7b7      	b.n	8009aee <_printf_i+0xd2>
 8009b7e:	064d      	lsls	r5, r1, #25
 8009b80:	bf48      	it	mi
 8009b82:	b29b      	uxthmi	r3, r3
 8009b84:	e7ef      	b.n	8009b66 <_printf_i+0x14a>
 8009b86:	4665      	mov	r5, ip
 8009b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b8c:	fb02 3311 	mls	r3, r2, r1, r3
 8009b90:	5cc3      	ldrb	r3, [r0, r3]
 8009b92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009b96:	460b      	mov	r3, r1
 8009b98:	2900      	cmp	r1, #0
 8009b9a:	d1f5      	bne.n	8009b88 <_printf_i+0x16c>
 8009b9c:	e7b9      	b.n	8009b12 <_printf_i+0xf6>
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	6961      	ldr	r1, [r4, #20]
 8009ba4:	1d18      	adds	r0, r3, #4
 8009ba6:	6010      	str	r0, [r2, #0]
 8009ba8:	0628      	lsls	r0, r5, #24
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	d501      	bpl.n	8009bb2 <_printf_i+0x196>
 8009bae:	6019      	str	r1, [r3, #0]
 8009bb0:	e002      	b.n	8009bb8 <_printf_i+0x19c>
 8009bb2:	066a      	lsls	r2, r5, #25
 8009bb4:	d5fb      	bpl.n	8009bae <_printf_i+0x192>
 8009bb6:	8019      	strh	r1, [r3, #0]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	4665      	mov	r5, ip
 8009bbe:	e7b9      	b.n	8009b34 <_printf_i+0x118>
 8009bc0:	6813      	ldr	r3, [r2, #0]
 8009bc2:	1d19      	adds	r1, r3, #4
 8009bc4:	6011      	str	r1, [r2, #0]
 8009bc6:	681d      	ldr	r5, [r3, #0]
 8009bc8:	6862      	ldr	r2, [r4, #4]
 8009bca:	2100      	movs	r1, #0
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f7f6 fb07 	bl	80001e0 <memchr>
 8009bd2:	b108      	cbz	r0, 8009bd8 <_printf_i+0x1bc>
 8009bd4:	1b40      	subs	r0, r0, r5
 8009bd6:	6060      	str	r0, [r4, #4]
 8009bd8:	6863      	ldr	r3, [r4, #4]
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be2:	e7a7      	b.n	8009b34 <_printf_i+0x118>
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	462a      	mov	r2, r5
 8009be8:	4639      	mov	r1, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	47c0      	blx	r8
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d0aa      	beq.n	8009b48 <_printf_i+0x12c>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	079b      	lsls	r3, r3, #30
 8009bf6:	d413      	bmi.n	8009c20 <_printf_i+0x204>
 8009bf8:	68e0      	ldr	r0, [r4, #12]
 8009bfa:	9b03      	ldr	r3, [sp, #12]
 8009bfc:	4298      	cmp	r0, r3
 8009bfe:	bfb8      	it	lt
 8009c00:	4618      	movlt	r0, r3
 8009c02:	e7a3      	b.n	8009b4c <_printf_i+0x130>
 8009c04:	2301      	movs	r3, #1
 8009c06:	464a      	mov	r2, r9
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	47c0      	blx	r8
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d09a      	beq.n	8009b48 <_printf_i+0x12c>
 8009c12:	3501      	adds	r5, #1
 8009c14:	68e3      	ldr	r3, [r4, #12]
 8009c16:	9a03      	ldr	r2, [sp, #12]
 8009c18:	1a9b      	subs	r3, r3, r2
 8009c1a:	42ab      	cmp	r3, r5
 8009c1c:	dcf2      	bgt.n	8009c04 <_printf_i+0x1e8>
 8009c1e:	e7eb      	b.n	8009bf8 <_printf_i+0x1dc>
 8009c20:	2500      	movs	r5, #0
 8009c22:	f104 0919 	add.w	r9, r4, #25
 8009c26:	e7f5      	b.n	8009c14 <_printf_i+0x1f8>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1ac      	bne.n	8009b86 <_printf_i+0x16a>
 8009c2c:	7803      	ldrb	r3, [r0, #0]
 8009c2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c36:	e76c      	b.n	8009b12 <_printf_i+0xf6>
 8009c38:	08009e95 	.word	0x08009e95
 8009c3c:	08009ea6 	.word	0x08009ea6

08009c40 <memcpy>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	1e43      	subs	r3, r0, #1
 8009c44:	440a      	add	r2, r1
 8009c46:	4291      	cmp	r1, r2
 8009c48:	d100      	bne.n	8009c4c <memcpy+0xc>
 8009c4a:	bd10      	pop	{r4, pc}
 8009c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c54:	e7f7      	b.n	8009c46 <memcpy+0x6>

08009c56 <memmove>:
 8009c56:	4288      	cmp	r0, r1
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	eb01 0302 	add.w	r3, r1, r2
 8009c5e:	d807      	bhi.n	8009c70 <memmove+0x1a>
 8009c60:	1e42      	subs	r2, r0, #1
 8009c62:	4299      	cmp	r1, r3
 8009c64:	d00a      	beq.n	8009c7c <memmove+0x26>
 8009c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009c6e:	e7f8      	b.n	8009c62 <memmove+0xc>
 8009c70:	4283      	cmp	r3, r0
 8009c72:	d9f5      	bls.n	8009c60 <memmove+0xa>
 8009c74:	1881      	adds	r1, r0, r2
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	42d3      	cmn	r3, r2
 8009c7a:	d100      	bne.n	8009c7e <memmove+0x28>
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c86:	e7f7      	b.n	8009c78 <memmove+0x22>

08009c88 <_realloc_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	460e      	mov	r6, r1
 8009c90:	b921      	cbnz	r1, 8009c9c <_realloc_r+0x14>
 8009c92:	4611      	mov	r1, r2
 8009c94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c98:	f7ff bc52 	b.w	8009540 <_malloc_r>
 8009c9c:	b922      	cbnz	r2, 8009ca8 <_realloc_r+0x20>
 8009c9e:	f7ff fc01 	bl	80094a4 <_free_r>
 8009ca2:	4625      	mov	r5, r4
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca8:	f000 f814 	bl	8009cd4 <_malloc_usable_size_r>
 8009cac:	42a0      	cmp	r0, r4
 8009cae:	d20f      	bcs.n	8009cd0 <_realloc_r+0x48>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	f7ff fc44 	bl	8009540 <_malloc_r>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d0f2      	beq.n	8009ca4 <_realloc_r+0x1c>
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	f7ff ffbd 	bl	8009c40 <memcpy>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f7ff fbeb 	bl	80094a4 <_free_r>
 8009cce:	e7e9      	b.n	8009ca4 <_realloc_r+0x1c>
 8009cd0:	4635      	mov	r5, r6
 8009cd2:	e7e7      	b.n	8009ca4 <_realloc_r+0x1c>

08009cd4 <_malloc_usable_size_r>:
 8009cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd8:	1f18      	subs	r0, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	bfbc      	itt	lt
 8009cde:	580b      	ldrlt	r3, [r1, r0]
 8009ce0:	18c0      	addlt	r0, r0, r3
 8009ce2:	4770      	bx	lr

08009ce4 <_init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr

08009cf0 <_fini>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr
